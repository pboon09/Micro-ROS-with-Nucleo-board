
Microros_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08014a78  08014a78  00015a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157e0  080157e0  00017110  2**0
                  CONTENTS
  4 .ARM          00000008  080157e0  080157e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157e8  080157e8  00017110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080157e8  080157e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080157f0  080157f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080157f4  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db4c  20000110  08015904  00017110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dc5c  08015904  00017c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a647  00000000  00000000  00017140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7c  00000000  00000000  00031787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  00036b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000088ed  00000000  00000000  00037c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d32  00000000  00000000  00040510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a40e5  00000000  00000000  0005a242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000fe327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  000fe3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00104db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014a60 	.word	0x08014a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08014a60 	.word	0x08014a60

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f005 fac4 	bl	8005bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f005 fa33 	bl	8005bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003d34 	.word	0x20003d34
 80007c0:	20003d40 	.word	0x20003d40
 80007c4:	20003d38 	.word	0x20003d38
 80007c8:	20003d2c 	.word	0x20003d2c
 80007cc:	20003d3c 	.word	0x20003d3c

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 f9bc 	bl	8005bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 f9be 	bl	8005bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 f983 	bl	8005bd8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f013 f9d6 	bl	8013cb6 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 f970 	bl	8005bf4 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 f956 	bl	8005bd8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 f94c 	bl	8005bf4 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 feb2 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81a 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d4 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 f8aa 	bl	8000c48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 f87e 	bl	8000bf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 ff50 	bl	800499c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000afc:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <main+0x34>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <main+0x38>)
 8000b02:	f003 ff95 	bl	8004a30 <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <main+0x3c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f003 ff6a 	bl	80049e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <main+0x30>
 8000b14:	08014b20 	.word	0x08014b20
 8000b18:	08000d79 	.word	0x08000d79
 8000b1c:	20003e4c 	.word	0x20003e4c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f012 fff8 	bl	8013b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a27      	ldr	r2, [pc, #156]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <SystemClock_Config+0xcc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b90:	2310      	movs	r3, #16
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fd14 	bl	80025d4 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bb2:	f000 f99b 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 ff76 	bl	8002ac4 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bde:	f000 f985 	bl	8000eec <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	@ 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <MX_USART2_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f002 fc10 	bl	8003450 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f959 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20003d44 	.word	0x20003d44
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_DMA_Init+0x4c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <MX_DMA_Init+0x4c>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <MX_DMA_Init+0x4c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f000 fee6 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f000 feff 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f000 fede 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c84:	2011      	movs	r0, #17
 8000c86:	f000 fef7 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a25      	ldr	r2, [pc, #148]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <MX_GPIO_Init+0xd4>)
 8000d24:	f001 fc3c 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <MX_GPIO_Init+0xd8>)
 8000d40:	f001 faaa 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d44:	2320      	movs	r3, #32
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_GPIO_Init+0xd4>)
 8000d5c:	f001 fa9c 	bl	8002298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	00000000 	.word	0x00000000

08000d78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b0c8      	sub	sp, #288	@ 0x120
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8000d80:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <StartDefaultTask+0x118>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	4b43      	ldr	r3, [pc, #268]	@ (8000e94 <StartDefaultTask+0x11c>)
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <StartDefaultTask+0x120>)
 8000d8a:	4a44      	ldr	r2, [pc, #272]	@ (8000e9c <StartDefaultTask+0x124>)
 8000d8c:	4944      	ldr	r1, [pc, #272]	@ (8000ea0 <StartDefaultTask+0x128>)
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f007 fc26 	bl	80085e0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d94:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 fb53 	bl	8008444 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000d9e:	4b41      	ldr	r3, [pc, #260]	@ (8000ea4 <StartDefaultTask+0x12c>)
 8000da0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000da4:	4b40      	ldr	r3, [pc, #256]	@ (8000ea8 <StartDefaultTask+0x130>)
 8000da6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000daa:	4b40      	ldr	r3, [pc, #256]	@ (8000eac <StartDefaultTask+0x134>)
 8000dac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000db0:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb0 <StartDefaultTask+0x138>)
 8000db2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000db6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f007 fb50 	bl	8008460 <rcutils_set_default_allocator>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <StartDefaultTask+0x5e>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8000dcc:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8000dd0:	4838      	ldr	r0, [pc, #224]	@ (8000eb4 <StartDefaultTask+0x13c>)
 8000dd2:	f012 fdbb 	bl	801394c <iprintf>
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;
  rclc_executor_t executor;

  allocator = rcl_get_default_allocator();
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 fb5f 	bl	800849c <rcutils_get_default_allocator>
 8000dde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000de6:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8000dea:	461d      	mov	r5, r3
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8000df4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000df8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f007 fa5e 	bl	80082c0 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000e04:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000e08:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb8 <StartDefaultTask+0x140>)
 8000e0e:	492b      	ldr	r1, [pc, #172]	@ (8000ebc <StartDefaultTask+0x144>)
 8000e10:	f007 faa0 	bl	8008354 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8000e14:	f008 f910 	bl	8009038 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8000e1e:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <StartDefaultTask+0x148>)
 8000e24:	f007 fad2 	bl	80083cc <rclc_publisher_init_default>
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000e28:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000e2c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8000e30:	f107 0020 	add.w	r0, r7, #32
 8000e34:	2201      	movs	r2, #1
 8000e36:	f006 ffaf 	bl	8007d98 <rclc_executor_init>

  msg.data = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

  for(;;)
  {
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000e40:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8000e44:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fc16 	bl	800767c <rcl_publish>
 8000e50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (ret != RCL_RET_OK)
 8000e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <StartDefaultTask+0xee>
    {
      printf("Error publishing (line %d)\n", __LINE__);
 8000e5c:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8000e60:	4818      	ldr	r0, [pc, #96]	@ (8000ec4 <StartDefaultTask+0x14c>)
 8000e62:	f012 fd73 	bl	801394c <iprintf>
    }

    msg.data++;
 8000e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    osDelay(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f003 fe6f 	bl	8004b54 <osDelay>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8000e76:	f107 0120 	add.w	r1, r7, #32
 8000e7a:	a303      	add	r3, pc, #12	@ (adr r3, 8000e88 <StartDefaultTask+0x110>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	4608      	mov	r0, r1
 8000e82:	f007 f9e5 	bl	8008250 <rclc_executor_spin_some>
  {
 8000e86:	e7db      	b.n	8000e40 <StartDefaultTask+0xc8>
 8000e88:	05f5e100 	.word	0x05f5e100
 8000e8c:	00000000 	.word	0x00000000
 8000e90:	08001751 	.word	0x08001751
 8000e94:	080016e9 	.word	0x080016e9
 8000e98:	080016c9 	.word	0x080016c9
 8000e9c:	0800169d 	.word	0x0800169d
 8000ea0:	20003d44 	.word	0x20003d44
 8000ea4:	08000ef9 	.word	0x08000ef9
 8000ea8:	08000f3d 	.word	0x08000f3d
 8000eac:	08000f75 	.word	0x08000f75
 8000eb0:	08000fe1 	.word	0x08000fe1
 8000eb4:	08014a84 	.word	0x08014a84
 8000eb8:	08014aac 	.word	0x08014aac
 8000ebc:	08014ab0 	.word	0x08014ab0
 8000ec0:	08014abc 	.word	0x08014abc
 8000ec4:	08014ad0 	.word	0x08014ad0

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fcd9 	bl	8001890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010000 	.word	0x40010000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <microros_allocate+0x3c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <microros_allocate+0x3c>)
 8000f10:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <microros_allocate+0x40>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <microros_allocate+0x40>)
 8000f20:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb8c 	bl	8000640 <pvPortMallocMicroROS>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20003e50 	.word	0x20003e50
 8000f38:	20003e54 	.word	0x20003e54

08000f3c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00c      	beq.n	8000f66 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fc9b 	bl	8000888 <getBlockSize>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <microros_deallocate+0x34>)
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <microros_deallocate+0x34>)
 8000f5e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fc35 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20003e54 	.word	0x20003e54

08000f74 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <microros_reallocate+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4413      	add	r3, r2
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <microros_reallocate+0x64>)
 8000f8e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <microros_reallocate+0x68>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <microros_reallocate+0x68>)
 8000f9e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d104      	bne.n	8000fb0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f7ff fb4a 	bl	8000640 <pvPortMallocMicroROS>
 8000fac:	4603      	mov	r3, r0
 8000fae:	e00e      	b.n	8000fce <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fc69 	bl	8000888 <getBlockSize>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <microros_reallocate+0x68>)
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <microros_reallocate+0x68>)
 8000fc2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fc7c 	bl	80008c4 <pvPortReallocMicroROS>
 8000fcc:	4603      	mov	r3, r0
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20003e50 	.word	0x20003e50
 8000fdc:	20003e54 	.word	0x20003e54

08000fe0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <microros_zero_allocate+0x48>)
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <microros_zero_allocate+0x48>)
 8000ffe:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	4a08      	ldr	r2, [pc, #32]	@ (800102c <microros_zero_allocate+0x4c>)
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <microros_zero_allocate+0x4c>)
 8001012:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff fc81 	bl	800091e <pvPortCallocMicroROS>
 800101c:	4603      	mov	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20003e50 	.word	0x20003e50
 800102c:	20003e54 	.word	0x20003e54

08001030 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001046:	a320      	add	r3, pc, #128	@ (adr r3, 80010c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f930 	bl	80002b0 <__aeabi_ldivmod>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800105a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105e:	a31a      	add	r3, pc, #104	@ (adr r3, 80010c8 <UTILS_NanosecondsToTimespec+0x98>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff f924 	bl	80002b0 <__aeabi_ldivmod>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da20      	bge.n	80010b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <UTILS_NanosecondsToTimespec+0x90>)
 800107a:	fb82 1203 	smull	r1, r2, r2, r3
 800107e:	1712      	asrs	r2, r2, #28
 8001080:	17db      	asrs	r3, r3, #31
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	17c8      	asrs	r0, r1, #31
 8001092:	460c      	mov	r4, r1
 8001094:	4605      	mov	r5, r0
 8001096:	ebb2 0804 	subs.w	r8, r2, r4
 800109a:	eb63 0905 	sbc.w	r9, r3, r5
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4906      	ldr	r1, [pc, #24]	@ (80010c4 <UTILS_NanosecondsToTimespec+0x94>)
 80010ac:	fb01 f303 	mul.w	r3, r1, r3
 80010b0:	441a      	add	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	609a      	str	r2, [r3, #8]
    }
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010c0:	44b82fa1 	.word	0x44b82fa1
 80010c4:	3b9aca00 	.word	0x3b9aca00
 80010c8:	3b9aca00 	.word	0x3b9aca00
 80010cc:	00000000 	.word	0x00000000

080010d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80010d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d4:	b08e      	sub	sp, #56	@ 0x38
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80010da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80010dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010e0:	2300      	movs	r3, #0
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80010f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fff8 	bl	80060ec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80010fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fe:	17da      	asrs	r2, r3, #31
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	61fa      	str	r2, [r7, #28]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	69b9      	ldr	r1, [r7, #24]
 800110e:	000b      	movs	r3, r1
 8001110:	2200      	movs	r2, #0
 8001112:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001118:	2200      	movs	r2, #0
 800111a:	461c      	mov	r4, r3
 800111c:	4615      	mov	r5, r2
 800111e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001122:	1911      	adds	r1, r2, r4
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	416b      	adcs	r3, r5
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800112e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001132:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f04f 0400 	mov.w	r4, #0
 800113e:	f04f 0500 	mov.w	r5, #0
 8001142:	015d      	lsls	r5, r3, #5
 8001144:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001148:	0154      	lsls	r4, r2, #5
 800114a:	4622      	mov	r2, r4
 800114c:	462b      	mov	r3, r5
 800114e:	ebb2 0800 	subs.w	r8, r2, r0
 8001152:	eb63 0901 	sbc.w	r9, r3, r1
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001162:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001166:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800116a:	4690      	mov	r8, r2
 800116c:	4699      	mov	r9, r3
 800116e:	eb18 0a00 	adds.w	sl, r8, r0
 8001172:	eb49 0b01 	adc.w	fp, r9, r1
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001182:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001186:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800118a:	ebb2 040a 	subs.w	r4, r2, sl
 800118e:	603c      	str	r4, [r7, #0]
 8001190:	eb63 030b 	sbc.w	r3, r3, fp
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800119a:	4623      	mov	r3, r4
 800119c:	181b      	adds	r3, r3, r0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	462b      	mov	r3, r5
 80011a2:	eb41 0303 	adc.w	r3, r1, r3
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff ff3f 	bl	8001030 <UTILS_NanosecondsToTimespec>

    return 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	3738      	adds	r7, #56	@ 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4d      	ldr	r2, [pc, #308]	@ (8001364 <HAL_UART_MspInit+0x154>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f040 8093 	bne.w	800135a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	4b4b      	ldr	r3, [pc, #300]	@ (8001368 <HAL_UART_MspInit+0x158>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a4a      	ldr	r2, [pc, #296]	@ (8001368 <HAL_UART_MspInit+0x158>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b48      	ldr	r3, [pc, #288]	@ (8001368 <HAL_UART_MspInit+0x158>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <HAL_UART_MspInit+0x158>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a43      	ldr	r2, [pc, #268]	@ (8001368 <HAL_UART_MspInit+0x158>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <HAL_UART_MspInit+0x158>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126c:	230c      	movs	r3, #12
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4839      	ldr	r0, [pc, #228]	@ (800136c <HAL_UART_MspInit+0x15c>)
 8001288:	f001 f806 	bl	8002298 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800128c:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_UART_MspInit+0x160>)
 800128e:	4a39      	ldr	r2, [pc, #228]	@ (8001374 <HAL_UART_MspInit+0x164>)
 8001290:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001292:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HAL_UART_MspInit+0x160>)
 8001294:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001298:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <HAL_UART_MspInit+0x160>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ae:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012d0:	4827      	ldr	r0, [pc, #156]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012d2:	f000 fbdf 	bl	8001a94 <HAL_DMA_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012dc:	f7ff fe06 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a23      	ldr	r2, [pc, #140]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012e6:	4a22      	ldr	r2, [pc, #136]	@ (8001370 <HAL_UART_MspInit+0x160>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_UART_MspInit+0x168>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_UART_MspInit+0x16c>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_UART_MspInit+0x168>)
 80012f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_UART_MspInit+0x168>)
 80012fc:	2240      	movs	r2, #64	@ 0x40
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001308:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <HAL_UART_MspInit+0x168>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001322:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001326:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_UART_MspInit+0x168>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800132e:	4812      	ldr	r0, [pc, #72]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001330:	f000 fbb0 	bl	8001a94 <HAL_DMA_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800133a:	f7ff fdd7 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <HAL_UART_MspInit+0x168>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2105      	movs	r1, #5
 800134e:	2026      	movs	r0, #38	@ 0x26
 8001350:	f000 fb76 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001354:	2026      	movs	r0, #38	@ 0x26
 8001356:	f000 fb8f 	bl	8001a78 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	@ 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004400 	.word	0x40004400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	20003d8c 	.word	0x20003d8c
 8001374:	40026088 	.word	0x40026088
 8001378:	20003dec 	.word	0x20003dec
 800137c:	400260a0 	.word	0x400260a0

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_InitTick+0xd0>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001398:	4a2d      	ldr	r2, [pc, #180]	@ (8001450 <HAL_InitTick+0xd0>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_InitTick+0xd0>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fda4 	bl	8002f04 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013bc:	f001 fd8e 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 80013c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_InitTick+0xd4>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9b      	lsrs	r3, r3, #18
 80013cc:	3b01      	subs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_InitTick+0xd8>)
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <HAL_InitTick+0xdc>)
 80013d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_InitTick+0xd8>)
 80013d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013de:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <HAL_InitTick+0xd8>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_InitTick+0xd8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_InitTick+0xd8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_InitTick+0xd8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013f6:	4818      	ldr	r0, [pc, #96]	@ (8001458 <HAL_InitTick+0xd8>)
 80013f8:	f001 fdb6 	bl	8002f68 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d11b      	bne.n	8001442 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800140a:	4813      	ldr	r0, [pc, #76]	@ (8001458 <HAL_InitTick+0xd8>)
 800140c:	f001 fe06 	bl	800301c <HAL_TIM_Base_Start_IT>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800141a:	2b00      	cmp	r3, #0
 800141c:	d111      	bne.n	8001442 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800141e:	2019      	movs	r0, #25
 8001420:	f000 fb2a 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	d808      	bhi.n	800143c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800142a:	2200      	movs	r2, #0
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fb06 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_InitTick+0xe0>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e002      	b.n	8001442 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001446:	4618      	mov	r0, r3
 8001448:	3730      	adds	r7, #48	@ 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	431bde83 	.word	0x431bde83
 8001458:	20003e58 	.word	0x20003e58
 800145c:	40010000 	.word	0x40010000
 8001460:	20000008 	.word	0x20000008

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Stream5_IRQHandler+0x10>)
 80014a2:	f000 fc8f 	bl	8001dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20003d8c 	.word	0x20003d8c

080014b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x10>)
 80014b6:	f000 fc85 	bl	8001dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20003dec 	.word	0x20003dec

080014c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014ca:	f001 fe09 	bl	80030e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20003e58 	.word	0x20003e58

080014d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <USART2_IRQHandler+0x10>)
 80014de:	f002 f91b 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20003d44 	.word	0x20003d44

080014ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return 1;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_kill>:

int _kill(int pid, int sig)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001506:	f012 fba1 	bl	8013c4c <__errno>
 800150a:	4603      	mov	r3, r0
 800150c:	2216      	movs	r2, #22
 800150e:	601a      	str	r2, [r3, #0]
  return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_exit>:

void _exit (int status)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001524:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffe7 	bl	80014fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800152e:	bf00      	nop
 8001530:	e7fd      	b.n	800152e <_exit+0x12>

08001532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00a      	b.n	800155a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001544:	f3af 8000 	nop.w
 8001548:	4601      	mov	r1, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbf0      	blt.n	8001544 <_read+0x12>
  }

  return len;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e009      	b.n	8001592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbf1      	blt.n	800157e <_write+0x12>
  }
  return len;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_close>:

int _close(int file)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015cc:	605a      	str	r2, [r3, #4]
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_isatty>:

int _isatty(int file)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f012 fb06 	bl	8013c4c <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20020000 	.word	0x20020000
 800166c:	00000400 	.word	0x00000400
 8001670:	20003ea4 	.word	0x20003ea4
 8001674:	2000dc60 	.word	0x2000dc60

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80016ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016b0:	4904      	ldr	r1, [pc, #16]	@ (80016c4 <cubemx_transport_open+0x28>)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f001 ff8c 	bl	80035d0 <HAL_UART_Receive_DMA>
    return true;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20003ea8 	.word	0x20003ea8

080016c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 ff9e 	bl	800361a <HAL_UART_DMAStop>
    return true;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b20      	cmp	r3, #32
 8001708:	d11c      	bne.n	8001744 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f001 feec 	bl	80034f0 <HAL_UART_Transmit_DMA>
 8001718:	4603      	mov	r3, r0
 800171a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800171c:	e002      	b.n	8001724 <cubemx_transport_write+0x3c>
            osDelay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f003 fa18 	bl	8004b54 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <cubemx_transport_write+0x4e>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	d1f3      	bne.n	800171e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <cubemx_transport_write+0x58>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	e002      	b.n	8001746 <cubemx_transport_write+0x5e>
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001744:	2300      	movs	r3, #0
    }
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001764:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800176a:	b672      	cpsid	i
}
 800176c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800177a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <cubemx_transport_read+0x9c>)
 800177c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800177e:	b662      	cpsie	i
}
 8001780:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001788:	2001      	movs	r0, #1
 800178a:	f003 f9e3 	bl	8004b54 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <cubemx_transport_read+0xa0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <cubemx_transport_read+0x9c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d103      	bne.n	80017a2 <cubemx_transport_read+0x52>
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbe3      	blt.n	800176a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80017a6:	e011      	b.n	80017cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <cubemx_transport_read+0xa0>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	440b      	add	r3, r1
 80017b2:	4910      	ldr	r1, [pc, #64]	@ (80017f4 <cubemx_transport_read+0xa4>)
 80017b4:	5c8a      	ldrb	r2, [r1, r2]
 80017b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <cubemx_transport_read+0xa0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <cubemx_transport_read+0xa0>)
 80017c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <cubemx_transport_read+0xa0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <cubemx_transport_read+0x9c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d003      	beq.n	80017e0 <cubemx_transport_read+0x90>
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3e3      	bcc.n	80017a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80017e0:	69bb      	ldr	r3, [r7, #24]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200046ac 	.word	0x200046ac
 80017f0:	200046a8 	.word	0x200046a8
 80017f4:	20003ea8 	.word	0x20003ea8

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fc:	f7ff ff3c 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	@ (8001844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f012 fa17 	bl	8013c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff f959 	bl	8000ae0 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800183c:	080157f4 	.word	0x080157f4
  ldr r2, =_sbss
 8001840:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001844:	2000dc5c 	.word	0x2000dc5c

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f8d8 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fd80 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fc9e 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	200046b0 	.word	0x200046b0

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200046b0 	.word	0x200046b0

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	@ (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ff0a 	bl	80018b8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e099      	b.n	8001be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	e00f      	b.n	8001af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad2:	f7ff fef1 	bl	80018b8 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d908      	bls.n	8001af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e078      	b.n	8001be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e8      	bne.n	8001ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <HAL_DMA_Init+0x158>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d117      	bne.n	8001bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb01 	bl	80021a0 <DMA_CheckFifoParam>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fab8 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	223f      	movs	r2, #63	@ 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f010803f 	.word	0xf010803f

08001bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Start_IT+0x26>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e040      	b.n	8001c98 <HAL_DMA_Start_IT+0xa8>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12f      	bne.n	8001c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa4a 	bl	80020d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	223f      	movs	r2, #63	@ 0x3f
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0216 	orr.w	r2, r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0208 	orr.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cae:	f7ff fe03 	bl	80018b8 <HAL_GetTick>
 8001cb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e052      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0216 	bic.w	r2, r2, #22
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <HAL_DMA_Abort+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d22:	e013      	b.n	8001d4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d24:	f7ff fdc8 	bl	80018b8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d90c      	bls.n	8001d4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e015      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e4      	bne.n	8001d24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	223f      	movs	r2, #63	@ 0x3f
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d004      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00c      	b.n	8001db8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2205      	movs	r2, #5
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800200c <HAL_DMA_IRQHandler+0x248>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002010 <HAL_DMA_IRQHandler+0x24c>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2208      	movs	r2, #8
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2201      	movs	r2, #1
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2204      	movs	r2, #4
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d043      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03c      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d018      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e01f      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0208 	bic.w	r2, r2, #8
 8001f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	2220      	movs	r2, #32
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 808f 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8087 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d136      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0216 	bic.w	r2, r2, #22
 8001f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x1da>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0208 	bic.w	r2, r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	223f      	movs	r2, #63	@ 0x3f
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d07e      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
        }
        return;
 8001fda:	e079      	b.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e02c      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
 800200a:	bf00      	nop
 800200c:	20000004 	.word	0x20000004
 8002010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e01e      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0210 	bic.w	r2, r2, #16
 8002042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2205      	movs	r2, #5
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	d307      	bcc.n	80020ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_DMA_IRQHandler+0x2cc>
 80020aa:	e000      	b.n	80020ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
 80020ce:	e000      	b.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d0:	bf00      	nop
    }
  }
}
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d108      	bne.n	8002118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002116:	e007      	b.n	8002128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d909      	bls.n	8002176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
 8002174:	e007      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	08014b5c 	.word	0x08014b5c

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e159      	b.n	8002568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8148 	bne.w	8002562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a2 	beq.w	8002562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a56      	ldr	r2, [pc, #344]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a49      	ldr	r2, [pc, #292]	@ (8002588 <HAL_GPIO_Init+0x2f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x202>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a48      	ldr	r2, [pc, #288]	@ (800258c <HAL_GPIO_Init+0x2f4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x1fe>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a47      	ldr	r2, [pc, #284]	@ (8002590 <HAL_GPIO_Init+0x2f8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x1fa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a46      	ldr	r2, [pc, #280]	@ (8002594 <HAL_GPIO_Init+0x2fc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x1f6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a45      	ldr	r2, [pc, #276]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x1f2>
 8002486:	2304      	movs	r3, #4
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248a:	2307      	movs	r3, #7
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x204>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_GPIO_Init+0x304>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b18      	ldr	r3, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x304>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_GPIO_Init+0x304>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f aea2 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e267      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d075      	beq.n	80026de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f2:	4b88      	ldr	r3, [pc, #544]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d00c      	beq.n	8002618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b85      	ldr	r3, [pc, #532]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d112      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b82      	ldr	r3, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002616:	d10b      	bne.n	8002630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	4b7e      	ldr	r3, [pc, #504]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d05b      	beq.n	80026dc <HAL_RCC_OscConfig+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d157      	bne.n	80026dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e242      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x74>
 800263a:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x98>
 8002652:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6f      	ldr	r2, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6c      	ldr	r2, [pc, #432]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0xb0>
 800266c:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a68      	ldr	r2, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff f914 	bl	80018b8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff f910 	bl	80018b8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e207      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xc0>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f900 	bl	80018b8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff f8fc 	bl	80018b8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1f3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0xe8>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d11c      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1c7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4937      	ldr	r1, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	e03a      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_OscConfig+0x244>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff f8b5 	bl	80018b8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002752:	f7ff f8b1 	bl	80018b8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1a8      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4925      	ldr	r1, [pc, #148]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x244>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff f894 	bl	80018b8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002794:	f7ff f890 	bl	80018b8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e187      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_RCC_OscConfig+0x248>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff f874 	bl	80018b8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d4:	f7ff f870 	bl	80018b8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e167      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x240>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x200>
 80027f2:	e01b      	b.n	800282c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_OscConfig+0x248>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f85d 	bl	80018b8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7ff f859 	bl	80018b8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d907      	bls.n	8002820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e150      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002814:	40023800 	.word	0x40023800
 8002818:	42470000 	.word	0x42470000
 800281c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b88      	ldr	r3, [pc, #544]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ea      	bne.n	8002802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a7c      	ldr	r2, [pc, #496]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b77      	ldr	r3, [pc, #476]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b74      	ldr	r3, [pc, #464]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a73      	ldr	r2, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7ff f819 	bl	80018b8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7ff f815 	bl	80018b8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e10c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a48 <HAL_RCC_OscConfig+0x474>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x2ea>
 80028b0:	4b64      	ldr	r3, [pc, #400]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a63      	ldr	r2, [pc, #396]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x30c>
 80028c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0x324>
 80028e0:	4b58      	ldr	r3, [pc, #352]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a57      	ldr	r2, [pc, #348]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	4b55      	ldr	r3, [pc, #340]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a54      	ldr	r2, [pc, #336]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ffda 	bl	80018b8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe ffd6 	bl	80018b8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0cb      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	4b49      	ldr	r3, [pc, #292]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ee      	beq.n	8002908 <HAL_RCC_OscConfig+0x334>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe ffc4 	bl	80018b8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe ffc0 	bl	80018b8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0b5      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ee      	bne.n	8002934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	4a38      	ldr	r2, [pc, #224]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a1 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002972:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d05c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d141      	bne.n	8002a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe ff94 	bl	80018b8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe ff90 	bl	80018b8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e087      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	491b      	ldr	r1, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff69 	bl	80018b8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe ff65 	bl	80018b8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e05c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x416>
 8002a08:	e054      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <HAL_RCC_OscConfig+0x478>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe ff52 	bl	80018b8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe ff4e 	bl	80018b8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e045      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x444>
 8002a36:	e03d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e038      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ec>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d121      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0cc      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b68      	ldr	r3, [pc, #416]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90c      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b65      	ldr	r3, [pc, #404]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a52      	ldr	r2, [pc, #328]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d044      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e067      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4934      	ldr	r1, [pc, #208]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fe80 	bl	80018b8 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fe fe7c 	bl	80018b8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e04f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d20c      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	@ (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fb88 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08014b44 	.word	0x08014b44
 8002c88:	20000004 	.word	0x20000004
 8002c8c:	20000008 	.word	0x20000008

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b094      	sub	sp, #80	@ 0x50
 8002c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca8:	4b79      	ldr	r3, [pc, #484]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	f200 80e1 	bhi.w	8002e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc2:	e0db      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4b73      	ldr	r3, [pc, #460]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002cc8:	e0db      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cca:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cce:	e0d8      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	4b6d      	ldr	r3, [pc, #436]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	2200      	movs	r2, #0
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	1a51      	subs	r1, r2, r1
 8002d1e:	6139      	str	r1, [r7, #16]
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb63 0301 	sbc.w	r3, r3, r1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d34:	4659      	mov	r1, fp
 8002d36:	018b      	lsls	r3, r1, #6
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3e:	4651      	mov	r1, sl
 8002d40:	018a      	lsls	r2, r1, #6
 8002d42:	4651      	mov	r1, sl
 8002d44:	ebb2 0801 	subs.w	r8, r2, r1
 8002d48:	4659      	mov	r1, fp
 8002d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	eb18 0303 	adds.w	r3, r8, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	462b      	mov	r3, r5
 8002d70:	eb49 0303 	adc.w	r3, r9, r3
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d82:	4629      	mov	r1, r5
 8002d84:	024b      	lsls	r3, r1, #9
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	024a      	lsls	r2, r1, #9
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d96:	2200      	movs	r2, #0
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002da0:	f7fd fad6 	bl	8000350 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dac:	e058      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dae:	4b38      	ldr	r3, [pc, #224]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	099b      	lsrs	r3, r3, #6
 8002db4:	2200      	movs	r2, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	4611      	mov	r1, r2
 8002dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	f04f 0000 	mov.w	r0, #0
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	0159      	lsls	r1, r3, #5
 8002dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dda:	0150      	lsls	r0, r2, #5
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4641      	mov	r1, r8
 8002de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de6:	4649      	mov	r1, r9
 8002de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e00:	ebb2 040a 	subs.w	r4, r2, sl
 8002e04:	eb63 050b 	sbc.w	r5, r3, fp
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	00eb      	lsls	r3, r5, #3
 8002e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e16:	00e2      	lsls	r2, r4, #3
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	18e3      	adds	r3, r4, r3
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	464b      	mov	r3, r9
 8002e24:	eb45 0303 	adc.w	r3, r5, r3
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e36:	4629      	mov	r1, r5
 8002e38:	028b      	lsls	r3, r1, #10
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e40:	4621      	mov	r1, r4
 8002e42:	028a      	lsls	r2, r1, #10
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	61fa      	str	r2, [r7, #28]
 8002e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e54:	f7fd fa7c 	bl	8000350 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3750      	adds	r7, #80	@ 0x50
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	00f42400 	.word	0x00f42400
 8002e98:	007a1200 	.word	0x007a1200

08002e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb8:	f7ff fff0 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0a9b      	lsrs	r3, r3, #10
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4903      	ldr	r1, [pc, #12]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	08014b54 	.word	0x08014b54

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ee0:	f7ff ffdc 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0b5b      	lsrs	r3, r3, #13
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	@ (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08014b54 	.word	0x08014b54

08002f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	220f      	movs	r2, #15
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f46:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <HAL_RCC_GetClockConfig+0x60>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f839 	bl	8003006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 f9b2 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d001      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e044      	b.n	80030be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d013      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d010      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e007      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40014000 	.word	0x40014000

080030e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0202 	mvn.w	r2, #2
 8003114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8d2 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8c4 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8d5 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d020      	beq.n	8003190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0204 	mvn.w	r2, #4
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8ac 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f89e 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f8af 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0208 	mvn.w	r2, #8
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f886 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f878 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f889 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0210 	mvn.w	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2208      	movs	r2, #8
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f860 	bl	80032d4 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f852 	bl	80032c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f863 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0201 	mvn.w	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fe3e 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8e6 	bl	800343c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f834 	bl	80032fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0220 	mvn.w	r2, #32
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8b8 	bl	8003428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3a      	ldr	r2, [pc, #232]	@ (800340c <TIM_Base_SetConfig+0xfc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a37      	ldr	r2, [pc, #220]	@ (8003410 <TIM_Base_SetConfig+0x100>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a36      	ldr	r2, [pc, #216]	@ (8003414 <TIM_Base_SetConfig+0x104>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a35      	ldr	r2, [pc, #212]	@ (8003418 <TIM_Base_SetConfig+0x108>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2b      	ldr	r2, [pc, #172]	@ (800340c <TIM_Base_SetConfig+0xfc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003368:	d017      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <TIM_Base_SetConfig+0x100>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <TIM_Base_SetConfig+0x104>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <TIM_Base_SetConfig+0x108>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a25      	ldr	r2, [pc, #148]	@ (800341c <TIM_Base_SetConfig+0x10c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a24      	ldr	r2, [pc, #144]	@ (8003420 <TIM_Base_SetConfig+0x110>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <TIM_Base_SetConfig+0x114>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0e      	ldr	r2, [pc, #56]	@ (800340c <TIM_Base_SetConfig+0xfc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800

08003428 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e042      	b.n	80034e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd feca 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 ffc9 	bl	800442c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	@ 0x30
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d156      	bne.n	80035b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_UART_Transmit_DMA+0x26>
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e04f      	b.n	80035ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2221      	movs	r2, #33	@ 0x21
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	4a21      	ldr	r2, [pc, #132]	@ (80035c4 <HAL_UART_Transmit_DMA+0xd4>)
 8003540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	4a20      	ldr	r2, [pc, #128]	@ (80035c8 <HAL_UART_Transmit_DMA+0xd8>)
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_UART_Transmit_DMA+0xdc>)
 8003550:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	2200      	movs	r2, #0
 8003558:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800355a:	f107 0308 	add.w	r3, r7, #8
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	461a      	mov	r2, r3
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f7fe fb3d 	bl	8001bf0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800357e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	617b      	str	r3, [r7, #20]
   return(result);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80035a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3730      	adds	r7, #48	@ 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	08003cb9 	.word	0x08003cb9
 80035c8:	08003d53 	.word	0x08003d53
 80035cc:	08003ed7 	.word	0x08003ed7

080035d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d112      	bne.n	8003610 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_UART_Receive_DMA+0x26>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00b      	b.n	8003612 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	461a      	mov	r2, r3
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fcb0 	bl	8003f6c <UART_Start_Receive_DMA>
 800360c:	4603      	mov	r3, r0
 800360e:	e000      	b.n	8003612 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b090      	sub	sp, #64	@ 0x40
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003630:	2b80      	cmp	r3, #128	@ 0x80
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b21      	cmp	r3, #33	@ 0x21
 8003646:	d128      	bne.n	800369a <HAL_UART_DMAStop+0x80>
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d025      	beq.n	800369a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	623b      	str	r3, [r7, #32]
   return(result);
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800366e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fb06 	bl	8001ca0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fd03 	bl	80040a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b22      	cmp	r3, #34	@ 0x22
 80036ba:	d128      	bne.n	800370e <HAL_UART_DMAStop+0xf4>
 80036bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d025      	beq.n	800370e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036e2:	61fa      	str	r2, [r7, #28]
 80036e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	617b      	str	r3, [r7, #20]
   return(result);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe facc 	bl	8001ca0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fcf1 	bl	80040f0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3740      	adds	r7, #64	@ 0x40
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	@ 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_UART_IRQHandler+0x66>
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fd99 	bl	80042ae <UART_Receive_IT>
      return;
 800377c:	e25b      	b.n	8003c36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800377e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80de 	beq.w	8003944 <HAL_UART_IRQHandler+0x22c>
 8003788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003798:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80d1 	beq.w	8003944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xae>
 80037ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_UART_IRQHandler+0xd2>
 80037d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_UART_IRQHandler+0xf6>
 80037f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <HAL_UART_IRQHandler+0x126>
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 81f2 	beq.w	8003c2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_UART_IRQHandler+0x14e>
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fd24 	bl	80042ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_UART_IRQHandler+0x17a>
 800388a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04f      	beq.n	8003932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fc2c 	bl	80040f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	d141      	bne.n	800392a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1d9      	bne.n	80038a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d013      	beq.n	8003922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003af8 <HAL_UART_IRQHandler+0x3e0>)
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fa3a 	bl	8001d80 <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00e      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9b2 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00a      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9ae 	bl	8003c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e006      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9aa 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800393e:	e175      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	bf00      	nop
    return;
 8003942:	e173      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	2b01      	cmp	r3, #1
 800394a:	f040 814f 	bne.w	8003bec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8148 	beq.w	8003bec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8141 	beq.w	8003bec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	f040 80b6 	bne.w	8003afc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8145 	beq.w	8003c30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ae:	429a      	cmp	r2, r3
 80039b0:	f080 813e 	bcs.w	8003c30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c6:	f000 8088 	beq.w	8003ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1d9      	bne.n	80039ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e1      	bne.n	8003a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003abc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003abe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ac2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e3      	bne.n	8003a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe f8e3 	bl	8001ca0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f8d5 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af6:	e09b      	b.n	8003c30 <HAL_UART_IRQHandler+0x518>
 8003af8:	080041b7 	.word	0x080041b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 808e 	beq.w	8003c34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8089 	beq.w	8003c34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b46:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3314      	adds	r3, #20
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e3      	bne.n	8003b5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bc4:	61fa      	str	r2, [r7, #28]
 8003bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	69b9      	ldr	r1, [r7, #24]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e3      	bne.n	8003ba0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f85b 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bea:	e023      	b.n	8003c34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_UART_IRQHandler+0x4f4>
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 faea 	bl	80041de <UART_Transmit_IT>
    return;
 8003c0a:	e014      	b.n	8003c36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <HAL_UART_IRQHandler+0x51e>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fb2a 	bl	800427e <UART_EndTransmit_IT>
    return;
 8003c2a:	e004      	b.n	8003c36 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c34:	bf00      	nop
  }
}
 8003c36:	37e8      	adds	r7, #232	@ 0xe8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b090      	sub	sp, #64	@ 0x40
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d137      	bne.n	8003d44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d2e:	61fa      	str	r2, [r7, #28]
 8003d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	69b9      	ldr	r1, [r7, #24]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d42:	e002      	b.n	8003d4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d46:	f7ff ff79 	bl	8003c3c <HAL_UART_TxCpltCallback>
}
 8003d4a:	bf00      	nop
 8003d4c:	3740      	adds	r7, #64	@ 0x40
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff75 	bl	8003c50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b09c      	sub	sp, #112	@ 0x70
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d172      	bne.n	8003e70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003db0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003db2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003db6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003de4:	647a      	str	r2, [r7, #68]	@ 0x44
 8003de6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	623b      	str	r3, [r7, #32]
   return(result);
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d119      	bne.n	8003e70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e72:	2200      	movs	r2, #0
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d106      	bne.n	8003e8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e82:	4619      	mov	r1, r3
 8003e84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e86:	f7ff ff0b 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e8a:	e002      	b.n	8003e92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e8e:	f7ff fee9 	bl	8003c64 <HAL_UART_RxCpltCallback>
}
 8003e92:	bf00      	nop
 8003e94:	3770      	adds	r7, #112	@ 0x70
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d108      	bne.n	8003ec8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff feed 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ec6:	e002      	b.n	8003ece <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fed5 	bl	8003c78 <HAL_UART_RxHalfCpltCallback>
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b80      	cmp	r3, #128	@ 0x80
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b21      	cmp	r3, #33	@ 0x21
 8003f08:	d108      	bne.n	8003f1c <UART_DMAError+0x46>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f000 f8c2 	bl	80040a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f26:	2b40      	cmp	r3, #64	@ 0x40
 8003f28:	bf0c      	ite	eq
 8003f2a:	2301      	moveq	r3, #1
 8003f2c:	2300      	movne	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b22      	cmp	r3, #34	@ 0x22
 8003f3c:	d108      	bne.n	8003f50 <UART_DMAError+0x7a>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003f4a:	68b8      	ldr	r0, [r7, #8]
 8003f4c:	f000 f8d0 	bl	80040f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	f043 0210 	orr.w	r2, r3, #16
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f7ff fe95 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b098      	sub	sp, #96	@ 0x60
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	@ 0x22
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	4a3e      	ldr	r2, [pc, #248]	@ (8004094 <UART_Start_Receive_DMA+0x128>)
 8003f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8004098 <UART_Start_Receive_DMA+0x12c>)
 8003fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <UART_Start_Receive_DMA+0x130>)
 8003faa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	f7fd fe10 	bl	8001bf0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d019      	beq.n	8004022 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800400e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004010:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800401c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	657b      	str	r3, [r7, #84]	@ 0x54
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004042:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406c:	653b      	str	r3, [r7, #80]	@ 0x50
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004076:	627a      	str	r2, [r7, #36]	@ 0x24
 8004078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6a39      	ldr	r1, [r7, #32]
 800407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	61fb      	str	r3, [r7, #28]
   return(result);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3760      	adds	r7, #96	@ 0x60
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	08003d6f 	.word	0x08003d6f
 8004098:	08003e9b 	.word	0x08003e9b
 800409c:	08003ed7 	.word	0x08003ed7

080040a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	@ 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	61ba      	str	r2, [r7, #24]
 80040ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	613b      	str	r3, [r7, #16]
   return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80040e4:	bf00      	nop
 80040e6:	3724      	adds	r7, #36	@ 0x24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b095      	sub	sp, #84	@ 0x54
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004118:	643a      	str	r2, [r7, #64]	@ 0x40
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800411e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	61fb      	str	r3, [r7, #28]
   return(result);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800414c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	d119      	bne.n	800419c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60bb      	str	r3, [r7, #8]
   return(result);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004188:	61ba      	str	r2, [r7, #24]
 800418a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	613b      	str	r3, [r7, #16]
   return(result);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041aa:	bf00      	nop
 80041ac:	3754      	adds	r7, #84	@ 0x54
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff fd5b 	bl	8003c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b21      	cmp	r3, #33	@ 0x21
 80041f0:	d13e      	bne.n	8004270 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d114      	bne.n	8004226 <UART_Transmit_IT+0x48>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004218:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	621a      	str	r2, [r3, #32]
 8004224:	e008      	b.n	8004238 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6211      	str	r1, [r2, #32]
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4619      	mov	r1, r3
 8004246:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800425a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800426a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004294:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fccc 	bl	8003c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08c      	sub	sp, #48	@ 0x30
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b22      	cmp	r3, #34	@ 0x22
 80042c0:	f040 80ae 	bne.w	8004420 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042cc:	d117      	bne.n	80042fe <UART_Receive_IT+0x50>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d113      	bne.n	80042fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80042fc:	e026      	b.n	800434c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004310:	d007      	beq.n	8004322 <UART_Receive_IT+0x74>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <UART_Receive_IT+0x82>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e008      	b.n	8004342 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433c:	b2da      	uxtb	r2, r3
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4619      	mov	r1, r3
 800435a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800435c:	2b00      	cmp	r3, #0
 800435e:	d15d      	bne.n	800441c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0220 	bic.w	r2, r2, #32
 800436e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800437e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d135      	bne.n	8004412 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	613b      	str	r3, [r7, #16]
   return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043cc:	623a      	str	r2, [r7, #32]
 80043ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	69f9      	ldr	r1, [r7, #28]
 80043d2:	6a3a      	ldr	r2, [r7, #32]
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d10a      	bne.n	8004404 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fc48 	bl	8003ca0 <HAL_UARTEx_RxEventCallback>
 8004410:	e002      	b.n	8004418 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fc26 	bl	8003c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e002      	b.n	8004422 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3730      	adds	r7, #48	@ 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b0c0      	sub	sp, #256	@ 0x100
 8004432:	af00      	add	r7, sp, #0
 8004434:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	ea40 0301 	orr.w	r3, r0, r1
 8004454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	431a      	orrs	r2, r3
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	431a      	orrs	r2, r3
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004484:	f021 010c 	bic.w	r1, r1, #12
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004492:	430b      	orrs	r3, r1
 8004494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	6999      	ldr	r1, [r3, #24]
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	ea40 0301 	orr.w	r3, r0, r1
 80044b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b8f      	ldr	r3, [pc, #572]	@ (80046f8 <UART_SetConfig+0x2cc>)
 80044bc:	429a      	cmp	r2, r3
 80044be:	d005      	beq.n	80044cc <UART_SetConfig+0xa0>
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b8d      	ldr	r3, [pc, #564]	@ (80046fc <UART_SetConfig+0x2d0>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d104      	bne.n	80044d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fd06 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 80044d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044d4:	e003      	b.n	80044de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044d6:	f7fe fced 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80044da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e8:	f040 810c 	bne.w	8004704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	1891      	adds	r1, r2, r2
 8004504:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004506:	415b      	adcs	r3, r3
 8004508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800450a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800450e:	4621      	mov	r1, r4
 8004510:	eb12 0801 	adds.w	r8, r2, r1
 8004514:	4629      	mov	r1, r5
 8004516:	eb43 0901 	adc.w	r9, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452e:	4690      	mov	r8, r2
 8004530:	4699      	mov	r9, r3
 8004532:	4623      	mov	r3, r4
 8004534:	eb18 0303 	adds.w	r3, r8, r3
 8004538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800453c:	462b      	mov	r3, r5
 800453e:	eb49 0303 	adc.w	r3, r9, r3
 8004542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004552:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800455a:	460b      	mov	r3, r1
 800455c:	18db      	adds	r3, r3, r3
 800455e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004560:	4613      	mov	r3, r2
 8004562:	eb42 0303 	adc.w	r3, r2, r3
 8004566:	657b      	str	r3, [r7, #84]	@ 0x54
 8004568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800456c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004570:	f7fb feee 	bl	8000350 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <UART_SetConfig+0x2d4>)
 800457a:	fba3 2302 	umull	r2, r3, r3, r2
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	011c      	lsls	r4, r3, #4
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800458c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	1891      	adds	r1, r2, r2
 800459a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800459c:	415b      	adcs	r3, r3
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045a4:	4641      	mov	r1, r8
 80045a6:	eb12 0a01 	adds.w	sl, r2, r1
 80045aa:	4649      	mov	r1, r9
 80045ac:	eb43 0b01 	adc.w	fp, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c4:	4692      	mov	sl, r2
 80045c6:	469b      	mov	fp, r3
 80045c8:	4643      	mov	r3, r8
 80045ca:	eb1a 0303 	adds.w	r3, sl, r3
 80045ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d2:	464b      	mov	r3, r9
 80045d4:	eb4b 0303 	adc.w	r3, fp, r3
 80045d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045f0:	460b      	mov	r3, r1
 80045f2:	18db      	adds	r3, r3, r3
 80045f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f6:	4613      	mov	r3, r2
 80045f8:	eb42 0303 	adc.w	r3, r2, r3
 80045fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004606:	f7fb fea3 	bl	8000350 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4611      	mov	r1, r2
 8004610:	4b3b      	ldr	r3, [pc, #236]	@ (8004700 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2301 	umull	r2, r3, r3, r1
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2264      	movs	r2, #100	@ 0x64
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	1acb      	subs	r3, r1, r3
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004626:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <UART_SetConfig+0x2d4>)
 8004628:	fba3 2302 	umull	r2, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004634:	441c      	add	r4, r3
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004640:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004650:	415b      	adcs	r3, r3
 8004652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004658:	4641      	mov	r1, r8
 800465a:	1851      	adds	r1, r2, r1
 800465c:	6339      	str	r1, [r7, #48]	@ 0x30
 800465e:	4649      	mov	r1, r9
 8004660:	414b      	adcs	r3, r1
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004670:	4659      	mov	r1, fp
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4651      	mov	r1, sl
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4642      	mov	r2, r8
 8004686:	189b      	adds	r3, r3, r2
 8004688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800468c:	464b      	mov	r3, r9
 800468e:	460a      	mov	r2, r1
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046ac:	460b      	mov	r3, r1
 80046ae:	18db      	adds	r3, r3, r3
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b2:	4613      	mov	r3, r2
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046c2:	f7fb fe45 	bl	8000350 <__aeabi_uldivmod>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <UART_SetConfig+0x2d4>)
 80046cc:	fba3 1302 	umull	r1, r3, r3, r2
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	2164      	movs	r1, #100	@ 0x64
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	3332      	adds	r3, #50	@ 0x32
 80046de:	4a08      	ldr	r2, [pc, #32]	@ (8004700 <UART_SetConfig+0x2d4>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	f003 0207 	and.w	r2, r3, #7
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4422      	add	r2, r4
 80046f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046f4:	e106      	b.n	8004904 <UART_SetConfig+0x4d8>
 80046f6:	bf00      	nop
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40011400 	.word	0x40011400
 8004700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800470e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004716:	4642      	mov	r2, r8
 8004718:	464b      	mov	r3, r9
 800471a:	1891      	adds	r1, r2, r2
 800471c:	6239      	str	r1, [r7, #32]
 800471e:	415b      	adcs	r3, r3
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
 8004722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004726:	4641      	mov	r1, r8
 8004728:	1854      	adds	r4, r2, r1
 800472a:	4649      	mov	r1, r9
 800472c:	eb43 0501 	adc.w	r5, r3, r1
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	00eb      	lsls	r3, r5, #3
 800473a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800473e:	00e2      	lsls	r2, r4, #3
 8004740:	4614      	mov	r4, r2
 8004742:	461d      	mov	r5, r3
 8004744:	4643      	mov	r3, r8
 8004746:	18e3      	adds	r3, r4, r3
 8004748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800474c:	464b      	mov	r3, r9
 800474e:	eb45 0303 	adc.w	r3, r5, r3
 8004752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004762:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004772:	4629      	mov	r1, r5
 8004774:	008b      	lsls	r3, r1, #2
 8004776:	4621      	mov	r1, r4
 8004778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477c:	4621      	mov	r1, r4
 800477e:	008a      	lsls	r2, r1, #2
 8004780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004784:	f7fb fde4 	bl	8000350 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <UART_SetConfig+0x4e4>)
 800478e:	fba3 2302 	umull	r2, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	011c      	lsls	r4, r3, #4
 8004796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	1891      	adds	r1, r2, r2
 80047ae:	61b9      	str	r1, [r7, #24]
 80047b0:	415b      	adcs	r3, r3
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b8:	4641      	mov	r1, r8
 80047ba:	1851      	adds	r1, r2, r1
 80047bc:	6139      	str	r1, [r7, #16]
 80047be:	4649      	mov	r1, r9
 80047c0:	414b      	adcs	r3, r1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d0:	4659      	mov	r1, fp
 80047d2:	00cb      	lsls	r3, r1, #3
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047da:	4651      	mov	r1, sl
 80047dc:	00ca      	lsls	r2, r1, #3
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	4642      	mov	r2, r8
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047ec:	464b      	mov	r3, r9
 80047ee:	460a      	mov	r2, r1
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004802:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004810:	4649      	mov	r1, r9
 8004812:	008b      	lsls	r3, r1, #2
 8004814:	4641      	mov	r1, r8
 8004816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800481a:	4641      	mov	r1, r8
 800481c:	008a      	lsls	r2, r1, #2
 800481e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004822:	f7fb fd95 	bl	8000350 <__aeabi_uldivmod>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4611      	mov	r1, r2
 800482c:	4b38      	ldr	r3, [pc, #224]	@ (8004910 <UART_SetConfig+0x4e4>)
 800482e:	fba3 2301 	umull	r2, r3, r3, r1
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2264      	movs	r2, #100	@ 0x64
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	1acb      	subs	r3, r1, r3
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	3332      	adds	r3, #50	@ 0x32
 8004840:	4a33      	ldr	r2, [pc, #204]	@ (8004910 <UART_SetConfig+0x4e4>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800484c:	441c      	add	r4, r3
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	673b      	str	r3, [r7, #112]	@ 0x70
 8004856:	677a      	str	r2, [r7, #116]	@ 0x74
 8004858:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	1891      	adds	r1, r2, r2
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	415b      	adcs	r3, r3
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800486c:	4641      	mov	r1, r8
 800486e:	1851      	adds	r1, r2, r1
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	4649      	mov	r1, r9
 8004874:	414b      	adcs	r3, r1
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004884:	4659      	mov	r1, fp
 8004886:	00cb      	lsls	r3, r1, #3
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488e:	4651      	mov	r1, sl
 8004890:	00ca      	lsls	r2, r1, #3
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	4603      	mov	r3, r0
 8004898:	4642      	mov	r2, r8
 800489a:	189b      	adds	r3, r3, r2
 800489c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489e:	464b      	mov	r3, r9
 80048a0:	460a      	mov	r2, r1
 80048a2:	eb42 0303 	adc.w	r3, r2, r3
 80048a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80048b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048c0:	4649      	mov	r1, r9
 80048c2:	008b      	lsls	r3, r1, #2
 80048c4:	4641      	mov	r1, r8
 80048c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ca:	4641      	mov	r1, r8
 80048cc:	008a      	lsls	r2, r1, #2
 80048ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048d2:	f7fb fd3d 	bl	8000350 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <UART_SetConfig+0x4e4>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	@ 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	3332      	adds	r3, #50	@ 0x32
 80048ee:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <UART_SetConfig+0x4e4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 020f 	and.w	r2, r3, #15
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4422      	add	r2, r4
 8004902:	609a      	str	r2, [r3, #8]
}
 8004904:	bf00      	nop
 8004906:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800490a:	46bd      	mov	sp, r7
 800490c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004910:	51eb851f 	.word	0x51eb851f

08004914 <__NVIC_SetPriority>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004924:	2b00      	cmp	r3, #0
 8004926:	db0a      	blt.n	800493e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	490c      	ldr	r1, [pc, #48]	@ (8004960 <__NVIC_SetPriority+0x4c>)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	0112      	lsls	r2, r2, #4
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	440b      	add	r3, r1
 8004938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800493c:	e00a      	b.n	8004954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4908      	ldr	r1, [pc, #32]	@ (8004964 <__NVIC_SetPriority+0x50>)
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	3b04      	subs	r3, #4
 800494c:	0112      	lsls	r2, r2, #4
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	440b      	add	r3, r1
 8004952:	761a      	strb	r2, [r3, #24]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	e000e100 	.word	0xe000e100
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <SysTick_Handler+0x1c>)
 800496e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004970:	f001 fd40 	bl	80063f4 <xTaskGetSchedulerState>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800497a:	f002 fb35 	bl	8006fe8 <xPortSysTickHandler>
  }
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800498c:	2100      	movs	r1, #0
 800498e:	f06f 0004 	mvn.w	r0, #4
 8004992:	f7ff ffbf 	bl	8004914 <__NVIC_SetPriority>
#endif
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a2:	f3ef 8305 	mrs	r3, IPSR
 80049a6:	603b      	str	r3, [r7, #0]
  return(result);
 80049a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	e00c      	b.n	80049d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <osKernelInitialize+0x44>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <osKernelInitialize+0x44>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	e002      	b.n	80049d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200046b4 	.word	0x200046b4

080049e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ea:	f3ef 8305 	mrs	r3, IPSR
 80049ee:	603b      	str	r3, [r7, #0]
  return(result);
 80049f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80049f6:	f06f 0305 	mvn.w	r3, #5
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	e010      	b.n	8004a20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <osKernelStart+0x48>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d109      	bne.n	8004a1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a06:	f7ff ffbf 	bl	8004988 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <osKernelStart+0x48>)
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a10:	f001 f87a 	bl	8005b08 <vTaskStartScheduler>
      stat = osOK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	e002      	b.n	8004a20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a20:	687b      	ldr	r3, [r7, #4]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200046b4 	.word	0x200046b4

08004a30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	@ 0x38
 8004a34:	af04      	add	r7, sp, #16
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a40:	f3ef 8305 	mrs	r3, IPSR
 8004a44:	617b      	str	r3, [r7, #20]
  return(result);
 8004a46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d17e      	bne.n	8004b4a <osThreadNew+0x11a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d07b      	beq.n	8004b4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a56:	2318      	movs	r3, #24
 8004a58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d045      	beq.n	8004af6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <osThreadNew+0x48>
        name = attr->name;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <osThreadNew+0x6e>
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b38      	cmp	r3, #56	@ 0x38
 8004a90:	d805      	bhi.n	8004a9e <osThreadNew+0x6e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <osThreadNew+0x72>
        return (NULL);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e054      	b.n	8004b4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <osThreadNew+0xa8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b5b      	cmp	r3, #91	@ 0x5b
 8004ac0:	d90a      	bls.n	8004ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d006      	beq.n	8004ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <osThreadNew+0xa8>
        mem = 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	e010      	b.n	8004afa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10c      	bne.n	8004afa <osThreadNew+0xca>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d108      	bne.n	8004afa <osThreadNew+0xca>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <osThreadNew+0xca>
          mem = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e001      	b.n	8004afa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d110      	bne.n	8004b22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b08:	9202      	str	r2, [sp, #8]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a3a      	ldr	r2, [r7, #32]
 8004b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fe1a 	bl	8005750 <xTaskCreateStatic>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e013      	b.n	8004b4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d110      	bne.n	8004b4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	f107 0310 	add.w	r3, r7, #16
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fe68 	bl	8005810 <xTaskCreate>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <osThreadNew+0x11a>
            hTask = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b4a:	693b      	ldr	r3, [r7, #16]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	@ 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5c:	f3ef 8305 	mrs	r3, IPSR
 8004b60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <osDelay+0x1c>
    stat = osErrorISR;
 8004b68:	f06f 0305 	mvn.w	r3, #5
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e007      	b.n	8004b80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff8e 	bl	8005a9c <vTaskDelay>
    }
  }

  return (stat);
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a07      	ldr	r2, [pc, #28]	@ (8004bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a06      	ldr	r2, [pc, #24]	@ (8004bbc <vApplicationGetIdleTaskMemory+0x30>)
 8004ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2280      	movs	r2, #128	@ 0x80
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	200046b8 	.word	0x200046b8
 8004bbc:	20004714 	.word	0x20004714

08004bc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a07      	ldr	r2, [pc, #28]	@ (8004bec <vApplicationGetTimerTaskMemory+0x2c>)
 8004bd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	@ (8004bf0 <vApplicationGetTimerTaskMemory+0x30>)
 8004bd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bde:	601a      	str	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20004914 	.word	0x20004914
 8004bf0:	20004970 	.word	0x20004970

08004bf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f103 0208 	add.w	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f103 0208 	add.w	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0208 	add.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cac:	d103      	bne.n	8004cb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e00c      	b.n	8004cd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e002      	b.n	8004cc4 <vListInsert+0x2e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d2f6      	bcs.n	8004cbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6852      	ldr	r2, [r2, #4]
 8004d28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d103      	bne.n	8004d3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d88:	f002 f89e 	bl	8006ec8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db8:	3b01      	subs	r3, #1
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	22ff      	movs	r2, #255	@ 0xff
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	22ff      	movs	r2, #255	@ 0xff
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d114      	bne.n	8004e08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01a      	beq.n	8004e1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3310      	adds	r3, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f91a 	bl	8006024 <xTaskRemoveFromEventList>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <xQueueGenericReset+0xd0>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e009      	b.n	8004e1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fef1 	bl	8004bf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3324      	adds	r3, #36	@ 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff feec 	bl	8004bf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e1c:	f002 f886 	bl	8006f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e20:	2301      	movs	r3, #1
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08e      	sub	sp, #56	@ 0x38
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <xQueueGenericCreateStatic+0x56>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <xQueueGenericCreateStatic+0x5a>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericCreateStatic+0x5c>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <xQueueGenericCreateStatic+0x84>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <xQueueGenericCreateStatic+0x88>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <xQueueGenericCreateStatic+0x8a>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61fb      	str	r3, [r7, #28]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ed6:	2350      	movs	r3, #80	@ 0x50
 8004ed8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b50      	cmp	r3, #80	@ 0x50
 8004ede:	d00b      	beq.n	8004ef8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	61bb      	str	r3, [r7, #24]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ef8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00d      	beq.n	8004f20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f805 	bl	8004f2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3730      	adds	r7, #48	@ 0x30
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f58:	2101      	movs	r1, #1
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f7ff fefe 	bl	8004d5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	@ 0x38
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <xQueueGenericSend+0x34>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <xQueueGenericSend+0x42>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <xQueueGenericSend+0x46>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <xQueueGenericSend+0x48>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <xQueueGenericSend+0x64>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d103      	bne.n	8004fe2 <xQueueGenericSend+0x72>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <xQueueGenericSend+0x76>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <xQueueGenericSend+0x78>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10b      	bne.n	8005004 <xQueueGenericSend+0x94>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	623b      	str	r3, [r7, #32]
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	e7fd      	b.n	8005000 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005004:	f001 f9f6 	bl	80063f4 <xTaskGetSchedulerState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <xQueueGenericSend+0xa4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <xQueueGenericSend+0xa8>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <xQueueGenericSend+0xaa>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <xQueueGenericSend+0xc6>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	61fb      	str	r3, [r7, #28]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005036:	f001 ff47 	bl	8006ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <xQueueGenericSend+0xdc>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d129      	bne.n	80050a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005052:	f000 fa0f 	bl	8005474 <prvCopyDataToQueue>
 8005056:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	3324      	adds	r3, #36	@ 0x24
 8005064:	4618      	mov	r0, r3
 8005066:	f000 ffdd 	bl	8006024 <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b3f      	ldr	r3, [pc, #252]	@ (8005170 <xQueueGenericSend+0x200>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	e00a      	b.n	8005098 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005088:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <xQueueGenericSend+0x200>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005098:	f001 ff48 	bl	8006f2c <vPortExitCritical>
				return pdPASS;
 800509c:	2301      	movs	r3, #1
 800509e:	e063      	b.n	8005168 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050a6:	f001 ff41 	bl	8006f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e05c      	b.n	8005168 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f83f 	bl	800613c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c2:	f001 ff33 	bl	8006f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c6:	f000 fd87 	bl	8005bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ca:	f001 fefd 	bl	8006ec8 <vPortEnterCritical>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050da:	d103      	bne.n	80050e4 <xQueueGenericSend+0x174>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f0:	d103      	bne.n	80050fa <xQueueGenericSend+0x18a>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fa:	f001 ff17 	bl	8006f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050fe:	1d3a      	adds	r2, r7, #4
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f82e 	bl	8006168 <xTaskCheckForTimeOut>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d124      	bne.n	800515c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005114:	f000 faa6 	bl	8005664 <prvIsQueueFull>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	3310      	adds	r3, #16
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f000 ff2a 	bl	8005f80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800512c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800512e:	f000 fa31 	bl	8005594 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005132:	f000 fd5f 	bl	8005bf4 <xTaskResumeAll>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f af7c 	bne.w	8005036 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <xQueueGenericSend+0x200>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e772      	b.n	8005036 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 fa1f 	bl	8005594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005156:	f000 fd4d 	bl	8005bf4 <xTaskResumeAll>
 800515a:	e76c      	b.n	8005036 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800515c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800515e:	f000 fa19 	bl	8005594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005162:	f000 fd47 	bl	8005bf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005166:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005168:	4618      	mov	r0, r3
 800516a:	3738      	adds	r7, #56	@ 0x38
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b090      	sub	sp, #64	@ 0x40
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <xQueueGenericSendFromISR+0x3e>
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueGenericSendFromISR+0x42>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueGenericSendFromISR+0x44>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d103      	bne.n	80051e2 <xQueueGenericSendFromISR+0x6e>
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <xQueueGenericSendFromISR+0x72>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueGenericSendFromISR+0x74>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	623b      	str	r3, [r7, #32]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005204:	f001 ff40 	bl	8007088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005208:	f3ef 8211 	mrs	r2, BASEPRI
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61fa      	str	r2, [r7, #28]
 800521e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005220:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <xQueueGenericSendFromISR+0xc2>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d12f      	bne.n	8005296 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800523c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800524c:	f000 f912 	bl	8005474 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005250:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005258:	d112      	bne.n	8005280 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d016      	beq.n	8005290 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	3324      	adds	r3, #36	@ 0x24
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fedc 	bl	8006024 <xTaskRemoveFromEventList>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00e      	beq.n	8005290 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e007      	b.n	8005290 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005284:	3301      	adds	r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	b25a      	sxtb	r2, r3
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005290:	2301      	movs	r3, #1
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005294:	e001      	b.n	800529a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005296:	2300      	movs	r3, #0
 8005298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800529a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3740      	adds	r7, #64	@ 0x40
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052bc:	2300      	movs	r3, #0
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10b      	bne.n	80052e2 <xQueueReceive+0x32>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	623b      	str	r3, [r7, #32]
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	e7fd      	b.n	80052de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <xQueueReceive+0x40>
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <xQueueReceive+0x44>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <xQueueReceive+0x46>
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <xQueueReceive+0x62>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61fb      	str	r3, [r7, #28]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005312:	f001 f86f 	bl	80063f4 <xTaskGetSchedulerState>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <xQueueReceive+0x72>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <xQueueReceive+0x76>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueReceive+0x78>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <xQueueReceive+0x94>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61bb      	str	r3, [r7, #24]
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005344:	f001 fdc0 	bl	8006ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01f      	beq.n	8005394 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005358:	f000 f8f6 	bl	8005548 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	1e5a      	subs	r2, r3, #1
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00f      	beq.n	800538c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	3310      	adds	r3, #16
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fe57 	bl	8006024 <xTaskRemoveFromEventList>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800537c:	4b3c      	ldr	r3, [pc, #240]	@ (8005470 <xQueueReceive+0x1c0>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800538c:	f001 fdce 	bl	8006f2c <vPortExitCritical>
				return pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	e069      	b.n	8005468 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800539a:	f001 fdc7 	bl	8006f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800539e:	2300      	movs	r3, #0
 80053a0:	e062      	b.n	8005468 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053a8:	f107 0310 	add.w	r3, r7, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fec5 	bl	800613c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053b6:	f001 fdb9 	bl	8006f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ba:	f000 fc0d 	bl	8005bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053be:	f001 fd83 	bl	8006ec8 <vPortEnterCritical>
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ce:	d103      	bne.n	80053d8 <xQueueReceive+0x128>
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053e4:	d103      	bne.n	80053ee <xQueueReceive+0x13e>
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ee:	f001 fd9d 	bl	8006f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f2:	1d3a      	adds	r2, r7, #4
 80053f4:	f107 0310 	add.w	r3, r7, #16
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 feb4 	bl	8006168 <xTaskCheckForTimeOut>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d123      	bne.n	800544e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005408:	f000 f916 	bl	8005638 <prvIsQueueEmpty>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d017      	beq.n	8005442 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	3324      	adds	r3, #36	@ 0x24
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fdb0 	bl	8005f80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005422:	f000 f8b7 	bl	8005594 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005426:	f000 fbe5 	bl	8005bf4 <xTaskResumeAll>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d189      	bne.n	8005344 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005430:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <xQueueReceive+0x1c0>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e780      	b.n	8005344 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005444:	f000 f8a6 	bl	8005594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005448:	f000 fbd4 	bl	8005bf4 <xTaskResumeAll>
 800544c:	e77a      	b.n	8005344 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800544e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005450:	f000 f8a0 	bl	8005594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005454:	f000 fbce 	bl	8005bf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545a:	f000 f8ed 	bl	8005638 <prvIsQueueEmpty>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	f43f af6f 	beq.w	8005344 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005466:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005468:	4618      	mov	r0, r3
 800546a:	3730      	adds	r7, #48	@ 0x30
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d14d      	bne.n	8005536 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 ffc6 	bl	8006430 <xTaskPriorityDisinherit>
 80054a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	e043      	b.n	8005536 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d119      	bne.n	80054e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6858      	ldr	r0, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	461a      	mov	r2, r3
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	f00e fbf9 	bl	8013cb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	441a      	add	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d32b      	bcc.n	8005536 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e026      	b.n	8005536 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68d8      	ldr	r0, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	461a      	mov	r2, r3
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	f00e fbdf 	bl	8013cb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005500:	425b      	negs	r3, r3
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d207      	bcs.n	8005524 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	425b      	negs	r3, r3
 800551e:	441a      	add	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d105      	bne.n	8005536 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3b01      	subs	r3, #1
 8005534:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800553e:	697b      	ldr	r3, [r7, #20]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	441a      	add	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d303      	bcc.n	800557c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68d9      	ldr	r1, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	461a      	mov	r2, r3
 8005586:	6838      	ldr	r0, [r7, #0]
 8005588:	f00e fb95 	bl	8013cb6 <memcpy>
	}
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800559c:	f001 fc94 	bl	8006ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a8:	e011      	b.n	80055ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3324      	adds	r3, #36	@ 0x24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fd34 	bl	8006024 <xTaskRemoveFromEventList>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055c2:	f000 fe35 	bl	8006230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	dce9      	bgt.n	80055aa <prvUnlockQueue+0x16>
 80055d6:	e000      	b.n	80055da <prvUnlockQueue+0x46>
					break;
 80055d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	22ff      	movs	r2, #255	@ 0xff
 80055de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055e2:	f001 fca3 	bl	8006f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055e6:	f001 fc6f 	bl	8006ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f2:	e011      	b.n	8005618 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3310      	adds	r3, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fd0f 	bl	8006024 <xTaskRemoveFromEventList>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800560c:	f000 fe10 	bl	8006230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	3b01      	subs	r3, #1
 8005614:	b2db      	uxtb	r3, r3
 8005616:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800561c:	2b00      	cmp	r3, #0
 800561e:	dce9      	bgt.n	80055f4 <prvUnlockQueue+0x60>
 8005620:	e000      	b.n	8005624 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005622:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	22ff      	movs	r2, #255	@ 0xff
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800562c:	f001 fc7e 	bl	8006f2c <vPortExitCritical>
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005640:	f001 fc42 	bl	8006ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e001      	b.n	8005656 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005656:	f001 fc69 	bl	8006f2c <vPortExitCritical>

	return xReturn;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800566c:	f001 fc2c 	bl	8006ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005678:	429a      	cmp	r2, r3
 800567a:	d102      	bne.n	8005682 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e001      	b.n	8005686 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005686:	f001 fc51 	bl	8006f2c <vPortExitCritical>

	return xReturn;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e014      	b.n	80056ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056a4:	4a0f      	ldr	r2, [pc, #60]	@ (80056e4 <vQueueAddToRegistry+0x50>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056b0:	490c      	ldr	r1, [pc, #48]	@ (80056e4 <vQueueAddToRegistry+0x50>)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056ba:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <vQueueAddToRegistry+0x50>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056c6:	e006      	b.n	80056d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b07      	cmp	r3, #7
 80056d2:	d9e7      	bls.n	80056a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20004d70 	.word	0x20004d70

080056e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056f8:	f001 fbe6 	bl	8006ec8 <vPortEnterCritical>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005702:	b25b      	sxtb	r3, r3
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005708:	d103      	bne.n	8005712 <vQueueWaitForMessageRestricted+0x2a>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800571e:	d103      	bne.n	8005728 <vQueueWaitForMessageRestricted+0x40>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005728:	f001 fc00 	bl	8006f2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3324      	adds	r3, #36	@ 0x24
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fc45 	bl	8005fcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff26 	bl	8005594 <prvUnlockQueue>
	}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08e      	sub	sp, #56	@ 0x38
 8005754:	af04      	add	r7, sp, #16
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	623b      	str	r3, [r7, #32]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	61fb      	str	r3, [r7, #28]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800579a:	235c      	movs	r3, #92	@ 0x5c
 800579c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80057a2:	d00b      	beq.n	80057bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61bb      	str	r3, [r7, #24]
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01e      	beq.n	8005802 <xTaskCreateStatic+0xb2>
 80057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01b      	beq.n	8005802 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057dc:	2300      	movs	r3, #0
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f850 	bl	800589a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057fc:	f000 f8de 	bl	80059bc <prvAddNewTaskToReadyList>
 8005800:	e001      	b.n	8005806 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005806:	697b      	ldr	r3, [r7, #20]
	}
 8005808:	4618      	mov	r0, r3
 800580a:	3728      	adds	r7, #40	@ 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	@ 0x30
 8005814:	af04      	add	r7, sp, #16
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fc71 	bl	800710c <pvPortMalloc>
 800582a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005832:	205c      	movs	r0, #92	@ 0x5c
 8005834:	f001 fc6a 	bl	800710c <pvPortMalloc>
 8005838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	631a      	str	r2, [r3, #48]	@ 0x30
 8005846:	e005      	b.n	8005854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005848:	6978      	ldr	r0, [r7, #20]
 800584a:	f001 fd2d 	bl	80072a8 <vPortFree>
 800584e:	e001      	b.n	8005854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	2300      	movs	r3, #0
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	9302      	str	r3, [sp, #8]
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f80e 	bl	800589a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587e:	69f8      	ldr	r0, [r7, #28]
 8005880:	f000 f89c 	bl	80059bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005884:	2301      	movs	r3, #1
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e002      	b.n	8005890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800588e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005890:	69bb      	ldr	r3, [r7, #24]
	}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	461a      	mov	r2, r3
 80058b2:	21a5      	movs	r1, #165	@ 0xa5
 80058b4:	f00e f936 	bl	8013b24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c2:	3b01      	subs	r3, #1
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	617b      	str	r3, [r7, #20]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01f      	beq.n	800593a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e012      	b.n	8005926 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	7819      	ldrb	r1, [r3, #0]
 8005908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	3334      	adds	r3, #52	@ 0x34
 8005910:	460a      	mov	r2, r1
 8005912:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d006      	beq.n	800592e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d9e9      	bls.n	8005900 <prvInitialiseNewTask+0x66>
 800592c:	e000      	b.n	8005930 <prvInitialiseNewTask+0x96>
			{
				break;
 800592e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005938:	e003      	b.n	8005942 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	2b37      	cmp	r3, #55	@ 0x37
 8005946:	d901      	bls.n	800594c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005948:	2337      	movs	r3, #55	@ 0x37
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005956:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	2200      	movs	r2, #0
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	3304      	adds	r3, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f966 	bl	8004c34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	3318      	adds	r3, #24
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f961 	bl	8004c34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005986:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	2200      	movs	r2, #0
 800598c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f001 f966 	bl	8006c6c <pxPortInitialiseStack>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b2:	bf00      	nop
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059c4:	f001 fa80 	bl	8006ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <prvAddNewTaskToReadyList+0xc4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005a80 <prvAddNewTaskToReadyList+0xc4>)
 80059d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <prvAddNewTaskToReadyList+0xc8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059da:	4a2a      	ldr	r2, [pc, #168]	@ (8005a84 <prvAddNewTaskToReadyList+0xc8>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059e0:	4b27      	ldr	r3, [pc, #156]	@ (8005a80 <prvAddNewTaskToReadyList+0xc4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d110      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059e8:	f000 fc46 	bl	8006278 <prvInitialiseTaskLists>
 80059ec:	e00d      	b.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059ee:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <prvAddNewTaskToReadyList+0xcc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059f6:	4b23      	ldr	r3, [pc, #140]	@ (8005a84 <prvAddNewTaskToReadyList+0xc8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d802      	bhi.n	8005a0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a04:	4a1f      	ldr	r2, [pc, #124]	@ (8005a84 <prvAddNewTaskToReadyList+0xc8>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a0a:	4b20      	ldr	r3, [pc, #128]	@ (8005a8c <prvAddNewTaskToReadyList+0xd0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4a1e      	ldr	r2, [pc, #120]	@ (8005a8c <prvAddNewTaskToReadyList+0xd0>)
 8005a12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <prvAddNewTaskToReadyList+0xd0>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a20:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <prvAddNewTaskToReadyList+0xd4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <prvAddNewTaskToReadyList+0x74>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4a18      	ldr	r2, [pc, #96]	@ (8005a90 <prvAddNewTaskToReadyList+0xd4>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <prvAddNewTaskToReadyList+0xd8>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7ff f901 	bl	8004c4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a4c:	f001 fa6e 	bl	8006f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a50:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <prvAddNewTaskToReadyList+0xcc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a58:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <prvAddNewTaskToReadyList+0xc8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d207      	bcs.n	8005a76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <prvAddNewTaskToReadyList+0xdc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20005284 	.word	0x20005284
 8005a84:	20004db0 	.word	0x20004db0
 8005a88:	20005290 	.word	0x20005290
 8005a8c:	200052a0 	.word	0x200052a0
 8005a90:	2000528c 	.word	0x2000528c
 8005a94:	20004db4 	.word	0x20004db4
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aae:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <vTaskDelay+0x64>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <vTaskDelay+0x32>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ace:	f000 f883 	bl	8005bd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fd1b 	bl	8006510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ada:	f000 f88b 	bl	8005bf4 <xTaskResumeAll>
 8005ade:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <vTaskDelay+0x68>)
 8005ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200052ac 	.word	0x200052ac
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	@ 0x28
 8005b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b16:	463a      	mov	r2, r7
 8005b18:	1d39      	adds	r1, r7, #4
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff f834 	bl	8004b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	9202      	str	r2, [sp, #8]
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	2300      	movs	r3, #0
 8005b34:	460a      	mov	r2, r1
 8005b36:	4922      	ldr	r1, [pc, #136]	@ (8005bc0 <vTaskStartScheduler+0xb8>)
 8005b38:	4822      	ldr	r0, [pc, #136]	@ (8005bc4 <vTaskStartScheduler+0xbc>)
 8005b3a:	f7ff fe09 	bl	8005750 <xTaskCreateStatic>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <vTaskStartScheduler+0xc0>)
 8005b42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b44:	4b20      	ldr	r3, [pc, #128]	@ (8005bc8 <vTaskStartScheduler+0xc0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e001      	b.n	8005b56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b5c:	f000 fd2c 	bl	80065b8 <xTimerCreateTimerTask>
 8005b60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d116      	bne.n	8005b96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	613b      	str	r3, [r7, #16]
}
 8005b7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7c:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <vTaskStartScheduler+0xc4>)
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <vTaskStartScheduler+0xc8>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b8a:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <vTaskStartScheduler+0xcc>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b90:	f001 f8f6 	bl	8006d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b94:	e00f      	b.n	8005bb6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b9c:	d10b      	bne.n	8005bb6 <vTaskStartScheduler+0xae>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <vTaskStartScheduler+0xaa>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08014aec 	.word	0x08014aec
 8005bc4:	08006249 	.word	0x08006249
 8005bc8:	200052a8 	.word	0x200052a8
 8005bcc:	200052a4 	.word	0x200052a4
 8005bd0:	20005290 	.word	0x20005290
 8005bd4:	20005288 	.word	0x20005288

08005bd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bdc:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <vTaskSuspendAll+0x18>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4a03      	ldr	r2, [pc, #12]	@ (8005bf0 <vTaskSuspendAll+0x18>)
 8005be4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005be6:	bf00      	nop
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	200052ac 	.word	0x200052ac

08005bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c02:	4b42      	ldr	r3, [pc, #264]	@ (8005d0c <xTaskResumeAll+0x118>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	603b      	str	r3, [r7, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c22:	f001 f951 	bl	8006ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c26:	4b39      	ldr	r3, [pc, #228]	@ (8005d0c <xTaskResumeAll+0x118>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a37      	ldr	r2, [pc, #220]	@ (8005d0c <xTaskResumeAll+0x118>)
 8005c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c30:	4b36      	ldr	r3, [pc, #216]	@ (8005d0c <xTaskResumeAll+0x118>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d162      	bne.n	8005cfe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c38:	4b35      	ldr	r3, [pc, #212]	@ (8005d10 <xTaskResumeAll+0x11c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d05e      	beq.n	8005cfe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c40:	e02f      	b.n	8005ca2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c42:	4b34      	ldr	r3, [pc, #208]	@ (8005d14 <xTaskResumeAll+0x120>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff f85a 	bl	8004d08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff f855 	bl	8004d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	4b2d      	ldr	r3, [pc, #180]	@ (8005d18 <xTaskResumeAll+0x124>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d903      	bls.n	8005c72 <xTaskResumeAll+0x7e>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d18 <xTaskResumeAll+0x124>)
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a27      	ldr	r2, [pc, #156]	@ (8005d1c <xTaskResumeAll+0x128>)
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f7fe ffe0 	bl	8004c4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c92:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <xTaskResumeAll+0x12c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d302      	bcc.n	8005ca2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c9c:	4b21      	ldr	r3, [pc, #132]	@ (8005d24 <xTaskResumeAll+0x130>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <xTaskResumeAll+0x120>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1cb      	bne.n	8005c42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cb0:	f000 fb80 	bl	80063b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <xTaskResumeAll+0x134>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cc0:	f000 f846 	bl	8005d50 <xTaskIncrementTick>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cca:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <xTaskResumeAll+0x130>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005cdc:	4b12      	ldr	r3, [pc, #72]	@ (8005d28 <xTaskResumeAll+0x134>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ce2:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <xTaskResumeAll+0x130>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cea:	2301      	movs	r3, #1
 8005cec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cee:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <xTaskResumeAll+0x138>)
 8005cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cfe:	f001 f915 	bl	8006f2c <vPortExitCritical>

	return xAlreadyYielded;
 8005d02:	68bb      	ldr	r3, [r7, #8]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	200052ac 	.word	0x200052ac
 8005d10:	20005284 	.word	0x20005284
 8005d14:	20005244 	.word	0x20005244
 8005d18:	2000528c 	.word	0x2000528c
 8005d1c:	20004db4 	.word	0x20004db4
 8005d20:	20004db0 	.word	0x20004db0
 8005d24:	20005298 	.word	0x20005298
 8005d28:	20005294 	.word	0x20005294
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d36:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <xTaskGetTickCount+0x1c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d3c:	687b      	ldr	r3, [r7, #4]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20005288 	.word	0x20005288

08005d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e98 <xTaskIncrementTick+0x148>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 8090 	bne.w	8005e84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d64:	4b4d      	ldr	r3, [pc, #308]	@ (8005e9c <xTaskIncrementTick+0x14c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8005e9c <xTaskIncrementTick+0x14c>)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d121      	bne.n	8005dbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d78:	4b49      	ldr	r3, [pc, #292]	@ (8005ea0 <xTaskIncrementTick+0x150>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	603b      	str	r3, [r7, #0]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xTaskIncrementTick+0x46>
 8005d9a:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <xTaskIncrementTick+0x150>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	4b40      	ldr	r3, [pc, #256]	@ (8005ea4 <xTaskIncrementTick+0x154>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea0 <xTaskIncrementTick+0x150>)
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea4 <xTaskIncrementTick+0x154>)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea8 <xTaskIncrementTick+0x158>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea8 <xTaskIncrementTick+0x158>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	f000 fafc 	bl	80063b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8005eac <xTaskIncrementTick+0x15c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d349      	bcc.n	8005e5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc6:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <xTaskIncrementTick+0x150>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd0:	4b36      	ldr	r3, [pc, #216]	@ (8005eac <xTaskIncrementTick+0x15c>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dd6:	601a      	str	r2, [r3, #0]
					break;
 8005dd8:	e03f      	b.n	8005e5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dda:	4b31      	ldr	r3, [pc, #196]	@ (8005ea0 <xTaskIncrementTick+0x150>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d203      	bcs.n	8005dfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005df2:	4a2e      	ldr	r2, [pc, #184]	@ (8005eac <xTaskIncrementTick+0x15c>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005df8:	e02f      	b.n	8005e5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe ff82 	bl	8004d08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3318      	adds	r3, #24
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe ff79 	bl	8004d08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1a:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <xTaskIncrementTick+0x160>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d903      	bls.n	8005e2a <xTaskIncrementTick+0xda>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4a22      	ldr	r2, [pc, #136]	@ (8005eb0 <xTaskIncrementTick+0x160>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb4 <xTaskIncrementTick+0x164>)
 8005e38:	441a      	add	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe ff04 	bl	8004c4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <xTaskIncrementTick+0x168>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3b8      	bcc.n	8005dc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e58:	e7b5      	b.n	8005dc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e5a:	4b17      	ldr	r3, [pc, #92]	@ (8005eb8 <xTaskIncrementTick+0x168>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e60:	4914      	ldr	r1, [pc, #80]	@ (8005eb4 <xTaskIncrementTick+0x164>)
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d901      	bls.n	8005e76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e76:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <xTaskIncrementTick+0x16c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e004      	b.n	8005e8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <xTaskIncrementTick+0x170>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec0 <xTaskIncrementTick+0x170>)
 8005e8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200052ac 	.word	0x200052ac
 8005e9c:	20005288 	.word	0x20005288
 8005ea0:	2000523c 	.word	0x2000523c
 8005ea4:	20005240 	.word	0x20005240
 8005ea8:	2000529c 	.word	0x2000529c
 8005eac:	200052a4 	.word	0x200052a4
 8005eb0:	2000528c 	.word	0x2000528c
 8005eb4:	20004db4 	.word	0x20004db4
 8005eb8:	20004db0 	.word	0x20004db0
 8005ebc:	20005298 	.word	0x20005298
 8005ec0:	20005294 	.word	0x20005294

08005ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eca:	4b28      	ldr	r3, [pc, #160]	@ (8005f6c <vTaskSwitchContext+0xa8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ed2:	4b27      	ldr	r3, [pc, #156]	@ (8005f70 <vTaskSwitchContext+0xac>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ed8:	e042      	b.n	8005f60 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005eda:	4b25      	ldr	r3, [pc, #148]	@ (8005f70 <vTaskSwitchContext+0xac>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	4b24      	ldr	r3, [pc, #144]	@ (8005f74 <vTaskSwitchContext+0xb0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e011      	b.n	8005f0c <vTaskSwitchContext+0x48>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <vTaskSwitchContext+0x42>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <vTaskSwitchContext+0x3e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	491a      	ldr	r1, [pc, #104]	@ (8005f78 <vTaskSwitchContext+0xb4>)
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0e3      	beq.n	8005ee8 <vTaskSwitchContext+0x24>
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4a13      	ldr	r2, [pc, #76]	@ (8005f78 <vTaskSwitchContext+0xb4>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3308      	adds	r3, #8
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d104      	bne.n	8005f50 <vTaskSwitchContext+0x8c>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	605a      	str	r2, [r3, #4]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4a09      	ldr	r2, [pc, #36]	@ (8005f7c <vTaskSwitchContext+0xb8>)
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4a06      	ldr	r2, [pc, #24]	@ (8005f74 <vTaskSwitchContext+0xb0>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	200052ac 	.word	0x200052ac
 8005f70:	20005298 	.word	0x20005298
 8005f74:	2000528c 	.word	0x2000528c
 8005f78:	20004db4 	.word	0x20004db4
 8005f7c:	20004db0 	.word	0x20004db0

08005f80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fa8:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <vTaskPlaceOnEventList+0x48>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3318      	adds	r3, #24
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7fe fe70 	bl	8004c96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	f000 faa9 	bl	8006510 <prvAddCurrentTaskToDelayedList>
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20004db0 	.word	0x20004db0

08005fcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fe fe25 	bl	8004c4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800600e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	68b8      	ldr	r0, [r7, #8]
 8006014:	f000 fa7c 	bl	8006510 <prvAddCurrentTaskToDelayedList>
	}
 8006018:	bf00      	nop
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20004db0 	.word	0x20004db0

08006024 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60fb      	str	r3, [r7, #12]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3318      	adds	r3, #24
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fe56 	bl	8004d08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605c:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <xTaskRemoveFromEventList+0xb0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11d      	bne.n	80060a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fe4d 	bl	8004d08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <xTaskRemoveFromEventList+0xb4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d903      	bls.n	8006082 <xTaskRemoveFromEventList+0x5e>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <xTaskRemoveFromEventList+0xb4>)
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <xTaskRemoveFromEventList+0xb8>)
 8006090:	441a      	add	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f7fe fdd8 	bl	8004c4e <vListInsertEnd>
 800609e:	e005      	b.n	80060ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3318      	adds	r3, #24
 80060a4:	4619      	mov	r1, r3
 80060a6:	480e      	ldr	r0, [pc, #56]	@ (80060e0 <xTaskRemoveFromEventList+0xbc>)
 80060a8:	f7fe fdd1 	bl	8004c4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b0:	4b0c      	ldr	r3, [pc, #48]	@ (80060e4 <xTaskRemoveFromEventList+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d905      	bls.n	80060c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060be:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <xTaskRemoveFromEventList+0xc4>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e001      	b.n	80060ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060ca:	697b      	ldr	r3, [r7, #20]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	200052ac 	.word	0x200052ac
 80060d8:	2000528c 	.word	0x2000528c
 80060dc:	20004db4 	.word	0x20004db4
 80060e0:	20005244 	.word	0x20005244
 80060e4:	20004db0 	.word	0x20004db0
 80060e8:	20005298 	.word	0x20005298

080060ec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	60fb      	str	r3, [r7, #12]
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006112:	f000 fed9 	bl	8006ec8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006116:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <vTaskSetTimeOutState+0x48>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800611e:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <vTaskSetTimeOutState+0x4c>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006126:	f000 ff01 	bl	8006f2c <vPortExitCritical>
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	2000529c 	.word	0x2000529c
 8006138:	20005288 	.word	0x20005288

0800613c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <vTaskInternalSetTimeOutState+0x24>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800614c:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <vTaskInternalSetTimeOutState+0x28>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	605a      	str	r2, [r3, #4]
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000529c 	.word	0x2000529c
 8006164:	20005288 	.word	0x20005288

08006168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	613b      	str	r3, [r7, #16]
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60fb      	str	r3, [r7, #12]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061ae:	f000 fe8b 	bl	8006ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <xTaskCheckForTimeOut+0xc0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ca:	d102      	bne.n	80061d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e023      	b.n	800621a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4b15      	ldr	r3, [pc, #84]	@ (800622c <xTaskCheckForTimeOut+0xc4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d007      	beq.n	80061ee <xTaskCheckForTimeOut+0x86>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e015      	b.n	800621a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d20b      	bcs.n	8006210 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff99 	bl	800613c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e004      	b.n	800621a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800621a:	f000 fe87 	bl	8006f2c <vPortExitCritical>

	return xReturn;
 800621e:	69fb      	ldr	r3, [r7, #28]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20005288 	.word	0x20005288
 800622c:	2000529c 	.word	0x2000529c

08006230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006234:	4b03      	ldr	r3, [pc, #12]	@ (8006244 <vTaskMissedYield+0x14>)
 8006236:	2201      	movs	r2, #1
 8006238:	601a      	str	r2, [r3, #0]
}
 800623a:	bf00      	nop
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20005298 	.word	0x20005298

08006248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006250:	f000 f852 	bl	80062f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006254:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <prvIdleTask+0x28>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d9f9      	bls.n	8006250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <prvIdleTask+0x2c>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800626c:	e7f0      	b.n	8006250 <prvIdleTask+0x8>
 800626e:	bf00      	nop
 8006270:	20004db4 	.word	0x20004db4
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	e00c      	b.n	800629e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4a12      	ldr	r2, [pc, #72]	@ (80062d8 <prvInitialiseTaskLists+0x60>)
 8006290:	4413      	add	r3, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fcae 	bl	8004bf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3301      	adds	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b37      	cmp	r3, #55	@ 0x37
 80062a2:	d9ef      	bls.n	8006284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062a4:	480d      	ldr	r0, [pc, #52]	@ (80062dc <prvInitialiseTaskLists+0x64>)
 80062a6:	f7fe fca5 	bl	8004bf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062aa:	480d      	ldr	r0, [pc, #52]	@ (80062e0 <prvInitialiseTaskLists+0x68>)
 80062ac:	f7fe fca2 	bl	8004bf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062b0:	480c      	ldr	r0, [pc, #48]	@ (80062e4 <prvInitialiseTaskLists+0x6c>)
 80062b2:	f7fe fc9f 	bl	8004bf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062b6:	480c      	ldr	r0, [pc, #48]	@ (80062e8 <prvInitialiseTaskLists+0x70>)
 80062b8:	f7fe fc9c 	bl	8004bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062bc:	480b      	ldr	r0, [pc, #44]	@ (80062ec <prvInitialiseTaskLists+0x74>)
 80062be:	f7fe fc99 	bl	8004bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062c2:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <prvInitialiseTaskLists+0x78>)
 80062c4:	4a05      	ldr	r2, [pc, #20]	@ (80062dc <prvInitialiseTaskLists+0x64>)
 80062c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062c8:	4b0a      	ldr	r3, [pc, #40]	@ (80062f4 <prvInitialiseTaskLists+0x7c>)
 80062ca:	4a05      	ldr	r2, [pc, #20]	@ (80062e0 <prvInitialiseTaskLists+0x68>)
 80062cc:	601a      	str	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20004db4 	.word	0x20004db4
 80062dc:	20005214 	.word	0x20005214
 80062e0:	20005228 	.word	0x20005228
 80062e4:	20005244 	.word	0x20005244
 80062e8:	20005258 	.word	0x20005258
 80062ec:	20005270 	.word	0x20005270
 80062f0:	2000523c 	.word	0x2000523c
 80062f4:	20005240 	.word	0x20005240

080062f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062fe:	e019      	b.n	8006334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006300:	f000 fde2 	bl	8006ec8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006304:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <prvCheckTasksWaitingTermination+0x50>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fcf9 	bl	8004d08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <prvCheckTasksWaitingTermination+0x54>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3b01      	subs	r3, #1
 800631c:	4a0b      	ldr	r2, [pc, #44]	@ (800634c <prvCheckTasksWaitingTermination+0x54>)
 800631e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <prvCheckTasksWaitingTermination+0x58>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3b01      	subs	r3, #1
 8006326:	4a0a      	ldr	r2, [pc, #40]	@ (8006350 <prvCheckTasksWaitingTermination+0x58>)
 8006328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800632a:	f000 fdff 	bl	8006f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f810 	bl	8006354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006334:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <prvCheckTasksWaitingTermination+0x58>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e1      	bne.n	8006300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20005258 	.word	0x20005258
 800634c:	20005284 	.word	0x20005284
 8006350:	2000526c 	.word	0x2000526c

08006354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006362:	2b00      	cmp	r3, #0
 8006364:	d108      	bne.n	8006378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636a:	4618      	mov	r0, r3
 800636c:	f000 ff9c 	bl	80072a8 <vPortFree>
				vPortFree( pxTCB );
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ff99 	bl	80072a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006376:	e019      	b.n	80063ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800637e:	2b01      	cmp	r3, #1
 8006380:	d103      	bne.n	800638a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 ff90 	bl	80072a8 <vPortFree>
	}
 8006388:	e010      	b.n	80063ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006390:	2b02      	cmp	r3, #2
 8006392:	d00b      	beq.n	80063ac <prvDeleteTCB+0x58>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	60fb      	str	r3, [r7, #12]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <prvDeleteTCB+0x54>
	}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ba:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <prvResetNextTaskUnblockTime+0x38>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <prvResetNextTaskUnblockTime+0x3c>)
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063cc:	e008      	b.n	80063e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <prvResetNextTaskUnblockTime+0x38>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <prvResetNextTaskUnblockTime+0x3c>)
 80063de:	6013      	str	r3, [r2, #0]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000523c 	.word	0x2000523c
 80063f0:	200052a4 	.word	0x200052a4

080063f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <xTaskGetSchedulerState+0x34>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006402:	2301      	movs	r3, #1
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	e008      	b.n	800641a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006408:	4b08      	ldr	r3, [pc, #32]	@ (800642c <xTaskGetSchedulerState+0x38>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006410:	2302      	movs	r3, #2
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e001      	b.n	800641a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800641a:	687b      	ldr	r3, [r7, #4]
	}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20005290 	.word	0x20005290
 800642c:	200052ac 	.word	0x200052ac

08006430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d058      	beq.n	80064f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006446:	4b2f      	ldr	r3, [pc, #188]	@ (8006504 <xTaskPriorityDisinherit+0xd4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d00b      	beq.n	8006468 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60bb      	str	r3, [r7, #8]
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	429a      	cmp	r2, r3
 800649c:	d02c      	beq.n	80064f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d128      	bne.n	80064f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fc2c 	bl	8004d08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <xTaskPriorityDisinherit+0xd8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d903      	bls.n	80064d8 <xTaskPriorityDisinherit+0xa8>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <xTaskPriorityDisinherit+0xd8>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4a09      	ldr	r2, [pc, #36]	@ (800650c <xTaskPriorityDisinherit+0xdc>)
 80064e6:	441a      	add	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f7fe fbad 	bl	8004c4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064f8:	697b      	ldr	r3, [r7, #20]
	}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20004db0 	.word	0x20004db0
 8006508:	2000528c 	.word	0x2000528c
 800650c:	20004db4 	.word	0x20004db4

08006510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800651a:	4b21      	ldr	r3, [pc, #132]	@ (80065a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006520:	4b20      	ldr	r3, [pc, #128]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3304      	adds	r3, #4
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fbee 	bl	8004d08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006532:	d10a      	bne.n	800654a <prvAddCurrentTaskToDelayedList+0x3a>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653a:	4b1a      	ldr	r3, [pc, #104]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4819      	ldr	r0, [pc, #100]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006544:	f7fe fb83 	bl	8004c4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006548:	e026      	b.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006552:	4b14      	ldr	r3, [pc, #80]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d209      	bcs.n	8006576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fe fb91 	bl	8004c96 <vListInsert>
}
 8006574:	e010      	b.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe fb87 	bl	8004c96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006588:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d202      	bcs.n	8006598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006592:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6013      	str	r3, [r2, #0]
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20005288 	.word	0x20005288
 80065a4:	20004db0 	.word	0x20004db0
 80065a8:	20005270 	.word	0x20005270
 80065ac:	20005240 	.word	0x20005240
 80065b0:	2000523c 	.word	0x2000523c
 80065b4:	200052a4 	.word	0x200052a4

080065b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	@ 0x28
 80065bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065c2:	f000 fb13 	bl	8006bec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065c6:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <xTimerCreateTimerTask+0x84>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d021      	beq.n	8006612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065d6:	1d3a      	adds	r2, r7, #4
 80065d8:	f107 0108 	add.w	r1, r7, #8
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe faed 	bl	8004bc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	9202      	str	r2, [sp, #8]
 80065ee:	9301      	str	r3, [sp, #4]
 80065f0:	2302      	movs	r3, #2
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	460a      	mov	r2, r1
 80065f8:	4911      	ldr	r1, [pc, #68]	@ (8006640 <xTimerCreateTimerTask+0x88>)
 80065fa:	4812      	ldr	r0, [pc, #72]	@ (8006644 <xTimerCreateTimerTask+0x8c>)
 80065fc:	f7ff f8a8 	bl	8005750 <xTaskCreateStatic>
 8006600:	4603      	mov	r3, r0
 8006602:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <xTimerCreateTimerTask+0x90>)
 8006604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <xTimerCreateTimerTask+0x90>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	613b      	str	r3, [r7, #16]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006630:	697b      	ldr	r3, [r7, #20]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	200052e0 	.word	0x200052e0
 8006640:	08014af4 	.word	0x08014af4
 8006644:	08006785 	.word	0x08006785
 8006648:	200052e4 	.word	0x200052e4

0800664c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xTimerGenericCommand+0x30>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	623b      	str	r3, [r7, #32]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800667c:	4b19      	ldr	r3, [pc, #100]	@ (80066e4 <xTimerGenericCommand+0x98>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02a      	beq.n	80066da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b05      	cmp	r3, #5
 8006694:	dc18      	bgt.n	80066c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006696:	f7ff fead 	bl	80063f4 <xTaskGetSchedulerState>
 800669a:	4603      	mov	r3, r0
 800669c:	2b02      	cmp	r3, #2
 800669e:	d109      	bne.n	80066b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066a0:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	f107 0110 	add.w	r1, r7, #16
 80066a8:	2300      	movs	r3, #0
 80066aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ac:	f7fe fc60 	bl	8004f70 <xQueueGenericSend>
 80066b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80066b2:	e012      	b.n	80066da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066b4:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f107 0110 	add.w	r1, r7, #16
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	f7fe fc56 	bl	8004f70 <xQueueGenericSend>
 80066c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80066c6:	e008      	b.n	80066da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066c8:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <xTimerGenericCommand+0x98>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	f107 0110 	add.w	r1, r7, #16
 80066d0:	2300      	movs	r3, #0
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	f7fe fd4e 	bl	8005174 <xQueueGenericSendFromISR>
 80066d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3728      	adds	r7, #40	@ 0x28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	200052e0 	.word	0x200052e0

080066e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b23      	ldr	r3, [pc, #140]	@ (8006780 <prvProcessExpiredTimer+0x98>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fb01 	bl	8004d08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d023      	beq.n	800675c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	18d1      	adds	r1, r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	6978      	ldr	r0, [r7, #20]
 8006722:	f000 f8d5 	bl	80068d0 <prvInsertTimerInActiveList>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800672c:	2300      	movs	r3, #0
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2300      	movs	r3, #0
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	2100      	movs	r1, #0
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	f7ff ff88 	bl	800664c <xTimerGenericCommand>
 800673c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d114      	bne.n	800676e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	60fb      	str	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	4798      	blx	r3
}
 8006776:	bf00      	nop
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200052d8 	.word	0x200052d8

08006784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f859 	bl	8006848 <prvGetNextExpireTime>
 8006796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f805 	bl	80067ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067a2:	f000 f8d7 	bl	8006954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a6:	bf00      	nop
 80067a8:	e7f0      	b.n	800678c <prvTimerTask+0x8>
	...

080067ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067b6:	f7ff fa0f 	bl	8005bd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f866 	bl	8006890 <prvSampleTimeNow>
 80067c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d130      	bne.n	800682e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <prvProcessTimerOrBlockTask+0x3c>
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d806      	bhi.n	80067e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067da:	f7ff fa0b 	bl	8005bf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff81 	bl	80066e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067e6:	e024      	b.n	8006832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ee:	4b13      	ldr	r3, [pc, #76]	@ (800683c <prvProcessTimerOrBlockTask+0x90>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <prvProcessTimerOrBlockTask+0x50>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <prvProcessTimerOrBlockTask+0x52>
 80067fc:	2300      	movs	r3, #0
 80067fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <prvProcessTimerOrBlockTask+0x94>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4619      	mov	r1, r3
 800680e:	f7fe ff6b 	bl	80056e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006812:	f7ff f9ef 	bl	8005bf4 <xTaskResumeAll>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <prvProcessTimerOrBlockTask+0x98>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
}
 800682c:	e001      	b.n	8006832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800682e:	f7ff f9e1 	bl	8005bf4 <xTaskResumeAll>
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	200052dc 	.word	0x200052dc
 8006840:	200052e0 	.word	0x200052e0
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006850:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <prvGetNextExpireTime+0x44>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <prvGetNextExpireTime+0x16>
 800685a:	2201      	movs	r2, #1
 800685c:	e000      	b.n	8006860 <prvGetNextExpireTime+0x18>
 800685e:	2200      	movs	r2, #0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <prvGetNextExpireTime+0x44>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e001      	b.n	800687c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	200052d8 	.word	0x200052d8

08006890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006898:	f7ff fa4a 	bl	8005d30 <xTaskGetTickCount>
 800689c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <prvSampleTimeNow+0x3c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d205      	bcs.n	80068b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068a8:	f000 f93a 	bl	8006b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e002      	b.n	80068ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068ba:	4a04      	ldr	r2, [pc, #16]	@ (80068cc <prvSampleTimeNow+0x3c>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200052e8 	.word	0x200052e8

080068d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d812      	bhi.n	800691c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	d302      	bcc.n	800690a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e01b      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800690a:	4b10      	ldr	r3, [pc, #64]	@ (800694c <prvInsertTimerInActiveList+0x7c>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7fe f9be 	bl	8004c96 <vListInsert>
 800691a:	e012      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d206      	bcs.n	8006932 <prvInsertTimerInActiveList+0x62>
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e007      	b.n	8006942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006932:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <prvInsertTimerInActiveList+0x80>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3304      	adds	r3, #4
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f7fe f9aa 	bl	8004c96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006942:	697b      	ldr	r3, [r7, #20]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	200052dc 	.word	0x200052dc
 8006950:	200052d8 	.word	0x200052d8

08006954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	@ 0x38
 8006958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800695a:	e0ce      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	da19      	bge.n	8006996 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	3304      	adds	r3, #4
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800698c:	6850      	ldr	r0, [r2, #4]
 800698e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006990:	6892      	ldr	r2, [r2, #8]
 8006992:	4611      	mov	r1, r2
 8006994:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f2c0 80ae 	blt.w	8006afa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	3304      	adds	r3, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f9aa 	bl	8004d08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b4:	463b      	mov	r3, r7
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ff6a 	bl	8006890 <prvSampleTimeNow>
 80069bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	f200 8097 	bhi.w	8006af4 <prvProcessReceivedCommands+0x1a0>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <prvProcessReceivedCommands+0x78>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	08006a6b 	.word	0x08006a6b
 80069dc:	08006a7f 	.word	0x08006a7f
 80069e0:	08006acb 	.word	0x08006acb
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	080069f5 	.word	0x080069f5
 80069ec:	08006a6b 	.word	0x08006a6b
 80069f0:	08006a7f 	.word	0x08006a7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	18d1      	adds	r1, r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a14:	f7ff ff5c 	bl	80068d0 <prvInsertTimerInActiveList>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d06c      	beq.n	8006af8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d061      	beq.n	8006af8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a46:	f7ff fe01 	bl	800664c <xTimerGenericCommand>
 8006a4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d152      	bne.n	8006af8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61bb      	str	r3, [r7, #24]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a7c:	e03d      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	18d1      	adds	r1, r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac4:	f7ff ff04 	bl	80068d0 <prvInsertTimerInActiveList>
					break;
 8006ac8:	e017      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ada:	f000 fbe5 	bl	80072a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ade:	e00c      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006af2:	e002      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <prvProcessReceivedCommands+0x1a6>
					break;
 8006af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006afa:	4b08      	ldr	r3, [pc, #32]	@ (8006b1c <prvProcessReceivedCommands+0x1c8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1d39      	adds	r1, r7, #4
 8006b00:	2200      	movs	r2, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fbd4 	bl	80052b0 <xQueueReceive>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f47f af26 	bne.w	800695c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3730      	adds	r7, #48	@ 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200052e0 	.word	0x200052e0

08006b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b26:	e049      	b.n	8006bbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b28:	4b2e      	ldr	r3, [pc, #184]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b32:	4b2c      	ldr	r3, [pc, #176]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe f8e1 	bl	8004d08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02f      	beq.n	8006bbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90e      	bls.n	8006b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fe f886 	bl	8004c96 <vListInsert>
 8006b8a:	e017      	b.n	8006bbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	2100      	movs	r1, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fd58 	bl	800664c <xTimerGenericCommand>
 8006b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bbc:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1b0      	bne.n	8006b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bc6:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <prvSwitchTimerLists+0xc8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a04      	ldr	r2, [pc, #16]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bd4:	4a04      	ldr	r2, [pc, #16]	@ (8006be8 <prvSwitchTimerLists+0xc8>)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	6013      	str	r3, [r2, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	200052d8 	.word	0x200052d8
 8006be8:	200052dc 	.word	0x200052dc

08006bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bf2:	f000 f969 	bl	8006ec8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bf6:	4b15      	ldr	r3, [pc, #84]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d120      	bne.n	8006c40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bfe:	4814      	ldr	r0, [pc, #80]	@ (8006c50 <prvCheckForValidListAndQueue+0x64>)
 8006c00:	f7fd fff8 	bl	8004bf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c04:	4813      	ldr	r0, [pc, #76]	@ (8006c54 <prvCheckForValidListAndQueue+0x68>)
 8006c06:	f7fd fff5 	bl	8004bf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c0a:	4b13      	ldr	r3, [pc, #76]	@ (8006c58 <prvCheckForValidListAndQueue+0x6c>)
 8006c0c:	4a10      	ldr	r2, [pc, #64]	@ (8006c50 <prvCheckForValidListAndQueue+0x64>)
 8006c0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <prvCheckForValidListAndQueue+0x70>)
 8006c12:	4a10      	ldr	r2, [pc, #64]	@ (8006c54 <prvCheckForValidListAndQueue+0x68>)
 8006c14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <prvCheckForValidListAndQueue+0x74>)
 8006c1c:	4a11      	ldr	r2, [pc, #68]	@ (8006c64 <prvCheckForValidListAndQueue+0x78>)
 8006c1e:	2110      	movs	r1, #16
 8006c20:	200a      	movs	r0, #10
 8006c22:	f7fe f905 	bl	8004e30 <xQueueGenericCreateStatic>
 8006c26:	4603      	mov	r3, r0
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c34:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <prvCheckForValidListAndQueue+0x60>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	490b      	ldr	r1, [pc, #44]	@ (8006c68 <prvCheckForValidListAndQueue+0x7c>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fd2a 	bl	8005694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c40:	f000 f974 	bl	8006f2c <vPortExitCritical>
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200052e0 	.word	0x200052e0
 8006c50:	200052b0 	.word	0x200052b0
 8006c54:	200052c4 	.word	0x200052c4
 8006c58:	200052d8 	.word	0x200052d8
 8006c5c:	200052dc 	.word	0x200052dc
 8006c60:	2000538c 	.word	0x2000538c
 8006c64:	200052ec 	.word	0x200052ec
 8006c68:	08014afc 	.word	0x08014afc

08006c6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3b04      	subs	r3, #4
 8006c7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd0 <pxPortInitialiseStack+0x64>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3b14      	subs	r3, #20
 8006ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f06f 0202 	mvn.w	r2, #2
 8006cba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3b20      	subs	r3, #32
 8006cc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	08006cd5 	.word	0x08006cd5

08006cd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cde:	4b13      	ldr	r3, [pc, #76]	@ (8006d2c <prvTaskExitError+0x58>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ce6:	d00b      	beq.n	8006d00 <prvTaskExitError+0x2c>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	60fb      	str	r3, [r7, #12]
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	e7fd      	b.n	8006cfc <prvTaskExitError+0x28>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60bb      	str	r3, [r7, #8]
}
 8006d12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d14:	bf00      	nop
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0fc      	beq.n	8006d16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000010 	.word	0x20000010

08006d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d30:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <pxCurrentTCBConst2>)
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	6808      	ldr	r0, [r1, #0]
 8006d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	f380 8809 	msr	PSP, r0
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f380 8811 	msr	BASEPRI, r0
 8006d4a:	4770      	bx	lr
 8006d4c:	f3af 8000 	nop.w

08006d50 <pxCurrentTCBConst2>:
 8006d50:	20004db0 	.word	0x20004db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d58:	4808      	ldr	r0, [pc, #32]	@ (8006d7c <prvPortStartFirstTask+0x24>)
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	6800      	ldr	r0, [r0, #0]
 8006d5e:	f380 8808 	msr	MSP, r0
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8814 	msr	CONTROL, r0
 8006d6a:	b662      	cpsie	i
 8006d6c:	b661      	cpsie	f
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	df00      	svc	0
 8006d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d7a:	bf00      	nop
 8006d7c:	e000ed08 	.word	0xe000ed08

08006d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d86:	4b47      	ldr	r3, [pc, #284]	@ (8006ea4 <xPortStartScheduler+0x124>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a47      	ldr	r2, [pc, #284]	@ (8006ea8 <xPortStartScheduler+0x128>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10b      	bne.n	8006da8 <xPortStartScheduler+0x28>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	613b      	str	r3, [r7, #16]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006da8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea4 <xPortStartScheduler+0x124>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a3f      	ldr	r2, [pc, #252]	@ (8006eac <xPortStartScheduler+0x12c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10b      	bne.n	8006dca <xPortStartScheduler+0x4a>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	60fb      	str	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dca:	4b39      	ldr	r3, [pc, #228]	@ (8006eb0 <xPortStartScheduler+0x130>)
 8006dcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	22ff      	movs	r2, #255	@ 0xff
 8006dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <xPortStartScheduler+0x134>)
 8006df0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006df2:	4b31      	ldr	r3, [pc, #196]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006df4:	2207      	movs	r2, #7
 8006df6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006df8:	e009      	b.n	8006e0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e16:	2b80      	cmp	r3, #128	@ 0x80
 8006e18:	d0ef      	beq.n	8006dfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e1a:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1c3 0307 	rsb	r3, r3, #7
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d00b      	beq.n	8006e3e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60bb      	str	r3, [r7, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e48:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e50:	4a19      	ldr	r2, [pc, #100]	@ (8006eb8 <xPortStartScheduler+0x138>)
 8006e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e5c:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <xPortStartScheduler+0x13c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a16      	ldr	r2, [pc, #88]	@ (8006ebc <xPortStartScheduler+0x13c>)
 8006e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e68:	4b14      	ldr	r3, [pc, #80]	@ (8006ebc <xPortStartScheduler+0x13c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <xPortStartScheduler+0x13c>)
 8006e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e74:	f000 f8da 	bl	800702c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e78:	4b11      	ldr	r3, [pc, #68]	@ (8006ec0 <xPortStartScheduler+0x140>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e7e:	f000 f8f9 	bl	8007074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e82:	4b10      	ldr	r3, [pc, #64]	@ (8006ec4 <xPortStartScheduler+0x144>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec4 <xPortStartScheduler+0x144>)
 8006e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e8e:	f7ff ff63 	bl	8006d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e92:	f7ff f817 	bl	8005ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8006e96:	f7ff ff1d 	bl	8006cd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	e000ed00 	.word	0xe000ed00
 8006ea8:	410fc271 	.word	0x410fc271
 8006eac:	410fc270 	.word	0x410fc270
 8006eb0:	e000e400 	.word	0xe000e400
 8006eb4:	200053dc 	.word	0x200053dc
 8006eb8:	200053e0 	.word	0x200053e0
 8006ebc:	e000ed20 	.word	0xe000ed20
 8006ec0:	20000010 	.word	0x20000010
 8006ec4:	e000ef34 	.word	0xe000ef34

08006ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <vPortEnterCritical+0x5c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8006f24 <vPortEnterCritical+0x5c>)
 8006eea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006eec:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <vPortEnterCritical+0x5c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d110      	bne.n	8006f16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <vPortEnterCritical+0x60>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <vPortEnterCritical+0x4e>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	603b      	str	r3, [r7, #0]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <vPortEnterCritical+0x4a>
	}
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000010 	.word	0x20000010
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <vPortExitCritical+0x50>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <vPortExitCritical+0x26>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <vPortExitCritical+0x50>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	4a08      	ldr	r2, [pc, #32]	@ (8006f7c <vPortExitCritical+0x50>)
 8006f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f5c:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <vPortExitCritical+0x50>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <vPortExitCritical+0x44>
 8006f64:	2300      	movs	r3, #0
 8006f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f383 8811 	msr	BASEPRI, r3
}
 8006f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000010 	.word	0x20000010

08006f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f80:	f3ef 8009 	mrs	r0, PSP
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <pxCurrentTCBConst>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	f01e 0f10 	tst.w	lr, #16
 8006f90:	bf08      	it	eq
 8006f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fa4:	f380 8811 	msr	BASEPRI, r0
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f7fe ff88 	bl	8005ec4 <vTaskSwitchContext>
 8006fb4:	f04f 0000 	mov.w	r0, #0
 8006fb8:	f380 8811 	msr	BASEPRI, r0
 8006fbc:	bc09      	pop	{r0, r3}
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	6808      	ldr	r0, [r1, #0]
 8006fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc6:	f01e 0f10 	tst.w	lr, #16
 8006fca:	bf08      	it	eq
 8006fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fd0:	f380 8809 	msr	PSP, r0
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst>:
 8006fe0:	20004db0 	.word	0x20004db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007002:	f7fe fea5 	bl	8005d50 <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800700c:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <xPortSysTickHandler+0x40>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f383 8811 	msr	BASEPRI, r3
}
 800701e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007030:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <vPortSetupTimerInterrupt+0x34>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007036:	4b0b      	ldr	r3, [pc, #44]	@ (8007064 <vPortSetupTimerInterrupt+0x38>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800703c:	4b0a      	ldr	r3, [pc, #40]	@ (8007068 <vPortSetupTimerInterrupt+0x3c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0a      	ldr	r2, [pc, #40]	@ (800706c <vPortSetupTimerInterrupt+0x40>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	099b      	lsrs	r3, r3, #6
 8007048:	4a09      	ldr	r2, [pc, #36]	@ (8007070 <vPortSetupTimerInterrupt+0x44>)
 800704a:	3b01      	subs	r3, #1
 800704c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800704e:	4b04      	ldr	r3, [pc, #16]	@ (8007060 <vPortSetupTimerInterrupt+0x34>)
 8007050:	2207      	movs	r2, #7
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	e000e010 	.word	0xe000e010
 8007064:	e000e018 	.word	0xe000e018
 8007068:	20000004 	.word	0x20000004
 800706c:	10624dd3 	.word	0x10624dd3
 8007070:	e000e014 	.word	0xe000e014

08007074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007084 <vPortEnableVFP+0x10>
 8007078:	6801      	ldr	r1, [r0, #0]
 800707a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800707e:	6001      	str	r1, [r0, #0]
 8007080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007082:	bf00      	nop
 8007084:	e000ed88 	.word	0xe000ed88

08007088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b0f      	cmp	r3, #15
 8007098:	d915      	bls.n	80070c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800709a:	4a18      	ldr	r2, [pc, #96]	@ (80070fc <vPortValidateInterruptPriority+0x74>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070a4:	4b16      	ldr	r3, [pc, #88]	@ (8007100 <vPortValidateInterruptPriority+0x78>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	7afa      	ldrb	r2, [r7, #11]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d20b      	bcs.n	80070c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <vPortValidateInterruptPriority+0x7c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007108 <vPortValidateInterruptPriority+0x80>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d90b      	bls.n	80070ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	603b      	str	r3, [r7, #0]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <vPortValidateInterruptPriority+0x62>
	}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	e000e3f0 	.word	0xe000e3f0
 8007100:	200053dc 	.word	0x200053dc
 8007104:	e000ed0c 	.word	0xe000ed0c
 8007108:	200053e0 	.word	0x200053e0

0800710c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	@ 0x28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007118:	f7fe fd5e 	bl	8005bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800711c:	4b5c      	ldr	r3, [pc, #368]	@ (8007290 <pvPortMalloc+0x184>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007124:	f000 f924 	bl	8007370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007128:	4b5a      	ldr	r3, [pc, #360]	@ (8007294 <pvPortMalloc+0x188>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8095 	bne.w	8007260 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01e      	beq.n	800717a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800713c:	2208      	movs	r2, #8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	2b00      	cmp	r3, #0
 800714c:	d015      	beq.n	800717a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f023 0307 	bic.w	r3, r3, #7
 8007154:	3308      	adds	r3, #8
 8007156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <pvPortMalloc+0x6e>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	617b      	str	r3, [r7, #20]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d06f      	beq.n	8007260 <pvPortMalloc+0x154>
 8007180:	4b45      	ldr	r3, [pc, #276]	@ (8007298 <pvPortMalloc+0x18c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d86a      	bhi.n	8007260 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800718a:	4b44      	ldr	r3, [pc, #272]	@ (800729c <pvPortMalloc+0x190>)
 800718c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800718e:	4b43      	ldr	r3, [pc, #268]	@ (800729c <pvPortMalloc+0x190>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007194:	e004      	b.n	80071a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d903      	bls.n	80071b2 <pvPortMalloc+0xa6>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f1      	bne.n	8007196 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071b2:	4b37      	ldr	r3, [pc, #220]	@ (8007290 <pvPortMalloc+0x184>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d051      	beq.n	8007260 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2208      	movs	r2, #8
 80071c2:	4413      	add	r3, r2
 80071c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	1ad2      	subs	r2, r2, r3
 80071d6:	2308      	movs	r3, #8
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	429a      	cmp	r2, r3
 80071dc:	d920      	bls.n	8007220 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <pvPortMalloc+0xfc>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	613b      	str	r3, [r7, #16]
}
 8007202:	bf00      	nop
 8007204:	bf00      	nop
 8007206:	e7fd      	b.n	8007204 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800721a:	69b8      	ldr	r0, [r7, #24]
 800721c:	f000 f90a 	bl	8007434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007220:	4b1d      	ldr	r3, [pc, #116]	@ (8007298 <pvPortMalloc+0x18c>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	4a1b      	ldr	r2, [pc, #108]	@ (8007298 <pvPortMalloc+0x18c>)
 800722c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800722e:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <pvPortMalloc+0x18c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b1b      	ldr	r3, [pc, #108]	@ (80072a0 <pvPortMalloc+0x194>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d203      	bcs.n	8007242 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800723a:	4b17      	ldr	r3, [pc, #92]	@ (8007298 <pvPortMalloc+0x18c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a18      	ldr	r2, [pc, #96]	@ (80072a0 <pvPortMalloc+0x194>)
 8007240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4b13      	ldr	r3, [pc, #76]	@ (8007294 <pvPortMalloc+0x188>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	431a      	orrs	r2, r3
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007256:	4b13      	ldr	r3, [pc, #76]	@ (80072a4 <pvPortMalloc+0x198>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	4a11      	ldr	r2, [pc, #68]	@ (80072a4 <pvPortMalloc+0x198>)
 800725e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007260:	f7fe fcc8 	bl	8005bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <pvPortMalloc+0x17a>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	e7fd      	b.n	8007282 <pvPortMalloc+0x176>
	return pvReturn;
 8007286:	69fb      	ldr	r3, [r7, #28]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	@ 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20008fec 	.word	0x20008fec
 8007294:	20009000 	.word	0x20009000
 8007298:	20008ff0 	.word	0x20008ff0
 800729c:	20008fe4 	.word	0x20008fe4
 80072a0:	20008ff4 	.word	0x20008ff4
 80072a4:	20008ff8 	.word	0x20008ff8

080072a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d04f      	beq.n	800735a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072ba:	2308      	movs	r3, #8
 80072bc:	425b      	negs	r3, r3
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b25      	ldr	r3, [pc, #148]	@ (8007364 <vPortFree+0xbc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10b      	bne.n	80072ee <vPortFree+0x46>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60fb      	str	r3, [r7, #12]
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	e7fd      	b.n	80072ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <vPortFree+0x66>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60bb      	str	r3, [r7, #8]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <vPortFree+0xbc>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4013      	ands	r3, r2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01e      	beq.n	800735a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11a      	bne.n	800735a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	4b0e      	ldr	r3, [pc, #56]	@ (8007364 <vPortFree+0xbc>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	43db      	mvns	r3, r3
 800732e:	401a      	ands	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007334:	f7fe fc50 	bl	8005bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	4b0a      	ldr	r3, [pc, #40]	@ (8007368 <vPortFree+0xc0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4413      	add	r3, r2
 8007342:	4a09      	ldr	r2, [pc, #36]	@ (8007368 <vPortFree+0xc0>)
 8007344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007346:	6938      	ldr	r0, [r7, #16]
 8007348:	f000 f874 	bl	8007434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800734c:	4b07      	ldr	r3, [pc, #28]	@ (800736c <vPortFree+0xc4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	4a06      	ldr	r2, [pc, #24]	@ (800736c <vPortFree+0xc4>)
 8007354:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007356:	f7fe fc4d 	bl	8005bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20009000 	.word	0x20009000
 8007368:	20008ff0 	.word	0x20008ff0
 800736c:	20008ffc 	.word	0x20008ffc

08007370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007376:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800737a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800737c:	4b27      	ldr	r3, [pc, #156]	@ (800741c <prvHeapInit+0xac>)
 800737e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3307      	adds	r3, #7
 800738e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	4a1f      	ldr	r2, [pc, #124]	@ (800741c <prvHeapInit+0xac>)
 80073a0:	4413      	add	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <prvHeapInit+0xb0>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007420 <prvHeapInit+0xb0>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073bc:	2208      	movs	r2, #8
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <prvHeapInit+0xb4>)
 80073d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073d2:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <prvHeapInit+0xb4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073da:	4b12      	ldr	r3, [pc, #72]	@ (8007424 <prvHeapInit+0xb4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <prvHeapInit+0xb4>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007428 <prvHeapInit+0xb8>)
 80073fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a09      	ldr	r2, [pc, #36]	@ (800742c <prvHeapInit+0xbc>)
 8007406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007408:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <prvHeapInit+0xc0>)
 800740a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800740e:	601a      	str	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200053e4 	.word	0x200053e4
 8007420:	20008fe4 	.word	0x20008fe4
 8007424:	20008fec 	.word	0x20008fec
 8007428:	20008ff4 	.word	0x20008ff4
 800742c:	20008ff0 	.word	0x20008ff0
 8007430:	20009000 	.word	0x20009000

08007434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800743c:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <prvInsertBlockIntoFreeList+0xac>)
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <prvInsertBlockIntoFreeList+0x14>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d8f7      	bhi.n	8007442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d108      	bne.n	8007476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	441a      	add	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d118      	bne.n	80074bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d00d      	beq.n	80074b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	441a      	add	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e008      	b.n	80074c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <prvInsertBlockIntoFreeList+0xb0>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e003      	b.n	80074c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d002      	beq.n	80074d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20008fe4 	.word	0x20008fe4
 80074e4:	20008fec 	.word	0x20008fec

080074e8 <rcl_get_zero_initialized_publisher>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	@ (80074f0 <rcl_get_zero_initialized_publisher+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	08014b64 	.word	0x08014b64

080074f4 <rcl_publisher_init>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	b088      	sub	sp, #32
 80074fa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	d069      	beq.n	80075d4 <rcl_publisher_init+0xe0>
 8007500:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8007504:	4604      	mov	r4, r0
 8007506:	4648      	mov	r0, r9
 8007508:	460e      	mov	r6, r1
 800750a:	4690      	mov	r8, r2
 800750c:	461f      	mov	r7, r3
 800750e:	f000 ffd3 	bl	80084b8 <rcutils_allocator_is_valid>
 8007512:	2800      	cmp	r0, #0
 8007514:	d05e      	beq.n	80075d4 <rcl_publisher_init+0xe0>
 8007516:	2c00      	cmp	r4, #0
 8007518:	d05c      	beq.n	80075d4 <rcl_publisher_init+0xe0>
 800751a:	f8d4 a000 	ldr.w	sl, [r4]
 800751e:	f1ba 0f00 	cmp.w	sl, #0
 8007522:	d004      	beq.n	800752e <rcl_publisher_init+0x3a>
 8007524:	2764      	movs	r7, #100	@ 0x64
 8007526:	4638      	mov	r0, r7
 8007528:	b008      	add	sp, #32
 800752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752e:	4630      	mov	r0, r6
 8007530:	f005 ff9c 	bl	800d46c <rcl_node_is_valid>
 8007534:	2800      	cmp	r0, #0
 8007536:	d052      	beq.n	80075de <rcl_publisher_init+0xea>
 8007538:	f1b8 0f00 	cmp.w	r8, #0
 800753c:	d04a      	beq.n	80075d4 <rcl_publisher_init+0xe0>
 800753e:	2f00      	cmp	r7, #0
 8007540:	d048      	beq.n	80075d4 <rcl_publisher_init+0xe0>
 8007542:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8007546:	aa07      	add	r2, sp, #28
 8007548:	9205      	str	r2, [sp, #20]
 800754a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800754e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007552:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007556:	f8cd a01c 	str.w	sl, [sp, #28]
 800755a:	4639      	mov	r1, r7
 800755c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007560:	4630      	mov	r0, r6
 8007562:	f005 ffd7 	bl	800d514 <rcl_node_resolve_name>
 8007566:	4607      	mov	r7, r0
 8007568:	2800      	cmp	r0, #0
 800756a:	d14f      	bne.n	800760c <rcl_publisher_init+0x118>
 800756c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800756e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8007570:	20c8      	movs	r0, #200	@ 0xc8
 8007572:	4798      	blx	r3
 8007574:	6020      	str	r0, [r4, #0]
 8007576:	2800      	cmp	r0, #0
 8007578:	d04e      	beq.n	8007618 <rcl_publisher_init+0x124>
 800757a:	4630      	mov	r0, r6
 800757c:	f005 ff98 	bl	800d4b0 <rcl_node_get_rmw_handle>
 8007580:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	9a07      	ldr	r2, [sp, #28]
 8007588:	6827      	ldr	r7, [r4, #0]
 800758a:	462b      	mov	r3, r5
 800758c:	4641      	mov	r1, r8
 800758e:	f001 f8a1 	bl	80086d4 <rmw_create_publisher>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8007598:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800759c:	b370      	cbz	r0, 80075fc <rcl_publisher_init+0x108>
 800759e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80075a2:	f001 f975 	bl	8008890 <rmw_publisher_get_actual_qos>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	4607      	mov	r7, r0
 80075aa:	b9d0      	cbnz	r0, 80075e2 <rcl_publisher_init+0xee>
 80075ac:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80075b0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80075b4:	4629      	mov	r1, r5
 80075b6:	2270      	movs	r2, #112	@ 0x70
 80075b8:	4618      	mov	r0, r3
 80075ba:	f00c fb7c 	bl	8013cb6 <memcpy>
 80075be:	6832      	ldr	r2, [r6, #0]
 80075c0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80075c4:	9807      	ldr	r0, [sp, #28]
 80075c6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80075c8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80075ca:	4798      	blx	r3
 80075cc:	4638      	mov	r0, r7
 80075ce:	b008      	add	sp, #32
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	270b      	movs	r7, #11
 80075d6:	4638      	mov	r0, r7
 80075d8:	b008      	add	sp, #32
 80075da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075de:	27c8      	movs	r7, #200	@ 0xc8
 80075e0:	e7a1      	b.n	8007526 <rcl_publisher_init+0x32>
 80075e2:	b18b      	cbz	r3, 8007608 <rcl_publisher_init+0x114>
 80075e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80075e8:	b142      	cbz	r2, 80075fc <rcl_publisher_init+0x108>
 80075ea:	4630      	mov	r0, r6
 80075ec:	f005 ff60 	bl	800d4b0 <rcl_node_get_rmw_handle>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80075f6:	f001 f95b 	bl	80088b0 <rmw_destroy_publisher>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80075fe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8007600:	4618      	mov	r0, r3
 8007602:	4790      	blx	r2
 8007604:	2300      	movs	r3, #0
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	2701      	movs	r7, #1
 800760a:	e7db      	b.n	80075c4 <rcl_publisher_init+0xd0>
 800760c:	2867      	cmp	r0, #103	@ 0x67
 800760e:	d0d9      	beq.n	80075c4 <rcl_publisher_init+0xd0>
 8007610:	2869      	cmp	r0, #105	@ 0x69
 8007612:	d003      	beq.n	800761c <rcl_publisher_init+0x128>
 8007614:	280a      	cmp	r0, #10
 8007616:	d1f7      	bne.n	8007608 <rcl_publisher_init+0x114>
 8007618:	270a      	movs	r7, #10
 800761a:	e7d3      	b.n	80075c4 <rcl_publisher_init+0xd0>
 800761c:	2767      	movs	r7, #103	@ 0x67
 800761e:	e7d1      	b.n	80075c4 <rcl_publisher_init+0xd0>

08007620 <rcl_publisher_get_default_options>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4d14      	ldr	r5, [pc, #80]	@ (8007674 <rcl_publisher_get_default_options+0x54>)
 8007624:	4914      	ldr	r1, [pc, #80]	@ (8007678 <rcl_publisher_get_default_options+0x58>)
 8007626:	b088      	sub	sp, #32
 8007628:	4604      	mov	r4, r0
 800762a:	2250      	movs	r2, #80	@ 0x50
 800762c:	4628      	mov	r0, r5
 800762e:	f00c fb42 	bl	8013cb6 <memcpy>
 8007632:	a802      	add	r0, sp, #8
 8007634:	f000 ff32 	bl	800849c <rcutils_get_default_allocator>
 8007638:	f10d 0c08 	add.w	ip, sp, #8
 800763c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007640:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8007644:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007648:	466e      	mov	r6, sp
 800764a:	f8dc 3000 	ldr.w	r3, [ip]
 800764e:	f8ce 3000 	str.w	r3, [lr]
 8007652:	4630      	mov	r0, r6
 8007654:	f000 ffc0 	bl	80085d8 <rmw_get_default_publisher_options>
 8007658:	e896 0003 	ldmia.w	r6, {r0, r1}
 800765c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8007660:	e883 0003 	stmia.w	r3, {r0, r1}
 8007664:	2270      	movs	r2, #112	@ 0x70
 8007666:	4629      	mov	r1, r5
 8007668:	4620      	mov	r0, r4
 800766a:	f00c fb24 	bl	8013cb6 <memcpy>
 800766e:	4620      	mov	r0, r4
 8007670:	b008      	add	sp, #32
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	20009008 	.word	0x20009008
 8007678:	08014b68 	.word	0x08014b68

0800767c <rcl_publish>:
 800767c:	b1f8      	cbz	r0, 80076be <rcl_publish+0x42>
 800767e:	6803      	ldr	r3, [r0, #0]
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	b1b3      	cbz	r3, 80076b4 <rcl_publish+0x38>
 8007686:	4616      	mov	r6, r2
 8007688:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800768c:	b192      	cbz	r2, 80076b4 <rcl_publish+0x38>
 800768e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8007692:	460d      	mov	r5, r1
 8007694:	f005 fb10 	bl	800ccb8 <rcl_context_is_valid>
 8007698:	b160      	cbz	r0, 80076b4 <rcl_publish+0x38>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80076a0:	b140      	cbz	r0, 80076b4 <rcl_publish+0x38>
 80076a2:	b155      	cbz	r5, 80076ba <rcl_publish+0x3e>
 80076a4:	4632      	mov	r2, r6
 80076a6:	4629      	mov	r1, r5
 80076a8:	f000 ffb4 	bl	8008614 <rmw_publish>
 80076ac:	3800      	subs	r0, #0
 80076ae:	bf18      	it	ne
 80076b0:	2001      	movne	r0, #1
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	200b      	movs	r0, #11
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
 80076be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80076c2:	4770      	bx	lr

080076c4 <rcl_publisher_is_valid>:
 80076c4:	b1a0      	cbz	r0, 80076f0 <rcl_publisher_is_valid+0x2c>
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	b510      	push	{r4, lr}
 80076ca:	4604      	mov	r4, r0
 80076cc:	b173      	cbz	r3, 80076ec <rcl_publisher_is_valid+0x28>
 80076ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80076d2:	b15a      	cbz	r2, 80076ec <rcl_publisher_is_valid+0x28>
 80076d4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80076d8:	f005 faee 	bl	800ccb8 <rcl_context_is_valid>
 80076dc:	b130      	cbz	r0, 80076ec <rcl_publisher_is_valid+0x28>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80076e4:	3800      	subs	r0, #0
 80076e6:	bf18      	it	ne
 80076e8:	2001      	movne	r0, #1
 80076ea:	bd10      	pop	{r4, pc}
 80076ec:	2000      	movs	r0, #0
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	2000      	movs	r0, #0
 80076f2:	4770      	bx	lr

080076f4 <rcl_publisher_is_valid_except_context>:
 80076f4:	b130      	cbz	r0, 8007704 <rcl_publisher_is_valid_except_context+0x10>
 80076f6:	6800      	ldr	r0, [r0, #0]
 80076f8:	b120      	cbz	r0, 8007704 <rcl_publisher_is_valid_except_context+0x10>
 80076fa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80076fe:	3800      	subs	r0, #0
 8007700:	bf18      	it	ne
 8007702:	2001      	movne	r0, #1
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop

08007708 <_rclc_check_for_new_data>:
 8007708:	2800      	cmp	r0, #0
 800770a:	d046      	beq.n	800779a <_rclc_check_for_new_data+0x92>
 800770c:	b510      	push	{r4, lr}
 800770e:	7802      	ldrb	r2, [r0, #0]
 8007710:	b084      	sub	sp, #16
 8007712:	4603      	mov	r3, r0
 8007714:	2a0a      	cmp	r2, #10
 8007716:	d842      	bhi.n	800779e <_rclc_check_for_new_data+0x96>
 8007718:	e8df f002 	tbb	[pc, r2]
 800771c:	14181212 	.word	0x14181212
 8007720:	06060614 	.word	0x06060614
 8007724:	2e1a      	.short	0x2e1a
 8007726:	16          	.byte	0x16
 8007727:	00          	.byte	0x00
 8007728:	6a0a      	ldr	r2, [r1, #32]
 800772a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800772c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007730:	2000      	movs	r0, #0
 8007732:	1a12      	subs	r2, r2, r0
 8007734:	bf18      	it	ne
 8007736:	2201      	movne	r2, #1
 8007738:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800773c:	b004      	add	sp, #16
 800773e:	bd10      	pop	{r4, pc}
 8007740:	680a      	ldr	r2, [r1, #0]
 8007742:	e7f2      	b.n	800772a <_rclc_check_for_new_data+0x22>
 8007744:	698a      	ldr	r2, [r1, #24]
 8007746:	e7f0      	b.n	800772a <_rclc_check_for_new_data+0x22>
 8007748:	688a      	ldr	r2, [r1, #8]
 800774a:	e7ee      	b.n	800772a <_rclc_check_for_new_data+0x22>
 800774c:	690a      	ldr	r2, [r1, #16]
 800774e:	e7ec      	b.n	800772a <_rclc_check_for_new_data+0x22>
 8007750:	685c      	ldr	r4, [r3, #4]
 8007752:	4608      	mov	r0, r1
 8007754:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8007758:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800775c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8007760:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800776a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800776e:	f104 0110 	add.w	r1, r4, #16
 8007772:	f007 fac1 	bl	800ecf8 <rcl_action_client_wait_set_get_entities_ready>
 8007776:	e7e1      	b.n	800773c <_rclc_check_for_new_data+0x34>
 8007778:	685c      	ldr	r4, [r3, #4]
 800777a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800777e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8007782:	e9cd 3200 	strd	r3, r2, [sp]
 8007786:	4608      	mov	r0, r1
 8007788:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800778c:	f104 0220 	add.w	r2, r4, #32
 8007790:	f104 0110 	add.w	r1, r4, #16
 8007794:	f007 fcc8 	bl	800f128 <rcl_action_server_wait_set_get_entities_ready>
 8007798:	e7d0      	b.n	800773c <_rclc_check_for_new_data+0x34>
 800779a:	200b      	movs	r0, #11
 800779c:	4770      	bx	lr
 800779e:	2001      	movs	r0, #1
 80077a0:	e7cc      	b.n	800773c <_rclc_check_for_new_data+0x34>
 80077a2:	bf00      	nop

080077a4 <_rclc_take_new_data>:
 80077a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a6:	b09b      	sub	sp, #108	@ 0x6c
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f000 8088 	beq.w	80078be <_rclc_take_new_data+0x11a>
 80077ae:	7803      	ldrb	r3, [r0, #0]
 80077b0:	4604      	mov	r4, r0
 80077b2:	2b0a      	cmp	r3, #10
 80077b4:	f200 8167 	bhi.w	8007a86 <_rclc_take_new_data+0x2e2>
 80077b8:	e8df f003 	tbb	[pc, r3]
 80077bc:	44152d2d 	.word	0x44152d2d
 80077c0:	19191944 	.word	0x19191944
 80077c4:	065a      	.short	0x065a
 80077c6:	15          	.byte	0x15
 80077c7:	00          	.byte	0x00
 80077c8:	6840      	ldr	r0, [r0, #4]
 80077ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 80b2 	bne.w	8007938 <_rclc_take_new_data+0x194>
 80077d4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 80e4 	bne.w	80079a6 <_rclc_take_new_data+0x202>
 80077de:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d16f      	bne.n	80078c6 <_rclc_take_new_data+0x122>
 80077e6:	2500      	movs	r5, #0
 80077e8:	4628      	mov	r0, r5
 80077ea:	b01b      	add	sp, #108	@ 0x6c
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80077f0:	6a0b      	ldr	r3, [r1, #32]
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f5      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 80077fa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80077fe:	f104 0110 	add.w	r1, r4, #16
 8007802:	f006 f831 	bl	800d868 <rcl_take_request>
 8007806:	4605      	mov	r5, r0
 8007808:	2800      	cmp	r0, #0
 800780a:	d0ec      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 800780c:	f240 2359 	movw	r3, #601	@ 0x259
 8007810:	4298      	cmp	r0, r3
 8007812:	d013      	beq.n	800783c <_rclc_take_new_data+0x98>
 8007814:	e029      	b.n	800786a <_rclc_take_new_data+0xc6>
 8007816:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007818:	680b      	ldr	r3, [r1, #0]
 800781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0e1      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 8007822:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007826:	2300      	movs	r3, #0
 8007828:	aa0a      	add	r2, sp, #40	@ 0x28
 800782a:	f006 f87f 	bl	800d92c <rcl_take>
 800782e:	4605      	mov	r5, r0
 8007830:	2800      	cmp	r0, #0
 8007832:	d0d9      	beq.n	80077e8 <_rclc_take_new_data+0x44>
 8007834:	f240 1391 	movw	r3, #401	@ 0x191
 8007838:	4298      	cmp	r0, r3
 800783a:	d116      	bne.n	800786a <_rclc_take_new_data+0xc6>
 800783c:	2300      	movs	r3, #0
 800783e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8007842:	e7d1      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007844:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007846:	698b      	ldr	r3, [r1, #24]
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ca      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 8007850:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8007854:	f104 0110 	add.w	r1, r4, #16
 8007858:	f005 f9be 	bl	800cbd8 <rcl_take_response>
 800785c:	4605      	mov	r5, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	d0c1      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 8007862:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8007866:	4298      	cmp	r0, r3
 8007868:	d0be      	beq.n	80077e8 <_rclc_take_new_data+0x44>
 800786a:	f000 fe49 	bl	8008500 <rcutils_reset_error>
 800786e:	e7bb      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007870:	6840      	ldr	r0, [r0, #4]
 8007872:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007876:	2b00      	cmp	r3, #0
 8007878:	d17d      	bne.n	8007976 <_rclc_take_new_data+0x1d2>
 800787a:	69c3      	ldr	r3, [r0, #28]
 800787c:	b11b      	cbz	r3, 8007886 <_rclc_take_new_data+0xe2>
 800787e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d144      	bne.n	8007910 <_rclc_take_new_data+0x16c>
 8007886:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 80ac 	bne.w	80079e8 <_rclc_take_new_data+0x244>
 8007890:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0a6      	beq.n	80077e6 <_rclc_take_new_data+0x42>
 8007898:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800789a:	a90a      	add	r1, sp, #40	@ 0x28
 800789c:	3010      	adds	r0, #16
 800789e:	f007 f903 	bl	800eaa8 <rcl_action_take_result_response>
 80078a2:	4605      	mov	r5, r0
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1e0      	bne.n	800786a <_rclc_take_new_data+0xc6>
 80078a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078ac:	6860      	ldr	r0, [r4, #4]
 80078ae:	f007 fd5f 	bl	800f370 <rclc_action_find_handle_by_result_request_sequence_number>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d098      	beq.n	80077e8 <_rclc_take_new_data+0x44>
 80078b6:	2301      	movs	r3, #1
 80078b8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80078bc:	e794      	b.n	80077e8 <_rclc_take_new_data+0x44>
 80078be:	250b      	movs	r5, #11
 80078c0:	4628      	mov	r0, r5
 80078c2:	b01b      	add	sp, #108	@ 0x6c
 80078c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c6:	ae04      	add	r6, sp, #16
 80078c8:	aa0a      	add	r2, sp, #40	@ 0x28
 80078ca:	3010      	adds	r0, #16
 80078cc:	4631      	mov	r1, r6
 80078ce:	f007 fb5f 	bl	800ef90 <rcl_action_take_cancel_request>
 80078d2:	4605      	mov	r5, r0
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1c8      	bne.n	800786a <_rclc_take_new_data+0xc6>
 80078d8:	6860      	ldr	r0, [r4, #4]
 80078da:	a90a      	add	r1, sp, #40	@ 0x28
 80078dc:	f007 fd06 	bl	800f2ec <rclc_action_find_goal_handle_by_uuid>
 80078e0:	4607      	mov	r7, r0
 80078e2:	2800      	cmp	r0, #0
 80078e4:	f000 80bb 	beq.w	8007a5e <_rclc_take_new_data+0x2ba>
 80078e8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80078ec:	2101      	movs	r1, #1
 80078ee:	f007 fc87 	bl	800f200 <rcl_action_transition_goal_state>
 80078f2:	2803      	cmp	r0, #3
 80078f4:	4684      	mov	ip, r0
 80078f6:	f040 80a7 	bne.w	8007a48 <_rclc_take_new_data+0x2a4>
 80078fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078fc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8007900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007902:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007906:	e884 0003 	stmia.w	r4, {r0, r1}
 800790a:	f887 c008 	strb.w	ip, [r7, #8]
 800790e:	e76b      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007910:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007912:	3010      	adds	r0, #16
 8007914:	f007 f948 	bl	800eba8 <rcl_action_take_feedback>
 8007918:	4605      	mov	r5, r0
 800791a:	2800      	cmp	r0, #0
 800791c:	d1a5      	bne.n	800786a <_rclc_take_new_data+0xc6>
 800791e:	6860      	ldr	r0, [r4, #4]
 8007920:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007922:	f007 fce3 	bl	800f2ec <rclc_action_find_goal_handle_by_uuid>
 8007926:	4603      	mov	r3, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	f000 80a3 	beq.w	8007a74 <_rclc_take_new_data+0x2d0>
 800792e:	2201      	movs	r2, #1
 8007930:	6860      	ldr	r0, [r4, #4]
 8007932:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8007936:	e7a6      	b.n	8007886 <_rclc_take_new_data+0xe2>
 8007938:	f007 fcb2 	bl	800f2a0 <rclc_action_take_goal_handle>
 800793c:	4606      	mov	r6, r0
 800793e:	6860      	ldr	r0, [r4, #4]
 8007940:	2e00      	cmp	r6, #0
 8007942:	f43f af47 	beq.w	80077d4 <_rclc_take_new_data+0x30>
 8007946:	6070      	str	r0, [r6, #4]
 8007948:	69f2      	ldr	r2, [r6, #28]
 800794a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800794e:	3010      	adds	r0, #16
 8007950:	f007 fa66 	bl	800ee20 <rcl_action_take_goal_request>
 8007954:	4605      	mov	r5, r0
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 808e 	bne.w	8007a78 <_rclc_take_new_data+0x2d4>
 800795c:	69f7      	ldr	r7, [r6, #28]
 800795e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007960:	7235      	strb	r5, [r6, #8]
 8007962:	f8c6 0009 	str.w	r0, [r6, #9]
 8007966:	f8c6 100d 	str.w	r1, [r6, #13]
 800796a:	6860      	ldr	r0, [r4, #4]
 800796c:	f8c6 2011 	str.w	r2, [r6, #17]
 8007970:	f8c6 3015 	str.w	r3, [r6, #21]
 8007974:	e72e      	b.n	80077d4 <_rclc_take_new_data+0x30>
 8007976:	aa04      	add	r2, sp, #16
 8007978:	a90a      	add	r1, sp, #40	@ 0x28
 800797a:	3010      	adds	r0, #16
 800797c:	f007 f81c 	bl	800e9b8 <rcl_action_take_goal_response>
 8007980:	4605      	mov	r5, r0
 8007982:	2800      	cmp	r0, #0
 8007984:	f47f af71 	bne.w	800786a <_rclc_take_new_data+0xc6>
 8007988:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800798c:	6860      	ldr	r0, [r4, #4]
 800798e:	f007 fcdd 	bl	800f34c <rclc_action_find_handle_by_goal_request_sequence_number>
 8007992:	b130      	cbz	r0, 80079a2 <_rclc_take_new_data+0x1fe>
 8007994:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007998:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800799c:	2201      	movs	r2, #1
 800799e:	f880 2020 	strb.w	r2, [r0, #32]
 80079a2:	6860      	ldr	r0, [r4, #4]
 80079a4:	e769      	b.n	800787a <_rclc_take_new_data+0xd6>
 80079a6:	aa04      	add	r2, sp, #16
 80079a8:	3010      	adds	r0, #16
 80079aa:	a90a      	add	r1, sp, #40	@ 0x28
 80079ac:	f007 fab0 	bl	800ef10 <rcl_action_take_result_request>
 80079b0:	4605      	mov	r5, r0
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f47f af59 	bne.w	800786a <_rclc_take_new_data+0xc6>
 80079b8:	6860      	ldr	r0, [r4, #4]
 80079ba:	a904      	add	r1, sp, #16
 80079bc:	f007 fc96 	bl	800f2ec <rclc_action_find_goal_handle_by_uuid>
 80079c0:	4607      	mov	r7, r0
 80079c2:	b160      	cbz	r0, 80079de <_rclc_take_new_data+0x23a>
 80079c4:	ad0a      	add	r5, sp, #40	@ 0x28
 80079c6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80079ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80079ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80079d2:	f04f 0c02 	mov.w	ip, #2
 80079d6:	e886 0003 	stmia.w	r6, {r0, r1}
 80079da:	f887 c008 	strb.w	ip, [r7, #8]
 80079de:	6860      	ldr	r0, [r4, #4]
 80079e0:	2300      	movs	r3, #0
 80079e2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80079e6:	e6fa      	b.n	80077de <_rclc_take_new_data+0x3a>
 80079e8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80079ec:	a90a      	add	r1, sp, #40	@ 0x28
 80079ee:	3010      	adds	r0, #16
 80079f0:	f007 f89a 	bl	800eb28 <rcl_action_take_cancel_response>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f47f af37 	bne.w	800786a <_rclc_take_new_data+0xc6>
 80079fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a00:	6860      	ldr	r0, [r4, #4]
 8007a02:	f007 fcc7 	bl	800f394 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8007a06:	4606      	mov	r6, r0
 8007a08:	6860      	ldr	r0, [r4, #4]
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	f43f af40 	beq.w	8007890 <_rclc_take_new_data+0xec>
 8007a10:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007a12:	2701      	movs	r7, #1
 8007a14:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f43f af3a 	beq.w	8007890 <_rclc_take_new_data+0xec>
 8007a1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007a1e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007a22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007a26:	f007 fc61 	bl	800f2ec <rclc_action_find_goal_handle_by_uuid>
 8007a2a:	b138      	cbz	r0, 8007a3c <_rclc_take_new_data+0x298>
 8007a2c:	6860      	ldr	r0, [r4, #4]
 8007a2e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007a30:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8007a34:	3501      	adds	r5, #1
 8007a36:	42ab      	cmp	r3, r5
 8007a38:	d8f0      	bhi.n	8007a1c <_rclc_take_new_data+0x278>
 8007a3a:	e729      	b.n	8007890 <_rclc_take_new_data+0xec>
 8007a3c:	6860      	ldr	r0, [r4, #4]
 8007a3e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007a40:	3501      	adds	r5, #1
 8007a42:	42ab      	cmp	r3, r5
 8007a44:	d8ea      	bhi.n	8007a1c <_rclc_take_new_data+0x278>
 8007a46:	e723      	b.n	8007890 <_rclc_take_new_data+0xec>
 8007a48:	ab06      	add	r3, sp, #24
 8007a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007a50:	2103      	movs	r1, #3
 8007a52:	e896 000c 	ldmia.w	r6, {r2, r3}
 8007a56:	6860      	ldr	r0, [r4, #4]
 8007a58:	f007 fd12 	bl	800f480 <rclc_action_server_goal_cancel_reject>
 8007a5c:	e6c4      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007a5e:	ab06      	add	r3, sp, #24
 8007a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007a66:	2102      	movs	r1, #2
 8007a68:	e896 000c 	ldmia.w	r6, {r2, r3}
 8007a6c:	6860      	ldr	r0, [r4, #4]
 8007a6e:	f007 fd07 	bl	800f480 <rclc_action_server_goal_cancel_reject>
 8007a72:	e6b9      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007a74:	6860      	ldr	r0, [r4, #4]
 8007a76:	e706      	b.n	8007886 <_rclc_take_new_data+0xe2>
 8007a78:	6860      	ldr	r0, [r4, #4]
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	f007 fc20 	bl	800f2c0 <rclc_action_remove_used_goal_handle>
 8007a80:	f000 fd3e 	bl	8008500 <rcutils_reset_error>
 8007a84:	e6b0      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007a86:	2501      	movs	r5, #1
 8007a88:	e6ae      	b.n	80077e8 <_rclc_take_new_data+0x44>
 8007a8a:	bf00      	nop

08007a8c <_rclc_execute.part.0>:
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8e:	7803      	ldrb	r3, [r0, #0]
 8007a90:	b087      	sub	sp, #28
 8007a92:	4604      	mov	r4, r0
 8007a94:	2b0a      	cmp	r3, #10
 8007a96:	f200 8136 	bhi.w	8007d06 <_rclc_execute.part.0+0x27a>
 8007a9a:	e8df f003 	tbb	[pc, r3]
 8007a9e:	435e      	.short	0x435e
 8007aa0:	06a1664f 	.word	0x06a1664f
 8007aa4:	6c1e0606 	.word	0x6c1e0606
 8007aa8:	59          	.byte	0x59
 8007aa9:	00          	.byte	0x00
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	f000 8122 	beq.w	8007cf4 <_rclc_execute.part.0+0x268>
 8007ab0:	2b07      	cmp	r3, #7
 8007ab2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007ab4:	f040 8118 	bne.w	8007ce8 <_rclc_execute.part.0+0x25c>
 8007ab8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8007abc:	6880      	ldr	r0, [r0, #8]
 8007abe:	4798      	blx	r3
 8007ac0:	f104 0110 	add.w	r1, r4, #16
 8007ac4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007ac6:	6860      	ldr	r0, [r4, #4]
 8007ac8:	f005 ff0e 	bl	800d8e8 <rcl_send_response>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d033      	beq.n	8007b38 <_rclc_execute.part.0+0xac>
 8007ad0:	9005      	str	r0, [sp, #20]
 8007ad2:	f000 fd15 	bl	8008500 <rcutils_reset_error>
 8007ad6:	9805      	ldr	r0, [sp, #20]
 8007ad8:	e02e      	b.n	8007b38 <_rclc_execute.part.0+0xac>
 8007ada:	6840      	ldr	r0, [r0, #4]
 8007adc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 8086 	beq.w	8007bf2 <_rclc_execute.part.0+0x166>
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	2701      	movs	r7, #1
 8007aea:	e004      	b.n	8007af6 <_rclc_execute.part.0+0x6a>
 8007aec:	f007 fbb2 	bl	800f254 <rclc_action_send_result_request>
 8007af0:	b998      	cbnz	r0, 8007b1a <_rclc_execute.part.0+0x8e>
 8007af2:	722f      	strb	r7, [r5, #8]
 8007af4:	6860      	ldr	r0, [r4, #4]
 8007af6:	f007 fc5f 	bl	800f3b8 <rclc_action_find_first_handle_with_goal_response>
 8007afa:	4605      	mov	r5, r0
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d077      	beq.n	8007bf0 <_rclc_execute.part.0+0x164>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8007b0a:	f885 6020 	strb.w	r6, [r5, #32]
 8007b0e:	4798      	blx	r3
 8007b10:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8007b14:	4628      	mov	r0, r5
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e8      	bne.n	8007aec <_rclc_execute.part.0+0x60>
 8007b1a:	6860      	ldr	r0, [r4, #4]
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f007 fbcf 	bl	800f2c0 <rclc_action_remove_used_goal_handle>
 8007b22:	e7e7      	b.n	8007af4 <_rclc_execute.part.0+0x68>
 8007b24:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8007b28:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	f000 80c9 	beq.w	8007cc4 <_rclc_execute.part.0+0x238>
 8007b32:	6880      	ldr	r0, [r0, #8]
 8007b34:	4798      	blx	r3
 8007b36:	2000      	movs	r0, #0
 8007b38:	b007      	add	sp, #28
 8007b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b3c:	6840      	ldr	r0, [r0, #4]
 8007b3e:	f005 fff9 	bl	800db34 <rcl_timer_call>
 8007b42:	f240 3321 	movw	r3, #801	@ 0x321
 8007b46:	4298      	cmp	r0, r3
 8007b48:	d004      	beq.n	8007b54 <_rclc_execute.part.0+0xc8>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0f4      	beq.n	8007b38 <_rclc_execute.part.0+0xac>
 8007b4e:	e7bf      	b.n	8007ad0 <_rclc_execute.part.0+0x44>
 8007b50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b52:	4798      	blx	r3
 8007b54:	2000      	movs	r0, #0
 8007b56:	b007      	add	sp, #28
 8007b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b5a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8007b5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b60:	b925      	cbnz	r5, 8007b6c <_rclc_execute.part.0+0xe0>
 8007b62:	4628      	mov	r0, r5
 8007b64:	4798      	blx	r3
 8007b66:	4628      	mov	r0, r5
 8007b68:	e7e6      	b.n	8007b38 <_rclc_execute.part.0+0xac>
 8007b6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b6c:	68a0      	ldr	r0, [r4, #8]
 8007b6e:	4798      	blx	r3
 8007b70:	2000      	movs	r0, #0
 8007b72:	b007      	add	sp, #28
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	6840      	ldr	r0, [r0, #4]
 8007b78:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8007b7c:	bb3b      	cbnz	r3, 8007bce <_rclc_execute.part.0+0x142>
 8007b7e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d07b      	beq.n	8007c7e <_rclc_execute.part.0+0x1f2>
 8007b86:	f640 0634 	movw	r6, #2100	@ 0x834
 8007b8a:	2701      	movs	r7, #1
 8007b8c:	e007      	b.n	8007b9e <_rclc_execute.part.0+0x112>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f007 fc2a 	bl	800f3e8 <rclc_action_server_response_goal_request>
 8007b94:	6860      	ldr	r0, [r4, #4]
 8007b96:	4629      	mov	r1, r5
 8007b98:	f007 fb92 	bl	800f2c0 <rclc_action_remove_used_goal_handle>
 8007b9c:	6860      	ldr	r0, [r4, #4]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	f007 fbbc 	bl	800f31c <rclc_action_find_first_handle_by_status>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d066      	beq.n	8007c78 <_rclc_execute.part.0+0x1ec>
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4798      	blx	r3
 8007bb2:	42b0      	cmp	r0, r6
 8007bb4:	f04f 0100 	mov.w	r1, #0
 8007bb8:	d1e9      	bne.n	8007b8e <_rclc_execute.part.0+0x102>
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f007 fc13 	bl	800f3e8 <rclc_action_server_response_goal_request>
 8007bc2:	722f      	strb	r7, [r5, #8]
 8007bc4:	e7ea      	b.n	8007b9c <_rclc_execute.part.0+0x110>
 8007bc6:	6848      	ldr	r0, [r1, #4]
 8007bc8:	f007 fb7a 	bl	800f2c0 <rclc_action_remove_used_goal_handle>
 8007bcc:	6860      	ldr	r0, [r4, #4]
 8007bce:	f007 fbb1 	bl	800f334 <rclc_action_find_first_terminated_handle>
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d1f6      	bne.n	8007bc6 <_rclc_execute.part.0+0x13a>
 8007bd8:	6860      	ldr	r0, [r4, #4]
 8007bda:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8007bde:	e7ce      	b.n	8007b7e <_rclc_execute.part.0+0xf2>
 8007be0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007be2:	6880      	ldr	r0, [r0, #8]
 8007be4:	f104 0110 	add.w	r1, r4, #16
 8007be8:	4798      	blx	r3
 8007bea:	2000      	movs	r0, #0
 8007bec:	b007      	add	sp, #28
 8007bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf0:	6860      	ldr	r0, [r4, #4]
 8007bf2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007bf6:	b18b      	cbz	r3, 8007c1c <_rclc_execute.part.0+0x190>
 8007bf8:	68c5      	ldr	r5, [r0, #12]
 8007bfa:	b32d      	cbz	r5, 8007c48 <_rclc_execute.part.0+0x1bc>
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8007c02:	b143      	cbz	r3, 8007c16 <_rclc_execute.part.0+0x18a>
 8007c04:	69c3      	ldr	r3, [r0, #28]
 8007c06:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8007c0a:	b123      	cbz	r3, 8007c16 <_rclc_execute.part.0+0x18a>
 8007c0c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007c0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c10:	4628      	mov	r0, r5
 8007c12:	4798      	blx	r3
 8007c14:	6860      	ldr	r0, [r4, #4]
 8007c16:	682d      	ldr	r5, [r5, #0]
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	d1f0      	bne.n	8007bfe <_rclc_execute.part.0+0x172>
 8007c1c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8007c20:	b193      	cbz	r3, 8007c48 <_rclc_execute.part.0+0x1bc>
 8007c22:	68c5      	ldr	r5, [r0, #12]
 8007c24:	b185      	cbz	r5, 8007c48 <_rclc_execute.part.0+0x1bc>
 8007c26:	2600      	movs	r6, #0
 8007c28:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8007c2c:	b14b      	cbz	r3, 8007c42 <_rclc_execute.part.0+0x1b6>
 8007c2e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c30:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8007c34:	b12b      	cbz	r3, 8007c42 <_rclc_execute.part.0+0x1b6>
 8007c36:	4628      	mov	r0, r5
 8007c38:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8007c3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c3e:	4798      	blx	r3
 8007c40:	6860      	ldr	r0, [r4, #4]
 8007c42:	682d      	ldr	r5, [r5, #0]
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	d1ef      	bne.n	8007c28 <_rclc_execute.part.0+0x19c>
 8007c48:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d081      	beq.n	8007b54 <_rclc_execute.part.0+0xc8>
 8007c50:	2700      	movs	r7, #0
 8007c52:	e00b      	b.n	8007c6c <_rclc_execute.part.0+0x1e0>
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c5a:	6a1e      	ldr	r6, [r3, #32]
 8007c5c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8007c60:	47b0      	blx	r6
 8007c62:	6860      	ldr	r0, [r4, #4]
 8007c64:	4629      	mov	r1, r5
 8007c66:	f007 fb2b 	bl	800f2c0 <rclc_action_remove_used_goal_handle>
 8007c6a:	6860      	ldr	r0, [r4, #4]
 8007c6c:	f007 fbb0 	bl	800f3d0 <rclc_action_find_first_handle_with_result_response>
 8007c70:	4605      	mov	r5, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d1ee      	bne.n	8007c54 <_rclc_execute.part.0+0x1c8>
 8007c76:	e76d      	b.n	8007b54 <_rclc_execute.part.0+0xc8>
 8007c78:	6860      	ldr	r0, [r4, #4]
 8007c7a:	f880 5020 	strb.w	r5, [r0, #32]
 8007c7e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f43f af66 	beq.w	8007b54 <_rclc_execute.part.0+0xc8>
 8007c88:	68c5      	ldr	r5, [r0, #12]
 8007c8a:	b1b5      	cbz	r5, 8007cba <_rclc_execute.part.0+0x22e>
 8007c8c:	2602      	movs	r6, #2
 8007c8e:	e001      	b.n	8007c94 <_rclc_execute.part.0+0x208>
 8007c90:	682d      	ldr	r5, [r5, #0]
 8007c92:	b195      	cbz	r5, 8007cba <_rclc_execute.part.0+0x22e>
 8007c94:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d1f9      	bne.n	8007c90 <_rclc_execute.part.0+0x204>
 8007c9c:	69c3      	ldr	r3, [r0, #28]
 8007c9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8007caa:	4628      	mov	r0, r5
 8007cac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8007cb0:	b163      	cbz	r3, 8007ccc <_rclc_execute.part.0+0x240>
 8007cb2:	f007 fbb9 	bl	800f428 <rclc_action_server_goal_cancel_accept>
 8007cb6:	6860      	ldr	r0, [r4, #4]
 8007cb8:	e7ea      	b.n	8007c90 <_rclc_execute.part.0+0x204>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	e739      	b.n	8007b38 <_rclc_execute.part.0+0xac>
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	4798      	blx	r3
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e735      	b.n	8007b38 <_rclc_execute.part.0+0xac>
 8007ccc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8007cce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007cd2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8007cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cda:	6860      	ldr	r0, [r4, #4]
 8007cdc:	2101      	movs	r1, #1
 8007cde:	f007 fbcf 	bl	800f480 <rclc_action_server_goal_cancel_reject>
 8007ce2:	722e      	strb	r6, [r5, #8]
 8007ce4:	6860      	ldr	r0, [r4, #4]
 8007ce6:	e7d3      	b.n	8007c90 <_rclc_execute.part.0+0x204>
 8007ce8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007cea:	6880      	ldr	r0, [r0, #8]
 8007cec:	4798      	blx	r3
 8007cee:	f104 0110 	add.w	r1, r4, #16
 8007cf2:	e6e7      	b.n	8007ac4 <_rclc_execute.part.0+0x38>
 8007cf4:	f100 0110 	add.w	r1, r0, #16
 8007cf8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007cfa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8007cfc:	6880      	ldr	r0, [r0, #8]
 8007cfe:	9105      	str	r1, [sp, #20]
 8007d00:	4798      	blx	r3
 8007d02:	9905      	ldr	r1, [sp, #20]
 8007d04:	e6de      	b.n	8007ac4 <_rclc_execute.part.0+0x38>
 8007d06:	2001      	movs	r0, #1
 8007d08:	e716      	b.n	8007b38 <_rclc_execute.part.0+0xac>
 8007d0a:	bf00      	nop

08007d0c <rclc_executor_trigger_any>:
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d03f      	beq.n	8007d90 <rclc_executor_trigger_any+0x84>
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d03e      	beq.n	8007d92 <rclc_executor_trigger_any+0x86>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d037      	beq.n	8007d90 <rclc_executor_trigger_any+0x84>
 8007d20:	b430      	push	{r4, r5}
 8007d22:	f893 c000 	ldrb.w	ip, [r3]
 8007d26:	f1bc 0f08 	cmp.w	ip, #8
 8007d2a:	d11e      	bne.n	8007d6a <rclc_executor_trigger_any+0x5e>
 8007d2c:	685c      	ldr	r4, [r3, #4]
 8007d2e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007d30:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8007d34:	d105      	bne.n	8007d42 <rclc_executor_trigger_any+0x36>
 8007d36:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8007d3a:	b910      	cbnz	r0, 8007d42 <rclc_executor_trigger_any+0x36>
 8007d3c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8007d40:	b128      	cbz	r0, 8007d4e <rclc_executor_trigger_any+0x42>
 8007d42:	bc30      	pop	{r4, r5}
 8007d44:	4770      	bx	lr
 8007d46:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1f9      	bne.n	8007d42 <rclc_executor_trigger_any+0x36>
 8007d4e:	3201      	adds	r2, #1
 8007d50:	4291      	cmp	r1, r2
 8007d52:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007d56:	d018      	beq.n	8007d8a <rclc_executor_trigger_any+0x7e>
 8007d58:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d0f0      	beq.n	8007d42 <rclc_executor_trigger_any+0x36>
 8007d60:	f893 c000 	ldrb.w	ip, [r3]
 8007d64:	f1bc 0f08 	cmp.w	ip, #8
 8007d68:	d0e0      	beq.n	8007d2c <rclc_executor_trigger_any+0x20>
 8007d6a:	f1bc 0f09 	cmp.w	ip, #9
 8007d6e:	d1ea      	bne.n	8007d46 <rclc_executor_trigger_any+0x3a>
 8007d70:	685c      	ldr	r4, [r3, #4]
 8007d72:	6a25      	ldr	r5, [r4, #32]
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	d1e4      	bne.n	8007d42 <rclc_executor_trigger_any+0x36>
 8007d78:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d1e0      	bne.n	8007d42 <rclc_executor_trigger_any+0x36>
 8007d80:	3201      	adds	r2, #1
 8007d82:	4291      	cmp	r1, r2
 8007d84:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007d88:	d1e6      	bne.n	8007d58 <rclc_executor_trigger_any+0x4c>
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	bc30      	pop	{r4, r5}
 8007d8e:	4770      	bx	lr
 8007d90:	4770      	bx	lr
 8007d92:	4608      	mov	r0, r1
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop

08007d98 <rclc_executor_init>:
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d05f      	beq.n	8007e5c <rclc_executor_init+0xc4>
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	b0b0      	sub	sp, #192	@ 0xc0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d051      	beq.n	8007e4c <rclc_executor_init+0xb4>
 8007da8:	4605      	mov	r5, r0
 8007daa:	4618      	mov	r0, r3
 8007dac:	4616      	mov	r6, r2
 8007dae:	461f      	mov	r7, r3
 8007db0:	f000 fb82 	bl	80084b8 <rcutils_allocator_is_valid>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d049      	beq.n	8007e4c <rclc_executor_init+0xb4>
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	d047      	beq.n	8007e4c <rclc_executor_init+0xb4>
 8007dbc:	492c      	ldr	r1, [pc, #176]	@ (8007e70 <rclc_executor_init+0xd8>)
 8007dbe:	2288      	movs	r2, #136	@ 0x88
 8007dc0:	a80e      	add	r0, sp, #56	@ 0x38
 8007dc2:	f00b ff78 	bl	8013cb6 <memcpy>
 8007dc6:	a90e      	add	r1, sp, #56	@ 0x38
 8007dc8:	2288      	movs	r2, #136	@ 0x88
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f00b ff73 	bl	8013cb6 <memcpy>
 8007dd0:	602c      	str	r4, [r5, #0]
 8007dd2:	4668      	mov	r0, sp
 8007dd4:	60ae      	str	r6, [r5, #8]
 8007dd6:	466c      	mov	r4, sp
 8007dd8:	f006 f81e 	bl	800de18 <rcl_get_zero_initialized_wait_set>
 8007ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dde:	f105 0c14 	add.w	ip, r5, #20
 8007de2:	f8d7 8000 	ldr.w	r8, [r7]
 8007de6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007df6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8007e68 <rclc_executor_init+0xd0>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f8cc 3000 	str.w	r3, [ip]
 8007e00:	6939      	ldr	r1, [r7, #16]
 8007e02:	612f      	str	r7, [r5, #16]
 8007e04:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8007e08:	01b0      	lsls	r0, r6, #6
 8007e0a:	47c0      	blx	r8
 8007e0c:	6068      	str	r0, [r5, #4]
 8007e0e:	b338      	cbz	r0, 8007e60 <rclc_executor_init+0xc8>
 8007e10:	2400      	movs	r4, #0
 8007e12:	e000      	b.n	8007e16 <rclc_executor_init+0x7e>
 8007e14:	6868      	ldr	r0, [r5, #4]
 8007e16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	3401      	adds	r4, #1
 8007e1e:	f000 fa37 	bl	8008290 <rclc_executor_handle_init>
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d1f6      	bne.n	8007e14 <rclc_executor_init+0x7c>
 8007e26:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8007e2a:	f000 fa27 	bl	800827c <rclc_executor_handle_counters_zero_init>
 8007e2e:	4a11      	ldr	r2, [pc, #68]	@ (8007e74 <rclc_executor_init+0xdc>)
 8007e30:	686b      	ldr	r3, [r5, #4]
 8007e32:	2000      	movs	r0, #0
 8007e34:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8007e38:	b163      	cbz	r3, 8007e54 <rclc_executor_init+0xbc>
 8007e3a:	692b      	ldr	r3, [r5, #16]
 8007e3c:	b153      	cbz	r3, 8007e54 <rclc_executor_init+0xbc>
 8007e3e:	68ab      	ldr	r3, [r5, #8]
 8007e40:	b143      	cbz	r3, 8007e54 <rclc_executor_init+0xbc>
 8007e42:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8007e46:	b030      	add	sp, #192	@ 0xc0
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	200b      	movs	r0, #11
 8007e4e:	b030      	add	sp, #192	@ 0xc0
 8007e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e54:	4618      	mov	r0, r3
 8007e56:	b030      	add	sp, #192	@ 0xc0
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	200b      	movs	r0, #11
 8007e5e:	4770      	bx	lr
 8007e60:	200a      	movs	r0, #10
 8007e62:	e7f4      	b.n	8007e4e <rclc_executor_init+0xb6>
 8007e64:	f3af 8000 	nop.w
 8007e68:	3b9aca00 	.word	0x3b9aca00
 8007e6c:	00000000 	.word	0x00000000
 8007e70:	08014bb8 	.word	0x08014bb8
 8007e74:	08007d0d 	.word	0x08007d0d

08007e78 <rclc_executor_prepare>:
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d044      	beq.n	8007f06 <rclc_executor_prepare+0x8e>
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	f100 0514 	add.w	r5, r0, #20
 8007e82:	b09b      	sub	sp, #108	@ 0x6c
 8007e84:	4604      	mov	r4, r0
 8007e86:	4628      	mov	r0, r5
 8007e88:	f005 ffda 	bl	800de40 <rcl_wait_set_is_valid>
 8007e8c:	b110      	cbz	r0, 8007e94 <rclc_executor_prepare+0x1c>
 8007e8e:	2000      	movs	r0, #0
 8007e90:	b01b      	add	sp, #108	@ 0x6c
 8007e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e94:	4628      	mov	r0, r5
 8007e96:	f005 ffd9 	bl	800de4c <rcl_wait_set_fini>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d130      	bne.n	8007f00 <rclc_executor_prepare+0x88>
 8007e9e:	a80c      	add	r0, sp, #48	@ 0x30
 8007ea0:	f005 ffba 	bl	800de18 <rcl_get_zero_initialized_wait_set>
 8007ea4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8007ea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007eac:	46ae      	mov	lr, r5
 8007eae:	6927      	ldr	r7, [r4, #16]
 8007eb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007eb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007ebc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007ec0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007ec4:	f8dc 3000 	ldr.w	r3, [ip]
 8007ec8:	f8ce 3000 	str.w	r3, [lr]
 8007ecc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007ece:	ae04      	add	r6, sp, #16
 8007ed0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	6033      	str	r3, [r6, #0]
 8007ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eda:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007edc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007ee0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8007ee4:	e9cd 2100 	strd	r2, r1, [sp]
 8007ee8:	4628      	mov	r0, r5
 8007eea:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007eec:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007eee:	f006 faab 	bl	800e448 <rcl_wait_set_init>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d0cc      	beq.n	8007e90 <rclc_executor_prepare+0x18>
 8007ef6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007ef8:	f000 fb02 	bl	8008500 <rcutils_reset_error>
 8007efc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007efe:	e7c7      	b.n	8007e90 <rclc_executor_prepare+0x18>
 8007f00:	f000 fafe 	bl	8008500 <rcutils_reset_error>
 8007f04:	e7cb      	b.n	8007e9e <rclc_executor_prepare+0x26>
 8007f06:	200b      	movs	r0, #11
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <rclc_executor_spin_some.part.0>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	f100 0614 	add.w	r6, r0, #20
 8007f14:	b083      	sub	sp, #12
 8007f16:	4691      	mov	r9, r2
 8007f18:	4698      	mov	r8, r3
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	f7ff ffac 	bl	8007e78 <rclc_executor_prepare>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f006 f85f 	bl	800dfe4 <rcl_wait_set_clear>
 8007f26:	4607      	mov	r7, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f040 80ed 	bne.w	8008108 <rclc_executor_spin_some.part.0+0x1fc>
 8007f2e:	68ab      	ldr	r3, [r5, #8]
 8007f30:	4604      	mov	r4, r0
 8007f32:	b303      	cbz	r3, 8007f76 <rclc_executor_spin_some.part.0+0x6a>
 8007f34:	6869      	ldr	r1, [r5, #4]
 8007f36:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8007f3a:	01a2      	lsls	r2, r4, #6
 8007f3c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8007f40:	b1cb      	cbz	r3, 8007f76 <rclc_executor_spin_some.part.0+0x6a>
 8007f42:	5c8b      	ldrb	r3, [r1, r2]
 8007f44:	2b0a      	cmp	r3, #10
 8007f46:	f200 80d8 	bhi.w	80080fa <rclc_executor_spin_some.part.0+0x1ee>
 8007f4a:	e8df f003 	tbb	[pc, r3]
 8007f4e:	9c9c      	.short	0x9c9c
 8007f50:	068c8ca7 	.word	0x068c8ca7
 8007f54:	bdc90606 	.word	0xbdc90606
 8007f58:	b2          	.byte	0xb2
 8007f59:	00          	.byte	0x00
 8007f5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007f5e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007f62:	4630      	mov	r0, r6
 8007f64:	f006 fb86 	bl	800e674 <rcl_wait_set_add_service>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f040 8086 	bne.w	800807a <rclc_executor_spin_some.part.0+0x16e>
 8007f6e:	68ab      	ldr	r3, [r5, #8]
 8007f70:	3401      	adds	r4, #1
 8007f72:	429c      	cmp	r4, r3
 8007f74:	d3de      	bcc.n	8007f34 <rclc_executor_spin_some.part.0+0x28>
 8007f76:	4643      	mov	r3, r8
 8007f78:	464a      	mov	r2, r9
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f006 fba8 	bl	800e6d0 <rcl_wait>
 8007f80:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80c7 	beq.w	8008118 <rclc_executor_spin_some.part.0+0x20c>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	f040 80b5 	bne.w	80080fa <rclc_executor_spin_some.part.0+0x1ee>
 8007f90:	68ab      	ldr	r3, [r5, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8159 	beq.w	800824a <rclc_executor_spin_some.part.0+0x33e>
 8007f98:	2400      	movs	r4, #0
 8007f9a:	46a0      	mov	r8, r4
 8007f9c:	f240 1991 	movw	r9, #401	@ 0x191
 8007fa0:	e00a      	b.n	8007fb8 <rclc_executor_spin_some.part.0+0xac>
 8007fa2:	f7ff fbb1 	bl	8007708 <_rclc_check_for_new_data>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	b110      	cbz	r0, 8007fb0 <rclc_executor_spin_some.part.0+0xa4>
 8007faa:	4548      	cmp	r0, r9
 8007fac:	f040 80b2 	bne.w	8008114 <rclc_executor_spin_some.part.0+0x208>
 8007fb0:	68ab      	ldr	r3, [r5, #8]
 8007fb2:	4598      	cmp	r8, r3
 8007fb4:	f080 8126 	bcs.w	8008204 <rclc_executor_spin_some.part.0+0x2f8>
 8007fb8:	686a      	ldr	r2, [r5, #4]
 8007fba:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8007fc4:	f108 0801 	add.w	r8, r8, #1
 8007fc8:	f1bc 0f00 	cmp.w	ip, #0
 8007fcc:	d1e9      	bne.n	8007fa2 <rclc_executor_spin_some.part.0+0x96>
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8007fd6:	4798      	blx	r3
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f000 809b 	beq.w	8008114 <rclc_executor_spin_some.part.0+0x208>
 8007fde:	68ab      	ldr	r3, [r5, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8097 	beq.w	8008114 <rclc_executor_spin_some.part.0+0x208>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	f240 1991 	movw	r9, #401	@ 0x191
 8007fee:	e009      	b.n	8008004 <rclc_executor_spin_some.part.0+0xf8>
 8007ff0:	f7ff fbd8 	bl	80077a4 <_rclc_take_new_data>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	b110      	cbz	r0, 8007ffe <rclc_executor_spin_some.part.0+0xf2>
 8007ff8:	4548      	cmp	r0, r9
 8007ffa:	f040 808b 	bne.w	8008114 <rclc_executor_spin_some.part.0+0x208>
 8007ffe:	68ab      	ldr	r3, [r5, #8]
 8008000:	4598      	cmp	r8, r3
 8008002:	d209      	bcs.n	8008018 <rclc_executor_spin_some.part.0+0x10c>
 8008004:	6868      	ldr	r0, [r5, #4]
 8008006:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800800a:	4631      	mov	r1, r6
 800800c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8008010:	f108 0801 	add.w	r8, r8, #1
 8008014:	2a00      	cmp	r2, #0
 8008016:	d1eb      	bne.n	8007ff0 <rclc_executor_spin_some.part.0+0xe4>
 8008018:	2600      	movs	r6, #0
 800801a:	b97b      	cbnz	r3, 800803c <rclc_executor_spin_some.part.0+0x130>
 800801c:	e07a      	b.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 800801e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8008022:	2a08      	cmp	r2, #8
 8008024:	f000 80fd 	beq.w	8008222 <rclc_executor_spin_some.part.0+0x316>
 8008028:	2a09      	cmp	r2, #9
 800802a:	f000 80ef 	beq.w	800820c <rclc_executor_spin_some.part.0+0x300>
 800802e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8008032:	b98a      	cbnz	r2, 8008058 <rclc_executor_spin_some.part.0+0x14c>
 8008034:	3601      	adds	r6, #1
 8008036:	429e      	cmp	r6, r3
 8008038:	d262      	bcs.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 800803a:	2400      	movs	r4, #0
 800803c:	686a      	ldr	r2, [r5, #4]
 800803e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8008042:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8008046:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800804a:	2900      	cmp	r1, #0
 800804c:	d062      	beq.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 800804e:	7841      	ldrb	r1, [r0, #1]
 8008050:	2900      	cmp	r1, #0
 8008052:	d0e4      	beq.n	800801e <rclc_executor_spin_some.part.0+0x112>
 8008054:	2901      	cmp	r1, #1
 8008056:	d1ed      	bne.n	8008034 <rclc_executor_spin_some.part.0+0x128>
 8008058:	f7ff fd18 	bl	8007a8c <_rclc_execute.part.0>
 800805c:	2800      	cmp	r0, #0
 800805e:	f040 80b6 	bne.w	80081ce <rclc_executor_spin_some.part.0+0x2c2>
 8008062:	68ab      	ldr	r3, [r5, #8]
 8008064:	e7e6      	b.n	8008034 <rclc_executor_spin_some.part.0+0x128>
 8008066:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800806a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800806e:	4630      	mov	r0, r6
 8008070:	f006 fad4 	bl	800e61c <rcl_wait_set_add_client>
 8008074:	2800      	cmp	r0, #0
 8008076:	f43f af7a 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 800807a:	9001      	str	r0, [sp, #4]
 800807c:	f000 fa40 	bl	8008500 <rcutils_reset_error>
 8008080:	9801      	ldr	r0, [sp, #4]
 8008082:	4607      	mov	r7, r0
 8008084:	e03c      	b.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 8008086:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800808a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800808e:	4630      	mov	r0, r6
 8008090:	f005 ff7c 	bl	800df8c <rcl_wait_set_add_subscription>
 8008094:	2800      	cmp	r0, #0
 8008096:	f43f af6a 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 800809a:	e7ee      	b.n	800807a <rclc_executor_spin_some.part.0+0x16e>
 800809c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80080a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80080a4:	4630      	mov	r0, r6
 80080a6:	f006 fa89 	bl	800e5bc <rcl_wait_set_add_timer>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f43f af5f 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 80080b0:	e7e3      	b.n	800807a <rclc_executor_spin_some.part.0+0x16e>
 80080b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80080b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80080ba:	4630      	mov	r0, r6
 80080bc:	f006 fa52 	bl	800e564 <rcl_wait_set_add_guard_condition>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f43f af54 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 80080c6:	e7d8      	b.n	800807a <rclc_executor_spin_some.part.0+0x16e>
 80080c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80080cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80080d0:	3110      	adds	r1, #16
 80080d2:	4630      	mov	r0, r6
 80080d4:	f006 ffd4 	bl	800f080 <rcl_action_wait_set_add_action_server>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f43f af48 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 80080de:	e7cc      	b.n	800807a <rclc_executor_spin_some.part.0+0x16e>
 80080e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80080e4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80080e8:	3110      	adds	r1, #16
 80080ea:	2300      	movs	r3, #0
 80080ec:	4630      	mov	r0, r6
 80080ee:	f006 fd9f 	bl	800ec30 <rcl_action_wait_set_add_action_client>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f43f af3b 	beq.w	8007f6e <rclc_executor_spin_some.part.0+0x62>
 80080f8:	e7bf      	b.n	800807a <rclc_executor_spin_some.part.0+0x16e>
 80080fa:	f000 fa01 	bl	8008500 <rcutils_reset_error>
 80080fe:	2701      	movs	r7, #1
 8008100:	4638      	mov	r0, r7
 8008102:	b003      	add	sp, #12
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	f000 f9fa 	bl	8008500 <rcutils_reset_error>
 800810c:	4638      	mov	r0, r7
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	4627      	mov	r7, r4
 8008116:	e7f3      	b.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 8008118:	68ab      	ldr	r3, [r5, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8092 	beq.w	8008244 <rclc_executor_spin_some.part.0+0x338>
 8008120:	2400      	movs	r4, #0
 8008122:	46a0      	mov	r8, r4
 8008124:	f240 1991 	movw	r9, #401	@ 0x191
 8008128:	e008      	b.n	800813c <rclc_executor_spin_some.part.0+0x230>
 800812a:	f7ff faed 	bl	8007708 <_rclc_check_for_new_data>
 800812e:	4604      	mov	r4, r0
 8008130:	b108      	cbz	r0, 8008136 <rclc_executor_spin_some.part.0+0x22a>
 8008132:	4548      	cmp	r0, r9
 8008134:	d1ee      	bne.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 8008136:	68ab      	ldr	r3, [r5, #8]
 8008138:	4598      	cmp	r8, r3
 800813a:	d265      	bcs.n	8008208 <rclc_executor_spin_some.part.0+0x2fc>
 800813c:	686a      	ldr	r2, [r5, #4]
 800813e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8008142:	4631      	mov	r1, r6
 8008144:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8008148:	f108 0801 	add.w	r8, r8, #1
 800814c:	f1bc 0f00 	cmp.w	ip, #0
 8008150:	d1eb      	bne.n	800812a <rclc_executor_spin_some.part.0+0x21e>
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800815a:	4798      	blx	r3
 800815c:	2800      	cmp	r0, #0
 800815e:	d0d9      	beq.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 8008160:	68ab      	ldr	r3, [r5, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0d6      	beq.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	f240 1991 	movw	r9, #401	@ 0x191
 800816e:	f240 2a59 	movw	sl, #601	@ 0x259
 8008172:	e00e      	b.n	8008192 <rclc_executor_spin_some.part.0+0x286>
 8008174:	f813 300b 	ldrb.w	r3, [r3, fp]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d033      	beq.n	80081e4 <rclc_executor_spin_some.part.0+0x2d8>
 800817c:	2b09      	cmp	r3, #9
 800817e:	d028      	beq.n	80081d2 <rclc_executor_spin_some.part.0+0x2c6>
 8008180:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8008184:	b9fb      	cbnz	r3, 80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 8008186:	68ab      	ldr	r3, [r5, #8]
 8008188:	f108 0801 	add.w	r8, r8, #1
 800818c:	4598      	cmp	r8, r3
 800818e:	d2b7      	bcs.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 8008190:	2400      	movs	r4, #0
 8008192:	6868      	ldr	r0, [r5, #4]
 8008194:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8008198:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800819c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0b7      	beq.n	8008114 <rclc_executor_spin_some.part.0+0x208>
 80081a4:	4631      	mov	r1, r6
 80081a6:	f7ff fafd 	bl	80077a4 <_rclc_take_new_data>
 80081aa:	b118      	cbz	r0, 80081b4 <rclc_executor_spin_some.part.0+0x2a8>
 80081ac:	4548      	cmp	r0, r9
 80081ae:	d001      	beq.n	80081b4 <rclc_executor_spin_some.part.0+0x2a8>
 80081b0:	4550      	cmp	r0, sl
 80081b2:	d10c      	bne.n	80081ce <rclc_executor_spin_some.part.0+0x2c2>
 80081b4:	686b      	ldr	r3, [r5, #4]
 80081b6:	eb13 000b 	adds.w	r0, r3, fp
 80081ba:	d021      	beq.n	8008200 <rclc_executor_spin_some.part.0+0x2f4>
 80081bc:	7842      	ldrb	r2, [r0, #1]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d0d8      	beq.n	8008174 <rclc_executor_spin_some.part.0+0x268>
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	d1df      	bne.n	8008186 <rclc_executor_spin_some.part.0+0x27a>
 80081c6:	f7ff fc61 	bl	8007a8c <_rclc_execute.part.0>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0db      	beq.n	8008186 <rclc_executor_spin_some.part.0+0x27a>
 80081ce:	4607      	mov	r7, r0
 80081d0:	e796      	b.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 80081d2:	6843      	ldr	r3, [r0, #4]
 80081d4:	6a1a      	ldr	r2, [r3, #32]
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1f5      	bne.n	80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 80081da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0d1      	beq.n	8008186 <rclc_executor_spin_some.part.0+0x27a>
 80081e2:	e7f0      	b.n	80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 80081e4:	6843      	ldr	r3, [r0, #4]
 80081e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80081ec:	d1eb      	bne.n	80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 80081ee:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	d1e7      	bne.n	80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 80081f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0c3      	beq.n	8008186 <rclc_executor_spin_some.part.0+0x27a>
 80081fe:	e7e2      	b.n	80081c6 <rclc_executor_spin_some.part.0+0x2ba>
 8008200:	270b      	movs	r7, #11
 8008202:	e77d      	b.n	8008100 <rclc_executor_spin_some.part.0+0x1f4>
 8008204:	686a      	ldr	r2, [r5, #4]
 8008206:	e6e2      	b.n	8007fce <rclc_executor_spin_some.part.0+0xc2>
 8008208:	686a      	ldr	r2, [r5, #4]
 800820a:	e7a2      	b.n	8008152 <rclc_executor_spin_some.part.0+0x246>
 800820c:	6842      	ldr	r2, [r0, #4]
 800820e:	6a11      	ldr	r1, [r2, #32]
 8008210:	2900      	cmp	r1, #0
 8008212:	f47f af21 	bne.w	8008058 <rclc_executor_spin_some.part.0+0x14c>
 8008216:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800821a:	2a00      	cmp	r2, #0
 800821c:	f43f af0a 	beq.w	8008034 <rclc_executor_spin_some.part.0+0x128>
 8008220:	e71a      	b.n	8008058 <rclc_executor_spin_some.part.0+0x14c>
 8008222:	6842      	ldr	r2, [r0, #4]
 8008224:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8008226:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800822a:	f47f af15 	bne.w	8008058 <rclc_executor_spin_some.part.0+0x14c>
 800822e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8008232:	2900      	cmp	r1, #0
 8008234:	f47f af10 	bne.w	8008058 <rclc_executor_spin_some.part.0+0x14c>
 8008238:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800823c:	2a00      	cmp	r2, #0
 800823e:	f43f aef9 	beq.w	8008034 <rclc_executor_spin_some.part.0+0x128>
 8008242:	e709      	b.n	8008058 <rclc_executor_spin_some.part.0+0x14c>
 8008244:	686a      	ldr	r2, [r5, #4]
 8008246:	461c      	mov	r4, r3
 8008248:	e783      	b.n	8008152 <rclc_executor_spin_some.part.0+0x246>
 800824a:	686a      	ldr	r2, [r5, #4]
 800824c:	461c      	mov	r4, r3
 800824e:	e6be      	b.n	8007fce <rclc_executor_spin_some.part.0+0xc2>

08008250 <rclc_executor_spin_some>:
 8008250:	b190      	cbz	r0, 8008278 <rclc_executor_spin_some+0x28>
 8008252:	b570      	push	{r4, r5, r6, lr}
 8008254:	4604      	mov	r4, r0
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	4616      	mov	r6, r2
 800825a:	461d      	mov	r5, r3
 800825c:	f004 fd2c 	bl	800ccb8 <rcl_context_is_valid>
 8008260:	b130      	cbz	r0, 8008270 <rclc_executor_spin_some+0x20>
 8008262:	4632      	mov	r2, r6
 8008264:	462b      	mov	r3, r5
 8008266:	4620      	mov	r0, r4
 8008268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800826c:	f7ff be4e 	b.w	8007f0c <rclc_executor_spin_some.part.0>
 8008270:	f000 f946 	bl	8008500 <rcutils_reset_error>
 8008274:	2001      	movs	r0, #1
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	200b      	movs	r0, #11
 800827a:	4770      	bx	lr

0800827c <rclc_executor_handle_counters_zero_init>:
 800827c:	b130      	cbz	r0, 800828c <rclc_executor_handle_counters_zero_init+0x10>
 800827e:	b508      	push	{r3, lr}
 8008280:	2220      	movs	r2, #32
 8008282:	2100      	movs	r1, #0
 8008284:	f00b fc4e 	bl	8013b24 <memset>
 8008288:	2000      	movs	r0, #0
 800828a:	bd08      	pop	{r3, pc}
 800828c:	200b      	movs	r0, #11
 800828e:	4770      	bx	lr

08008290 <rclc_executor_handle_init>:
 8008290:	b168      	cbz	r0, 80082ae <rclc_executor_handle_init+0x1e>
 8008292:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80082b8 <rclc_executor_handle_init+0x28>
 8008296:	2300      	movs	r3, #0
 8008298:	220b      	movs	r2, #11
 800829a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800829e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80082a2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80082a6:	8002      	strh	r2, [r0, #0]
 80082a8:	8703      	strh	r3, [r0, #56]	@ 0x38
 80082aa:	4618      	mov	r0, r3
 80082ac:	4770      	bx	lr
 80082ae:	200b      	movs	r0, #11
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	f3af 8000 	nop.w
	...

080082c0 <rclc_support_init>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	b3b8      	cbz	r0, 8008338 <rclc_support_init+0x78>
 80082c8:	461c      	mov	r4, r3
 80082ca:	b3ab      	cbz	r3, 8008338 <rclc_support_init+0x78>
 80082cc:	460f      	mov	r7, r1
 80082ce:	4690      	mov	r8, r2
 80082d0:	4606      	mov	r6, r0
 80082d2:	f004 fe5b 	bl	800cf8c <rcl_get_zero_initialized_init_options>
 80082d6:	f104 030c 	add.w	r3, r4, #12
 80082da:	9005      	str	r0, [sp, #20]
 80082dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80082e4:	a805      	add	r0, sp, #20
 80082e6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80082ea:	f004 fe51 	bl	800cf90 <rcl_init_options_init>
 80082ee:	4605      	mov	r5, r0
 80082f0:	b9e0      	cbnz	r0, 800832c <rclc_support_init+0x6c>
 80082f2:	ad02      	add	r5, sp, #8
 80082f4:	4628      	mov	r0, r5
 80082f6:	f004 fcd5 	bl	800cca4 <rcl_get_zero_initialized_context>
 80082fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80082fe:	4633      	mov	r3, r6
 8008300:	e886 0003 	stmia.w	r6, {r0, r1}
 8008304:	aa05      	add	r2, sp, #20
 8008306:	4641      	mov	r1, r8
 8008308:	4638      	mov	r0, r7
 800830a:	f004 fd3b 	bl	800cd84 <rcl_init>
 800830e:	4605      	mov	r5, r0
 8008310:	b9b8      	cbnz	r0, 8008342 <rclc_support_init+0x82>
 8008312:	60b4      	str	r4, [r6, #8]
 8008314:	4622      	mov	r2, r4
 8008316:	f106 010c 	add.w	r1, r6, #12
 800831a:	2003      	movs	r0, #3
 800831c:	f005 fb86 	bl	800da2c <rcl_clock_init>
 8008320:	4605      	mov	r5, r0
 8008322:	b970      	cbnz	r0, 8008342 <rclc_support_init+0x82>
 8008324:	a805      	add	r0, sp, #20
 8008326:	f004 fe99 	bl	800d05c <rcl_init_options_fini>
 800832a:	b108      	cbz	r0, 8008330 <rclc_support_init+0x70>
 800832c:	f000 f8e8 	bl	8008500 <rcutils_reset_error>
 8008330:	4628      	mov	r0, r5
 8008332:	b006      	add	sp, #24
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	250b      	movs	r5, #11
 800833a:	4628      	mov	r0, r5
 800833c:	b006      	add	sp, #24
 800833e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008342:	f000 f8dd 	bl	8008500 <rcutils_reset_error>
 8008346:	a805      	add	r0, sp, #20
 8008348:	f004 fe88 	bl	800d05c <rcl_init_options_fini>
 800834c:	2800      	cmp	r0, #0
 800834e:	d0ef      	beq.n	8008330 <rclc_support_init+0x70>
 8008350:	e7ec      	b.n	800832c <rclc_support_init+0x6c>
 8008352:	bf00      	nop

08008354 <rclc_node_init_default>:
 8008354:	b3b8      	cbz	r0, 80083c6 <rclc_node_init_default+0x72>
 8008356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800835a:	460d      	mov	r5, r1
 800835c:	b0a1      	sub	sp, #132	@ 0x84
 800835e:	b329      	cbz	r1, 80083ac <rclc_node_init_default+0x58>
 8008360:	4616      	mov	r6, r2
 8008362:	b31a      	cbz	r2, 80083ac <rclc_node_init_default+0x58>
 8008364:	461f      	mov	r7, r3
 8008366:	b30b      	cbz	r3, 80083ac <rclc_node_init_default+0x58>
 8008368:	f10d 0810 	add.w	r8, sp, #16
 800836c:	4604      	mov	r4, r0
 800836e:	4640      	mov	r0, r8
 8008370:	f004 ff2c 	bl	800d1cc <rcl_get_zero_initialized_node>
 8008374:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008378:	f10d 0918 	add.w	r9, sp, #24
 800837c:	e884 0003 	stmia.w	r4, {r0, r1}
 8008380:	4648      	mov	r0, r9
 8008382:	f005 f89b 	bl	800d4bc <rcl_node_get_default_options>
 8008386:	4640      	mov	r0, r8
 8008388:	f004 ff20 	bl	800d1cc <rcl_get_zero_initialized_node>
 800838c:	f8cd 9000 	str.w	r9, [sp]
 8008390:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008394:	463b      	mov	r3, r7
 8008396:	e884 0003 	stmia.w	r4, {r0, r1}
 800839a:	4632      	mov	r2, r6
 800839c:	4629      	mov	r1, r5
 800839e:	4620      	mov	r0, r4
 80083a0:	f004 ff1e 	bl	800d1e0 <rcl_node_init>
 80083a4:	b930      	cbnz	r0, 80083b4 <rclc_node_init_default+0x60>
 80083a6:	b021      	add	sp, #132	@ 0x84
 80083a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ac:	200b      	movs	r0, #11
 80083ae:	b021      	add	sp, #132	@ 0x84
 80083b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083b4:	9003      	str	r0, [sp, #12]
 80083b6:	f000 f8a3 	bl	8008500 <rcutils_reset_error>
 80083ba:	f000 f8a1 	bl	8008500 <rcutils_reset_error>
 80083be:	9803      	ldr	r0, [sp, #12]
 80083c0:	b021      	add	sp, #132	@ 0x84
 80083c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c6:	200b      	movs	r0, #11
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <rclc_publisher_init_default>:
 80083cc:	b368      	cbz	r0, 800842a <rclc_publisher_init_default+0x5e>
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	460d      	mov	r5, r1
 80083d4:	b0a0      	sub	sp, #128	@ 0x80
 80083d6:	b321      	cbz	r1, 8008422 <rclc_publisher_init_default+0x56>
 80083d8:	4616      	mov	r6, r2
 80083da:	b312      	cbz	r2, 8008422 <rclc_publisher_init_default+0x56>
 80083dc:	461f      	mov	r7, r3
 80083de:	b303      	cbz	r3, 8008422 <rclc_publisher_init_default+0x56>
 80083e0:	4604      	mov	r4, r0
 80083e2:	f7ff f881 	bl	80074e8 <rcl_get_zero_initialized_publisher>
 80083e6:	f10d 0810 	add.w	r8, sp, #16
 80083ea:	6020      	str	r0, [r4, #0]
 80083ec:	4640      	mov	r0, r8
 80083ee:	f7ff f917 	bl	8007620 <rcl_publisher_get_default_options>
 80083f2:	490f      	ldr	r1, [pc, #60]	@ (8008430 <rclc_publisher_init_default+0x64>)
 80083f4:	2250      	movs	r2, #80	@ 0x50
 80083f6:	4640      	mov	r0, r8
 80083f8:	f00b fc5d 	bl	8013cb6 <memcpy>
 80083fc:	f8cd 8000 	str.w	r8, [sp]
 8008400:	463b      	mov	r3, r7
 8008402:	4632      	mov	r2, r6
 8008404:	4629      	mov	r1, r5
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff f874 	bl	80074f4 <rcl_publisher_init>
 800840c:	b910      	cbnz	r0, 8008414 <rclc_publisher_init_default+0x48>
 800840e:	b020      	add	sp, #128	@ 0x80
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	9003      	str	r0, [sp, #12]
 8008416:	f000 f873 	bl	8008500 <rcutils_reset_error>
 800841a:	9803      	ldr	r0, [sp, #12]
 800841c:	b020      	add	sp, #128	@ 0x80
 800841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008422:	200b      	movs	r0, #11
 8008424:	b020      	add	sp, #128	@ 0x80
 8008426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800842a:	200b      	movs	r0, #11
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	08014c40 	.word	0x08014c40

08008434 <__default_zero_allocate>:
 8008434:	f00a bf8c 	b.w	8013350 <calloc>

08008438 <__default_reallocate>:
 8008438:	f00b b918 	b.w	801366c <realloc>

0800843c <__default_deallocate>:
 800843c:	f00a bff4 	b.w	8013428 <free>

08008440 <__default_allocate>:
 8008440:	f00a bfea 	b.w	8013418 <malloc>

08008444 <rcutils_get_zero_initialized_allocator>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4c05      	ldr	r4, [pc, #20]	@ (800845c <rcutils_get_zero_initialized_allocator+0x18>)
 8008448:	4686      	mov	lr, r0
 800844a:	4684      	mov	ip, r0
 800844c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800844e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f8cc 3000 	str.w	r3, [ip]
 8008458:	4670      	mov	r0, lr
 800845a:	bd10      	pop	{r4, pc}
 800845c:	08014c90 	.word	0x08014c90

08008460 <rcutils_set_default_allocator>:
 8008460:	b1a8      	cbz	r0, 800848e <rcutils_set_default_allocator+0x2e>
 8008462:	6802      	ldr	r2, [r0, #0]
 8008464:	b1a2      	cbz	r2, 8008490 <rcutils_set_default_allocator+0x30>
 8008466:	6841      	ldr	r1, [r0, #4]
 8008468:	b1a1      	cbz	r1, 8008494 <rcutils_set_default_allocator+0x34>
 800846a:	b410      	push	{r4}
 800846c:	68c4      	ldr	r4, [r0, #12]
 800846e:	b164      	cbz	r4, 800848a <rcutils_set_default_allocator+0x2a>
 8008470:	6880      	ldr	r0, [r0, #8]
 8008472:	b138      	cbz	r0, 8008484 <rcutils_set_default_allocator+0x24>
 8008474:	4b08      	ldr	r3, [pc, #32]	@ (8008498 <rcutils_set_default_allocator+0x38>)
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	2200      	movs	r2, #0
 800847a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800847e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8008482:	2001      	movs	r0, #1
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	4620      	mov	r0, r4
 800848c:	e7fa      	b.n	8008484 <rcutils_set_default_allocator+0x24>
 800848e:	4770      	bx	lr
 8008490:	4610      	mov	r0, r2
 8008492:	4770      	bx	lr
 8008494:	4608      	mov	r0, r1
 8008496:	4770      	bx	lr
 8008498:	20000014 	.word	0x20000014

0800849c <rcutils_get_default_allocator>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4c05      	ldr	r4, [pc, #20]	@ (80084b4 <rcutils_get_default_allocator+0x18>)
 80084a0:	4686      	mov	lr, r0
 80084a2:	4684      	mov	ip, r0
 80084a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	f8cc 3000 	str.w	r3, [ip]
 80084b0:	4670      	mov	r0, lr
 80084b2:	bd10      	pop	{r4, pc}
 80084b4:	20000014 	.word	0x20000014

080084b8 <rcutils_allocator_is_valid>:
 80084b8:	b158      	cbz	r0, 80084d2 <rcutils_allocator_is_valid+0x1a>
 80084ba:	6803      	ldr	r3, [r0, #0]
 80084bc:	b143      	cbz	r3, 80084d0 <rcutils_allocator_is_valid+0x18>
 80084be:	6843      	ldr	r3, [r0, #4]
 80084c0:	b133      	cbz	r3, 80084d0 <rcutils_allocator_is_valid+0x18>
 80084c2:	68c3      	ldr	r3, [r0, #12]
 80084c4:	b123      	cbz	r3, 80084d0 <rcutils_allocator_is_valid+0x18>
 80084c6:	6880      	ldr	r0, [r0, #8]
 80084c8:	3800      	subs	r0, #0
 80084ca:	bf18      	it	ne
 80084cc:	2001      	movne	r0, #1
 80084ce:	4770      	bx	lr
 80084d0:	4618      	mov	r0, r3
 80084d2:	4770      	bx	lr

080084d4 <rcutils_get_error_string>:
 80084d4:	4b06      	ldr	r3, [pc, #24]	@ (80084f0 <rcutils_get_error_string+0x1c>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	b13b      	cbz	r3, 80084ea <rcutils_get_error_string+0x16>
 80084da:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <rcutils_get_error_string+0x20>)
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	b90a      	cbnz	r2, 80084e4 <rcutils_get_error_string+0x10>
 80084e0:	2201      	movs	r2, #1
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	4b04      	ldr	r3, [pc, #16]	@ (80084f8 <rcutils_get_error_string+0x24>)
 80084e6:	7818      	ldrb	r0, [r3, #0]
 80084e8:	4770      	bx	lr
 80084ea:	4b04      	ldr	r3, [pc, #16]	@ (80084fc <rcutils_get_error_string+0x28>)
 80084ec:	7818      	ldrb	r0, [r3, #0]
 80084ee:	4770      	bx	lr
 80084f0:	20009078 	.word	0x20009078
 80084f4:	20009091 	.word	0x20009091
 80084f8:	20009090 	.word	0x20009090
 80084fc:	08014ca4 	.word	0x08014ca4

08008500 <rcutils_reset_error>:
 8008500:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8008520 <rcutils_reset_error+0x20>
 8008504:	4a08      	ldr	r2, [pc, #32]	@ (8008528 <rcutils_reset_error+0x28>)
 8008506:	4809      	ldr	r0, [pc, #36]	@ (800852c <rcutils_reset_error+0x2c>)
 8008508:	4909      	ldr	r1, [pc, #36]	@ (8008530 <rcutils_reset_error+0x30>)
 800850a:	2300      	movs	r3, #0
 800850c:	8013      	strh	r3, [r2, #0]
 800850e:	ed82 7b02 	vstr	d7, [r2, #8]
 8008512:	4a08      	ldr	r2, [pc, #32]	@ (8008534 <rcutils_reset_error+0x34>)
 8008514:	7003      	strb	r3, [r0, #0]
 8008516:	700b      	strb	r3, [r1, #0]
 8008518:	7013      	strb	r3, [r2, #0]
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w
	...
 8008528:	20009080 	.word	0x20009080
 800852c:	20009091 	.word	0x20009091
 8008530:	20009090 	.word	0x20009090
 8008534:	20009078 	.word	0x20009078

08008538 <rcutils_system_time_now>:
 8008538:	b308      	cbz	r0, 800857e <rcutils_system_time_now+0x46>
 800853a:	b570      	push	{r4, r5, r6, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	4604      	mov	r4, r0
 8008540:	4669      	mov	r1, sp
 8008542:	2001      	movs	r0, #1
 8008544:	f7f8 fdc4 	bl	80010d0 <clock_gettime>
 8008548:	e9dd 3500 	ldrd	r3, r5, [sp]
 800854c:	2d00      	cmp	r5, #0
 800854e:	db13      	blt.n	8008578 <rcutils_system_time_now+0x40>
 8008550:	9902      	ldr	r1, [sp, #8]
 8008552:	2900      	cmp	r1, #0
 8008554:	db0d      	blt.n	8008572 <rcutils_system_time_now+0x3a>
 8008556:	4e0b      	ldr	r6, [pc, #44]	@ (8008584 <rcutils_system_time_now+0x4c>)
 8008558:	fba3 3206 	umull	r3, r2, r3, r6
 800855c:	185b      	adds	r3, r3, r1
 800855e:	fb06 2205 	mla	r2, r6, r5, r2
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800856a:	e9c4 3200 	strd	r3, r2, [r4]
 800856e:	b004      	add	sp, #16
 8008570:	bd70      	pop	{r4, r5, r6, pc}
 8008572:	ea53 0205 	orrs.w	r2, r3, r5
 8008576:	d1ee      	bne.n	8008556 <rcutils_system_time_now+0x1e>
 8008578:	2002      	movs	r0, #2
 800857a:	b004      	add	sp, #16
 800857c:	bd70      	pop	{r4, r5, r6, pc}
 800857e:	200b      	movs	r0, #11
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	3b9aca00 	.word	0x3b9aca00

08008588 <rcutils_steady_time_now>:
 8008588:	b308      	cbz	r0, 80085ce <rcutils_steady_time_now+0x46>
 800858a:	b570      	push	{r4, r5, r6, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	4604      	mov	r4, r0
 8008590:	4669      	mov	r1, sp
 8008592:	2000      	movs	r0, #0
 8008594:	f7f8 fd9c 	bl	80010d0 <clock_gettime>
 8008598:	e9dd 3500 	ldrd	r3, r5, [sp]
 800859c:	2d00      	cmp	r5, #0
 800859e:	db13      	blt.n	80085c8 <rcutils_steady_time_now+0x40>
 80085a0:	9902      	ldr	r1, [sp, #8]
 80085a2:	2900      	cmp	r1, #0
 80085a4:	db0d      	blt.n	80085c2 <rcutils_steady_time_now+0x3a>
 80085a6:	4e0b      	ldr	r6, [pc, #44]	@ (80085d4 <rcutils_steady_time_now+0x4c>)
 80085a8:	fba3 3206 	umull	r3, r2, r3, r6
 80085ac:	185b      	adds	r3, r3, r1
 80085ae:	fb06 2205 	mla	r2, r6, r5, r2
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80085ba:	e9c4 3200 	strd	r3, r2, [r4]
 80085be:	b004      	add	sp, #16
 80085c0:	bd70      	pop	{r4, r5, r6, pc}
 80085c2:	ea53 0205 	orrs.w	r2, r3, r5
 80085c6:	d1ee      	bne.n	80085a6 <rcutils_steady_time_now+0x1e>
 80085c8:	2002      	movs	r0, #2
 80085ca:	b004      	add	sp, #16
 80085cc:	bd70      	pop	{r4, r5, r6, pc}
 80085ce:	200b      	movs	r0, #11
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	3b9aca00 	.word	0x3b9aca00

080085d8 <rmw_get_default_publisher_options>:
 80085d8:	2200      	movs	r2, #0
 80085da:	6002      	str	r2, [r0, #0]
 80085dc:	7102      	strb	r2, [r0, #4]
 80085de:	4770      	bx	lr

080085e0 <rmw_uros_set_custom_transport>:
 80085e0:	b470      	push	{r4, r5, r6}
 80085e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80085e6:	b162      	cbz	r2, 8008602 <rmw_uros_set_custom_transport+0x22>
 80085e8:	b15b      	cbz	r3, 8008602 <rmw_uros_set_custom_transport+0x22>
 80085ea:	b155      	cbz	r5, 8008602 <rmw_uros_set_custom_transport+0x22>
 80085ec:	b14e      	cbz	r6, 8008602 <rmw_uros_set_custom_transport+0x22>
 80085ee:	4c06      	ldr	r4, [pc, #24]	@ (8008608 <rmw_uros_set_custom_transport+0x28>)
 80085f0:	7020      	strb	r0, [r4, #0]
 80085f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80085f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085fa:	6166      	str	r6, [r4, #20]
 80085fc:	2000      	movs	r0, #0
 80085fe:	bc70      	pop	{r4, r5, r6}
 8008600:	4770      	bx	lr
 8008602:	200b      	movs	r0, #11
 8008604:	bc70      	pop	{r4, r5, r6}
 8008606:	4770      	bx	lr
 8008608:	20009094 	.word	0x20009094

0800860c <flush_session>:
 800860c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800860e:	f002 bc1f 	b.w	800ae50 <uxr_run_session_until_confirm_delivery>
 8008612:	bf00      	nop

08008614 <rmw_publish>:
 8008614:	2800      	cmp	r0, #0
 8008616:	d053      	beq.n	80086c0 <rmw_publish+0xac>
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	460d      	mov	r5, r1
 800861c:	b08e      	sub	sp, #56	@ 0x38
 800861e:	2900      	cmp	r1, #0
 8008620:	d04b      	beq.n	80086ba <rmw_publish+0xa6>
 8008622:	4604      	mov	r4, r0
 8008624:	6800      	ldr	r0, [r0, #0]
 8008626:	f000 fced 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 800862a:	2800      	cmp	r0, #0
 800862c:	d045      	beq.n	80086ba <rmw_publish+0xa6>
 800862e:	6866      	ldr	r6, [r4, #4]
 8008630:	2e00      	cmp	r6, #0
 8008632:	d042      	beq.n	80086ba <rmw_publish+0xa6>
 8008634:	69b4      	ldr	r4, [r6, #24]
 8008636:	4628      	mov	r0, r5
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	4798      	blx	r3
 800863c:	69f3      	ldr	r3, [r6, #28]
 800863e:	9005      	str	r0, [sp, #20]
 8008640:	b113      	cbz	r3, 8008648 <rmw_publish+0x34>
 8008642:	a805      	add	r0, sp, #20
 8008644:	4798      	blx	r3
 8008646:	9805      	ldr	r0, [sp, #20]
 8008648:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	9000      	str	r0, [sp, #0]
 8008650:	6972      	ldr	r2, [r6, #20]
 8008652:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8008654:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8008658:	ab06      	add	r3, sp, #24
 800865a:	f003 f9e5 	bl	800ba28 <uxr_prepare_output_stream>
 800865e:	b1d8      	cbz	r0, 8008698 <rmw_publish+0x84>
 8008660:	68a3      	ldr	r3, [r4, #8]
 8008662:	a906      	add	r1, sp, #24
 8008664:	4628      	mov	r0, r5
 8008666:	4798      	blx	r3
 8008668:	6a33      	ldr	r3, [r6, #32]
 800866a:	4604      	mov	r4, r0
 800866c:	b10b      	cbz	r3, 8008672 <rmw_publish+0x5e>
 800866e:	a806      	add	r0, sp, #24
 8008670:	4798      	blx	r3
 8008672:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8008676:	2b01      	cmp	r3, #1
 8008678:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800867c:	d022      	beq.n	80086c4 <rmw_publish+0xb0>
 800867e:	6918      	ldr	r0, [r3, #16]
 8008680:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8008682:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008686:	f002 fbe3 	bl	800ae50 <uxr_run_session_until_confirm_delivery>
 800868a:	4020      	ands	r0, r4
 800868c:	b2c4      	uxtb	r4, r0
 800868e:	f084 0001 	eor.w	r0, r4, #1
 8008692:	b2c0      	uxtb	r0, r0
 8008694:	b00e      	add	sp, #56	@ 0x38
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800869c:	6918      	ldr	r0, [r3, #16]
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4b0b      	ldr	r3, [pc, #44]	@ (80086d0 <rmw_publish+0xbc>)
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	9602      	str	r6, [sp, #8]
 80086a8:	6972      	ldr	r2, [r6, #20]
 80086aa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80086ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80086b0:	ab06      	add	r3, sp, #24
 80086b2:	f003 f9e9 	bl	800ba88 <uxr_prepare_output_stream_fragmented>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d1d2      	bne.n	8008660 <rmw_publish+0x4c>
 80086ba:	2001      	movs	r0, #1
 80086bc:	b00e      	add	sp, #56	@ 0x38
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	2001      	movs	r0, #1
 80086c2:	4770      	bx	lr
 80086c4:	6918      	ldr	r0, [r3, #16]
 80086c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80086ca:	f002 f801 	bl	800a6d0 <uxr_flash_output_streams>
 80086ce:	e7de      	b.n	800868e <rmw_publish+0x7a>
 80086d0:	0800860d 	.word	0x0800860d

080086d4 <rmw_create_publisher>:
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	b087      	sub	sp, #28
 80086da:	2800      	cmp	r0, #0
 80086dc:	f000 80cc 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 80086e0:	460e      	mov	r6, r1
 80086e2:	2900      	cmp	r1, #0
 80086e4:	f000 80c8 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 80086e8:	4604      	mov	r4, r0
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	4615      	mov	r5, r2
 80086ee:	4698      	mov	r8, r3
 80086f0:	f000 fc88 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f000 80bf 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	f000 80bc 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 8008700:	782b      	ldrb	r3, [r5, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80b8 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 8008708:	f1b8 0f00 	cmp.w	r8, #0
 800870c:	f000 80b4 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 8008710:	485c      	ldr	r0, [pc, #368]	@ (8008884 <rmw_create_publisher+0x1b0>)
 8008712:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008716:	f007 fc13 	bl	800ff40 <get_memory>
 800871a:	2800      	cmp	r0, #0
 800871c:	f000 80ac 	beq.w	8008878 <rmw_create_publisher+0x1a4>
 8008720:	6884      	ldr	r4, [r0, #8]
 8008722:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8008726:	f007 fc73 	bl	8010010 <rmw_get_implementation_identifier>
 800872a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800872e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8008732:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 fd5c 	bl	80001f4 <strlen>
 800873c:	3001      	adds	r0, #1
 800873e:	283c      	cmp	r0, #60	@ 0x3c
 8008740:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8008744:	f200 8091 	bhi.w	800886a <rmw_create_publisher+0x196>
 8008748:	4a4f      	ldr	r2, [pc, #316]	@ (8008888 <rmw_create_publisher+0x1b4>)
 800874a:	462b      	mov	r3, r5
 800874c:	213c      	movs	r1, #60	@ 0x3c
 800874e:	4650      	mov	r0, sl
 8008750:	f00b f90e 	bl	8013970 <sniprintf>
 8008754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008758:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800875a:	4641      	mov	r1, r8
 800875c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8008760:	2250      	movs	r2, #80	@ 0x50
 8008762:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008766:	f00b faa6 	bl	8013cb6 <memcpy>
 800876a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800876e:	4947      	ldr	r1, [pc, #284]	@ (800888c <rmw_create_publisher+0x1b8>)
 8008770:	2b02      	cmp	r3, #2
 8008772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008776:	bf0c      	ite	eq
 8008778:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800877c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8008780:	67a3      	str	r3, [r4, #120]	@ 0x78
 8008782:	2300      	movs	r3, #0
 8008784:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008788:	4630      	mov	r0, r6
 800878a:	f000 fc49 	bl	8009020 <get_message_typesupport_handle>
 800878e:	2800      	cmp	r0, #0
 8008790:	d06b      	beq.n	800886a <rmw_create_publisher+0x196>
 8008792:	6842      	ldr	r2, [r0, #4]
 8008794:	61a2      	str	r2, [r4, #24]
 8008796:	2a00      	cmp	r2, #0
 8008798:	d067      	beq.n	800886a <rmw_create_publisher+0x196>
 800879a:	4629      	mov	r1, r5
 800879c:	4643      	mov	r3, r8
 800879e:	4648      	mov	r0, r9
 80087a0:	f007 fe9c 	bl	80104dc <create_topic>
 80087a4:	6260      	str	r0, [r4, #36]	@ 0x24
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d063      	beq.n	8008872 <rmw_create_publisher+0x19e>
 80087aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087b2:	2103      	movs	r1, #3
 80087b4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80087b8:	1c42      	adds	r2, r0, #1
 80087ba:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80087be:	f001 fe37 	bl	800a430 <uxr_object_id>
 80087c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80087c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087ca:	6120      	str	r0, [r4, #16]
 80087cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80087d0:	6910      	ldr	r0, [r2, #16]
 80087d2:	2506      	movs	r5, #6
 80087d4:	9500      	str	r5, [sp, #0]
 80087d6:	6819      	ldr	r1, [r3, #0]
 80087d8:	6922      	ldr	r2, [r4, #16]
 80087da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80087de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80087e2:	f001 fd7f 	bl	800a2e4 <uxr_buffer_create_publisher_bin>
 80087e6:	4602      	mov	r2, r0
 80087e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80087ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80087f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80087f4:	f000 fb86 	bl	8008f04 <run_xrce_session>
 80087f8:	b3b8      	cbz	r0, 800886a <rmw_create_publisher+0x196>
 80087fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008802:	2105      	movs	r1, #5
 8008804:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8008808:	1c42      	adds	r2, r0, #1
 800880a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800880e:	f001 fe0f 	bl	800a430 <uxr_object_id>
 8008812:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008816:	6160      	str	r0, [r4, #20]
 8008818:	691e      	ldr	r6, [r3, #16]
 800881a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800881e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8008822:	f10d 0a10 	add.w	sl, sp, #16
 8008826:	4641      	mov	r1, r8
 8008828:	4650      	mov	r0, sl
 800882a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800882e:	f000 fb85 	bl	8008f3c <convert_qos_profile>
 8008832:	9503      	str	r5, [sp, #12]
 8008834:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008838:	9001      	str	r0, [sp, #4]
 800883a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800883e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8008848:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800884c:	f8d8 1000 	ldr.w	r1, [r8]
 8008850:	4630      	mov	r0, r6
 8008852:	f001 fd77 	bl	800a344 <uxr_buffer_create_datawriter_bin>
 8008856:	4602      	mov	r2, r0
 8008858:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800885c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008860:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008864:	f000 fb4e 	bl	8008f04 <run_xrce_session>
 8008868:	b938      	cbnz	r0, 800887a <rmw_create_publisher+0x1a6>
 800886a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800886c:	b108      	cbz	r0, 8008872 <rmw_create_publisher+0x19e>
 800886e:	f000 fa47 	bl	8008d00 <rmw_uxrce_fini_topic_memory>
 8008872:	4638      	mov	r0, r7
 8008874:	f000 f9ec 	bl	8008c50 <rmw_uxrce_fini_publisher_memory>
 8008878:	2700      	movs	r7, #0
 800887a:	4638      	mov	r0, r7
 800887c:	b007      	add	sp, #28
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	bf00      	nop
 8008884:	2000d98c 	.word	0x2000d98c
 8008888:	08014cdc 	.word	0x08014cdc
 800888c:	08014ca8 	.word	0x08014ca8

08008890 <rmw_publisher_get_actual_qos>:
 8008890:	b150      	cbz	r0, 80088a8 <rmw_publisher_get_actual_qos+0x18>
 8008892:	b508      	push	{r3, lr}
 8008894:	460b      	mov	r3, r1
 8008896:	b149      	cbz	r1, 80088ac <rmw_publisher_get_actual_qos+0x1c>
 8008898:	6841      	ldr	r1, [r0, #4]
 800889a:	2250      	movs	r2, #80	@ 0x50
 800889c:	3128      	adds	r1, #40	@ 0x28
 800889e:	4618      	mov	r0, r3
 80088a0:	f00b fa09 	bl	8013cb6 <memcpy>
 80088a4:	2000      	movs	r0, #0
 80088a6:	bd08      	pop	{r3, pc}
 80088a8:	200b      	movs	r0, #11
 80088aa:	4770      	bx	lr
 80088ac:	200b      	movs	r0, #11
 80088ae:	bd08      	pop	{r3, pc}

080088b0 <rmw_destroy_publisher>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	b128      	cbz	r0, 80088c0 <rmw_destroy_publisher+0x10>
 80088b4:	4604      	mov	r4, r0
 80088b6:	6800      	ldr	r0, [r0, #0]
 80088b8:	460d      	mov	r5, r1
 80088ba:	f000 fba3 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 80088be:	b910      	cbnz	r0, 80088c6 <rmw_destroy_publisher+0x16>
 80088c0:	2401      	movs	r4, #1
 80088c2:	4620      	mov	r0, r4
 80088c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f9      	beq.n	80088c0 <rmw_destroy_publisher+0x10>
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	d0f7      	beq.n	80088c0 <rmw_destroy_publisher+0x10>
 80088d0:	6828      	ldr	r0, [r5, #0]
 80088d2:	f000 fb97 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0f2      	beq.n	80088c0 <rmw_destroy_publisher+0x10>
 80088da:	686c      	ldr	r4, [r5, #4]
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d0ef      	beq.n	80088c0 <rmw_destroy_publisher+0x10>
 80088e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80088e2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80088e6:	f007 fe49 	bl	801057c <destroy_topic>
 80088ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80088ee:	6962      	ldr	r2, [r4, #20]
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80088f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80088fa:	6819      	ldr	r1, [r3, #0]
 80088fc:	f001 fc3e 	bl	800a17c <uxr_buffer_delete_entity>
 8008900:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800890c:	4604      	mov	r4, r0
 800890e:	6809      	ldr	r1, [r1, #0]
 8008910:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8008914:	f001 fc32 	bl	800a17c <uxr_buffer_delete_entity>
 8008918:	693e      	ldr	r6, [r7, #16]
 800891a:	4622      	mov	r2, r4
 800891c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008920:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008924:	4604      	mov	r4, r0
 8008926:	4630      	mov	r0, r6
 8008928:	f000 faec 	bl	8008f04 <run_xrce_session>
 800892c:	693e      	ldr	r6, [r7, #16]
 800892e:	4622      	mov	r2, r4
 8008930:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008934:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008938:	4604      	mov	r4, r0
 800893a:	4630      	mov	r0, r6
 800893c:	f000 fae2 	bl	8008f04 <run_xrce_session>
 8008940:	b12c      	cbz	r4, 800894e <rmw_destroy_publisher+0x9e>
 8008942:	b120      	cbz	r0, 800894e <rmw_destroy_publisher+0x9e>
 8008944:	2400      	movs	r4, #0
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f982 	bl	8008c50 <rmw_uxrce_fini_publisher_memory>
 800894c:	e7b9      	b.n	80088c2 <rmw_destroy_publisher+0x12>
 800894e:	2402      	movs	r4, #2
 8008950:	e7f9      	b.n	8008946 <rmw_destroy_publisher+0x96>
 8008952:	bf00      	nop

08008954 <rmw_uxrce_init_service_memory>:
 8008954:	b1e2      	cbz	r2, 8008990 <rmw_uxrce_init_service_memory+0x3c>
 8008956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	7b05      	ldrb	r5, [r0, #12]
 800895c:	4606      	mov	r6, r0
 800895e:	b9ad      	cbnz	r5, 800898c <rmw_uxrce_init_service_memory+0x38>
 8008960:	23c8      	movs	r3, #200	@ 0xc8
 8008962:	e9c0 5500 	strd	r5, r5, [r0]
 8008966:	6083      	str	r3, [r0, #8]
 8008968:	f240 1301 	movw	r3, #257	@ 0x101
 800896c:	4617      	mov	r7, r2
 800896e:	8183      	strh	r3, [r0, #12]
 8008970:	460c      	mov	r4, r1
 8008972:	46a8      	mov	r8, r5
 8008974:	4621      	mov	r1, r4
 8008976:	4630      	mov	r0, r6
 8008978:	3501      	adds	r5, #1
 800897a:	f007 faf1 	bl	800ff60 <put_memory>
 800897e:	42af      	cmp	r7, r5
 8008980:	60a4      	str	r4, [r4, #8]
 8008982:	f884 800c 	strb.w	r8, [r4, #12]
 8008986:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800898a:	d1f3      	bne.n	8008974 <rmw_uxrce_init_service_memory+0x20>
 800898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <rmw_uxrce_init_client_memory>:
 8008994:	b1e2      	cbz	r2, 80089d0 <rmw_uxrce_init_client_memory+0x3c>
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	7b05      	ldrb	r5, [r0, #12]
 800899c:	4606      	mov	r6, r0
 800899e:	b9ad      	cbnz	r5, 80089cc <rmw_uxrce_init_client_memory+0x38>
 80089a0:	23c8      	movs	r3, #200	@ 0xc8
 80089a2:	e9c0 5500 	strd	r5, r5, [r0]
 80089a6:	6083      	str	r3, [r0, #8]
 80089a8:	f240 1301 	movw	r3, #257	@ 0x101
 80089ac:	4617      	mov	r7, r2
 80089ae:	8183      	strh	r3, [r0, #12]
 80089b0:	460c      	mov	r4, r1
 80089b2:	46a8      	mov	r8, r5
 80089b4:	4621      	mov	r1, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	3501      	adds	r5, #1
 80089ba:	f007 fad1 	bl	800ff60 <put_memory>
 80089be:	42af      	cmp	r7, r5
 80089c0:	60a4      	str	r4, [r4, #8]
 80089c2:	f884 800c 	strb.w	r8, [r4, #12]
 80089c6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80089ca:	d1f3      	bne.n	80089b4 <rmw_uxrce_init_client_memory+0x20>
 80089cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <rmw_uxrce_init_publisher_memory>:
 80089d4:	b1e2      	cbz	r2, 8008a10 <rmw_uxrce_init_publisher_memory+0x3c>
 80089d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	7b05      	ldrb	r5, [r0, #12]
 80089dc:	4606      	mov	r6, r0
 80089de:	b9ad      	cbnz	r5, 8008a0c <rmw_uxrce_init_publisher_memory+0x38>
 80089e0:	23d8      	movs	r3, #216	@ 0xd8
 80089e2:	e9c0 5500 	strd	r5, r5, [r0]
 80089e6:	6083      	str	r3, [r0, #8]
 80089e8:	f240 1301 	movw	r3, #257	@ 0x101
 80089ec:	4617      	mov	r7, r2
 80089ee:	8183      	strh	r3, [r0, #12]
 80089f0:	460c      	mov	r4, r1
 80089f2:	46a8      	mov	r8, r5
 80089f4:	4621      	mov	r1, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	3501      	adds	r5, #1
 80089fa:	f007 fab1 	bl	800ff60 <put_memory>
 80089fe:	42af      	cmp	r7, r5
 8008a00:	60a4      	str	r4, [r4, #8]
 8008a02:	f884 800c 	strb.w	r8, [r4, #12]
 8008a06:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008a0a:	d1f3      	bne.n	80089f4 <rmw_uxrce_init_publisher_memory+0x20>
 8008a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <rmw_uxrce_init_subscription_memory>:
 8008a14:	b1e2      	cbz	r2, 8008a50 <rmw_uxrce_init_subscription_memory+0x3c>
 8008a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	7b05      	ldrb	r5, [r0, #12]
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	b9ad      	cbnz	r5, 8008a4c <rmw_uxrce_init_subscription_memory+0x38>
 8008a20:	23d8      	movs	r3, #216	@ 0xd8
 8008a22:	e9c0 5500 	strd	r5, r5, [r0]
 8008a26:	6083      	str	r3, [r0, #8]
 8008a28:	f240 1301 	movw	r3, #257	@ 0x101
 8008a2c:	4617      	mov	r7, r2
 8008a2e:	8183      	strh	r3, [r0, #12]
 8008a30:	460c      	mov	r4, r1
 8008a32:	46a8      	mov	r8, r5
 8008a34:	4621      	mov	r1, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	3501      	adds	r5, #1
 8008a3a:	f007 fa91 	bl	800ff60 <put_memory>
 8008a3e:	42af      	cmp	r7, r5
 8008a40:	60a4      	str	r4, [r4, #8]
 8008a42:	f884 800c 	strb.w	r8, [r4, #12]
 8008a46:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008a4a:	d1f3      	bne.n	8008a34 <rmw_uxrce_init_subscription_memory+0x20>
 8008a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <rmw_uxrce_init_node_memory>:
 8008a54:	b1e2      	cbz	r2, 8008a90 <rmw_uxrce_init_node_memory+0x3c>
 8008a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5a:	7b05      	ldrb	r5, [r0, #12]
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	b9ad      	cbnz	r5, 8008a8c <rmw_uxrce_init_node_memory+0x38>
 8008a60:	23a4      	movs	r3, #164	@ 0xa4
 8008a62:	e9c0 5500 	strd	r5, r5, [r0]
 8008a66:	6083      	str	r3, [r0, #8]
 8008a68:	f240 1301 	movw	r3, #257	@ 0x101
 8008a6c:	4617      	mov	r7, r2
 8008a6e:	8183      	strh	r3, [r0, #12]
 8008a70:	460c      	mov	r4, r1
 8008a72:	46a8      	mov	r8, r5
 8008a74:	4621      	mov	r1, r4
 8008a76:	4630      	mov	r0, r6
 8008a78:	3501      	adds	r5, #1
 8008a7a:	f007 fa71 	bl	800ff60 <put_memory>
 8008a7e:	42af      	cmp	r7, r5
 8008a80:	60a4      	str	r4, [r4, #8]
 8008a82:	f884 800c 	strb.w	r8, [r4, #12]
 8008a86:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8008a8a:	d1f3      	bne.n	8008a74 <rmw_uxrce_init_node_memory+0x20>
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop

08008a94 <rmw_uxrce_init_session_memory>:
 8008a94:	b1ea      	cbz	r2, 8008ad2 <rmw_uxrce_init_session_memory+0x3e>
 8008a96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9a:	7b05      	ldrb	r5, [r0, #12]
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	b9b5      	cbnz	r5, 8008ace <rmw_uxrce_init_session_memory+0x3a>
 8008aa0:	e9c0 5500 	strd	r5, r5, [r0]
 8008aa4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8008aa8:	f240 1301 	movw	r3, #257	@ 0x101
 8008aac:	4617      	mov	r7, r2
 8008aae:	f8c0 8008 	str.w	r8, [r0, #8]
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	8183      	strh	r3, [r0, #12]
 8008ab6:	46a9      	mov	r9, r5
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4630      	mov	r0, r6
 8008abc:	3501      	adds	r5, #1
 8008abe:	f007 fa4f 	bl	800ff60 <put_memory>
 8008ac2:	42af      	cmp	r7, r5
 8008ac4:	60a4      	str	r4, [r4, #8]
 8008ac6:	f884 900c 	strb.w	r9, [r4, #12]
 8008aca:	4444      	add	r4, r8
 8008acc:	d1f4      	bne.n	8008ab8 <rmw_uxrce_init_session_memory+0x24>
 8008ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	4770      	bx	lr

08008ad4 <rmw_uxrce_init_topic_memory>:
 8008ad4:	b1e2      	cbz	r2, 8008b10 <rmw_uxrce_init_topic_memory+0x3c>
 8008ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ada:	7b05      	ldrb	r5, [r0, #12]
 8008adc:	4606      	mov	r6, r0
 8008ade:	b9ad      	cbnz	r5, 8008b0c <rmw_uxrce_init_topic_memory+0x38>
 8008ae0:	231c      	movs	r3, #28
 8008ae2:	e9c0 5500 	strd	r5, r5, [r0]
 8008ae6:	6083      	str	r3, [r0, #8]
 8008ae8:	f240 1301 	movw	r3, #257	@ 0x101
 8008aec:	4617      	mov	r7, r2
 8008aee:	8183      	strh	r3, [r0, #12]
 8008af0:	460c      	mov	r4, r1
 8008af2:	46a8      	mov	r8, r5
 8008af4:	4621      	mov	r1, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	3501      	adds	r5, #1
 8008afa:	f007 fa31 	bl	800ff60 <put_memory>
 8008afe:	42af      	cmp	r7, r5
 8008b00:	60a4      	str	r4, [r4, #8]
 8008b02:	f884 800c 	strb.w	r8, [r4, #12]
 8008b06:	f104 041c 	add.w	r4, r4, #28
 8008b0a:	d1f3      	bne.n	8008af4 <rmw_uxrce_init_topic_memory+0x20>
 8008b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop

08008b14 <rmw_uxrce_init_static_input_buffer_memory>:
 8008b14:	b1ea      	cbz	r2, 8008b52 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8008b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	7b05      	ldrb	r5, [r0, #12]
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	b9b5      	cbnz	r5, 8008b4e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008b20:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8008b24:	e9c0 5500 	strd	r5, r5, [r0]
 8008b28:	6083      	str	r3, [r0, #8]
 8008b2a:	f240 1301 	movw	r3, #257	@ 0x101
 8008b2e:	4617      	mov	r7, r2
 8008b30:	8183      	strh	r3, [r0, #12]
 8008b32:	460c      	mov	r4, r1
 8008b34:	46a8      	mov	r8, r5
 8008b36:	4621      	mov	r1, r4
 8008b38:	4630      	mov	r0, r6
 8008b3a:	3501      	adds	r5, #1
 8008b3c:	f007 fa10 	bl	800ff60 <put_memory>
 8008b40:	42af      	cmp	r7, r5
 8008b42:	60a4      	str	r4, [r4, #8]
 8008b44:	f884 800c 	strb.w	r8, [r4, #12]
 8008b48:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8008b4c:	d1f3      	bne.n	8008b36 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b52:	4770      	bx	lr

08008b54 <rmw_uxrce_init_init_options_impl_memory>:
 8008b54:	b1e2      	cbz	r2, 8008b90 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8008b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	7b05      	ldrb	r5, [r0, #12]
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	b9ad      	cbnz	r5, 8008b8c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008b60:	232c      	movs	r3, #44	@ 0x2c
 8008b62:	e9c0 5500 	strd	r5, r5, [r0]
 8008b66:	6083      	str	r3, [r0, #8]
 8008b68:	f240 1301 	movw	r3, #257	@ 0x101
 8008b6c:	4617      	mov	r7, r2
 8008b6e:	8183      	strh	r3, [r0, #12]
 8008b70:	460c      	mov	r4, r1
 8008b72:	46a8      	mov	r8, r5
 8008b74:	4621      	mov	r1, r4
 8008b76:	4630      	mov	r0, r6
 8008b78:	3501      	adds	r5, #1
 8008b7a:	f007 f9f1 	bl	800ff60 <put_memory>
 8008b7e:	42af      	cmp	r7, r5
 8008b80:	60a4      	str	r4, [r4, #8]
 8008b82:	f884 800c 	strb.w	r8, [r4, #12]
 8008b86:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8008b8a:	d1f3      	bne.n	8008b74 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop

08008b94 <rmw_uxrce_init_wait_set_memory>:
 8008b94:	b1e2      	cbz	r2, 8008bd0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8008b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	7b05      	ldrb	r5, [r0, #12]
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	b9ad      	cbnz	r5, 8008bcc <rmw_uxrce_init_wait_set_memory+0x38>
 8008ba0:	231c      	movs	r3, #28
 8008ba2:	e9c0 5500 	strd	r5, r5, [r0]
 8008ba6:	6083      	str	r3, [r0, #8]
 8008ba8:	f240 1301 	movw	r3, #257	@ 0x101
 8008bac:	4617      	mov	r7, r2
 8008bae:	8183      	strh	r3, [r0, #12]
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	46a8      	mov	r8, r5
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	3501      	adds	r5, #1
 8008bba:	f007 f9d1 	bl	800ff60 <put_memory>
 8008bbe:	42af      	cmp	r7, r5
 8008bc0:	60a4      	str	r4, [r4, #8]
 8008bc2:	f884 800c 	strb.w	r8, [r4, #12]
 8008bc6:	f104 041c 	add.w	r4, r4, #28
 8008bca:	d1f3      	bne.n	8008bb4 <rmw_uxrce_init_wait_set_memory+0x20>
 8008bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop

08008bd4 <rmw_uxrce_init_guard_condition_memory>:
 8008bd4:	b1e2      	cbz	r2, 8008c10 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	7b05      	ldrb	r5, [r0, #12]
 8008bdc:	4606      	mov	r6, r0
 8008bde:	b9ad      	cbnz	r5, 8008c0c <rmw_uxrce_init_guard_condition_memory+0x38>
 8008be0:	2320      	movs	r3, #32
 8008be2:	e9c0 5500 	strd	r5, r5, [r0]
 8008be6:	6083      	str	r3, [r0, #8]
 8008be8:	f240 1301 	movw	r3, #257	@ 0x101
 8008bec:	4617      	mov	r7, r2
 8008bee:	8183      	strh	r3, [r0, #12]
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	46a8      	mov	r8, r5
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	3501      	adds	r5, #1
 8008bfa:	f007 f9b1 	bl	800ff60 <put_memory>
 8008bfe:	42af      	cmp	r7, r5
 8008c00:	60a4      	str	r4, [r4, #8]
 8008c02:	f884 800c 	strb.w	r8, [r4, #12]
 8008c06:	f104 0420 	add.w	r4, r4, #32
 8008c0a:	d1f3      	bne.n	8008bf4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop

08008c14 <rmw_uxrce_fini_session_memory>:
 8008c14:	4601      	mov	r1, r0
 8008c16:	4801      	ldr	r0, [pc, #4]	@ (8008c1c <rmw_uxrce_fini_session_memory+0x8>)
 8008c18:	f007 b9a2 	b.w	800ff60 <put_memory>
 8008c1c:	2000d9ac 	.word	0x2000d9ac

08008c20 <rmw_uxrce_fini_node_memory>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	6800      	ldr	r0, [r0, #0]
 8008c26:	b128      	cbz	r0, 8008c34 <rmw_uxrce_fini_node_memory+0x14>
 8008c28:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <rmw_uxrce_fini_node_memory+0x28>)
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	f7f7 fad8 	bl	80001e0 <strcmp>
 8008c30:	b940      	cbnz	r0, 8008c44 <rmw_uxrce_fini_node_memory+0x24>
 8008c32:	6020      	str	r0, [r4, #0]
 8008c34:	6861      	ldr	r1, [r4, #4]
 8008c36:	b129      	cbz	r1, 8008c44 <rmw_uxrce_fini_node_memory+0x24>
 8008c38:	2500      	movs	r5, #0
 8008c3a:	4804      	ldr	r0, [pc, #16]	@ (8008c4c <rmw_uxrce_fini_node_memory+0x2c>)
 8008c3c:	610d      	str	r5, [r1, #16]
 8008c3e:	f007 f98f 	bl	800ff60 <put_memory>
 8008c42:	6065      	str	r5, [r4, #4]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	080153a8 	.word	0x080153a8
 8008c4c:	2000d97c 	.word	0x2000d97c

08008c50 <rmw_uxrce_fini_publisher_memory>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4604      	mov	r4, r0
 8008c54:	6800      	ldr	r0, [r0, #0]
 8008c56:	b128      	cbz	r0, 8008c64 <rmw_uxrce_fini_publisher_memory+0x14>
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <rmw_uxrce_fini_publisher_memory+0x24>)
 8008c5a:	6819      	ldr	r1, [r3, #0]
 8008c5c:	f7f7 fac0 	bl	80001e0 <strcmp>
 8008c60:	b938      	cbnz	r0, 8008c72 <rmw_uxrce_fini_publisher_memory+0x22>
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	b121      	cbz	r1, 8008c72 <rmw_uxrce_fini_publisher_memory+0x22>
 8008c68:	4803      	ldr	r0, [pc, #12]	@ (8008c78 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008c6a:	f007 f979 	bl	800ff60 <put_memory>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	bd10      	pop	{r4, pc}
 8008c74:	080153a8 	.word	0x080153a8
 8008c78:	2000d98c 	.word	0x2000d98c

08008c7c <rmw_uxrce_fini_subscription_memory>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	4604      	mov	r4, r0
 8008c80:	6800      	ldr	r0, [r0, #0]
 8008c82:	b128      	cbz	r0, 8008c90 <rmw_uxrce_fini_subscription_memory+0x14>
 8008c84:	4b06      	ldr	r3, [pc, #24]	@ (8008ca0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8008c86:	6819      	ldr	r1, [r3, #0]
 8008c88:	f7f7 faaa 	bl	80001e0 <strcmp>
 8008c8c:	b938      	cbnz	r0, 8008c9e <rmw_uxrce_fini_subscription_memory+0x22>
 8008c8e:	6020      	str	r0, [r4, #0]
 8008c90:	6861      	ldr	r1, [r4, #4]
 8008c92:	b121      	cbz	r1, 8008c9e <rmw_uxrce_fini_subscription_memory+0x22>
 8008c94:	4803      	ldr	r0, [pc, #12]	@ (8008ca4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8008c96:	f007 f963 	bl	800ff60 <put_memory>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	bd10      	pop	{r4, pc}
 8008ca0:	080153a8 	.word	0x080153a8
 8008ca4:	2000d9cc 	.word	0x2000d9cc

08008ca8 <rmw_uxrce_fini_service_memory>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	4604      	mov	r4, r0
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	b128      	cbz	r0, 8008cbc <rmw_uxrce_fini_service_memory+0x14>
 8008cb0:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <rmw_uxrce_fini_service_memory+0x24>)
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	f7f7 fa94 	bl	80001e0 <strcmp>
 8008cb8:	b938      	cbnz	r0, 8008cca <rmw_uxrce_fini_service_memory+0x22>
 8008cba:	6020      	str	r0, [r4, #0]
 8008cbc:	6861      	ldr	r1, [r4, #4]
 8008cbe:	b121      	cbz	r1, 8008cca <rmw_uxrce_fini_service_memory+0x22>
 8008cc0:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <rmw_uxrce_fini_service_memory+0x28>)
 8008cc2:	f007 f94d 	bl	800ff60 <put_memory>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6063      	str	r3, [r4, #4]
 8008cca:	bd10      	pop	{r4, pc}
 8008ccc:	080153a8 	.word	0x080153a8
 8008cd0:	2000d99c 	.word	0x2000d99c

08008cd4 <rmw_uxrce_fini_client_memory>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	6800      	ldr	r0, [r0, #0]
 8008cda:	b128      	cbz	r0, 8008ce8 <rmw_uxrce_fini_client_memory+0x14>
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <rmw_uxrce_fini_client_memory+0x24>)
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	f7f7 fa7e 	bl	80001e0 <strcmp>
 8008ce4:	b938      	cbnz	r0, 8008cf6 <rmw_uxrce_fini_client_memory+0x22>
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	6861      	ldr	r1, [r4, #4]
 8008cea:	b121      	cbz	r1, 8008cf6 <rmw_uxrce_fini_client_memory+0x22>
 8008cec:	4803      	ldr	r0, [pc, #12]	@ (8008cfc <rmw_uxrce_fini_client_memory+0x28>)
 8008cee:	f007 f937 	bl	800ff60 <put_memory>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6063      	str	r3, [r4, #4]
 8008cf6:	bd10      	pop	{r4, pc}
 8008cf8:	080153a8 	.word	0x080153a8
 8008cfc:	200090b0 	.word	0x200090b0

08008d00 <rmw_uxrce_fini_topic_memory>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	4621      	mov	r1, r4
 8008d06:	4803      	ldr	r0, [pc, #12]	@ (8008d14 <rmw_uxrce_fini_topic_memory+0x14>)
 8008d08:	f007 f92a 	bl	800ff60 <put_memory>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61a3      	str	r3, [r4, #24]
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	bf00      	nop
 8008d14:	2000d9dc 	.word	0x2000d9dc

08008d18 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008d18:	b082      	sub	sp, #8
 8008d1a:	b530      	push	{r4, r5, lr}
 8008d1c:	4925      	ldr	r1, [pc, #148]	@ (8008db4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008d1e:	680d      	ldr	r5, [r1, #0]
 8008d20:	ac03      	add	r4, sp, #12
 8008d22:	e884 000c 	stmia.w	r4, {r2, r3}
 8008d26:	461c      	mov	r4, r3
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d041      	beq.n	8008db0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	2100      	movs	r1, #0
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8008d38:	4290      	cmp	r0, r2
 8008d3a:	bf08      	it	eq
 8008d3c:	3101      	addeq	r1, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f6      	bne.n	8008d30 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008d42:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d029      	beq.n	8008d9e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008d4a:	d907      	bls.n	8008d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d005      	beq.n	8008d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008d50:	2100      	movs	r1, #0
 8008d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d56:	4608      	mov	r0, r1
 8008d58:	b002      	add	sp, #8
 8008d5a:	4770      	bx	lr
 8008d5c:	b314      	cbz	r4, 8008da4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008d5e:	428c      	cmp	r4, r1
 8008d60:	d820      	bhi.n	8008da4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	d0f4      	beq.n	8008d50 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008d66:	2100      	movs	r1, #0
 8008d68:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8008d6c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008d70:	e002      	b.n	8008d78 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8008d72:	686d      	ldr	r5, [r5, #4]
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	d0ec      	beq.n	8008d52 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008d78:	68ab      	ldr	r3, [r5, #8]
 8008d7a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8008d7e:	4290      	cmp	r0, r2
 8008d80:	d1f7      	bne.n	8008d72 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008d82:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8008d86:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8008d8a:	4562      	cmp	r2, ip
 8008d8c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008d90:	eb73 0e04 	sbcs.w	lr, r3, r4
 8008d94:	daed      	bge.n	8008d72 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008d96:	4694      	mov	ip, r2
 8008d98:	461c      	mov	r4, r3
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	e7e9      	b.n	8008d72 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8008d9e:	b10c      	cbz	r4, 8008da4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008da0:	428c      	cmp	r4, r1
 8008da2:	d9d5      	bls.n	8008d50 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008da8:	4802      	ldr	r0, [pc, #8]	@ (8008db4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008daa:	b002      	add	sp, #8
 8008dac:	f007 b8c8 	b.w	800ff40 <get_memory>
 8008db0:	4629      	mov	r1, r5
 8008db2:	e7c6      	b.n	8008d42 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008db4:	2000d9bc 	.word	0x2000d9bc

08008db8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8008db8:	4b11      	ldr	r3, [pc, #68]	@ (8008e00 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	b530      	push	{r4, r5, lr}
 8008dbe:	b1e3      	cbz	r3, 8008dfa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8008dc0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8008dc4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8008dc8:	2400      	movs	r4, #0
 8008dca:	e001      	b.n	8008dd0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b193      	cbz	r3, 8008df6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8008dd6:	4288      	cmp	r0, r1
 8008dd8:	d1f8      	bne.n	8008dcc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8008dda:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8008dde:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8008de2:	4571      	cmp	r1, lr
 8008de4:	eb72 050c 	sbcs.w	r5, r2, ip
 8008de8:	daf0      	bge.n	8008dcc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8008dea:	461c      	mov	r4, r3
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	468e      	mov	lr, r1
 8008df0:	4694      	mov	ip, r2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ec      	bne.n	8008dd0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8008df6:	4620      	mov	r0, r4
 8008df8:	bd30      	pop	{r4, r5, pc}
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	bd30      	pop	{r4, r5, pc}
 8008e00:	2000d9bc 	.word	0x2000d9bc
 8008e04:	00000000 	.word	0x00000000

08008e08 <rmw_uxrce_clean_expired_static_input_buffer>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f00 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8008e0e:	ed2d 8b06 	vpush	{d8-d10}
 8008e12:	681f      	ldr	r7, [r3, #0]
 8008e14:	b08d      	sub	sp, #52	@ 0x34
 8008e16:	f008 f8df 	bl	8010fd8 <rmw_uros_epoch_nanos>
 8008e1a:	2f00      	cmp	r7, #0
 8008e1c:	d05d      	beq.n	8008eda <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8008e1e:	46b8      	mov	r8, r7
 8008e20:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8008ee8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8008e24:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008e28:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8008ef0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8008e32:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8008ef8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8008e36:	4681      	mov	r9, r0
 8008e38:	468a      	mov	sl, r1
 8008e3a:	ac04      	add	r4, sp, #16
 8008e3c:	d03f      	beq.n	8008ebe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d044      	beq.n	8008ecc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d03b      	beq.n	8008ebe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8008e46:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008e4a:	ed8d ab06 	vstr	d10, [sp, #24]
 8008e4e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8008e52:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8008e56:	ab08      	add	r3, sp, #32
 8008e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008e5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e62:	f006 fea1 	bl	800fba8 <rmw_time_equal>
 8008e66:	b118      	cbz	r0, 8008e70 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8008e68:	ed8d 9b04 	vstr	d9, [sp, #16]
 8008e6c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e74:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8008e78:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8008e7c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8008e80:	f006 fee6 	bl	800fc50 <rmw_time_total_nsec>
 8008e84:	1830      	adds	r0, r6, r0
 8008e86:	eb47 0101 	adc.w	r1, r7, r1
 8008e8a:	4548      	cmp	r0, r9
 8008e8c:	eb71 030a 	sbcs.w	r3, r1, sl
 8008e90:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8008e94:	db05      	blt.n	8008ea2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8008e96:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8008e9a:	4591      	cmp	r9, r2
 8008e9c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8008ea0:	da03      	bge.n	8008eaa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8008ea2:	4817      	ldr	r0, [pc, #92]	@ (8008f00 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	f007 f85b 	bl	800ff60 <put_memory>
 8008eaa:	f1bb 0f00 	cmp.w	fp, #0
 8008eae:	d014      	beq.n	8008eda <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8008eb0:	46d8      	mov	r8, fp
 8008eb2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008eb6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d1bf      	bne.n	8008e3e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8008ebe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8008ec2:	3340      	adds	r3, #64	@ 0x40
 8008ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008eca:	e7c0      	b.n	8008e4e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8008ecc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8008ed0:	3348      	adds	r3, #72	@ 0x48
 8008ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008ed8:	e7b9      	b.n	8008e4e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8008eda:	b00d      	add	sp, #52	@ 0x34
 8008edc:	ecbd 8b06 	vpop	{d8-d10}
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	f3af 8000 	nop.w
	...
 8008ef0:	00000001 	.word	0x00000001
 8008ef4:	00000000 	.word	0x00000000
 8008ef8:	0000001e 	.word	0x0000001e
 8008efc:	00000000 	.word	0x00000000
 8008f00:	2000d9bc 	.word	0x2000d9bc

08008f04 <run_xrce_session>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	788c      	ldrb	r4, [r1, #2]
 8008f08:	b086      	sub	sp, #24
 8008f0a:	2c01      	cmp	r4, #1
 8008f0c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008f10:	d00c      	beq.n	8008f2c <run_xrce_session+0x28>
 8008f12:	4619      	mov	r1, r3
 8008f14:	2301      	movs	r3, #1
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	f10d 020e 	add.w	r2, sp, #14
 8008f1c:	f10d 0317 	add.w	r3, sp, #23
 8008f20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008f24:	f001 ffba 	bl	800ae9c <uxr_run_session_until_all_status>
 8008f28:	b006      	add	sp, #24
 8008f2a:	bd10      	pop	{r4, pc}
 8008f2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008f30:	f001 fbce 	bl	800a6d0 <uxr_flash_output_streams>
 8008f34:	4620      	mov	r0, r4
 8008f36:	b006      	add	sp, #24
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	bf00      	nop

08008f3c <convert_qos_profile>:
 8008f3c:	7a4a      	ldrb	r2, [r1, #9]
 8008f3e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8008f42:	2a02      	cmp	r2, #2
 8008f44:	bf18      	it	ne
 8008f46:	2200      	movne	r2, #0
 8008f48:	7002      	strb	r2, [r0, #0]
 8008f4a:	780a      	ldrb	r2, [r1, #0]
 8008f4c:	8889      	ldrh	r1, [r1, #4]
 8008f4e:	8081      	strh	r1, [r0, #4]
 8008f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8008f54:	f1a2 0202 	sub.w	r2, r2, #2
 8008f58:	fabc fc8c 	clz	ip, ip
 8008f5c:	fab2 f282 	clz	r2, r2
 8008f60:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008f64:	0952      	lsrs	r2, r2, #5
 8008f66:	f880 c001 	strb.w	ip, [r0, #1]
 8008f6a:	7082      	strb	r2, [r0, #2]
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <generate_type_name>:
 8008f70:	b530      	push	{r4, r5, lr}
 8008f72:	2300      	movs	r3, #0
 8008f74:	700b      	strb	r3, [r1, #0]
 8008f76:	6803      	ldr	r3, [r0, #0]
 8008f78:	b087      	sub	sp, #28
 8008f7a:	4614      	mov	r4, r2
 8008f7c:	b1d3      	cbz	r3, 8008fb4 <generate_type_name+0x44>
 8008f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8008fbc <generate_type_name+0x4c>)
 8008f80:	4615      	mov	r5, r2
 8008f82:	9203      	str	r2, [sp, #12]
 8008f84:	9500      	str	r5, [sp, #0]
 8008f86:	6842      	ldr	r2, [r0, #4]
 8008f88:	480d      	ldr	r0, [pc, #52]	@ (8008fc0 <generate_type_name+0x50>)
 8008f8a:	9001      	str	r0, [sp, #4]
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	490d      	ldr	r1, [pc, #52]	@ (8008fc4 <generate_type_name+0x54>)
 8008f90:	9204      	str	r2, [sp, #16]
 8008f92:	9105      	str	r1, [sp, #20]
 8008f94:	9102      	str	r1, [sp, #8]
 8008f96:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc8 <generate_type_name+0x58>)
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f00a fce9 	bl	8013970 <sniprintf>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	db05      	blt.n	8008fae <generate_type_name+0x3e>
 8008fa2:	4284      	cmp	r4, r0
 8008fa4:	bfd4      	ite	le
 8008fa6:	2000      	movle	r0, #0
 8008fa8:	2001      	movgt	r0, #1
 8008faa:	b007      	add	sp, #28
 8008fac:	bd30      	pop	{r4, r5, pc}
 8008fae:	2000      	movs	r0, #0
 8008fb0:	b007      	add	sp, #28
 8008fb2:	bd30      	pop	{r4, r5, pc}
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <generate_type_name+0x5c>)
 8008fb6:	4a01      	ldr	r2, [pc, #4]	@ (8008fbc <generate_type_name+0x4c>)
 8008fb8:	461d      	mov	r5, r3
 8008fba:	e7e2      	b.n	8008f82 <generate_type_name+0x12>
 8008fbc:	08014ccc 	.word	0x08014ccc
 8008fc0:	08014ce4 	.word	0x08014ce4
 8008fc4:	08014ce0 	.word	0x08014ce0
 8008fc8:	08014cd0 	.word	0x08014cd0
 8008fcc:	08015180 	.word	0x08015180

08008fd0 <generate_topic_name>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	9000      	str	r0, [sp, #0]
 8008fd8:	4b08      	ldr	r3, [pc, #32]	@ (8008ffc <generate_topic_name+0x2c>)
 8008fda:	4a09      	ldr	r2, [pc, #36]	@ (8009000 <generate_topic_name+0x30>)
 8008fdc:	4608      	mov	r0, r1
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f00a fcc6 	bl	8013970 <sniprintf>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	db05      	blt.n	8008ff4 <generate_topic_name+0x24>
 8008fe8:	4284      	cmp	r4, r0
 8008fea:	bfd4      	ite	le
 8008fec:	2000      	movle	r0, #0
 8008fee:	2001      	movgt	r0, #1
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	b002      	add	sp, #8
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	bf00      	nop
 8008ffc:	08014cf0 	.word	0x08014cf0
 8009000:	08014ce8 	.word	0x08014ce8

08009004 <is_uxrce_rmw_identifier_valid>:
 8009004:	b510      	push	{r4, lr}
 8009006:	4604      	mov	r4, r0
 8009008:	b140      	cbz	r0, 800901c <is_uxrce_rmw_identifier_valid+0x18>
 800900a:	f007 f801 	bl	8010010 <rmw_get_implementation_identifier>
 800900e:	4601      	mov	r1, r0
 8009010:	4620      	mov	r0, r4
 8009012:	f7f7 f8e5 	bl	80001e0 <strcmp>
 8009016:	fab0 f080 	clz	r0, r0
 800901a:	0940      	lsrs	r0, r0, #5
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop

08009020 <get_message_typesupport_handle>:
 8009020:	6883      	ldr	r3, [r0, #8]
 8009022:	4718      	bx	r3

08009024 <get_message_typesupport_handle_function>:
 8009024:	b510      	push	{r4, lr}
 8009026:	4604      	mov	r4, r0
 8009028:	6800      	ldr	r0, [r0, #0]
 800902a:	f7f7 f8d9 	bl	80001e0 <strcmp>
 800902e:	2800      	cmp	r0, #0
 8009030:	bf0c      	ite	eq
 8009032:	4620      	moveq	r0, r4
 8009034:	2000      	movne	r0, #0
 8009036:	bd10      	pop	{r4, pc}

08009038 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009038:	4b04      	ldr	r3, [pc, #16]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	b10a      	cbz	r2, 8009042 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800903e:	4803      	ldr	r0, [pc, #12]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009040:	4770      	bx	lr
 8009042:	4a03      	ldr	r2, [pc, #12]	@ (8009050 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009046:	6812      	ldr	r2, [r2, #0]
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	4770      	bx	lr
 800904c:	20000030 	.word	0x20000030
 8009050:	200000ac 	.word	0x200000ac

08009054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009054:	4a02      	ldr	r2, [pc, #8]	@ (8009060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	200000ac 	.word	0x200000ac
 8009064:	20000030 	.word	0x20000030

08009068 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8009068:	f007 bff2 	b.w	8011050 <std_msgs__msg__Int32__init>

0800906c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800906c:	f007 bff4 	b.w	8011058 <std_msgs__msg__Int32__fini>

08009070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8009070:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	b10a      	cbz	r2, 800907a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8009076:	4803      	ldr	r0, [pc, #12]	@ (8009084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8009078:	4770      	bx	lr
 800907a:	4a03      	ldr	r2, [pc, #12]	@ (8009088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800907c:	4801      	ldr	r0, [pc, #4]	@ (8009084 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	4770      	bx	lr
 8009084:	20000078 	.word	0x20000078
 8009088:	200000b0 	.word	0x200000b0

0800908c <_Int32__max_serialized_size>:
 800908c:	b508      	push	{r3, lr}
 800908e:	2104      	movs	r1, #4
 8009090:	2000      	movs	r0, #0
 8009092:	f001 f807 	bl	800a0a4 <ucdr_alignment>
 8009096:	3004      	adds	r0, #4
 8009098:	bd08      	pop	{r3, pc}
 800909a:	bf00      	nop

0800909c <_Int32__cdr_deserialize>:
 800909c:	b109      	cbz	r1, 80090a2 <_Int32__cdr_deserialize+0x6>
 800909e:	f000 bf19 	b.w	8009ed4 <ucdr_deserialize_int32_t>
 80090a2:	4608      	mov	r0, r1
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop

080090a8 <get_serialized_size_std_msgs__msg__Int32>:
 80090a8:	b138      	cbz	r0, 80090ba <get_serialized_size_std_msgs__msg__Int32+0x12>
 80090aa:	b508      	push	{r3, lr}
 80090ac:	460b      	mov	r3, r1
 80090ae:	4618      	mov	r0, r3
 80090b0:	2104      	movs	r1, #4
 80090b2:	f000 fff7 	bl	800a0a4 <ucdr_alignment>
 80090b6:	3004      	adds	r0, #4
 80090b8:	bd08      	pop	{r3, pc}
 80090ba:	4770      	bx	lr

080090bc <_Int32__cdr_serialize>:
 80090bc:	460a      	mov	r2, r1
 80090be:	b118      	cbz	r0, 80090c8 <_Int32__cdr_serialize+0xc>
 80090c0:	6801      	ldr	r1, [r0, #0]
 80090c2:	4610      	mov	r0, r2
 80090c4:	f000 be6e 	b.w	8009da4 <ucdr_serialize_int32_t>
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop

080090cc <_Int32__get_serialized_size>:
 80090cc:	b130      	cbz	r0, 80090dc <_Int32__get_serialized_size+0x10>
 80090ce:	b508      	push	{r3, lr}
 80090d0:	2104      	movs	r1, #4
 80090d2:	2000      	movs	r0, #0
 80090d4:	f000 ffe6 	bl	800a0a4 <ucdr_alignment>
 80090d8:	3004      	adds	r0, #4
 80090da:	bd08      	pop	{r3, pc}
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop

080090e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80090e0:	4800      	ldr	r0, [pc, #0]	@ (80090e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80090e2:	4770      	bx	lr
 80090e4:	20000084 	.word	0x20000084

080090e8 <ucdr_serialize_bool>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	460d      	mov	r5, r1
 80090ec:	2101      	movs	r1, #1
 80090ee:	4604      	mov	r4, r0
 80090f0:	f000 ff8c 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80090f4:	b148      	cbz	r0, 800910a <ucdr_serialize_bool+0x22>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	701d      	strb	r5, [r3, #0]
 80090fa:	68a2      	ldr	r2, [r4, #8]
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	2101      	movs	r1, #1
 8009100:	440a      	add	r2, r1
 8009102:	440b      	add	r3, r1
 8009104:	60a2      	str	r2, [r4, #8]
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	7561      	strb	r1, [r4, #21]
 800910a:	7da0      	ldrb	r0, [r4, #22]
 800910c:	f080 0001 	eor.w	r0, r0, #1
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	bf00      	nop

08009114 <ucdr_deserialize_bool>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	460d      	mov	r5, r1
 8009118:	2101      	movs	r1, #1
 800911a:	4604      	mov	r4, r0
 800911c:	f000 ff76 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009120:	b160      	cbz	r0, 800913c <ucdr_deserialize_bool+0x28>
 8009122:	68a2      	ldr	r2, [r4, #8]
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	f812 1b01 	ldrb.w	r1, [r2], #1
 800912a:	3900      	subs	r1, #0
 800912c:	bf18      	it	ne
 800912e:	2101      	movne	r1, #1
 8009130:	7029      	strb	r1, [r5, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	2101      	movs	r1, #1
 8009136:	60a2      	str	r2, [r4, #8]
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	7561      	strb	r1, [r4, #21]
 800913c:	7da0      	ldrb	r0, [r4, #22]
 800913e:	f080 0001 	eor.w	r0, r0, #1
 8009142:	bd38      	pop	{r3, r4, r5, pc}

08009144 <ucdr_serialize_uint8_t>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	460d      	mov	r5, r1
 8009148:	2101      	movs	r1, #1
 800914a:	4604      	mov	r4, r0
 800914c:	f000 ff5e 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009150:	b148      	cbz	r0, 8009166 <ucdr_serialize_uint8_t+0x22>
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	701d      	strb	r5, [r3, #0]
 8009156:	68a2      	ldr	r2, [r4, #8]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	2101      	movs	r1, #1
 800915c:	440a      	add	r2, r1
 800915e:	440b      	add	r3, r1
 8009160:	60a2      	str	r2, [r4, #8]
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	7561      	strb	r1, [r4, #21]
 8009166:	7da0      	ldrb	r0, [r4, #22]
 8009168:	f080 0001 	eor.w	r0, r0, #1
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop

08009170 <ucdr_deserialize_uint8_t>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	460d      	mov	r5, r1
 8009174:	2101      	movs	r1, #1
 8009176:	4604      	mov	r4, r0
 8009178:	f000 ff48 	bl	800a00c <ucdr_check_final_buffer_behavior>
 800917c:	b150      	cbz	r0, 8009194 <ucdr_deserialize_uint8_t+0x24>
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	702b      	strb	r3, [r5, #0]
 8009184:	68a2      	ldr	r2, [r4, #8]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	2101      	movs	r1, #1
 800918a:	440a      	add	r2, r1
 800918c:	440b      	add	r3, r1
 800918e:	60a2      	str	r2, [r4, #8]
 8009190:	6123      	str	r3, [r4, #16]
 8009192:	7561      	strb	r1, [r4, #21]
 8009194:	7da0      	ldrb	r0, [r4, #22]
 8009196:	f080 0001 	eor.w	r0, r0, #1
 800919a:	bd38      	pop	{r3, r4, r5, pc}

0800919c <ucdr_serialize_uint16_t>:
 800919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	460b      	mov	r3, r1
 80091a4:	2102      	movs	r1, #2
 80091a6:	4604      	mov	r4, r0
 80091a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80091ac:	f000 ff82 	bl	800a0b4 <ucdr_buffer_alignment>
 80091b0:	4601      	mov	r1, r0
 80091b2:	4620      	mov	r0, r4
 80091b4:	7d67      	ldrb	r7, [r4, #21]
 80091b6:	f000 ffc1 	bl	800a13c <ucdr_advance_buffer>
 80091ba:	2102      	movs	r1, #2
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 ff19 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80091c2:	bb78      	cbnz	r0, 8009224 <ucdr_serialize_uint16_t+0x88>
 80091c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	d926      	bls.n	800921a <ucdr_serialize_uint16_t+0x7e>
 80091cc:	1b5e      	subs	r6, r3, r5
 80091ce:	60a3      	str	r3, [r4, #8]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	f1c6 0802 	rsb	r8, r6, #2
 80091d6:	4433      	add	r3, r6
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	4641      	mov	r1, r8
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 ff15 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d03b      	beq.n	800925e <ucdr_serialize_uint16_t+0xc2>
 80091e6:	7d23      	ldrb	r3, [r4, #20]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d04a      	beq.n	8009282 <ucdr_serialize_uint16_t+0xe6>
 80091ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091f0:	702b      	strb	r3, [r5, #0]
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d040      	beq.n	8009278 <ucdr_serialize_uint16_t+0xdc>
 80091f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091fa:	706b      	strb	r3, [r5, #1]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	68a2      	ldr	r2, [r4, #8]
 8009200:	7da0      	ldrb	r0, [r4, #22]
 8009202:	3302      	adds	r3, #2
 8009204:	1b9e      	subs	r6, r3, r6
 8009206:	4442      	add	r2, r8
 8009208:	2302      	movs	r3, #2
 800920a:	f080 0001 	eor.w	r0, r0, #1
 800920e:	60a2      	str	r2, [r4, #8]
 8009210:	6126      	str	r6, [r4, #16]
 8009212:	7563      	strb	r3, [r4, #21]
 8009214:	b002      	add	sp, #8
 8009216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921a:	2102      	movs	r1, #2
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fef5 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009222:	b190      	cbz	r0, 800924a <ucdr_serialize_uint16_t+0xae>
 8009224:	7d23      	ldrb	r3, [r4, #20]
 8009226:	2b01      	cmp	r3, #1
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	d014      	beq.n	8009256 <ucdr_serialize_uint16_t+0xba>
 800922c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009238:	705a      	strb	r2, [r3, #1]
 800923a:	68a2      	ldr	r2, [r4, #8]
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	3202      	adds	r2, #2
 8009240:	3302      	adds	r3, #2
 8009242:	2102      	movs	r1, #2
 8009244:	60a2      	str	r2, [r4, #8]
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	7561      	strb	r1, [r4, #21]
 800924a:	7da0      	ldrb	r0, [r4, #22]
 800924c:	f080 0001 	eor.w	r0, r0, #1
 8009250:	b002      	add	sp, #8
 8009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009256:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800925a:	801a      	strh	r2, [r3, #0]
 800925c:	e7ed      	b.n	800923a <ucdr_serialize_uint16_t+0x9e>
 800925e:	68a2      	ldr	r2, [r4, #8]
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	7da0      	ldrb	r0, [r4, #22]
 8009264:	7567      	strb	r7, [r4, #21]
 8009266:	1b92      	subs	r2, r2, r6
 8009268:	1b9b      	subs	r3, r3, r6
 800926a:	f080 0001 	eor.w	r0, r0, #1
 800926e:	60a2      	str	r2, [r4, #8]
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	b002      	add	sp, #8
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800927e:	701a      	strb	r2, [r3, #0]
 8009280:	e7bc      	b.n	80091fc <ucdr_serialize_uint16_t+0x60>
 8009282:	4628      	mov	r0, r5
 8009284:	f10d 0506 	add.w	r5, sp, #6
 8009288:	4629      	mov	r1, r5
 800928a:	4632      	mov	r2, r6
 800928c:	f00a fd13 	bl	8013cb6 <memcpy>
 8009290:	68a0      	ldr	r0, [r4, #8]
 8009292:	4642      	mov	r2, r8
 8009294:	19a9      	adds	r1, r5, r6
 8009296:	f00a fd0e 	bl	8013cb6 <memcpy>
 800929a:	e7af      	b.n	80091fc <ucdr_serialize_uint16_t+0x60>

0800929c <ucdr_serialize_endian_uint16_t>:
 800929c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a0:	b083      	sub	sp, #12
 80092a2:	460d      	mov	r5, r1
 80092a4:	2102      	movs	r1, #2
 80092a6:	4604      	mov	r4, r0
 80092a8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80092ac:	f000 ff02 	bl	800a0b4 <ucdr_buffer_alignment>
 80092b0:	4601      	mov	r1, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80092b8:	f000 ff40 	bl	800a13c <ucdr_advance_buffer>
 80092bc:	2102      	movs	r1, #2
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fe98 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80092c4:	bb70      	cbnz	r0, 8009324 <ucdr_serialize_endian_uint16_t+0x88>
 80092c6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80092ca:	42be      	cmp	r6, r7
 80092cc:	d925      	bls.n	800931a <ucdr_serialize_endian_uint16_t+0x7e>
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	60a6      	str	r6, [r4, #8]
 80092d2:	1bf6      	subs	r6, r6, r7
 80092d4:	4433      	add	r3, r6
 80092d6:	f1c6 0902 	rsb	r9, r6, #2
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	4649      	mov	r1, r9
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 fe94 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d039      	beq.n	800935c <ucdr_serialize_endian_uint16_t+0xc0>
 80092e8:	2d01      	cmp	r5, #1
 80092ea:	d04a      	beq.n	8009382 <ucdr_serialize_endian_uint16_t+0xe6>
 80092ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092f0:	703b      	strb	r3, [r7, #0]
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	d040      	beq.n	8009378 <ucdr_serialize_endian_uint16_t+0xdc>
 80092f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80092fa:	707b      	strb	r3, [r7, #1]
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	68a2      	ldr	r2, [r4, #8]
 8009300:	7da0      	ldrb	r0, [r4, #22]
 8009302:	3302      	adds	r3, #2
 8009304:	444a      	add	r2, r9
 8009306:	1b9b      	subs	r3, r3, r6
 8009308:	2102      	movs	r1, #2
 800930a:	f080 0001 	eor.w	r0, r0, #1
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	7561      	strb	r1, [r4, #21]
 8009314:	b003      	add	sp, #12
 8009316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800931a:	2102      	movs	r1, #2
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fe75 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009322:	b188      	cbz	r0, 8009348 <ucdr_serialize_endian_uint16_t+0xac>
 8009324:	2d01      	cmp	r5, #1
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	d014      	beq.n	8009354 <ucdr_serialize_endian_uint16_t+0xb8>
 800932a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009336:	705a      	strb	r2, [r3, #1]
 8009338:	68a2      	ldr	r2, [r4, #8]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	3202      	adds	r2, #2
 800933e:	3302      	adds	r3, #2
 8009340:	2102      	movs	r1, #2
 8009342:	60a2      	str	r2, [r4, #8]
 8009344:	6123      	str	r3, [r4, #16]
 8009346:	7561      	strb	r1, [r4, #21]
 8009348:	7da0      	ldrb	r0, [r4, #22]
 800934a:	f080 0001 	eor.w	r0, r0, #1
 800934e:	b003      	add	sp, #12
 8009350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009354:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	e7ed      	b.n	8009338 <ucdr_serialize_endian_uint16_t+0x9c>
 800935c:	68a2      	ldr	r2, [r4, #8]
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	7da0      	ldrb	r0, [r4, #22]
 8009362:	f884 8015 	strb.w	r8, [r4, #21]
 8009366:	1b92      	subs	r2, r2, r6
 8009368:	1b9b      	subs	r3, r3, r6
 800936a:	f080 0001 	eor.w	r0, r0, #1
 800936e:	60a2      	str	r2, [r4, #8]
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	b003      	add	sp, #12
 8009374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009378:	68a3      	ldr	r3, [r4, #8]
 800937a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	e7bc      	b.n	80092fc <ucdr_serialize_endian_uint16_t+0x60>
 8009382:	f10d 0506 	add.w	r5, sp, #6
 8009386:	4629      	mov	r1, r5
 8009388:	4632      	mov	r2, r6
 800938a:	4638      	mov	r0, r7
 800938c:	f00a fc93 	bl	8013cb6 <memcpy>
 8009390:	68a0      	ldr	r0, [r4, #8]
 8009392:	464a      	mov	r2, r9
 8009394:	19a9      	adds	r1, r5, r6
 8009396:	f00a fc8e 	bl	8013cb6 <memcpy>
 800939a:	e7af      	b.n	80092fc <ucdr_serialize_endian_uint16_t+0x60>

0800939c <ucdr_deserialize_uint16_t>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	460d      	mov	r5, r1
 80093a2:	2102      	movs	r1, #2
 80093a4:	4604      	mov	r4, r0
 80093a6:	f000 fe85 	bl	800a0b4 <ucdr_buffer_alignment>
 80093aa:	4601      	mov	r1, r0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80093b2:	f000 fec3 	bl	800a13c <ucdr_advance_buffer>
 80093b6:	2102      	movs	r1, #2
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fe1b 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80093be:	bb60      	cbnz	r0, 800941a <ucdr_deserialize_uint16_t+0x7e>
 80093c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80093c4:	42be      	cmp	r6, r7
 80093c6:	d923      	bls.n	8009410 <ucdr_deserialize_uint16_t+0x74>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	60a6      	str	r6, [r4, #8]
 80093cc:	1bf6      	subs	r6, r6, r7
 80093ce:	4433      	add	r3, r6
 80093d0:	f1c6 0902 	rsb	r9, r6, #2
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	4649      	mov	r1, r9
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fe17 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d034      	beq.n	800944c <ucdr_deserialize_uint16_t+0xb0>
 80093e2:	7d23      	ldrb	r3, [r4, #20]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d042      	beq.n	800946e <ucdr_deserialize_uint16_t+0xd2>
 80093e8:	787b      	ldrb	r3, [r7, #1]
 80093ea:	702b      	strb	r3, [r5, #0]
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	d03a      	beq.n	8009466 <ucdr_deserialize_uint16_t+0xca>
 80093f0:	783b      	ldrb	r3, [r7, #0]
 80093f2:	706b      	strb	r3, [r5, #1]
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	68a2      	ldr	r2, [r4, #8]
 80093f8:	7da0      	ldrb	r0, [r4, #22]
 80093fa:	2102      	movs	r1, #2
 80093fc:	3302      	adds	r3, #2
 80093fe:	444a      	add	r2, r9
 8009400:	1b9b      	subs	r3, r3, r6
 8009402:	7561      	strb	r1, [r4, #21]
 8009404:	60a2      	str	r2, [r4, #8]
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	f080 0001 	eor.w	r0, r0, #1
 800940c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009410:	2102      	movs	r1, #2
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fdfa 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009418:	b180      	cbz	r0, 800943c <ucdr_deserialize_uint16_t+0xa0>
 800941a:	7d23      	ldrb	r3, [r4, #20]
 800941c:	2b01      	cmp	r3, #1
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	d011      	beq.n	8009446 <ucdr_deserialize_uint16_t+0xaa>
 8009422:	785b      	ldrb	r3, [r3, #1]
 8009424:	702b      	strb	r3, [r5, #0]
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	706b      	strb	r3, [r5, #1]
 800942c:	68a2      	ldr	r2, [r4, #8]
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	3202      	adds	r2, #2
 8009432:	3302      	adds	r3, #2
 8009434:	2102      	movs	r1, #2
 8009436:	60a2      	str	r2, [r4, #8]
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	7561      	strb	r1, [r4, #21]
 800943c:	7da0      	ldrb	r0, [r4, #22]
 800943e:	f080 0001 	eor.w	r0, r0, #1
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	802b      	strh	r3, [r5, #0]
 800944a:	e7ef      	b.n	800942c <ucdr_deserialize_uint16_t+0x90>
 800944c:	68a2      	ldr	r2, [r4, #8]
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	7da0      	ldrb	r0, [r4, #22]
 8009452:	f884 8015 	strb.w	r8, [r4, #21]
 8009456:	1b92      	subs	r2, r2, r6
 8009458:	1b9b      	subs	r3, r3, r6
 800945a:	60a2      	str	r2, [r4, #8]
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	f080 0001 	eor.w	r0, r0, #1
 8009462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	706b      	strb	r3, [r5, #1]
 800946c:	e7c2      	b.n	80093f4 <ucdr_deserialize_uint16_t+0x58>
 800946e:	4639      	mov	r1, r7
 8009470:	4632      	mov	r2, r6
 8009472:	4628      	mov	r0, r5
 8009474:	f00a fc1f 	bl	8013cb6 <memcpy>
 8009478:	68a1      	ldr	r1, [r4, #8]
 800947a:	464a      	mov	r2, r9
 800947c:	19a8      	adds	r0, r5, r6
 800947e:	f00a fc1a 	bl	8013cb6 <memcpy>
 8009482:	e7b7      	b.n	80093f4 <ucdr_deserialize_uint16_t+0x58>

08009484 <ucdr_deserialize_endian_uint16_t>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	460e      	mov	r6, r1
 800948a:	2102      	movs	r1, #2
 800948c:	4604      	mov	r4, r0
 800948e:	4615      	mov	r5, r2
 8009490:	f000 fe10 	bl	800a0b4 <ucdr_buffer_alignment>
 8009494:	4601      	mov	r1, r0
 8009496:	4620      	mov	r0, r4
 8009498:	f894 9015 	ldrb.w	r9, [r4, #21]
 800949c:	f000 fe4e 	bl	800a13c <ucdr_advance_buffer>
 80094a0:	2102      	movs	r1, #2
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fda6 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80094a8:	bb70      	cbnz	r0, 8009508 <ucdr_deserialize_endian_uint16_t+0x84>
 80094aa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80094ae:	4547      	cmp	r7, r8
 80094b0:	d925      	bls.n	80094fe <ucdr_deserialize_endian_uint16_t+0x7a>
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	60a7      	str	r7, [r4, #8]
 80094b6:	eba7 0708 	sub.w	r7, r7, r8
 80094ba:	443b      	add	r3, r7
 80094bc:	f1c7 0a02 	rsb	sl, r7, #2
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	4651      	mov	r1, sl
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fda1 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d034      	beq.n	8009538 <ucdr_deserialize_endian_uint16_t+0xb4>
 80094ce:	2e01      	cmp	r6, #1
 80094d0:	d043      	beq.n	800955a <ucdr_deserialize_endian_uint16_t+0xd6>
 80094d2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80094d6:	702b      	strb	r3, [r5, #0]
 80094d8:	2f00      	cmp	r7, #0
 80094da:	d03a      	beq.n	8009552 <ucdr_deserialize_endian_uint16_t+0xce>
 80094dc:	f898 3000 	ldrb.w	r3, [r8]
 80094e0:	706b      	strb	r3, [r5, #1]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	68a2      	ldr	r2, [r4, #8]
 80094e6:	7da0      	ldrb	r0, [r4, #22]
 80094e8:	2102      	movs	r1, #2
 80094ea:	3302      	adds	r3, #2
 80094ec:	4452      	add	r2, sl
 80094ee:	1bdb      	subs	r3, r3, r7
 80094f0:	7561      	strb	r1, [r4, #21]
 80094f2:	60a2      	str	r2, [r4, #8]
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	f080 0001 	eor.w	r0, r0, #1
 80094fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fe:	2102      	movs	r1, #2
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fd83 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009506:	b178      	cbz	r0, 8009528 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009508:	2e01      	cmp	r6, #1
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	d011      	beq.n	8009532 <ucdr_deserialize_endian_uint16_t+0xae>
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	702b      	strb	r3, [r5, #0]
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	706b      	strb	r3, [r5, #1]
 8009518:	68a2      	ldr	r2, [r4, #8]
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	3202      	adds	r2, #2
 800951e:	3302      	adds	r3, #2
 8009520:	2102      	movs	r1, #2
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	7561      	strb	r1, [r4, #21]
 8009528:	7da0      	ldrb	r0, [r4, #22]
 800952a:	f080 0001 	eor.w	r0, r0, #1
 800952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	802b      	strh	r3, [r5, #0]
 8009536:	e7ef      	b.n	8009518 <ucdr_deserialize_endian_uint16_t+0x94>
 8009538:	68a2      	ldr	r2, [r4, #8]
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	7da0      	ldrb	r0, [r4, #22]
 800953e:	f884 9015 	strb.w	r9, [r4, #21]
 8009542:	1bd2      	subs	r2, r2, r7
 8009544:	1bdb      	subs	r3, r3, r7
 8009546:	60a2      	str	r2, [r4, #8]
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	f080 0001 	eor.w	r0, r0, #1
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	706b      	strb	r3, [r5, #1]
 8009558:	e7c3      	b.n	80094e2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800955a:	4641      	mov	r1, r8
 800955c:	463a      	mov	r2, r7
 800955e:	4628      	mov	r0, r5
 8009560:	f00a fba9 	bl	8013cb6 <memcpy>
 8009564:	68a1      	ldr	r1, [r4, #8]
 8009566:	4652      	mov	r2, sl
 8009568:	19e8      	adds	r0, r5, r7
 800956a:	f00a fba4 	bl	8013cb6 <memcpy>
 800956e:	e7b8      	b.n	80094e2 <ucdr_deserialize_endian_uint16_t+0x5e>

08009570 <ucdr_serialize_uint32_t>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	4604      	mov	r4, r0
 8009578:	9101      	str	r1, [sp, #4]
 800957a:	2104      	movs	r1, #4
 800957c:	f000 fd9a 	bl	800a0b4 <ucdr_buffer_alignment>
 8009580:	4601      	mov	r1, r0
 8009582:	4620      	mov	r0, r4
 8009584:	7d67      	ldrb	r7, [r4, #21]
 8009586:	f000 fdd9 	bl	800a13c <ucdr_advance_buffer>
 800958a:	2104      	movs	r1, #4
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fd31 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009592:	2800      	cmp	r0, #0
 8009594:	d139      	bne.n	800960a <ucdr_serialize_uint32_t+0x9a>
 8009596:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800959a:	42ab      	cmp	r3, r5
 800959c:	d930      	bls.n	8009600 <ucdr_serialize_uint32_t+0x90>
 800959e:	1b5e      	subs	r6, r3, r5
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	f1c6 0804 	rsb	r8, r6, #4
 80095a8:	4433      	add	r3, r6
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	4641      	mov	r1, r8
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fd2c 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d04c      	beq.n	8009652 <ucdr_serialize_uint32_t+0xe2>
 80095b8:	7d23      	ldrb	r3, [r4, #20]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d063      	beq.n	8009686 <ucdr_serialize_uint32_t+0x116>
 80095be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095c2:	702b      	strb	r3, [r5, #0]
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d051      	beq.n	800966c <ucdr_serialize_uint32_t+0xfc>
 80095c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80095cc:	706b      	strb	r3, [r5, #1]
 80095ce:	2e01      	cmp	r6, #1
 80095d0:	d050      	beq.n	8009674 <ucdr_serialize_uint32_t+0x104>
 80095d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80095d6:	70ab      	strb	r3, [r5, #2]
 80095d8:	2e02      	cmp	r6, #2
 80095da:	d04f      	beq.n	800967c <ucdr_serialize_uint32_t+0x10c>
 80095dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80095e0:	70eb      	strb	r3, [r5, #3]
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	68a2      	ldr	r2, [r4, #8]
 80095e6:	7da0      	ldrb	r0, [r4, #22]
 80095e8:	3304      	adds	r3, #4
 80095ea:	1b9e      	subs	r6, r3, r6
 80095ec:	4442      	add	r2, r8
 80095ee:	2304      	movs	r3, #4
 80095f0:	f080 0001 	eor.w	r0, r0, #1
 80095f4:	60a2      	str	r2, [r4, #8]
 80095f6:	6126      	str	r6, [r4, #16]
 80095f8:	7563      	strb	r3, [r4, #21]
 80095fa:	b002      	add	sp, #8
 80095fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009600:	2104      	movs	r1, #4
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fd02 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009608:	b1d0      	cbz	r0, 8009640 <ucdr_serialize_uint32_t+0xd0>
 800960a:	7d23      	ldrb	r3, [r4, #20]
 800960c:	2b01      	cmp	r3, #1
 800960e:	68a3      	ldr	r3, [r4, #8]
 8009610:	d01c      	beq.n	800964c <ucdr_serialize_uint32_t+0xdc>
 8009612:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	68a3      	ldr	r3, [r4, #8]
 800961a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800961e:	705a      	strb	r2, [r3, #1]
 8009620:	68a3      	ldr	r3, [r4, #8]
 8009622:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009626:	709a      	strb	r2, [r3, #2]
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800962e:	70da      	strb	r2, [r3, #3]
 8009630:	68a2      	ldr	r2, [r4, #8]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	3204      	adds	r2, #4
 8009636:	3304      	adds	r3, #4
 8009638:	2104      	movs	r1, #4
 800963a:	60a2      	str	r2, [r4, #8]
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	7561      	strb	r1, [r4, #21]
 8009640:	7da0      	ldrb	r0, [r4, #22]
 8009642:	f080 0001 	eor.w	r0, r0, #1
 8009646:	b002      	add	sp, #8
 8009648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800964c:	9a01      	ldr	r2, [sp, #4]
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e7ee      	b.n	8009630 <ucdr_serialize_uint32_t+0xc0>
 8009652:	68a2      	ldr	r2, [r4, #8]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	7da0      	ldrb	r0, [r4, #22]
 8009658:	7567      	strb	r7, [r4, #21]
 800965a:	1b92      	subs	r2, r2, r6
 800965c:	1b9b      	subs	r3, r3, r6
 800965e:	f080 0001 	eor.w	r0, r0, #1
 8009662:	60a2      	str	r2, [r4, #8]
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	b002      	add	sp, #8
 8009668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e7ad      	b.n	80095e2 <ucdr_serialize_uint32_t+0x72>
 8009686:	4628      	mov	r0, r5
 8009688:	ad01      	add	r5, sp, #4
 800968a:	4629      	mov	r1, r5
 800968c:	4632      	mov	r2, r6
 800968e:	f00a fb12 	bl	8013cb6 <memcpy>
 8009692:	68a0      	ldr	r0, [r4, #8]
 8009694:	4642      	mov	r2, r8
 8009696:	19a9      	adds	r1, r5, r6
 8009698:	f00a fb0d 	bl	8013cb6 <memcpy>
 800969c:	e7a1      	b.n	80095e2 <ucdr_serialize_uint32_t+0x72>
 800969e:	bf00      	nop

080096a0 <ucdr_serialize_endian_uint32_t>:
 80096a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096a4:	b083      	sub	sp, #12
 80096a6:	460d      	mov	r5, r1
 80096a8:	2104      	movs	r1, #4
 80096aa:	4604      	mov	r4, r0
 80096ac:	9201      	str	r2, [sp, #4]
 80096ae:	f000 fd01 	bl	800a0b4 <ucdr_buffer_alignment>
 80096b2:	4601      	mov	r1, r0
 80096b4:	4620      	mov	r0, r4
 80096b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80096ba:	f000 fd3f 	bl	800a13c <ucdr_advance_buffer>
 80096be:	2104      	movs	r1, #4
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fc97 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d138      	bne.n	800973c <ucdr_serialize_endian_uint32_t+0x9c>
 80096ca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80096ce:	42b7      	cmp	r7, r6
 80096d0:	d92f      	bls.n	8009732 <ucdr_serialize_endian_uint32_t+0x92>
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	60a7      	str	r7, [r4, #8]
 80096d6:	1bbf      	subs	r7, r7, r6
 80096d8:	443b      	add	r3, r7
 80096da:	f1c7 0904 	rsb	r9, r7, #4
 80096de:	6123      	str	r3, [r4, #16]
 80096e0:	4649      	mov	r1, r9
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 fc92 	bl	800a00c <ucdr_check_final_buffer_behavior>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d04a      	beq.n	8009782 <ucdr_serialize_endian_uint32_t+0xe2>
 80096ec:	2d01      	cmp	r5, #1
 80096ee:	d063      	beq.n	80097b8 <ucdr_serialize_endian_uint32_t+0x118>
 80096f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80096f4:	7033      	strb	r3, [r6, #0]
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	d051      	beq.n	800979e <ucdr_serialize_endian_uint32_t+0xfe>
 80096fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80096fe:	7073      	strb	r3, [r6, #1]
 8009700:	2f01      	cmp	r7, #1
 8009702:	d050      	beq.n	80097a6 <ucdr_serialize_endian_uint32_t+0x106>
 8009704:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009708:	70b3      	strb	r3, [r6, #2]
 800970a:	2f02      	cmp	r7, #2
 800970c:	d04f      	beq.n	80097ae <ucdr_serialize_endian_uint32_t+0x10e>
 800970e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009712:	70f3      	strb	r3, [r6, #3]
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	68a2      	ldr	r2, [r4, #8]
 8009718:	7da0      	ldrb	r0, [r4, #22]
 800971a:	3304      	adds	r3, #4
 800971c:	444a      	add	r2, r9
 800971e:	1bdb      	subs	r3, r3, r7
 8009720:	2104      	movs	r1, #4
 8009722:	f080 0001 	eor.w	r0, r0, #1
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	7561      	strb	r1, [r4, #21]
 800972c:	b003      	add	sp, #12
 800972e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009732:	2104      	movs	r1, #4
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fc69 	bl	800a00c <ucdr_check_final_buffer_behavior>
 800973a:	b1c8      	cbz	r0, 8009770 <ucdr_serialize_endian_uint32_t+0xd0>
 800973c:	2d01      	cmp	r5, #1
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	d01c      	beq.n	800977c <ucdr_serialize_endian_uint32_t+0xdc>
 8009742:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	68a3      	ldr	r3, [r4, #8]
 800974a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800974e:	705a      	strb	r2, [r3, #1]
 8009750:	68a3      	ldr	r3, [r4, #8]
 8009752:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009756:	709a      	strb	r2, [r3, #2]
 8009758:	68a3      	ldr	r3, [r4, #8]
 800975a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800975e:	70da      	strb	r2, [r3, #3]
 8009760:	68a2      	ldr	r2, [r4, #8]
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	3204      	adds	r2, #4
 8009766:	3304      	adds	r3, #4
 8009768:	2104      	movs	r1, #4
 800976a:	60a2      	str	r2, [r4, #8]
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	7561      	strb	r1, [r4, #21]
 8009770:	7da0      	ldrb	r0, [r4, #22]
 8009772:	f080 0001 	eor.w	r0, r0, #1
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800977c:	9a01      	ldr	r2, [sp, #4]
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e7ee      	b.n	8009760 <ucdr_serialize_endian_uint32_t+0xc0>
 8009782:	68a2      	ldr	r2, [r4, #8]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	7da0      	ldrb	r0, [r4, #22]
 8009788:	f884 8015 	strb.w	r8, [r4, #21]
 800978c:	1bd2      	subs	r2, r2, r7
 800978e:	1bdb      	subs	r3, r3, r7
 8009790:	f080 0001 	eor.w	r0, r0, #1
 8009794:	60a2      	str	r2, [r4, #8]
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	b003      	add	sp, #12
 800979a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	e7ad      	b.n	8009714 <ucdr_serialize_endian_uint32_t+0x74>
 80097b8:	ad01      	add	r5, sp, #4
 80097ba:	4629      	mov	r1, r5
 80097bc:	463a      	mov	r2, r7
 80097be:	4630      	mov	r0, r6
 80097c0:	f00a fa79 	bl	8013cb6 <memcpy>
 80097c4:	68a0      	ldr	r0, [r4, #8]
 80097c6:	464a      	mov	r2, r9
 80097c8:	19e9      	adds	r1, r5, r7
 80097ca:	f00a fa74 	bl	8013cb6 <memcpy>
 80097ce:	e7a1      	b.n	8009714 <ucdr_serialize_endian_uint32_t+0x74>

080097d0 <ucdr_deserialize_uint32_t>:
 80097d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	460d      	mov	r5, r1
 80097d6:	2104      	movs	r1, #4
 80097d8:	4604      	mov	r4, r0
 80097da:	f000 fc6b 	bl	800a0b4 <ucdr_buffer_alignment>
 80097de:	4601      	mov	r1, r0
 80097e0:	4620      	mov	r0, r4
 80097e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80097e6:	f000 fca9 	bl	800a13c <ucdr_advance_buffer>
 80097ea:	2104      	movs	r1, #4
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fc01 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d138      	bne.n	8009868 <ucdr_deserialize_uint32_t+0x98>
 80097f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80097fa:	42b7      	cmp	r7, r6
 80097fc:	d92f      	bls.n	800985e <ucdr_deserialize_uint32_t+0x8e>
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	60a7      	str	r7, [r4, #8]
 8009802:	1bbf      	subs	r7, r7, r6
 8009804:	443b      	add	r3, r7
 8009806:	f1c7 0904 	rsb	r9, r7, #4
 800980a:	6123      	str	r3, [r4, #16]
 800980c:	4649      	mov	r1, r9
 800980e:	4620      	mov	r0, r4
 8009810:	f000 fbfc 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009814:	2800      	cmp	r0, #0
 8009816:	d046      	beq.n	80098a6 <ucdr_deserialize_uint32_t+0xd6>
 8009818:	7d23      	ldrb	r3, [r4, #20]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d05c      	beq.n	80098d8 <ucdr_deserialize_uint32_t+0x108>
 800981e:	78f3      	ldrb	r3, [r6, #3]
 8009820:	702b      	strb	r3, [r5, #0]
 8009822:	2f00      	cmp	r7, #0
 8009824:	d04c      	beq.n	80098c0 <ucdr_deserialize_uint32_t+0xf0>
 8009826:	78b3      	ldrb	r3, [r6, #2]
 8009828:	706b      	strb	r3, [r5, #1]
 800982a:	2f01      	cmp	r7, #1
 800982c:	f105 0302 	add.w	r3, r5, #2
 8009830:	d04a      	beq.n	80098c8 <ucdr_deserialize_uint32_t+0xf8>
 8009832:	7873      	ldrb	r3, [r6, #1]
 8009834:	70ab      	strb	r3, [r5, #2]
 8009836:	2f02      	cmp	r7, #2
 8009838:	f105 0303 	add.w	r3, r5, #3
 800983c:	d048      	beq.n	80098d0 <ucdr_deserialize_uint32_t+0x100>
 800983e:	7833      	ldrb	r3, [r6, #0]
 8009840:	70eb      	strb	r3, [r5, #3]
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	68a2      	ldr	r2, [r4, #8]
 8009846:	7da0      	ldrb	r0, [r4, #22]
 8009848:	2104      	movs	r1, #4
 800984a:	3304      	adds	r3, #4
 800984c:	444a      	add	r2, r9
 800984e:	1bdb      	subs	r3, r3, r7
 8009850:	7561      	strb	r1, [r4, #21]
 8009852:	60a2      	str	r2, [r4, #8]
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	f080 0001 	eor.w	r0, r0, #1
 800985a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985e:	2104      	movs	r1, #4
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fbd3 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009866:	b1b0      	cbz	r0, 8009896 <ucdr_deserialize_uint32_t+0xc6>
 8009868:	7d23      	ldrb	r3, [r4, #20]
 800986a:	2b01      	cmp	r3, #1
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	d017      	beq.n	80098a0 <ucdr_deserialize_uint32_t+0xd0>
 8009870:	78db      	ldrb	r3, [r3, #3]
 8009872:	702b      	strb	r3, [r5, #0]
 8009874:	68a3      	ldr	r3, [r4, #8]
 8009876:	789b      	ldrb	r3, [r3, #2]
 8009878:	706b      	strb	r3, [r5, #1]
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	785b      	ldrb	r3, [r3, #1]
 800987e:	70ab      	strb	r3, [r5, #2]
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	70eb      	strb	r3, [r5, #3]
 8009886:	68a2      	ldr	r2, [r4, #8]
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	3204      	adds	r2, #4
 800988c:	3304      	adds	r3, #4
 800988e:	2104      	movs	r1, #4
 8009890:	60a2      	str	r2, [r4, #8]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	7561      	strb	r1, [r4, #21]
 8009896:	7da0      	ldrb	r0, [r4, #22]
 8009898:	f080 0001 	eor.w	r0, r0, #1
 800989c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	e7ef      	b.n	8009886 <ucdr_deserialize_uint32_t+0xb6>
 80098a6:	68a2      	ldr	r2, [r4, #8]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	7da0      	ldrb	r0, [r4, #22]
 80098ac:	f884 8015 	strb.w	r8, [r4, #21]
 80098b0:	1bd2      	subs	r2, r2, r7
 80098b2:	1bdb      	subs	r3, r3, r7
 80098b4:	60a2      	str	r2, [r4, #8]
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	f080 0001 	eor.w	r0, r0, #1
 80098bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c0:	68a3      	ldr	r3, [r4, #8]
 80098c2:	789b      	ldrb	r3, [r3, #2]
 80098c4:	706b      	strb	r3, [r5, #1]
 80098c6:	1cab      	adds	r3, r5, #2
 80098c8:	68a2      	ldr	r2, [r4, #8]
 80098ca:	7852      	ldrb	r2, [r2, #1]
 80098cc:	f803 2b01 	strb.w	r2, [r3], #1
 80098d0:	68a2      	ldr	r2, [r4, #8]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	e7b4      	b.n	8009842 <ucdr_deserialize_uint32_t+0x72>
 80098d8:	4631      	mov	r1, r6
 80098da:	463a      	mov	r2, r7
 80098dc:	4628      	mov	r0, r5
 80098de:	f00a f9ea 	bl	8013cb6 <memcpy>
 80098e2:	68a1      	ldr	r1, [r4, #8]
 80098e4:	464a      	mov	r2, r9
 80098e6:	19e8      	adds	r0, r5, r7
 80098e8:	f00a f9e5 	bl	8013cb6 <memcpy>
 80098ec:	e7a9      	b.n	8009842 <ucdr_deserialize_uint32_t+0x72>
 80098ee:	bf00      	nop

080098f0 <ucdr_deserialize_endian_uint32_t>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	460e      	mov	r6, r1
 80098f6:	2104      	movs	r1, #4
 80098f8:	4604      	mov	r4, r0
 80098fa:	4615      	mov	r5, r2
 80098fc:	f000 fbda 	bl	800a0b4 <ucdr_buffer_alignment>
 8009900:	4601      	mov	r1, r0
 8009902:	4620      	mov	r0, r4
 8009904:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009908:	f000 fc18 	bl	800a13c <ucdr_advance_buffer>
 800990c:	2104      	movs	r1, #4
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fb70 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009914:	2800      	cmp	r0, #0
 8009916:	d13c      	bne.n	8009992 <ucdr_deserialize_endian_uint32_t+0xa2>
 8009918:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800991c:	42bb      	cmp	r3, r7
 800991e:	d933      	bls.n	8009988 <ucdr_deserialize_endian_uint32_t+0x98>
 8009920:	eba3 0807 	sub.w	r8, r3, r7
 8009924:	60a3      	str	r3, [r4, #8]
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	f1c8 0a04 	rsb	sl, r8, #4
 800992c:	4443      	add	r3, r8
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	4651      	mov	r1, sl
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fb6a 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009938:	2800      	cmp	r0, #0
 800993a:	d048      	beq.n	80099ce <ucdr_deserialize_endian_uint32_t+0xde>
 800993c:	2e01      	cmp	r6, #1
 800993e:	d061      	beq.n	8009a04 <ucdr_deserialize_endian_uint32_t+0x114>
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	702b      	strb	r3, [r5, #0]
 8009944:	f1b8 0f00 	cmp.w	r8, #0
 8009948:	d050      	beq.n	80099ec <ucdr_deserialize_endian_uint32_t+0xfc>
 800994a:	78bb      	ldrb	r3, [r7, #2]
 800994c:	706b      	strb	r3, [r5, #1]
 800994e:	f1b8 0f01 	cmp.w	r8, #1
 8009952:	f105 0302 	add.w	r3, r5, #2
 8009956:	d04d      	beq.n	80099f4 <ucdr_deserialize_endian_uint32_t+0x104>
 8009958:	787b      	ldrb	r3, [r7, #1]
 800995a:	70ab      	strb	r3, [r5, #2]
 800995c:	f1b8 0f02 	cmp.w	r8, #2
 8009960:	f105 0303 	add.w	r3, r5, #3
 8009964:	d04a      	beq.n	80099fc <ucdr_deserialize_endian_uint32_t+0x10c>
 8009966:	783b      	ldrb	r3, [r7, #0]
 8009968:	70eb      	strb	r3, [r5, #3]
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	68a2      	ldr	r2, [r4, #8]
 800996e:	7da0      	ldrb	r0, [r4, #22]
 8009970:	2104      	movs	r1, #4
 8009972:	3304      	adds	r3, #4
 8009974:	4452      	add	r2, sl
 8009976:	eba3 0308 	sub.w	r3, r3, r8
 800997a:	7561      	strb	r1, [r4, #21]
 800997c:	60a2      	str	r2, [r4, #8]
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f080 0001 	eor.w	r0, r0, #1
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	2104      	movs	r1, #4
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fb3e 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009990:	b1a8      	cbz	r0, 80099be <ucdr_deserialize_endian_uint32_t+0xce>
 8009992:	2e01      	cmp	r6, #1
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	d017      	beq.n	80099c8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009998:	78db      	ldrb	r3, [r3, #3]
 800999a:	702b      	strb	r3, [r5, #0]
 800999c:	68a3      	ldr	r3, [r4, #8]
 800999e:	789b      	ldrb	r3, [r3, #2]
 80099a0:	706b      	strb	r3, [r5, #1]
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	70ab      	strb	r3, [r5, #2]
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	70eb      	strb	r3, [r5, #3]
 80099ae:	68a2      	ldr	r2, [r4, #8]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	3204      	adds	r2, #4
 80099b4:	3304      	adds	r3, #4
 80099b6:	2104      	movs	r1, #4
 80099b8:	60a2      	str	r2, [r4, #8]
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	7561      	strb	r1, [r4, #21]
 80099be:	7da0      	ldrb	r0, [r4, #22]
 80099c0:	f080 0001 	eor.w	r0, r0, #1
 80099c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	602b      	str	r3, [r5, #0]
 80099cc:	e7ef      	b.n	80099ae <ucdr_deserialize_endian_uint32_t+0xbe>
 80099ce:	68a2      	ldr	r2, [r4, #8]
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	7da0      	ldrb	r0, [r4, #22]
 80099d4:	f884 9015 	strb.w	r9, [r4, #21]
 80099d8:	eba2 0208 	sub.w	r2, r2, r8
 80099dc:	eba3 0308 	sub.w	r3, r3, r8
 80099e0:	60a2      	str	r2, [r4, #8]
 80099e2:	6123      	str	r3, [r4, #16]
 80099e4:	f080 0001 	eor.w	r0, r0, #1
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	68a3      	ldr	r3, [r4, #8]
 80099ee:	789b      	ldrb	r3, [r3, #2]
 80099f0:	706b      	strb	r3, [r5, #1]
 80099f2:	1cab      	adds	r3, r5, #2
 80099f4:	68a2      	ldr	r2, [r4, #8]
 80099f6:	7852      	ldrb	r2, [r2, #1]
 80099f8:	f803 2b01 	strb.w	r2, [r3], #1
 80099fc:	68a2      	ldr	r2, [r4, #8]
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	e7b2      	b.n	800996a <ucdr_deserialize_endian_uint32_t+0x7a>
 8009a04:	4639      	mov	r1, r7
 8009a06:	4642      	mov	r2, r8
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f00a f954 	bl	8013cb6 <memcpy>
 8009a0e:	68a1      	ldr	r1, [r4, #8]
 8009a10:	4652      	mov	r2, sl
 8009a12:	eb05 0008 	add.w	r0, r5, r8
 8009a16:	f00a f94e 	bl	8013cb6 <memcpy>
 8009a1a:	e7a6      	b.n	800996a <ucdr_deserialize_endian_uint32_t+0x7a>

08009a1c <ucdr_serialize_uint64_t>:
 8009a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a20:	2108      	movs	r1, #8
 8009a22:	b082      	sub	sp, #8
 8009a24:	4604      	mov	r4, r0
 8009a26:	e9cd 2300 	strd	r2, r3, [sp]
 8009a2a:	f000 fb43 	bl	800a0b4 <ucdr_buffer_alignment>
 8009a2e:	4601      	mov	r1, r0
 8009a30:	4620      	mov	r0, r4
 8009a32:	7d67      	ldrb	r7, [r4, #21]
 8009a34:	f000 fb82 	bl	800a13c <ucdr_advance_buffer>
 8009a38:	2108      	movs	r1, #8
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 fada 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d14e      	bne.n	8009ae2 <ucdr_serialize_uint64_t+0xc6>
 8009a44:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	d945      	bls.n	8009ad8 <ucdr_serialize_uint64_t+0xbc>
 8009a4c:	1b5e      	subs	r6, r3, r5
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	f1c6 0808 	rsb	r8, r6, #8
 8009a56:	4433      	add	r3, r6
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fad5 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d074      	beq.n	8009b50 <ucdr_serialize_uint64_t+0x134>
 8009a66:	7d23      	ldrb	r3, [r4, #20]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	f000 809b 	beq.w	8009ba4 <ucdr_serialize_uint64_t+0x188>
 8009a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a72:	702b      	strb	r3, [r5, #0]
 8009a74:	2e00      	cmp	r6, #0
 8009a76:	d078      	beq.n	8009b6a <ucdr_serialize_uint64_t+0x14e>
 8009a78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009a7c:	706b      	strb	r3, [r5, #1]
 8009a7e:	2e01      	cmp	r6, #1
 8009a80:	d077      	beq.n	8009b72 <ucdr_serialize_uint64_t+0x156>
 8009a82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a86:	70ab      	strb	r3, [r5, #2]
 8009a88:	2e02      	cmp	r6, #2
 8009a8a:	d076      	beq.n	8009b7a <ucdr_serialize_uint64_t+0x15e>
 8009a8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a90:	70eb      	strb	r3, [r5, #3]
 8009a92:	2e03      	cmp	r6, #3
 8009a94:	d075      	beq.n	8009b82 <ucdr_serialize_uint64_t+0x166>
 8009a96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a9a:	712b      	strb	r3, [r5, #4]
 8009a9c:	2e04      	cmp	r6, #4
 8009a9e:	d074      	beq.n	8009b8a <ucdr_serialize_uint64_t+0x16e>
 8009aa0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009aa4:	716b      	strb	r3, [r5, #5]
 8009aa6:	2e05      	cmp	r6, #5
 8009aa8:	d073      	beq.n	8009b92 <ucdr_serialize_uint64_t+0x176>
 8009aaa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009aae:	71ab      	strb	r3, [r5, #6]
 8009ab0:	2e06      	cmp	r6, #6
 8009ab2:	d072      	beq.n	8009b9a <ucdr_serialize_uint64_t+0x17e>
 8009ab4:	f89d 3000 	ldrb.w	r3, [sp]
 8009ab8:	71eb      	strb	r3, [r5, #7]
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	68a2      	ldr	r2, [r4, #8]
 8009abe:	7da0      	ldrb	r0, [r4, #22]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	1b9e      	subs	r6, r3, r6
 8009ac4:	4442      	add	r2, r8
 8009ac6:	2308      	movs	r3, #8
 8009ac8:	f080 0001 	eor.w	r0, r0, #1
 8009acc:	60a2      	str	r2, [r4, #8]
 8009ace:	6126      	str	r6, [r4, #16]
 8009ad0:	7563      	strb	r3, [r4, #21]
 8009ad2:	b002      	add	sp, #8
 8009ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad8:	2108      	movs	r1, #8
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fa96 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009ae0:	b350      	cbz	r0, 8009b38 <ucdr_serialize_uint64_t+0x11c>
 8009ae2:	7d23      	ldrb	r3, [r4, #20]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d02d      	beq.n	8009b44 <ucdr_serialize_uint64_t+0x128>
 8009ae8:	68a3      	ldr	r3, [r4, #8]
 8009aea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009aee:	701a      	strb	r2, [r3, #0]
 8009af0:	68a3      	ldr	r3, [r4, #8]
 8009af2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009af6:	705a      	strb	r2, [r3, #1]
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009afe:	709a      	strb	r2, [r3, #2]
 8009b00:	68a3      	ldr	r3, [r4, #8]
 8009b02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b06:	70da      	strb	r2, [r3, #3]
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009b0e:	711a      	strb	r2, [r3, #4]
 8009b10:	68a3      	ldr	r3, [r4, #8]
 8009b12:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009b16:	715a      	strb	r2, [r3, #5]
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009b1e:	719a      	strb	r2, [r3, #6]
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	f89d 2000 	ldrb.w	r2, [sp]
 8009b26:	71da      	strb	r2, [r3, #7]
 8009b28:	68a2      	ldr	r2, [r4, #8]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	3208      	adds	r2, #8
 8009b2e:	3308      	adds	r3, #8
 8009b30:	2108      	movs	r1, #8
 8009b32:	60a2      	str	r2, [r4, #8]
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	7561      	strb	r1, [r4, #21]
 8009b38:	7da0      	ldrb	r0, [r4, #22]
 8009b3a:	f080 0001 	eor.w	r0, r0, #1
 8009b3e:	b002      	add	sp, #8
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	466b      	mov	r3, sp
 8009b46:	cb03      	ldmia	r3!, {r0, r1}
 8009b48:	68a3      	ldr	r3, [r4, #8]
 8009b4a:	6018      	str	r0, [r3, #0]
 8009b4c:	6059      	str	r1, [r3, #4]
 8009b4e:	e7eb      	b.n	8009b28 <ucdr_serialize_uint64_t+0x10c>
 8009b50:	68a2      	ldr	r2, [r4, #8]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	7da0      	ldrb	r0, [r4, #22]
 8009b56:	7567      	strb	r7, [r4, #21]
 8009b58:	1b92      	subs	r2, r2, r6
 8009b5a:	1b9b      	subs	r3, r3, r6
 8009b5c:	f080 0001 	eor.w	r0, r0, #1
 8009b60:	60a2      	str	r2, [r4, #8]
 8009b62:	6123      	str	r3, [r4, #16]
 8009b64:	b002      	add	sp, #8
 8009b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009b88:	701a      	strb	r2, [r3, #0]
 8009b8a:	68a3      	ldr	r3, [r4, #8]
 8009b8c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009b90:	701a      	strb	r2, [r3, #0]
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	f89d 2000 	ldrb.w	r2, [sp]
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	e78a      	b.n	8009aba <ucdr_serialize_uint64_t+0x9e>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	466d      	mov	r5, sp
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4632      	mov	r2, r6
 8009bac:	f00a f883 	bl	8013cb6 <memcpy>
 8009bb0:	68a0      	ldr	r0, [r4, #8]
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	19a9      	adds	r1, r5, r6
 8009bb6:	f00a f87e 	bl	8013cb6 <memcpy>
 8009bba:	e77e      	b.n	8009aba <ucdr_serialize_uint64_t+0x9e>

08009bbc <ucdr_serialize_int16_t>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009bcc:	f000 fa72 	bl	800a0b4 <ucdr_buffer_alignment>
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	7d67      	ldrb	r7, [r4, #21]
 8009bd6:	f000 fab1 	bl	800a13c <ucdr_advance_buffer>
 8009bda:	2102      	movs	r1, #2
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 fa09 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009be2:	bb78      	cbnz	r0, 8009c44 <ucdr_serialize_int16_t+0x88>
 8009be4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	d926      	bls.n	8009c3a <ucdr_serialize_int16_t+0x7e>
 8009bec:	1b5e      	subs	r6, r3, r5
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	f1c6 0802 	rsb	r8, r6, #2
 8009bf6:	4433      	add	r3, r6
 8009bf8:	6123      	str	r3, [r4, #16]
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fa05 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d03b      	beq.n	8009c7e <ucdr_serialize_int16_t+0xc2>
 8009c06:	7d23      	ldrb	r3, [r4, #20]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d04a      	beq.n	8009ca2 <ucdr_serialize_int16_t+0xe6>
 8009c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c10:	702b      	strb	r3, [r5, #0]
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	d040      	beq.n	8009c98 <ucdr_serialize_int16_t+0xdc>
 8009c16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c1a:	706b      	strb	r3, [r5, #1]
 8009c1c:	6923      	ldr	r3, [r4, #16]
 8009c1e:	68a2      	ldr	r2, [r4, #8]
 8009c20:	7da0      	ldrb	r0, [r4, #22]
 8009c22:	3302      	adds	r3, #2
 8009c24:	1b9e      	subs	r6, r3, r6
 8009c26:	4442      	add	r2, r8
 8009c28:	2302      	movs	r3, #2
 8009c2a:	f080 0001 	eor.w	r0, r0, #1
 8009c2e:	60a2      	str	r2, [r4, #8]
 8009c30:	6126      	str	r6, [r4, #16]
 8009c32:	7563      	strb	r3, [r4, #21]
 8009c34:	b002      	add	sp, #8
 8009c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c3a:	2102      	movs	r1, #2
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 f9e5 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009c42:	b190      	cbz	r0, 8009c6a <ucdr_serialize_int16_t+0xae>
 8009c44:	7d23      	ldrb	r3, [r4, #20]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	68a3      	ldr	r3, [r4, #8]
 8009c4a:	d014      	beq.n	8009c76 <ucdr_serialize_int16_t+0xba>
 8009c4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009c50:	701a      	strb	r2, [r3, #0]
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009c58:	705a      	strb	r2, [r3, #1]
 8009c5a:	68a2      	ldr	r2, [r4, #8]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	3202      	adds	r2, #2
 8009c60:	3302      	adds	r3, #2
 8009c62:	2102      	movs	r1, #2
 8009c64:	60a2      	str	r2, [r4, #8]
 8009c66:	6123      	str	r3, [r4, #16]
 8009c68:	7561      	strb	r1, [r4, #21]
 8009c6a:	7da0      	ldrb	r0, [r4, #22]
 8009c6c:	f080 0001 	eor.w	r0, r0, #1
 8009c70:	b002      	add	sp, #8
 8009c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	e7ed      	b.n	8009c5a <ucdr_serialize_int16_t+0x9e>
 8009c7e:	68a2      	ldr	r2, [r4, #8]
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	7da0      	ldrb	r0, [r4, #22]
 8009c84:	7567      	strb	r7, [r4, #21]
 8009c86:	1b92      	subs	r2, r2, r6
 8009c88:	1b9b      	subs	r3, r3, r6
 8009c8a:	f080 0001 	eor.w	r0, r0, #1
 8009c8e:	60a2      	str	r2, [r4, #8]
 8009c90:	6123      	str	r3, [r4, #16]
 8009c92:	b002      	add	sp, #8
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	68a3      	ldr	r3, [r4, #8]
 8009c9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	e7bc      	b.n	8009c1c <ucdr_serialize_int16_t+0x60>
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f10d 0506 	add.w	r5, sp, #6
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4632      	mov	r2, r6
 8009cac:	f00a f803 	bl	8013cb6 <memcpy>
 8009cb0:	68a0      	ldr	r0, [r4, #8]
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	19a9      	adds	r1, r5, r6
 8009cb6:	f009 fffe 	bl	8013cb6 <memcpy>
 8009cba:	e7af      	b.n	8009c1c <ucdr_serialize_int16_t+0x60>

08009cbc <ucdr_deserialize_int16_t>:
 8009cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	f000 f9f5 	bl	800a0b4 <ucdr_buffer_alignment>
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009cd2:	f000 fa33 	bl	800a13c <ucdr_advance_buffer>
 8009cd6:	2102      	movs	r1, #2
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 f98b 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009cde:	bb60      	cbnz	r0, 8009d3a <ucdr_deserialize_int16_t+0x7e>
 8009ce0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009ce4:	42be      	cmp	r6, r7
 8009ce6:	d923      	bls.n	8009d30 <ucdr_deserialize_int16_t+0x74>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	60a6      	str	r6, [r4, #8]
 8009cec:	1bf6      	subs	r6, r6, r7
 8009cee:	4433      	add	r3, r6
 8009cf0:	f1c6 0902 	rsb	r9, r6, #2
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f987 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d034      	beq.n	8009d6c <ucdr_deserialize_int16_t+0xb0>
 8009d02:	7d23      	ldrb	r3, [r4, #20]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d042      	beq.n	8009d8e <ucdr_deserialize_int16_t+0xd2>
 8009d08:	787b      	ldrb	r3, [r7, #1]
 8009d0a:	702b      	strb	r3, [r5, #0]
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	d03a      	beq.n	8009d86 <ucdr_deserialize_int16_t+0xca>
 8009d10:	783b      	ldrb	r3, [r7, #0]
 8009d12:	706b      	strb	r3, [r5, #1]
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	68a2      	ldr	r2, [r4, #8]
 8009d18:	7da0      	ldrb	r0, [r4, #22]
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	3302      	adds	r3, #2
 8009d1e:	444a      	add	r2, r9
 8009d20:	1b9b      	subs	r3, r3, r6
 8009d22:	7561      	strb	r1, [r4, #21]
 8009d24:	60a2      	str	r2, [r4, #8]
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	f080 0001 	eor.w	r0, r0, #1
 8009d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d30:	2102      	movs	r1, #2
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 f96a 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009d38:	b180      	cbz	r0, 8009d5c <ucdr_deserialize_int16_t+0xa0>
 8009d3a:	7d23      	ldrb	r3, [r4, #20]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	d011      	beq.n	8009d66 <ucdr_deserialize_int16_t+0xaa>
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	702b      	strb	r3, [r5, #0]
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	706b      	strb	r3, [r5, #1]
 8009d4c:	68a2      	ldr	r2, [r4, #8]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	3202      	adds	r2, #2
 8009d52:	3302      	adds	r3, #2
 8009d54:	2102      	movs	r1, #2
 8009d56:	60a2      	str	r2, [r4, #8]
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	7561      	strb	r1, [r4, #21]
 8009d5c:	7da0      	ldrb	r0, [r4, #22]
 8009d5e:	f080 0001 	eor.w	r0, r0, #1
 8009d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	802b      	strh	r3, [r5, #0]
 8009d6a:	e7ef      	b.n	8009d4c <ucdr_deserialize_int16_t+0x90>
 8009d6c:	68a2      	ldr	r2, [r4, #8]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	7da0      	ldrb	r0, [r4, #22]
 8009d72:	f884 8015 	strb.w	r8, [r4, #21]
 8009d76:	1b92      	subs	r2, r2, r6
 8009d78:	1b9b      	subs	r3, r3, r6
 8009d7a:	60a2      	str	r2, [r4, #8]
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	f080 0001 	eor.w	r0, r0, #1
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d86:	68a3      	ldr	r3, [r4, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	706b      	strb	r3, [r5, #1]
 8009d8c:	e7c2      	b.n	8009d14 <ucdr_deserialize_int16_t+0x58>
 8009d8e:	4639      	mov	r1, r7
 8009d90:	4632      	mov	r2, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	f009 ff8f 	bl	8013cb6 <memcpy>
 8009d98:	68a1      	ldr	r1, [r4, #8]
 8009d9a:	464a      	mov	r2, r9
 8009d9c:	19a8      	adds	r0, r5, r6
 8009d9e:	f009 ff8a 	bl	8013cb6 <memcpy>
 8009da2:	e7b7      	b.n	8009d14 <ucdr_deserialize_int16_t+0x58>

08009da4 <ucdr_serialize_int32_t>:
 8009da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	4604      	mov	r4, r0
 8009dac:	9101      	str	r1, [sp, #4]
 8009dae:	2104      	movs	r1, #4
 8009db0:	f000 f980 	bl	800a0b4 <ucdr_buffer_alignment>
 8009db4:	4601      	mov	r1, r0
 8009db6:	4620      	mov	r0, r4
 8009db8:	7d67      	ldrb	r7, [r4, #21]
 8009dba:	f000 f9bf 	bl	800a13c <ucdr_advance_buffer>
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f917 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d139      	bne.n	8009e3e <ucdr_serialize_int32_t+0x9a>
 8009dca:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009dce:	42ab      	cmp	r3, r5
 8009dd0:	d930      	bls.n	8009e34 <ucdr_serialize_int32_t+0x90>
 8009dd2:	1b5e      	subs	r6, r3, r5
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	f1c6 0804 	rsb	r8, r6, #4
 8009ddc:	4433      	add	r3, r6
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	4641      	mov	r1, r8
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 f912 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d04c      	beq.n	8009e86 <ucdr_serialize_int32_t+0xe2>
 8009dec:	7d23      	ldrb	r3, [r4, #20]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d063      	beq.n	8009eba <ucdr_serialize_int32_t+0x116>
 8009df2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009df6:	702b      	strb	r3, [r5, #0]
 8009df8:	2e00      	cmp	r6, #0
 8009dfa:	d051      	beq.n	8009ea0 <ucdr_serialize_int32_t+0xfc>
 8009dfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e00:	706b      	strb	r3, [r5, #1]
 8009e02:	2e01      	cmp	r6, #1
 8009e04:	d050      	beq.n	8009ea8 <ucdr_serialize_int32_t+0x104>
 8009e06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009e0a:	70ab      	strb	r3, [r5, #2]
 8009e0c:	2e02      	cmp	r6, #2
 8009e0e:	d04f      	beq.n	8009eb0 <ucdr_serialize_int32_t+0x10c>
 8009e10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009e14:	70eb      	strb	r3, [r5, #3]
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	68a2      	ldr	r2, [r4, #8]
 8009e1a:	7da0      	ldrb	r0, [r4, #22]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	1b9e      	subs	r6, r3, r6
 8009e20:	4442      	add	r2, r8
 8009e22:	2304      	movs	r3, #4
 8009e24:	f080 0001 	eor.w	r0, r0, #1
 8009e28:	60a2      	str	r2, [r4, #8]
 8009e2a:	6126      	str	r6, [r4, #16]
 8009e2c:	7563      	strb	r3, [r4, #21]
 8009e2e:	b002      	add	sp, #8
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	2104      	movs	r1, #4
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 f8e8 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009e3c:	b1d0      	cbz	r0, 8009e74 <ucdr_serialize_int32_t+0xd0>
 8009e3e:	7d23      	ldrb	r3, [r4, #20]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	d01c      	beq.n	8009e80 <ucdr_serialize_int32_t+0xdc>
 8009e46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	68a3      	ldr	r3, [r4, #8]
 8009e4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e52:	705a      	strb	r2, [r3, #1]
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009e5a:	709a      	strb	r2, [r3, #2]
 8009e5c:	68a3      	ldr	r3, [r4, #8]
 8009e5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e62:	70da      	strb	r2, [r3, #3]
 8009e64:	68a2      	ldr	r2, [r4, #8]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	3204      	adds	r2, #4
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	2104      	movs	r1, #4
 8009e6e:	60a2      	str	r2, [r4, #8]
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	7561      	strb	r1, [r4, #21]
 8009e74:	7da0      	ldrb	r0, [r4, #22]
 8009e76:	f080 0001 	eor.w	r0, r0, #1
 8009e7a:	b002      	add	sp, #8
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	9a01      	ldr	r2, [sp, #4]
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	e7ee      	b.n	8009e64 <ucdr_serialize_int32_t+0xc0>
 8009e86:	68a2      	ldr	r2, [r4, #8]
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	7da0      	ldrb	r0, [r4, #22]
 8009e8c:	7567      	strb	r7, [r4, #21]
 8009e8e:	1b92      	subs	r2, r2, r6
 8009e90:	1b9b      	subs	r3, r3, r6
 8009e92:	f080 0001 	eor.w	r0, r0, #1
 8009e96:	60a2      	str	r2, [r4, #8]
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	b002      	add	sp, #8
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea0:	68a3      	ldr	r3, [r4, #8]
 8009ea2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	68a3      	ldr	r3, [r4, #8]
 8009eaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e7ad      	b.n	8009e16 <ucdr_serialize_int32_t+0x72>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	ad01      	add	r5, sp, #4
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	f009 fef8 	bl	8013cb6 <memcpy>
 8009ec6:	68a0      	ldr	r0, [r4, #8]
 8009ec8:	4642      	mov	r2, r8
 8009eca:	19a9      	adds	r1, r5, r6
 8009ecc:	f009 fef3 	bl	8013cb6 <memcpy>
 8009ed0:	e7a1      	b.n	8009e16 <ucdr_serialize_int32_t+0x72>
 8009ed2:	bf00      	nop

08009ed4 <ucdr_deserialize_int32_t>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	460d      	mov	r5, r1
 8009eda:	2104      	movs	r1, #4
 8009edc:	4604      	mov	r4, r0
 8009ede:	f000 f8e9 	bl	800a0b4 <ucdr_buffer_alignment>
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009eea:	f000 f927 	bl	800a13c <ucdr_advance_buffer>
 8009eee:	2104      	movs	r1, #4
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 f87f 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d138      	bne.n	8009f6c <ucdr_deserialize_int32_t+0x98>
 8009efa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009efe:	42b7      	cmp	r7, r6
 8009f00:	d92f      	bls.n	8009f62 <ucdr_deserialize_int32_t+0x8e>
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	60a7      	str	r7, [r4, #8]
 8009f06:	1bbf      	subs	r7, r7, r6
 8009f08:	443b      	add	r3, r7
 8009f0a:	f1c7 0904 	rsb	r9, r7, #4
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	4649      	mov	r1, r9
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f87a 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d046      	beq.n	8009faa <ucdr_deserialize_int32_t+0xd6>
 8009f1c:	7d23      	ldrb	r3, [r4, #20]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d05c      	beq.n	8009fdc <ucdr_deserialize_int32_t+0x108>
 8009f22:	78f3      	ldrb	r3, [r6, #3]
 8009f24:	702b      	strb	r3, [r5, #0]
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	d04c      	beq.n	8009fc4 <ucdr_deserialize_int32_t+0xf0>
 8009f2a:	78b3      	ldrb	r3, [r6, #2]
 8009f2c:	706b      	strb	r3, [r5, #1]
 8009f2e:	2f01      	cmp	r7, #1
 8009f30:	f105 0302 	add.w	r3, r5, #2
 8009f34:	d04a      	beq.n	8009fcc <ucdr_deserialize_int32_t+0xf8>
 8009f36:	7873      	ldrb	r3, [r6, #1]
 8009f38:	70ab      	strb	r3, [r5, #2]
 8009f3a:	2f02      	cmp	r7, #2
 8009f3c:	f105 0303 	add.w	r3, r5, #3
 8009f40:	d048      	beq.n	8009fd4 <ucdr_deserialize_int32_t+0x100>
 8009f42:	7833      	ldrb	r3, [r6, #0]
 8009f44:	70eb      	strb	r3, [r5, #3]
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	68a2      	ldr	r2, [r4, #8]
 8009f4a:	7da0      	ldrb	r0, [r4, #22]
 8009f4c:	2104      	movs	r1, #4
 8009f4e:	3304      	adds	r3, #4
 8009f50:	444a      	add	r2, r9
 8009f52:	1bdb      	subs	r3, r3, r7
 8009f54:	7561      	strb	r1, [r4, #21]
 8009f56:	60a2      	str	r2, [r4, #8]
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	f080 0001 	eor.w	r0, r0, #1
 8009f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f62:	2104      	movs	r1, #4
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 f851 	bl	800a00c <ucdr_check_final_buffer_behavior>
 8009f6a:	b1b0      	cbz	r0, 8009f9a <ucdr_deserialize_int32_t+0xc6>
 8009f6c:	7d23      	ldrb	r3, [r4, #20]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	68a3      	ldr	r3, [r4, #8]
 8009f72:	d017      	beq.n	8009fa4 <ucdr_deserialize_int32_t+0xd0>
 8009f74:	78db      	ldrb	r3, [r3, #3]
 8009f76:	702b      	strb	r3, [r5, #0]
 8009f78:	68a3      	ldr	r3, [r4, #8]
 8009f7a:	789b      	ldrb	r3, [r3, #2]
 8009f7c:	706b      	strb	r3, [r5, #1]
 8009f7e:	68a3      	ldr	r3, [r4, #8]
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	70ab      	strb	r3, [r5, #2]
 8009f84:	68a3      	ldr	r3, [r4, #8]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	70eb      	strb	r3, [r5, #3]
 8009f8a:	68a2      	ldr	r2, [r4, #8]
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	3204      	adds	r2, #4
 8009f90:	3304      	adds	r3, #4
 8009f92:	2104      	movs	r1, #4
 8009f94:	60a2      	str	r2, [r4, #8]
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	7561      	strb	r1, [r4, #21]
 8009f9a:	7da0      	ldrb	r0, [r4, #22]
 8009f9c:	f080 0001 	eor.w	r0, r0, #1
 8009fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	e7ef      	b.n	8009f8a <ucdr_deserialize_int32_t+0xb6>
 8009faa:	68a2      	ldr	r2, [r4, #8]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	7da0      	ldrb	r0, [r4, #22]
 8009fb0:	f884 8015 	strb.w	r8, [r4, #21]
 8009fb4:	1bd2      	subs	r2, r2, r7
 8009fb6:	1bdb      	subs	r3, r3, r7
 8009fb8:	60a2      	str	r2, [r4, #8]
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	f080 0001 	eor.w	r0, r0, #1
 8009fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc4:	68a3      	ldr	r3, [r4, #8]
 8009fc6:	789b      	ldrb	r3, [r3, #2]
 8009fc8:	706b      	strb	r3, [r5, #1]
 8009fca:	1cab      	adds	r3, r5, #2
 8009fcc:	68a2      	ldr	r2, [r4, #8]
 8009fce:	7852      	ldrb	r2, [r2, #1]
 8009fd0:	f803 2b01 	strb.w	r2, [r3], #1
 8009fd4:	68a2      	ldr	r2, [r4, #8]
 8009fd6:	7812      	ldrb	r2, [r2, #0]
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e7b4      	b.n	8009f46 <ucdr_deserialize_int32_t+0x72>
 8009fdc:	4631      	mov	r1, r6
 8009fde:	463a      	mov	r2, r7
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f009 fe68 	bl	8013cb6 <memcpy>
 8009fe6:	68a1      	ldr	r1, [r4, #8]
 8009fe8:	464a      	mov	r2, r9
 8009fea:	19e8      	adds	r0, r5, r7
 8009fec:	f009 fe63 	bl	8013cb6 <memcpy>
 8009ff0:	e7a9      	b.n	8009f46 <ucdr_deserialize_int32_t+0x72>
 8009ff2:	bf00      	nop

08009ff4 <ucdr_check_buffer_available_for>:
 8009ff4:	7d83      	ldrb	r3, [r0, #22]
 8009ff6:	b93b      	cbnz	r3, 800a008 <ucdr_check_buffer_available_for+0x14>
 8009ff8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009ffc:	4419      	add	r1, r3
 8009ffe:	4288      	cmp	r0, r1
 800a000:	bf34      	ite	cc
 800a002:	2000      	movcc	r0, #0
 800a004:	2001      	movcs	r0, #1
 800a006:	4770      	bx	lr
 800a008:	2000      	movs	r0, #0
 800a00a:	4770      	bx	lr

0800a00c <ucdr_check_final_buffer_behavior>:
 800a00c:	7d83      	ldrb	r3, [r0, #22]
 800a00e:	b943      	cbnz	r3, 800a022 <ucdr_check_final_buffer_behavior+0x16>
 800a010:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a014:	4291      	cmp	r1, r2
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	d205      	bcs.n	800a028 <ucdr_check_final_buffer_behavior+0x1c>
 800a01c:	2301      	movs	r3, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	bd10      	pop	{r4, pc}
 800a022:	2300      	movs	r3, #0
 800a024:	4618      	mov	r0, r3
 800a026:	4770      	bx	lr
 800a028:	6982      	ldr	r2, [r0, #24]
 800a02a:	b13a      	cbz	r2, 800a03c <ucdr_check_final_buffer_behavior+0x30>
 800a02c:	69c1      	ldr	r1, [r0, #28]
 800a02e:	4790      	blx	r2
 800a030:	f080 0301 	eor.w	r3, r0, #1
 800a034:	b2db      	uxtb	r3, r3
 800a036:	75a0      	strb	r0, [r4, #22]
 800a038:	4618      	mov	r0, r3
 800a03a:	bd10      	pop	{r4, pc}
 800a03c:	2001      	movs	r0, #1
 800a03e:	75a0      	strb	r0, [r4, #22]
 800a040:	e7fa      	b.n	800a038 <ucdr_check_final_buffer_behavior+0x2c>
 800a042:	bf00      	nop

0800a044 <ucdr_set_on_full_buffer_callback>:
 800a044:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop

0800a04c <ucdr_init_buffer_origin_offset_endian>:
 800a04c:	b410      	push	{r4}
 800a04e:	9c01      	ldr	r4, [sp, #4]
 800a050:	6001      	str	r1, [r0, #0]
 800a052:	440a      	add	r2, r1
 800a054:	6042      	str	r2, [r0, #4]
 800a056:	190a      	adds	r2, r1, r4
 800a058:	441c      	add	r4, r3
 800a05a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800a05e:	6082      	str	r2, [r0, #8]
 800a060:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a064:	7503      	strb	r3, [r0, #20]
 800a066:	2200      	movs	r2, #0
 800a068:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800a06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a070:	7542      	strb	r2, [r0, #21]
 800a072:	7582      	strb	r2, [r0, #22]
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop

0800a078 <ucdr_init_buffer_origin_offset>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	9c04      	ldr	r4, [sp, #16]
 800a07e:	9400      	str	r4, [sp, #0]
 800a080:	2401      	movs	r4, #1
 800a082:	9401      	str	r4, [sp, #4]
 800a084:	f7ff ffe2 	bl	800a04c <ucdr_init_buffer_origin_offset_endian>
 800a088:	b002      	add	sp, #8
 800a08a:	bd10      	pop	{r4, pc}

0800a08c <ucdr_init_buffer_origin>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	2400      	movs	r4, #0
 800a092:	9400      	str	r4, [sp, #0]
 800a094:	f7ff fff0 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800a098:	b002      	add	sp, #8
 800a09a:	bd10      	pop	{r4, pc}

0800a09c <ucdr_init_buffer>:
 800a09c:	2300      	movs	r3, #0
 800a09e:	f7ff bff5 	b.w	800a08c <ucdr_init_buffer_origin>
 800a0a2:	bf00      	nop

0800a0a4 <ucdr_alignment>:
 800a0a4:	fbb0 f3f1 	udiv	r3, r0, r1
 800a0a8:	fb03 0011 	mls	r0, r3, r1, r0
 800a0ac:	1a08      	subs	r0, r1, r0
 800a0ae:	3901      	subs	r1, #1
 800a0b0:	4008      	ands	r0, r1
 800a0b2:	4770      	bx	lr

0800a0b4 <ucdr_buffer_alignment>:
 800a0b4:	7d43      	ldrb	r3, [r0, #21]
 800a0b6:	428b      	cmp	r3, r1
 800a0b8:	d208      	bcs.n	800a0cc <ucdr_buffer_alignment+0x18>
 800a0ba:	6900      	ldr	r0, [r0, #16]
 800a0bc:	fbb0 f3f1 	udiv	r3, r0, r1
 800a0c0:	fb01 0013 	mls	r0, r1, r3, r0
 800a0c4:	1a08      	subs	r0, r1, r0
 800a0c6:	3901      	subs	r1, #1
 800a0c8:	4008      	ands	r0, r1
 800a0ca:	4770      	bx	lr
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	4770      	bx	lr

0800a0d0 <ucdr_align_to>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	f7ff ffed 	bl	800a0b4 <ucdr_buffer_alignment>
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	6921      	ldr	r1, [r4, #16]
 800a0de:	7565      	strb	r5, [r4, #21]
 800a0e0:	181a      	adds	r2, r3, r0
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	4408      	add	r0, r1
 800a0e8:	bf28      	it	cs
 800a0ea:	4613      	movcs	r3, r2
 800a0ec:	6120      	str	r0, [r4, #16]
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	bf00      	nop

0800a0f4 <ucdr_buffer_length>:
 800a0f4:	6882      	ldr	r2, [r0, #8]
 800a0f6:	6800      	ldr	r0, [r0, #0]
 800a0f8:	1a10      	subs	r0, r2, r0
 800a0fa:	4770      	bx	lr

0800a0fc <ucdr_buffer_remaining>:
 800a0fc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a100:	1a10      	subs	r0, r2, r0
 800a102:	4770      	bx	lr

0800a104 <ucdr_check_final_buffer_behavior_array>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	7d83      	ldrb	r3, [r0, #22]
 800a108:	b963      	cbnz	r3, 800a124 <ucdr_check_final_buffer_behavior_array+0x20>
 800a10a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	d308      	bcc.n	800a128 <ucdr_check_final_buffer_behavior_array+0x24>
 800a116:	b139      	cbz	r1, 800a128 <ucdr_check_final_buffer_behavior_array+0x24>
 800a118:	6983      	ldr	r3, [r0, #24]
 800a11a:	b163      	cbz	r3, 800a136 <ucdr_check_final_buffer_behavior_array+0x32>
 800a11c:	69c1      	ldr	r1, [r0, #28]
 800a11e:	4798      	blx	r3
 800a120:	75a0      	strb	r0, [r4, #22]
 800a122:	b108      	cbz	r0, 800a128 <ucdr_check_final_buffer_behavior_array+0x24>
 800a124:	2000      	movs	r0, #0
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	4620      	mov	r0, r4
 800a12a:	f7ff ffe7 	bl	800a0fc <ucdr_buffer_remaining>
 800a12e:	42a8      	cmp	r0, r5
 800a130:	bf28      	it	cs
 800a132:	4628      	movcs	r0, r5
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	2301      	movs	r3, #1
 800a138:	7583      	strb	r3, [r0, #22]
 800a13a:	e7f3      	b.n	800a124 <ucdr_check_final_buffer_behavior_array+0x20>

0800a13c <ucdr_advance_buffer>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
 800a142:	f7ff ff57 	bl	8009ff4 <ucdr_check_buffer_available_for>
 800a146:	b178      	cbz	r0, 800a168 <ucdr_advance_buffer+0x2c>
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	68a2      	ldr	r2, [r4, #8]
 800a14c:	442b      	add	r3, r5
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	2301      	movs	r3, #1
 800a152:	442a      	add	r2, r5
 800a154:	7563      	strb	r3, [r4, #21]
 800a156:	60a2      	str	r2, [r4, #8]
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	68a2      	ldr	r2, [r4, #8]
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	4402      	add	r2, r0
 800a160:	4403      	add	r3, r0
 800a162:	1a2d      	subs	r5, r5, r0
 800a164:	60a2      	str	r2, [r4, #8]
 800a166:	6123      	str	r3, [r4, #16]
 800a168:	4629      	mov	r1, r5
 800a16a:	2201      	movs	r2, #1
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7ff ffc9 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 800a172:	2800      	cmp	r0, #0
 800a174:	d1f1      	bne.n	800a15a <ucdr_advance_buffer+0x1e>
 800a176:	2301      	movs	r3, #1
 800a178:	7563      	strb	r3, [r4, #21]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}

0800a17c <uxr_buffer_delete_entity>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	2300      	movs	r3, #0
 800a180:	b08e      	sub	sp, #56	@ 0x38
 800a182:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a186:	2303      	movs	r3, #3
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	2204      	movs	r2, #4
 800a18c:	ab06      	add	r3, sp, #24
 800a18e:	4604      	mov	r4, r0
 800a190:	9103      	str	r1, [sp, #12]
 800a192:	f001 f8ab 	bl	800b2ec <uxr_prepare_stream_to_write_submessage>
 800a196:	b918      	cbnz	r0, 800a1a0 <uxr_buffer_delete_entity+0x24>
 800a198:	4604      	mov	r4, r0
 800a19a:	4620      	mov	r0, r4
 800a19c:	b00e      	add	sp, #56	@ 0x38
 800a19e:	bd10      	pop	{r4, pc}
 800a1a0:	9902      	ldr	r1, [sp, #8]
 800a1a2:	aa05      	add	r2, sp, #20
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f001 f9d7 	bl	800b558 <uxr_init_base_object_request>
 800a1aa:	a905      	add	r1, sp, #20
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	a806      	add	r0, sp, #24
 800a1b0:	f002 fb3c 	bl	800c82c <uxr_serialize_DELETE_Payload>
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	b00e      	add	sp, #56	@ 0x38
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop

0800a1bc <uxr_common_create_entity>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a1c2:	b08c      	sub	sp, #48	@ 0x30
 800a1c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a1c8:	f1bc 0f01 	cmp.w	ip, #1
 800a1cc:	bf0c      	ite	eq
 800a1ce:	f003 0201 	andeq.w	r2, r3, #1
 800a1d2:	2200      	movne	r2, #0
 800a1d4:	330e      	adds	r3, #14
 800a1d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800a1da:	9101      	str	r1, [sp, #4]
 800a1dc:	441a      	add	r2, r3
 800a1de:	2301      	movs	r3, #1
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	9903      	ldr	r1, [sp, #12]
 800a1e4:	ab04      	add	r3, sp, #16
 800a1e6:	b292      	uxth	r2, r2
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	f001 f87f 	bl	800b2ec <uxr_prepare_stream_to_write_submessage>
 800a1ee:	b918      	cbnz	r0, 800a1f8 <uxr_common_create_entity+0x3c>
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	b00c      	add	sp, #48	@ 0x30
 800a1f6:	bd10      	pop	{r4, pc}
 800a1f8:	9902      	ldr	r1, [sp, #8]
 800a1fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f001 f9ab 	bl	800b558 <uxr_init_base_object_request>
 800a202:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a204:	4604      	mov	r4, r0
 800a206:	a804      	add	r0, sp, #16
 800a208:	f002 fa6c 	bl	800c6e4 <uxr_serialize_CREATE_Payload>
 800a20c:	4620      	mov	r0, r4
 800a20e:	b00c      	add	sp, #48	@ 0x30
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop

0800a214 <uxr_buffer_create_participant_bin>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800a21a:	ac11      	add	r4, sp, #68	@ 0x44
 800a21c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800a220:	2303      	movs	r3, #3
 800a222:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a226:	7223      	strb	r3, [r4, #8]
 800a228:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800a22a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800a22e:	2201      	movs	r2, #1
 800a230:	2100      	movs	r1, #0
 800a232:	4605      	mov	r5, r0
 800a234:	7122      	strb	r2, [r4, #4]
 800a236:	f88d 1014 	strb.w	r1, [sp, #20]
 800a23a:	b1cb      	cbz	r3, 800a270 <uxr_buffer_create_participant_bin+0x5c>
 800a23c:	f88d 201c 	strb.w	r2, [sp, #28]
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a246:	a915      	add	r1, sp, #84	@ 0x54
 800a248:	a809      	add	r0, sp, #36	@ 0x24
 800a24a:	f7ff ff27 	bl	800a09c <ucdr_init_buffer>
 800a24e:	a905      	add	r1, sp, #20
 800a250:	a809      	add	r0, sp, #36	@ 0x24
 800a252:	f001 ff15 	bl	800c080 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a258:	9600      	str	r6, [sp, #0]
 800a25a:	9401      	str	r4, [sp, #4]
 800a25c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a260:	60e3      	str	r3, [r4, #12]
 800a262:	4628      	mov	r0, r5
 800a264:	b29b      	uxth	r3, r3
 800a266:	f7ff ffa9 	bl	800a1bc <uxr_common_create_entity>
 800a26a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	f88d 301c 	strb.w	r3, [sp, #28]
 800a274:	e7e5      	b.n	800a242 <uxr_buffer_create_participant_bin+0x2e>
 800a276:	bf00      	nop

0800a278 <uxr_buffer_create_topic_bin>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800a27e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a282:	9105      	str	r1, [sp, #20]
 800a284:	4605      	mov	r5, r0
 800a286:	a997      	add	r1, sp, #604	@ 0x25c
 800a288:	4618      	mov	r0, r3
 800a28a:	2302      	movs	r3, #2
 800a28c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800a290:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800a294:	f000 f8ee 	bl	800a474 <uxr_object_id_to_raw>
 800a298:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800a29a:	9306      	str	r3, [sp, #24]
 800a29c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800a29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2ac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a2b0:	a917      	add	r1, sp, #92	@ 0x5c
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	a80b      	add	r0, sp, #44	@ 0x2c
 800a2b6:	f88d 301c 	strb.w	r3, [sp, #28]
 800a2ba:	f7ff feef 	bl	800a09c <ucdr_init_buffer>
 800a2be:	a906      	add	r1, sp, #24
 800a2c0:	a80b      	add	r0, sp, #44	@ 0x2c
 800a2c2:	f001 feff 	bl	800c0c4 <uxr_serialize_OBJK_Topic_Binary>
 800a2c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800a2ca:	ac13      	add	r4, sp, #76	@ 0x4c
 800a2cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a2d0:	9600      	str	r6, [sp, #0]
 800a2d2:	9401      	str	r4, [sp, #4]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7ff ff70 	bl	800a1bc <uxr_common_create_entity>
 800a2dc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800a2e0:	bd70      	pop	{r4, r5, r6, pc}
 800a2e2:	bf00      	nop

0800a2e4 <uxr_buffer_create_publisher_bin>:
 800a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	9105      	str	r1, [sp, #20]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	2603      	movs	r6, #3
 800a2f2:	a992      	add	r1, sp, #584	@ 0x248
 800a2f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a2f8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800a2fc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800a300:	f000 f8b8 	bl	800a474 <uxr_object_id_to_raw>
 800a304:	2300      	movs	r3, #0
 800a306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a30a:	a912      	add	r1, sp, #72	@ 0x48
 800a30c:	a806      	add	r0, sp, #24
 800a30e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800a312:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800a316:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800a31a:	f7ff febf 	bl	800a09c <ucdr_init_buffer>
 800a31e:	a993      	add	r1, sp, #588	@ 0x24c
 800a320:	a806      	add	r0, sp, #24
 800a322:	f001 ff83 	bl	800c22c <uxr_serialize_OBJK_Publisher_Binary>
 800a326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a328:	9311      	str	r3, [sp, #68]	@ 0x44
 800a32a:	ac0e      	add	r4, sp, #56	@ 0x38
 800a32c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a330:	9700      	str	r7, [sp, #0]
 800a332:	9401      	str	r4, [sp, #4]
 800a334:	b29b      	uxth	r3, r3
 800a336:	4628      	mov	r0, r5
 800a338:	f7ff ff40 	bl	800a1bc <uxr_common_create_entity>
 800a33c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800a340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a342:	bf00      	nop

0800a344 <uxr_buffer_create_datawriter_bin>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a34c:	ac1d      	add	r4, sp, #116	@ 0x74
 800a34e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a352:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800a356:	9105      	str	r1, [sp, #20]
 800a358:	4606      	mov	r6, r0
 800a35a:	a9a1      	add	r1, sp, #644	@ 0x284
 800a35c:	4618      	mov	r0, r3
 800a35e:	2305      	movs	r3, #5
 800a360:	7123      	strb	r3, [r4, #4]
 800a362:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800a366:	2703      	movs	r7, #3
 800a368:	f000 f884 	bl	800a474 <uxr_object_id_to_raw>
 800a36c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800a36e:	7227      	strb	r7, [r4, #8]
 800a370:	a90e      	add	r1, sp, #56	@ 0x38
 800a372:	f000 f87f 	bl	800a474 <uxr_object_id_to_raw>
 800a376:	2300      	movs	r3, #0
 800a378:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800a37c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800a380:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800a384:	3d00      	subs	r5, #0
 800a386:	bf18      	it	ne
 800a388:	2501      	movne	r5, #1
 800a38a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800a38e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800a392:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a396:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a39a:	2301      	movs	r3, #1
 800a39c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800a3a0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a3a4:	bb8a      	cbnz	r2, 800a40a <uxr_buffer_create_datawriter_bin+0xc6>
 800a3a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a3aa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800a3ae:	f04f 0c13 	mov.w	ip, #19
 800a3b2:	250b      	movs	r5, #11
 800a3b4:	2221      	movs	r2, #33	@ 0x21
 800a3b6:	2111      	movs	r1, #17
 800a3b8:	2009      	movs	r0, #9
 800a3ba:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800a3be:	b923      	cbnz	r3, 800a3ca <uxr_buffer_create_datawriter_bin+0x86>
 800a3c0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800a3c4:	4672      	mov	r2, lr
 800a3c6:	4661      	mov	r1, ip
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d025      	beq.n	800a41e <uxr_buffer_create_datawriter_bin+0xda>
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d029      	beq.n	800a42a <uxr_buffer_create_datawriter_bin+0xe6>
 800a3d6:	b32b      	cbz	r3, 800a424 <uxr_buffer_create_datawriter_bin+0xe0>
 800a3d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3dc:	a921      	add	r1, sp, #132	@ 0x84
 800a3de:	a806      	add	r0, sp, #24
 800a3e0:	f7ff fe5c 	bl	800a09c <ucdr_init_buffer>
 800a3e4:	a90e      	add	r1, sp, #56	@ 0x38
 800a3e6:	a806      	add	r0, sp, #24
 800a3e8:	f001 ff96 	bl	800c318 <uxr_serialize_OBJK_DataWriter_Binary>
 800a3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ee:	f8cd 8000 	str.w	r8, [sp]
 800a3f2:	9401      	str	r4, [sp, #4]
 800a3f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a3f8:	60e3      	str	r3, [r4, #12]
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f7ff fedd 	bl	800a1bc <uxr_common_create_entity>
 800a402:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800a40e:	f04f 0c12 	mov.w	ip, #18
 800a412:	250a      	movs	r5, #10
 800a414:	2220      	movs	r2, #32
 800a416:	2110      	movs	r1, #16
 800a418:	2008      	movs	r0, #8
 800a41a:	2702      	movs	r7, #2
 800a41c:	e7cd      	b.n	800a3ba <uxr_buffer_create_datawriter_bin+0x76>
 800a41e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800a422:	e7d9      	b.n	800a3d8 <uxr_buffer_create_datawriter_bin+0x94>
 800a424:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800a428:	e7d6      	b.n	800a3d8 <uxr_buffer_create_datawriter_bin+0x94>
 800a42a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800a42e:	e7d3      	b.n	800a3d8 <uxr_buffer_create_datawriter_bin+0x94>

0800a430 <uxr_object_id>:
 800a430:	b082      	sub	sp, #8
 800a432:	2300      	movs	r3, #0
 800a434:	f88d 1006 	strb.w	r1, [sp, #6]
 800a438:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a43c:	f360 030f 	bfi	r3, r0, #0, #16
 800a440:	f362 431f 	bfi	r3, r2, #16, #16
 800a444:	4618      	mov	r0, r3
 800a446:	b002      	add	sp, #8
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop

0800a44c <uxr_object_id_from_raw>:
 800a44c:	7843      	ldrb	r3, [r0, #1]
 800a44e:	7801      	ldrb	r1, [r0, #0]
 800a450:	b082      	sub	sp, #8
 800a452:	f003 020f 	and.w	r2, r3, #15
 800a456:	f88d 2006 	strb.w	r2, [sp, #6]
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a460:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800a464:	2000      	movs	r0, #0
 800a466:	f363 000f 	bfi	r0, r3, #0, #16
 800a46a:	f362 401f 	bfi	r0, r2, #16, #16
 800a46e:	b002      	add	sp, #8
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop

0800a474 <uxr_object_id_to_raw>:
 800a474:	4602      	mov	r2, r0
 800a476:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a47a:	b082      	sub	sp, #8
 800a47c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800a480:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a484:	f881 c000 	strb.w	ip, [r1]
 800a488:	7048      	strb	r0, [r1, #1]
 800a48a:	b002      	add	sp, #8
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop

0800a490 <on_get_fragmentation_info>:
 800a490:	b500      	push	{lr}
 800a492:	b08b      	sub	sp, #44	@ 0x2c
 800a494:	4601      	mov	r1, r0
 800a496:	2204      	movs	r2, #4
 800a498:	a802      	add	r0, sp, #8
 800a49a:	f7ff fdff 	bl	800a09c <ucdr_init_buffer>
 800a49e:	f10d 0305 	add.w	r3, sp, #5
 800a4a2:	f10d 0206 	add.w	r2, sp, #6
 800a4a6:	a901      	add	r1, sp, #4
 800a4a8:	a802      	add	r0, sp, #8
 800a4aa:	f001 f9d7 	bl	800b85c <uxr_read_submessage_header>
 800a4ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a4b2:	2b0d      	cmp	r3, #13
 800a4b4:	d003      	beq.n	800a4be <on_get_fragmentation_info+0x2e>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	b00b      	add	sp, #44	@ 0x2c
 800a4ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a4c2:	f013 0f02 	tst.w	r3, #2
 800a4c6:	bf14      	ite	ne
 800a4c8:	2002      	movne	r0, #2
 800a4ca:	2001      	moveq	r0, #1
 800a4cc:	b00b      	add	sp, #44	@ 0x2c
 800a4ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4d2:	bf00      	nop

0800a4d4 <read_submessage_get_info>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800a4dc:	4604      	mov	r4, r0
 800a4de:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800a4e2:	460e      	mov	r6, r1
 800a4e4:	a810      	add	r0, sp, #64	@ 0x40
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800a4ec:	f009 fb1a 	bl	8013b24 <memset>
 800a4f0:	a903      	add	r1, sp, #12
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f002 f986 	bl	800c804 <uxr_deserialize_GET_INFO_Payload>
 800a4f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a4fc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a500:	4620      	mov	r0, r4
 800a502:	f001 f821 	bl	800b548 <uxr_session_header_offset>
 800a506:	462b      	mov	r3, r5
 800a508:	9000      	str	r0, [sp, #0]
 800a50a:	220c      	movs	r2, #12
 800a50c:	a905      	add	r1, sp, #20
 800a50e:	a808      	add	r0, sp, #32
 800a510:	f7ff fdb2 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800a514:	a910      	add	r1, sp, #64	@ 0x40
 800a516:	a808      	add	r0, sp, #32
 800a518:	f002 f9e6 	bl	800c8e8 <uxr_serialize_INFO_Payload>
 800a51c:	9b08      	ldr	r3, [sp, #32]
 800a51e:	462a      	mov	r2, r5
 800a520:	4629      	mov	r1, r5
 800a522:	4620      	mov	r0, r4
 800a524:	f000 ffba 	bl	800b49c <uxr_stamp_session_header>
 800a528:	a808      	add	r0, sp, #32
 800a52a:	f7ff fde3 	bl	800a0f4 <ucdr_buffer_length>
 800a52e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a530:	4602      	mov	r2, r0
 800a532:	a905      	add	r1, sp, #20
 800a534:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a538:	47a0      	blx	r4
 800a53a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800a53e:	bd70      	pop	{r4, r5, r6, pc}

0800a540 <write_submessage_acknack.isra.0>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	b092      	sub	sp, #72	@ 0x48
 800a544:	4605      	mov	r5, r0
 800a546:	460e      	mov	r6, r1
 800a548:	4614      	mov	r4, r2
 800a54a:	f000 fffd 	bl	800b548 <uxr_session_header_offset>
 800a54e:	a905      	add	r1, sp, #20
 800a550:	9000      	str	r0, [sp, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	a80a      	add	r0, sp, #40	@ 0x28
 800a556:	2211      	movs	r2, #17
 800a558:	f7ff fd8e 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800a55c:	2218      	movs	r2, #24
 800a55e:	fb02 5404 	mla	r4, r2, r4, r5
 800a562:	2300      	movs	r3, #0
 800a564:	2205      	movs	r2, #5
 800a566:	3450      	adds	r4, #80	@ 0x50
 800a568:	210a      	movs	r1, #10
 800a56a:	a80a      	add	r0, sp, #40	@ 0x28
 800a56c:	f001 f95c 	bl	800b828 <uxr_buffer_submessage_header>
 800a570:	a903      	add	r1, sp, #12
 800a572:	4620      	mov	r0, r4
 800a574:	f007 f972 	bl	801185c <uxr_compute_acknack>
 800a578:	ba40      	rev16	r0, r0
 800a57a:	f8ad 000e 	strh.w	r0, [sp, #14]
 800a57e:	a903      	add	r1, sp, #12
 800a580:	a80a      	add	r0, sp, #40	@ 0x28
 800a582:	f88d 6010 	strb.w	r6, [sp, #16]
 800a586:	f002 fa1f 	bl	800c9c8 <uxr_serialize_ACKNACK_Payload>
 800a58a:	2200      	movs	r2, #0
 800a58c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a58e:	4611      	mov	r1, r2
 800a590:	4628      	mov	r0, r5
 800a592:	f000 ff83 	bl	800b49c <uxr_stamp_session_header>
 800a596:	a80a      	add	r0, sp, #40	@ 0x28
 800a598:	f7ff fdac 	bl	800a0f4 <ucdr_buffer_length>
 800a59c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a59e:	4602      	mov	r2, r0
 800a5a0:	a905      	add	r1, sp, #20
 800a5a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a5a6:	47a0      	blx	r4
 800a5a8:	b012      	add	sp, #72	@ 0x48
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	0000      	movs	r0, r0
	...

0800a5b0 <uxr_init_session>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800a5e8 <uxr_init_session+0x38>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800a5c2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800a5c6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800a5ca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800a5ce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800a5d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800a5d6:	2181      	movs	r1, #129	@ 0x81
 800a5d8:	f000 fecc 	bl	800b374 <uxr_init_session_info>
 800a5dc:	f104 0008 	add.w	r0, r4, #8
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f001 b83c 	b.w	800b660 <uxr_init_stream_storage>
	...

0800a5f0 <uxr_set_status_callback>:
 800a5f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop

0800a5f8 <uxr_set_topic_callback>:
 800a5f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop

0800a600 <uxr_set_request_callback>:
 800a600:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <uxr_set_reply_callback>:
 800a608:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <uxr_create_output_best_effort_stream>:
 800a610:	b510      	push	{r4, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	e9cd 2100 	strd	r2, r1, [sp]
 800a618:	4604      	mov	r4, r0
 800a61a:	f000 ff95 	bl	800b548 <uxr_session_header_offset>
 800a61e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a622:	4603      	mov	r3, r0
 800a624:	f104 0008 	add.w	r0, r4, #8
 800a628:	b004      	add	sp, #16
 800a62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62e:	f001 b861 	b.w	800b6f4 <uxr_add_output_best_effort_buffer>
 800a632:	bf00      	nop

0800a634 <uxr_create_output_reliable_stream>:
 800a634:	b510      	push	{r4, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a63c:	4604      	mov	r4, r0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	f000 ff82 	bl	800b548 <uxr_session_header_offset>
 800a644:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a648:	9000      	str	r0, [sp, #0]
 800a64a:	9905      	ldr	r1, [sp, #20]
 800a64c:	f104 0008 	add.w	r0, r4, #8
 800a650:	f001 f864 	bl	800b71c <uxr_add_output_reliable_buffer>
 800a654:	2200      	movs	r2, #0
 800a656:	b2c3      	uxtb	r3, r0
 800a658:	f363 0207 	bfi	r2, r3, #0, #8
 800a65c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a660:	f363 220f 	bfi	r2, r3, #8, #8
 800a664:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a668:	f363 4217 	bfi	r2, r3, #16, #8
 800a66c:	0e03      	lsrs	r3, r0, #24
 800a66e:	f363 621f 	bfi	r2, r3, #24, #8
 800a672:	4610      	mov	r0, r2
 800a674:	b008      	add	sp, #32
 800a676:	bd10      	pop	{r4, pc}

0800a678 <uxr_create_input_best_effort_stream>:
 800a678:	b082      	sub	sp, #8
 800a67a:	3008      	adds	r0, #8
 800a67c:	b002      	add	sp, #8
 800a67e:	f001 b867 	b.w	800b750 <uxr_add_input_best_effort_buffer>
 800a682:	bf00      	nop

0800a684 <uxr_create_input_reliable_stream>:
 800a684:	b510      	push	{r4, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	4c0b      	ldr	r4, [pc, #44]	@ (800a6b8 <uxr_create_input_reliable_stream+0x34>)
 800a68a:	9400      	str	r4, [sp, #0]
 800a68c:	3008      	adds	r0, #8
 800a68e:	f001 f875 	bl	800b77c <uxr_add_input_reliable_buffer>
 800a692:	2200      	movs	r2, #0
 800a694:	b2c3      	uxtb	r3, r0
 800a696:	f363 0207 	bfi	r2, r3, #0, #8
 800a69a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a69e:	f363 220f 	bfi	r2, r3, #8, #8
 800a6a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a6a6:	f363 4217 	bfi	r2, r3, #16, #8
 800a6aa:	0e03      	lsrs	r3, r0, #24
 800a6ac:	f363 621f 	bfi	r2, r3, #24, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	b004      	add	sp, #16
 800a6b4:	bd10      	pop	{r4, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0800a491 	.word	0x0800a491

0800a6bc <uxr_epoch_nanos>:
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	4604      	mov	r4, r0
 800a6c0:	f001 f912 	bl	800b8e8 <uxr_nanos>
 800a6c4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800a6c8:	1ac0      	subs	r0, r0, r3
 800a6ca:	eb61 0102 	sbc.w	r1, r1, r2
 800a6ce:	bd10      	pop	{r4, pc}

0800a6d0 <uxr_flash_output_streams>:
 800a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	7e03      	ldrb	r3, [r0, #24]
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	4604      	mov	r4, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d035      	beq.n	800a74a <uxr_flash_output_streams+0x7a>
 800a6de:	f04f 0900 	mov.w	r9, #0
 800a6e2:	4648      	mov	r0, r9
 800a6e4:	f10d 0802 	add.w	r8, sp, #2
 800a6e8:	af03      	add	r7, sp, #12
 800a6ea:	ae02      	add	r6, sp, #8
 800a6ec:	e006      	b.n	800a6fc <uxr_flash_output_streams+0x2c>
 800a6ee:	7e23      	ldrb	r3, [r4, #24]
 800a6f0:	f109 0901 	add.w	r9, r9, #1
 800a6f4:	fa5f f089 	uxtb.w	r0, r9
 800a6f8:	4283      	cmp	r3, r0
 800a6fa:	d926      	bls.n	800a74a <uxr_flash_output_streams+0x7a>
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4611      	mov	r1, r2
 800a700:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800a704:	f000 ff58 	bl	800b5b8 <uxr_stream_id>
 800a708:	3508      	adds	r5, #8
 800a70a:	4684      	mov	ip, r0
 800a70c:	4643      	mov	r3, r8
 800a70e:	463a      	mov	r2, r7
 800a710:	4631      	mov	r1, r6
 800a712:	4628      	mov	r0, r5
 800a714:	f8cd c004 	str.w	ip, [sp, #4]
 800a718:	f007 f926 	bl	8011968 <uxr_prepare_best_effort_buffer_to_send>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0e6      	beq.n	800a6ee <uxr_flash_output_streams+0x1e>
 800a720:	9b02      	ldr	r3, [sp, #8]
 800a722:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a726:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 feb6 	bl	800b49c <uxr_stamp_session_header>
 800a730:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a732:	9a03      	ldr	r2, [sp, #12]
 800a734:	685d      	ldr	r5, [r3, #4]
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	9902      	ldr	r1, [sp, #8]
 800a73a:	47a8      	blx	r5
 800a73c:	f109 0901 	add.w	r9, r9, #1
 800a740:	7e23      	ldrb	r3, [r4, #24]
 800a742:	fa5f f089 	uxtb.w	r0, r9
 800a746:	4283      	cmp	r3, r0
 800a748:	d8d8      	bhi.n	800a6fc <uxr_flash_output_streams+0x2c>
 800a74a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800a74e:	b38b      	cbz	r3, 800a7b4 <uxr_flash_output_streams+0xe4>
 800a750:	f04f 0900 	mov.w	r9, #0
 800a754:	f10d 0802 	add.w	r8, sp, #2
 800a758:	af03      	add	r7, sp, #12
 800a75a:	ae02      	add	r6, sp, #8
 800a75c:	4648      	mov	r0, r9
 800a75e:	2201      	movs	r2, #1
 800a760:	2102      	movs	r1, #2
 800a762:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a766:	f000 ff27 	bl	800b5b8 <uxr_stream_id>
 800a76a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a76e:	3520      	adds	r5, #32
 800a770:	9001      	str	r0, [sp, #4]
 800a772:	e00d      	b.n	800a790 <uxr_flash_output_streams+0xc0>
 800a774:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a778:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a77c:	9b02      	ldr	r3, [sp, #8]
 800a77e:	f000 fe8d 	bl	800b49c <uxr_stamp_session_header>
 800a782:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a784:	9a03      	ldr	r2, [sp, #12]
 800a786:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a78a:	9902      	ldr	r1, [sp, #8]
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	47d0      	blx	sl
 800a790:	4643      	mov	r3, r8
 800a792:	463a      	mov	r2, r7
 800a794:	4631      	mov	r1, r6
 800a796:	4628      	mov	r0, r5
 800a798:	f007 fb04 	bl	8011da4 <uxr_prepare_next_reliable_buffer_to_send>
 800a79c:	4603      	mov	r3, r0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e7      	bne.n	800a774 <uxr_flash_output_streams+0xa4>
 800a7a4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800a7a8:	f109 0901 	add.w	r9, r9, #1
 800a7ac:	fa5f f089 	uxtb.w	r0, r9
 800a7b0:	4283      	cmp	r3, r0
 800a7b2:	d8d4      	bhi.n	800a75e <uxr_flash_output_streams+0x8e>
 800a7b4:	b004      	add	sp, #16
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	bf00      	nop

0800a7bc <read_submessage_info>:
 800a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800a7c6:	4669      	mov	r1, sp
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f001 ff28 	bl	800c620 <uxr_deserialize_BaseObjectReply>
 800a7d0:	a902      	add	r1, sp, #8
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800a7da:	f7fe fc9b 	bl	8009114 <ucdr_deserialize_bool>
 800a7de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a7e2:	4004      	ands	r4, r0
 800a7e4:	b2e4      	uxtb	r4, r4
 800a7e6:	b95b      	cbnz	r3, 800a800 <read_submessage_info+0x44>
 800a7e8:	a987      	add	r1, sp, #540	@ 0x21c
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7fe fc92 	bl	8009114 <ucdr_deserialize_bool>
 800a7f0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	b94b      	cbnz	r3, 800a80c <read_submessage_info+0x50>
 800a7f8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a800:	a903      	add	r1, sp, #12
 800a802:	4628      	mov	r0, r5
 800a804:	f001 fdb4 	bl	800c370 <uxr_deserialize_ObjectVariant>
 800a808:	4004      	ands	r4, r0
 800a80a:	e7ed      	b.n	800a7e8 <read_submessage_info+0x2c>
 800a80c:	a988      	add	r1, sp, #544	@ 0x220
 800a80e:	4628      	mov	r0, r5
 800a810:	f7fe fcae 	bl	8009170 <ucdr_deserialize_uint8_t>
 800a814:	4234      	tst	r4, r6
 800a816:	d0ef      	beq.n	800a7f8 <read_submessage_info+0x3c>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0ed      	beq.n	800a7f8 <read_submessage_info+0x3c>
 800a81c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800a820:	2b0d      	cmp	r3, #13
 800a822:	d1e9      	bne.n	800a7f8 <read_submessage_info+0x3c>
 800a824:	a98a      	add	r1, sp, #552	@ 0x228
 800a826:	4628      	mov	r0, r5
 800a828:	f7ff fa48 	bl	8009cbc <ucdr_deserialize_int16_t>
 800a82c:	b140      	cbz	r0, 800a840 <read_submessage_info+0x84>
 800a82e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800a832:	2b00      	cmp	r3, #0
 800a834:	dd07      	ble.n	800a846 <read_submessage_info+0x8a>
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	bf14      	ite	ne
 800a83c:	2001      	movne	r0, #1
 800a83e:	2002      	moveq	r0, #2
 800a840:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800a844:	e7d8      	b.n	800a7f8 <read_submessage_info+0x3c>
 800a846:	2000      	movs	r0, #0
 800a848:	e7fa      	b.n	800a840 <read_submessage_info+0x84>
 800a84a:	bf00      	nop

0800a84c <read_submessage_list>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	b097      	sub	sp, #92	@ 0x5c
 800a852:	4ec1      	ldr	r6, [pc, #772]	@ (800ab58 <read_submessage_list+0x30c>)
 800a854:	9209      	str	r2, [sp, #36]	@ 0x24
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	f04f 0801 	mov.w	r8, #1
 800a85e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800a862:	aa0c      	add	r2, sp, #48	@ 0x30
 800a864:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 fff7 	bl	800b85c <uxr_read_submessage_header>
 800a86e:	2800      	cmp	r0, #0
 800a870:	f000 813e 	beq.w	800aaf0 <read_submessage_list+0x2a4>
 800a874:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800a878:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800a87c:	3b02      	subs	r3, #2
 800a87e:	2b0d      	cmp	r3, #13
 800a880:	d8ed      	bhi.n	800a85e <read_submessage_list+0x12>
 800a882:	a101      	add	r1, pc, #4	@ (adr r1, 800a888 <read_submessage_list+0x3c>)
 800a884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a888:	0800aae7 	.word	0x0800aae7
 800a88c:	0800a85f 	.word	0x0800a85f
 800a890:	0800aad7 	.word	0x0800aad7
 800a894:	0800aa75 	.word	0x0800aa75
 800a898:	0800aa6b 	.word	0x0800aa6b
 800a89c:	0800a85f 	.word	0x0800a85f
 800a8a0:	0800a85f 	.word	0x0800a85f
 800a8a4:	0800a9cb 	.word	0x0800a9cb
 800a8a8:	0800a95b 	.word	0x0800a95b
 800a8ac:	0800a91b 	.word	0x0800a91b
 800a8b0:	0800a85f 	.word	0x0800a85f
 800a8b4:	0800a85f 	.word	0x0800a85f
 800a8b8:	0800a85f 	.word	0x0800a85f
 800a8bc:	0800a8c1 	.word	0x0800a8c1
 800a8c0:	a910      	add	r1, sp, #64	@ 0x40
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f002 f8d0 	bl	800ca68 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800a8c8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	f000 8116 	beq.w	800ab00 <read_submessage_list+0x2b4>
 800a8d4:	f001 f808 	bl	800b8e8 <uxr_nanos>
 800a8d8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	468c      	mov	ip, r1
 800a8e4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a8e8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800a8ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a8ee:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800a8f0:	468c      	mov	ip, r1
 800a8f2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800a8f6:	46e2      	mov	sl, ip
 800a8f8:	46bc      	mov	ip, r7
 800a8fa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800a8fe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800a902:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800a906:	e9cd 7100 	strd	r7, r1, [sp]
 800a90a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800a90e:	9106      	str	r1, [sp, #24]
 800a910:	4620      	mov	r0, r4
 800a912:	47c8      	blx	r9
 800a914:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800a918:	e7a1      	b.n	800a85e <read_submessage_list+0x12>
 800a91a:	a910      	add	r1, sp, #64	@ 0x40
 800a91c:	4628      	mov	r0, r5
 800a91e:	f002 f891 	bl	800ca44 <uxr_deserialize_HEARTBEAT_Payload>
 800a922:	2100      	movs	r1, #0
 800a924:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800a928:	f000 fe70 	bl	800b60c <uxr_stream_id_from_raw>
 800a92c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a930:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a932:	4639      	mov	r1, r7
 800a934:	f104 0008 	add.w	r0, r4, #8
 800a938:	f000 ff56 	bl	800b7e8 <uxr_get_input_reliable_stream>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d08e      	beq.n	800a85e <read_submessage_list+0x12>
 800a940:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800a944:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800a948:	f006 ff7c 	bl	8011844 <uxr_process_heartbeat>
 800a94c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800a950:	463a      	mov	r2, r7
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff fdf4 	bl	800a540 <write_submessage_acknack.isra.0>
 800a958:	e781      	b.n	800a85e <read_submessage_list+0x12>
 800a95a:	a910      	add	r1, sp, #64	@ 0x40
 800a95c:	4628      	mov	r0, r5
 800a95e:	f002 f849 	bl	800c9f4 <uxr_deserialize_ACKNACK_Payload>
 800a962:	2100      	movs	r1, #0
 800a964:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800a968:	f000 fe50 	bl	800b60c <uxr_stream_id_from_raw>
 800a96c:	900d      	str	r0, [sp, #52]	@ 0x34
 800a96e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a972:	f104 0008 	add.w	r0, r4, #8
 800a976:	f000 ff23 	bl	800b7c0 <uxr_get_output_reliable_stream>
 800a97a:	4607      	mov	r7, r0
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f43f af6e 	beq.w	800a85e <read_submessage_list+0x12>
 800a982:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800a986:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800a98a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800a98e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a992:	b289      	uxth	r1, r1
 800a994:	f007 fab0 	bl	8011ef8 <uxr_process_acknack>
 800a998:	4638      	mov	r0, r7
 800a99a:	f007 fa6d 	bl	8011e78 <uxr_begin_output_nack_buffer_it>
 800a99e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800a9a2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800a9a6:	e006      	b.n	800a9b6 <read_submessage_list+0x16a>
 800a9a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a9aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a9b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	47c8      	blx	r9
 800a9b6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800a9ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a9bc:	4651      	mov	r1, sl
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f007 fa5c 	bl	8011e7c <uxr_next_reliable_nack_buffer_to_send>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1ef      	bne.n	800a9a8 <read_submessage_list+0x15c>
 800a9c8:	e749      	b.n	800a85e <read_submessage_list+0x12>
 800a9ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800a9ce:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800a9d2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800a9d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800a9da:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800a9de:	4651      	mov	r1, sl
 800a9e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a9e4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800a9e8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800a9ec:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800a9f6:	f001 fd5d 	bl	800c4b4 <uxr_deserialize_BaseObjectRequest>
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800a9fe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800aa02:	f000 fdc7 	bl	800b594 <uxr_parse_base_object_request>
 800aa06:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800aa0a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa0c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800aa10:	9110      	str	r1, [sp, #64]	@ 0x40
 800aa12:	3f04      	subs	r7, #4
 800aa14:	f009 090e 	and.w	r9, r9, #14
 800aa18:	b2bf      	uxth	r7, r7
 800aa1a:	f1bb 0f00 	cmp.w	fp, #0
 800aa1e:	d006      	beq.n	800aa2e <read_submessage_list+0x1e2>
 800aa20:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	4652      	mov	r2, sl
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	47d8      	blx	fp
 800aa2e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800aa30:	b16a      	cbz	r2, 800aa4e <read_submessage_list+0x202>
 800aa32:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800aa34:	2100      	movs	r1, #0
 800aa36:	3802      	subs	r0, #2
 800aa38:	e002      	b.n	800aa40 <read_submessage_list+0x1f4>
 800aa3a:	3101      	adds	r1, #1
 800aa3c:	4291      	cmp	r1, r2
 800aa3e:	d006      	beq.n	800aa4e <read_submessage_list+0x202>
 800aa40:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800aa44:	4553      	cmp	r3, sl
 800aa46:	d1f8      	bne.n	800aa3a <read_submessage_list+0x1ee>
 800aa48:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	545a      	strb	r2, [r3, r1]
 800aa4e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800aa52:	9102      	str	r1, [sp, #8]
 800aa54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa56:	9101      	str	r1, [sp, #4]
 800aa58:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa5a:	9100      	str	r1, [sp, #0]
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	463a      	mov	r2, r7
 800aa60:	4629      	mov	r1, r5
 800aa62:	4620      	mov	r0, r4
 800aa64:	f007 facc 	bl	8012000 <read_submessage_format>
 800aa68:	e6f9      	b.n	800a85e <read_submessage_list+0x12>
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7ff fea5 	bl	800a7bc <read_submessage_info>
 800aa72:	e6f4      	b.n	800a85e <read_submessage_list+0x12>
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d03e      	beq.n	800aaf6 <read_submessage_list+0x2aa>
 800aa78:	a910      	add	r1, sp, #64	@ 0x40
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	f001 ff16 	bl	800c8ac <uxr_deserialize_STATUS_Payload>
 800aa80:	a90e      	add	r1, sp, #56	@ 0x38
 800aa82:	aa0d      	add	r2, sp, #52	@ 0x34
 800aa84:	a810      	add	r0, sp, #64	@ 0x40
 800aa86:	f000 fd85 	bl	800b594 <uxr_parse_base_object_request>
 800aa8a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800aa8e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aa90:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800aa94:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800aa98:	910f      	str	r1, [sp, #60]	@ 0x3c
 800aa9a:	f1ba 0f00 	cmp.w	sl, #0
 800aa9e:	d006      	beq.n	800aaae <read_submessage_list+0x262>
 800aaa0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	463a      	mov	r2, r7
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	4620      	mov	r0, r4
 800aaac:	47d0      	blx	sl
 800aaae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800aab0:	2a00      	cmp	r2, #0
 800aab2:	f43f aed4 	beq.w	800a85e <read_submessage_list+0x12>
 800aab6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800aab8:	2100      	movs	r1, #0
 800aaba:	3802      	subs	r0, #2
 800aabc:	e003      	b.n	800aac6 <read_submessage_list+0x27a>
 800aabe:	3101      	adds	r1, #1
 800aac0:	4291      	cmp	r1, r2
 800aac2:	f43f aecc 	beq.w	800a85e <read_submessage_list+0x12>
 800aac6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800aaca:	42bb      	cmp	r3, r7
 800aacc:	d1f7      	bne.n	800aabe <read_submessage_list+0x272>
 800aace:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800aad0:	f803 9001 	strb.w	r9, [r3, r1]
 800aad4:	e6c3      	b.n	800a85e <read_submessage_list+0x12>
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	f47f aec1 	bne.w	800a85e <read_submessage_list+0x12>
 800aadc:	4629      	mov	r1, r5
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 fc9e 	bl	800b420 <uxr_read_create_session_status>
 800aae4:	e6bb      	b.n	800a85e <read_submessage_list+0x12>
 800aae6:	4629      	mov	r1, r5
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7ff fcf3 	bl	800a4d4 <read_submessage_get_info>
 800aaee:	e6b6      	b.n	800a85e <read_submessage_list+0x12>
 800aaf0:	b017      	add	sp, #92	@ 0x5c
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fc9d 	bl	800b438 <uxr_read_delete_session_status>
 800aafe:	e6ae      	b.n	800a85e <read_submessage_list+0x12>
 800ab00:	f000 fef2 	bl	800b8e8 <uxr_nanos>
 800ab04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ab08:	464f      	mov	r7, r9
 800ab0a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800ab0e:	1812      	adds	r2, r2, r0
 800ab10:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab12:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ab14:	eb47 0101 	adc.w	r1, r7, r1
 800ab18:	464f      	mov	r7, r9
 800ab1a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	4684      	mov	ip, r0
 800ab22:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800ab26:	fbc7 0906 	smlal	r0, r9, r7, r6
 800ab2a:	eb1c 0c00 	adds.w	ip, ip, r0
 800ab2e:	464f      	mov	r7, r9
 800ab30:	eb43 0307 	adc.w	r3, r3, r7
 800ab34:	ebb2 0c0c 	subs.w	ip, r2, ip
 800ab38:	eb61 0303 	sbc.w	r3, r1, r3
 800ab3c:	0fda      	lsrs	r2, r3, #31
 800ab3e:	eb12 020c 	adds.w	r2, r2, ip
 800ab42:	f143 0300 	adc.w	r3, r3, #0
 800ab46:	0852      	lsrs	r2, r2, #1
 800ab48:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ab4c:	105b      	asrs	r3, r3, #1
 800ab4e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ab52:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ab56:	e6dd      	b.n	800a914 <read_submessage_list+0xc8>
 800ab58:	3b9aca00 	.word	0x3b9aca00

0800ab5c <listen_message_reliably>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	1e0b      	subs	r3, r1, #0
 800ab62:	b09d      	sub	sp, #116	@ 0x74
 800ab64:	bfb8      	it	lt
 800ab66:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	9305      	str	r3, [sp, #20]
 800ab6e:	f000 fea1 	bl	800b8b4 <uxr_millis>
 800ab72:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ab76:	4681      	mov	r9, r0
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	f000 80a1 	beq.w	800acc0 <listen_message_reliably+0x164>
 800ab7e:	2600      	movs	r6, #0
 800ab80:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ab84:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	e00f      	b.n	800abb0 <listen_message_reliably+0x54>
 800ab90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ab94:	9903      	ldr	r1, [sp, #12]
 800ab96:	455a      	cmp	r2, fp
 800ab98:	f106 0601 	add.w	r6, r6, #1
 800ab9c:	eb73 0101 	sbcs.w	r1, r3, r1
 800aba0:	b2f0      	uxtb	r0, r6
 800aba2:	da01      	bge.n	800aba8 <listen_message_reliably+0x4c>
 800aba4:	4693      	mov	fp, r2
 800aba6:	9303      	str	r3, [sp, #12]
 800aba8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800abac:	4283      	cmp	r3, r0
 800abae:	d960      	bls.n	800ac72 <listen_message_reliably+0x116>
 800abb0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800abb4:	2102      	movs	r1, #2
 800abb6:	2201      	movs	r2, #1
 800abb8:	f000 fcfe 	bl	800b5b8 <uxr_stream_id>
 800abbc:	00e4      	lsls	r4, r4, #3
 800abbe:	f104 0520 	add.w	r5, r4, #32
 800abc2:	4445      	add	r5, r8
 800abc4:	4601      	mov	r1, r0
 800abc6:	463b      	mov	r3, r7
 800abc8:	464a      	mov	r2, r9
 800abca:	4628      	mov	r0, r5
 800abcc:	9109      	str	r1, [sp, #36]	@ 0x24
 800abce:	f007 f929 	bl	8011e24 <uxr_update_output_stream_heartbeat_timestamp>
 800abd2:	eb08 0304 	add.w	r3, r8, r4
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0da      	beq.n	800ab90 <listen_message_reliably+0x34>
 800abda:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800abde:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	4640      	mov	r0, r8
 800abe6:	f000 fcaf 	bl	800b548 <uxr_session_header_offset>
 800abea:	3501      	adds	r5, #1
 800abec:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800abf0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800abf4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800abf8:	2300      	movs	r3, #0
 800abfa:	2211      	movs	r2, #17
 800abfc:	9000      	str	r0, [sp, #0]
 800abfe:	a90c      	add	r1, sp, #48	@ 0x30
 800ac00:	4650      	mov	r0, sl
 800ac02:	f7ff fa39 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2205      	movs	r2, #5
 800ac0a:	210b      	movs	r1, #11
 800ac0c:	4650      	mov	r0, sl
 800ac0e:	f000 fe0b 	bl	800b828 <uxr_buffer_submessage_header>
 800ac12:	8968      	ldrh	r0, [r5, #10]
 800ac14:	2101      	movs	r1, #1
 800ac16:	f007 fabd 	bl	8012194 <uxr_seq_num_add>
 800ac1a:	892b      	ldrh	r3, [r5, #8]
 800ac1c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ac20:	4602      	mov	r2, r0
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ac28:	a90a      	add	r1, sp, #40	@ 0x28
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800ac30:	f001 fef4 	bl	800ca1c <uxr_serialize_HEARTBEAT_Payload>
 800ac34:	2200      	movs	r2, #0
 800ac36:	4611      	mov	r1, r2
 800ac38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	f000 fc2e 	bl	800b49c <uxr_stamp_session_header>
 800ac40:	4650      	mov	r0, sl
 800ac42:	f7ff fa57 	bl	800a0f4 <ucdr_buffer_length>
 800ac46:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	a90c      	add	r1, sp, #48	@ 0x30
 800ac4e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ac52:	4444      	add	r4, r8
 800ac54:	47a8      	blx	r5
 800ac56:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800ac5a:	9903      	ldr	r1, [sp, #12]
 800ac5c:	455a      	cmp	r2, fp
 800ac5e:	f106 0601 	add.w	r6, r6, #1
 800ac62:	eb73 0101 	sbcs.w	r1, r3, r1
 800ac66:	b2f0      	uxtb	r0, r6
 800ac68:	db9c      	blt.n	800aba4 <listen_message_reliably+0x48>
 800ac6a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ac6e:	4283      	cmp	r3, r0
 800ac70:	d89e      	bhi.n	800abb0 <listen_message_reliably+0x54>
 800ac72:	9a03      	ldr	r2, [sp, #12]
 800ac74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	bf08      	it	eq
 800ac7c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800ac80:	d01e      	beq.n	800acc0 <listen_message_reliably+0x164>
 800ac82:	ebab 0309 	sub.w	r3, fp, r9
 800ac86:	9905      	ldr	r1, [sp, #20]
 800ac88:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bf08      	it	eq
 800ac90:	2301      	moveq	r3, #1
 800ac92:	4299      	cmp	r1, r3
 800ac94:	bfa8      	it	ge
 800ac96:	4619      	movge	r1, r3
 800ac98:	6894      	ldr	r4, [r2, #8]
 800ac9a:	6810      	ldr	r0, [r2, #0]
 800ac9c:	4689      	mov	r9, r1
 800ac9e:	460b      	mov	r3, r1
 800aca0:	aa08      	add	r2, sp, #32
 800aca2:	a907      	add	r1, sp, #28
 800aca4:	47a0      	blx	r4
 800aca6:	b968      	cbnz	r0, 800acc4 <listen_message_reliably+0x168>
 800aca8:	9b05      	ldr	r3, [sp, #20]
 800acaa:	eba3 0309 	sub.w	r3, r3, r9
 800acae:	2b00      	cmp	r3, #0
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	f73f af5c 	bgt.w	800ab6e <listen_message_reliably+0x12>
 800acb6:	4604      	mov	r4, r0
 800acb8:	4620      	mov	r0, r4
 800acba:	b01d      	add	sp, #116	@ 0x74
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	e7e0      	b.n	800ac86 <listen_message_reliably+0x12a>
 800acc4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800acc8:	4604      	mov	r4, r0
 800acca:	a80c      	add	r0, sp, #48	@ 0x30
 800accc:	f7ff f9e6 	bl	800a09c <ucdr_init_buffer>
 800acd0:	2500      	movs	r5, #0
 800acd2:	f10d 031a 	add.w	r3, sp, #26
 800acd6:	aa06      	add	r2, sp, #24
 800acd8:	a90c      	add	r1, sp, #48	@ 0x30
 800acda:	4640      	mov	r0, r8
 800acdc:	f88d 5018 	strb.w	r5, [sp, #24]
 800ace0:	f000 fbf0 	bl	800b4c4 <uxr_read_session_header>
 800ace4:	b918      	cbnz	r0, 800acee <listen_message_reliably+0x192>
 800ace6:	4620      	mov	r0, r4
 800ace8:	b01d      	add	sp, #116	@ 0x74
 800acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acee:	4629      	mov	r1, r5
 800acf0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800acf4:	f000 fc8a 	bl	800b60c <uxr_stream_id_from_raw>
 800acf8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800acfc:	2d01      	cmp	r5, #1
 800acfe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ad02:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ad06:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ad0a:	d04b      	beq.n	800ada4 <listen_message_reliably+0x248>
 800ad0c:	2d02      	cmp	r5, #2
 800ad0e:	d00f      	beq.n	800ad30 <listen_message_reliably+0x1d4>
 800ad10:	2d00      	cmp	r5, #0
 800ad12:	d1e8      	bne.n	800ace6 <listen_message_reliably+0x18a>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 fc78 	bl	800b60c <uxr_stream_id_from_raw>
 800ad1c:	a90c      	add	r1, sp, #48	@ 0x30
 800ad1e:	4602      	mov	r2, r0
 800ad20:	4640      	mov	r0, r8
 800ad22:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad24:	f7ff fd92 	bl	800a84c <read_submessage_list>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	b01d      	add	sp, #116	@ 0x74
 800ad2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad30:	4631      	mov	r1, r6
 800ad32:	f108 0008 	add.w	r0, r8, #8
 800ad36:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ad3a:	f000 fd55 	bl	800b7e8 <uxr_get_input_reliable_stream>
 800ad3e:	4607      	mov	r7, r0
 800ad40:	b338      	cbz	r0, 800ad92 <listen_message_reliably+0x236>
 800ad42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad44:	9203      	str	r2, [sp, #12]
 800ad46:	a80c      	add	r0, sp, #48	@ 0x30
 800ad48:	f7ff f9d8 	bl	800a0fc <ucdr_buffer_remaining>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f10d 0019 	add.w	r0, sp, #25
 800ad52:	9000      	str	r0, [sp, #0]
 800ad54:	9a03      	ldr	r2, [sp, #12]
 800ad56:	4651      	mov	r1, sl
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f006 fc79 	bl	8011650 <uxr_receive_reliable_message>
 800ad5e:	b1c0      	cbz	r0, 800ad92 <listen_message_reliably+0x236>
 800ad60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ad64:	b393      	cbz	r3, 800adcc <listen_message_reliably+0x270>
 800ad66:	ad14      	add	r5, sp, #80	@ 0x50
 800ad68:	f04f 0a02 	mov.w	sl, #2
 800ad6c:	e00a      	b.n	800ad84 <listen_message_reliably+0x228>
 800ad6e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800ad72:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800ad76:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800ad7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4640      	mov	r0, r8
 800ad80:	f7ff fd64 	bl	800a84c <read_submessage_list>
 800ad84:	2204      	movs	r2, #4
 800ad86:	4629      	mov	r1, r5
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f006 fce1 	bl	8011750 <uxr_next_input_reliable_buffer_available>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d1ed      	bne.n	800ad6e <listen_message_reliably+0x212>
 800ad92:	4640      	mov	r0, r8
 800ad94:	4632      	mov	r2, r6
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7ff fbd2 	bl	800a540 <write_submessage_acknack.isra.0>
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	b01d      	add	sp, #116	@ 0x74
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	4631      	mov	r1, r6
 800ada6:	f108 0008 	add.w	r0, r8, #8
 800adaa:	f000 fd13 	bl	800b7d4 <uxr_get_input_best_effort_stream>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d099      	beq.n	800ace6 <listen_message_reliably+0x18a>
 800adb2:	4651      	mov	r1, sl
 800adb4:	f006 fbb8 	bl	8011528 <uxr_receive_best_effort_message>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d094      	beq.n	800ace6 <listen_message_reliably+0x18a>
 800adbc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800adc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adc2:	a90c      	add	r1, sp, #48	@ 0x30
 800adc4:	4640      	mov	r0, r8
 800adc6:	f7ff fd41 	bl	800a84c <read_submessage_list>
 800adca:	e78c      	b.n	800ace6 <listen_message_reliably+0x18a>
 800adcc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800add0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800add2:	a90c      	add	r1, sp, #48	@ 0x30
 800add4:	4640      	mov	r0, r8
 800add6:	f7ff fd39 	bl	800a84c <read_submessage_list>
 800adda:	e7c4      	b.n	800ad66 <listen_message_reliably+0x20a>

0800addc <uxr_run_session_timeout>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	f000 fd67 	bl	800b8b4 <uxr_millis>
 800ade6:	4606      	mov	r6, r0
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff fc71 	bl	800a6d0 <uxr_flash_output_streams>
 800adee:	4629      	mov	r1, r5
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7ff feb3 	bl	800ab5c <listen_message_reliably>
 800adf6:	f000 fd5d 	bl	800b8b4 <uxr_millis>
 800adfa:	1b83      	subs	r3, r0, r6
 800adfc:	1ae9      	subs	r1, r5, r3
 800adfe:	2900      	cmp	r1, #0
 800ae00:	dcf6      	bgt.n	800adf0 <uxr_run_session_timeout+0x14>
 800ae02:	f104 0008 	add.w	r0, r4, #8
 800ae06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae0a:	f000 bcf7 	b.w	800b7fc <uxr_output_streams_confirmed>
 800ae0e:	bf00      	nop

0800ae10 <uxr_run_session_until_data>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	4604      	mov	r4, r0
 800ae14:	460d      	mov	r5, r1
 800ae16:	f000 fd4d 	bl	800b8b4 <uxr_millis>
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7ff fc57 	bl	800a6d0 <uxr_flash_output_streams>
 800ae22:	2300      	movs	r3, #0
 800ae24:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	e005      	b.n	800ae38 <uxr_run_session_until_data+0x28>
 800ae2c:	f000 fd42 	bl	800b8b4 <uxr_millis>
 800ae30:	1b83      	subs	r3, r0, r6
 800ae32:	1ae9      	subs	r1, r5, r3
 800ae34:	2900      	cmp	r1, #0
 800ae36:	dd07      	ble.n	800ae48 <uxr_run_session_until_data+0x38>
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f7ff fe8f 	bl	800ab5c <listen_message_reliably>
 800ae3e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d0f2      	beq.n	800ae2c <uxr_run_session_until_data+0x1c>
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	bf00      	nop

0800ae50 <uxr_run_session_until_confirm_delivery>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	4606      	mov	r6, r0
 800ae56:	460d      	mov	r5, r1
 800ae58:	f000 fd2c 	bl	800b8b4 <uxr_millis>
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff fc36 	bl	800a6d0 <uxr_flash_output_streams>
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	f106 0808 	add.w	r8, r6, #8
 800ae6a:	bfa8      	it	ge
 800ae6c:	462c      	movge	r4, r5
 800ae6e:	da07      	bge.n	800ae80 <uxr_run_session_until_confirm_delivery+0x30>
 800ae70:	e00e      	b.n	800ae90 <uxr_run_session_until_confirm_delivery+0x40>
 800ae72:	f7ff fe73 	bl	800ab5c <listen_message_reliably>
 800ae76:	f000 fd1d 	bl	800b8b4 <uxr_millis>
 800ae7a:	1bc3      	subs	r3, r0, r7
 800ae7c:	1aec      	subs	r4, r5, r3
 800ae7e:	d407      	bmi.n	800ae90 <uxr_run_session_until_confirm_delivery+0x40>
 800ae80:	4640      	mov	r0, r8
 800ae82:	f000 fcbb 	bl	800b7fc <uxr_output_streams_confirmed>
 800ae86:	4603      	mov	r3, r0
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0f0      	beq.n	800ae72 <uxr_run_session_until_confirm_delivery+0x22>
 800ae90:	4640      	mov	r0, r8
 800ae92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae96:	f000 bcb1 	b.w	800b7fc <uxr_output_streams_confirmed>
 800ae9a:	bf00      	nop

0800ae9c <uxr_run_session_until_all_status>:
 800ae9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea0:	9c08      	ldr	r4, [sp, #32]
 800aea2:	4606      	mov	r6, r0
 800aea4:	460f      	mov	r7, r1
 800aea6:	4691      	mov	r9, r2
 800aea8:	461d      	mov	r5, r3
 800aeaa:	f7ff fc11 	bl	800a6d0 <uxr_flash_output_streams>
 800aeae:	b124      	cbz	r4, 800aeba <uxr_run_session_until_all_status+0x1e>
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	21ff      	movs	r1, #255	@ 0xff
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f008 fe35 	bl	8013b24 <memset>
 800aeba:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800aebe:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800aec0:	f000 fcf8 	bl	800b8b4 <uxr_millis>
 800aec4:	3d01      	subs	r5, #1
 800aec6:	f1a9 0902 	sub.w	r9, r9, #2
 800aeca:	4680      	mov	r8, r0
 800aecc:	4639      	mov	r1, r7
 800aece:	4630      	mov	r0, r6
 800aed0:	f7ff fe44 	bl	800ab5c <listen_message_reliably>
 800aed4:	f000 fcee 	bl	800b8b4 <uxr_millis>
 800aed8:	eba0 0008 	sub.w	r0, r0, r8
 800aedc:	1a39      	subs	r1, r7, r0
 800aede:	b344      	cbz	r4, 800af32 <uxr_run_session_until_all_status+0x96>
 800aee0:	4628      	mov	r0, r5
 800aee2:	46ac      	mov	ip, r5
 800aee4:	2301      	movs	r3, #1
 800aee6:	e002      	b.n	800aeee <uxr_run_session_until_all_status+0x52>
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	d20d      	bcs.n	800af08 <uxr_run_session_until_all_status+0x6c>
 800aeec:	3301      	adds	r3, #1
 800aeee:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800aef2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800aef6:	d1f7      	bne.n	800aee8 <uxr_run_session_until_all_status+0x4c>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800aefe:	d213      	bcs.n	800af28 <uxr_run_session_until_all_status+0x8c>
 800af00:	2a00      	cmp	r2, #0
 800af02:	d0f3      	beq.n	800aeec <uxr_run_session_until_all_status+0x50>
 800af04:	2900      	cmp	r1, #0
 800af06:	dce2      	bgt.n	800aece <uxr_run_session_until_all_status+0x32>
 800af08:	2300      	movs	r3, #0
 800af0a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800af0c:	442c      	add	r4, r5
 800af0e:	e001      	b.n	800af14 <uxr_run_session_until_all_status+0x78>
 800af10:	2b01      	cmp	r3, #1
 800af12:	d812      	bhi.n	800af3a <uxr_run_session_until_all_status+0x9e>
 800af14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800af18:	4284      	cmp	r4, r0
 800af1a:	d1f9      	bne.n	800af10 <uxr_run_session_until_all_status+0x74>
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	bf8c      	ite	hi
 800af20:	2000      	movhi	r0, #0
 800af22:	2001      	movls	r0, #1
 800af24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af28:	2900      	cmp	r1, #0
 800af2a:	dded      	ble.n	800af08 <uxr_run_session_until_all_status+0x6c>
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d1ce      	bne.n	800aece <uxr_run_session_until_all_status+0x32>
 800af30:	e7ea      	b.n	800af08 <uxr_run_session_until_all_status+0x6c>
 800af32:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800af34:	2001      	movs	r0, #1
 800af36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3a:	2000      	movs	r0, #0
 800af3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800af40 <wait_session_status>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4604      	mov	r4, r0
 800af46:	b09d      	sub	sp, #116	@ 0x74
 800af48:	20ff      	movs	r0, #255	@ 0xff
 800af4a:	7160      	strb	r0, [r4, #5]
 800af4c:	9303      	str	r3, [sp, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 80b6 	beq.w	800b0c0 <wait_session_status+0x180>
 800af54:	468a      	mov	sl, r1
 800af56:	4691      	mov	r9, r2
 800af58:	f04f 0b00 	mov.w	fp, #0
 800af5c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800af5e:	464a      	mov	r2, r9
 800af60:	e9d3 0500 	ldrd	r0, r5, [r3]
 800af64:	4651      	mov	r1, sl
 800af66:	47a8      	blx	r5
 800af68:	f000 fca4 	bl	800b8b4 <uxr_millis>
 800af6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af70:	4605      	mov	r5, r0
 800af72:	e009      	b.n	800af88 <wait_session_status+0x48>
 800af74:	f000 fc9e 	bl	800b8b4 <uxr_millis>
 800af78:	1b40      	subs	r0, r0, r5
 800af7a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd40      	ble.n	800b004 <wait_session_status+0xc4>
 800af82:	7960      	ldrb	r0, [r4, #5]
 800af84:	28ff      	cmp	r0, #255	@ 0xff
 800af86:	d145      	bne.n	800b014 <wait_session_status+0xd4>
 800af88:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800af8a:	a908      	add	r1, sp, #32
 800af8c:	6896      	ldr	r6, [r2, #8]
 800af8e:	6810      	ldr	r0, [r2, #0]
 800af90:	aa09      	add	r2, sp, #36	@ 0x24
 800af92:	47b0      	blx	r6
 800af94:	2800      	cmp	r0, #0
 800af96:	d0ed      	beq.n	800af74 <wait_session_status+0x34>
 800af98:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800af9c:	a80c      	add	r0, sp, #48	@ 0x30
 800af9e:	f7ff f87d 	bl	800a09c <ucdr_init_buffer>
 800afa2:	2600      	movs	r6, #0
 800afa4:	f10d 031e 	add.w	r3, sp, #30
 800afa8:	aa07      	add	r2, sp, #28
 800afaa:	a90c      	add	r1, sp, #48	@ 0x30
 800afac:	4620      	mov	r0, r4
 800afae:	f88d 601c 	strb.w	r6, [sp, #28]
 800afb2:	f000 fa87 	bl	800b4c4 <uxr_read_session_header>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d0dc      	beq.n	800af74 <wait_session_status+0x34>
 800afba:	4631      	mov	r1, r6
 800afbc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800afc0:	f000 fb24 	bl	800b60c <uxr_stream_id_from_raw>
 800afc4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800afc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	2f01      	cmp	r7, #1
 800afd0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800afd4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800afd8:	d05c      	beq.n	800b094 <wait_session_status+0x154>
 800afda:	2f02      	cmp	r7, #2
 800afdc:	d020      	beq.n	800b020 <wait_session_status+0xe0>
 800afde:	2f00      	cmp	r7, #0
 800afe0:	d1c8      	bne.n	800af74 <wait_session_status+0x34>
 800afe2:	4639      	mov	r1, r7
 800afe4:	4638      	mov	r0, r7
 800afe6:	f000 fb11 	bl	800b60c <uxr_stream_id_from_raw>
 800afea:	a90c      	add	r1, sp, #48	@ 0x30
 800afec:	4602      	mov	r2, r0
 800afee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff fc2b 	bl	800a84c <read_submessage_list>
 800aff6:	f000 fc5d 	bl	800b8b4 <uxr_millis>
 800affa:	1b40      	subs	r0, r0, r5
 800affc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b000:	2b00      	cmp	r3, #0
 800b002:	dcbe      	bgt.n	800af82 <wait_session_status+0x42>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	7960      	ldrb	r0, [r4, #5]
 800b008:	f10b 0b01 	add.w	fp, fp, #1
 800b00c:	455b      	cmp	r3, fp
 800b00e:	d001      	beq.n	800b014 <wait_session_status+0xd4>
 800b010:	28ff      	cmp	r0, #255	@ 0xff
 800b012:	d0a3      	beq.n	800af5c <wait_session_status+0x1c>
 800b014:	38ff      	subs	r0, #255	@ 0xff
 800b016:	bf18      	it	ne
 800b018:	2001      	movne	r0, #1
 800b01a:	b01d      	add	sp, #116	@ 0x74
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	4631      	mov	r1, r6
 800b028:	f104 0008 	add.w	r0, r4, #8
 800b02c:	f000 fbdc 	bl	800b7e8 <uxr_get_input_reliable_stream>
 800b030:	4680      	mov	r8, r0
 800b032:	b348      	cbz	r0, 800b088 <wait_session_status+0x148>
 800b034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b036:	9205      	str	r2, [sp, #20]
 800b038:	a80c      	add	r0, sp, #48	@ 0x30
 800b03a:	f7ff f85f 	bl	800a0fc <ucdr_buffer_remaining>
 800b03e:	4603      	mov	r3, r0
 800b040:	f10d 001d 	add.w	r0, sp, #29
 800b044:	9000      	str	r0, [sp, #0]
 800b046:	9a05      	ldr	r2, [sp, #20]
 800b048:	9902      	ldr	r1, [sp, #8]
 800b04a:	4640      	mov	r0, r8
 800b04c:	f006 fb00 	bl	8011650 <uxr_receive_reliable_message>
 800b050:	b1d0      	cbz	r0, 800b088 <wait_session_status+0x148>
 800b052:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d03a      	beq.n	800b0d0 <wait_session_status+0x190>
 800b05a:	9f04      	ldr	r7, [sp, #16]
 800b05c:	e00a      	b.n	800b074 <wait_session_status+0x134>
 800b05e:	f04f 0302 	mov.w	r3, #2
 800b062:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800b066:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b06a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800b06e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b070:	f7ff fbec 	bl	800a84c <read_submessage_list>
 800b074:	a914      	add	r1, sp, #80	@ 0x50
 800b076:	2204      	movs	r2, #4
 800b078:	4640      	mov	r0, r8
 800b07a:	f006 fb69 	bl	8011750 <uxr_next_input_reliable_buffer_available>
 800b07e:	4603      	mov	r3, r0
 800b080:	a914      	add	r1, sp, #80	@ 0x50
 800b082:	4620      	mov	r0, r4
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1ea      	bne.n	800b05e <wait_session_status+0x11e>
 800b088:	9904      	ldr	r1, [sp, #16]
 800b08a:	4632      	mov	r2, r6
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff fa57 	bl	800a540 <write_submessage_acknack.isra.0>
 800b092:	e76f      	b.n	800af74 <wait_session_status+0x34>
 800b094:	4631      	mov	r1, r6
 800b096:	f104 0008 	add.w	r0, r4, #8
 800b09a:	f000 fb9b 	bl	800b7d4 <uxr_get_input_best_effort_stream>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af68 	beq.w	800af74 <wait_session_status+0x34>
 800b0a4:	9902      	ldr	r1, [sp, #8]
 800b0a6:	f006 fa3f 	bl	8011528 <uxr_receive_best_effort_message>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f af62 	beq.w	800af74 <wait_session_status+0x34>
 800b0b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b0b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0b6:	a90c      	add	r1, sp, #48	@ 0x30
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7ff fbc7 	bl	800a84c <read_submessage_list>
 800b0be:	e759      	b.n	800af74 <wait_session_status+0x34>
 800b0c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b0c2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b0c6:	47a0      	blx	r4
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	b01d      	add	sp, #116	@ 0x74
 800b0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b0d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0d6:	a90c      	add	r1, sp, #48	@ 0x30
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f7ff fbb7 	bl	800a84c <read_submessage_list>
 800b0de:	e7bc      	b.n	800b05a <wait_session_status+0x11a>

0800b0e0 <uxr_delete_session_retries>:
 800b0e0:	b530      	push	{r4, r5, lr}
 800b0e2:	b08f      	sub	sp, #60	@ 0x3c
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	f000 fa2e 	bl	800b548 <uxr_session_header_offset>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2210      	movs	r2, #16
 800b0f0:	9000      	str	r0, [sp, #0]
 800b0f2:	a902      	add	r1, sp, #8
 800b0f4:	a806      	add	r0, sp, #24
 800b0f6:	f7fe ffbf 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800b0fa:	a906      	add	r1, sp, #24
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 f973 	bl	800b3e8 <uxr_buffer_delete_session>
 800b102:	2200      	movs	r2, #0
 800b104:	4611      	mov	r1, r2
 800b106:	9b06      	ldr	r3, [sp, #24]
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 f9c7 	bl	800b49c <uxr_stamp_session_header>
 800b10e:	a806      	add	r0, sp, #24
 800b110:	f7fe fff0 	bl	800a0f4 <ucdr_buffer_length>
 800b114:	462b      	mov	r3, r5
 800b116:	4602      	mov	r2, r0
 800b118:	a902      	add	r1, sp, #8
 800b11a:	4620      	mov	r0, r4
 800b11c:	f7ff ff10 	bl	800af40 <wait_session_status>
 800b120:	b118      	cbz	r0, 800b12a <uxr_delete_session_retries+0x4a>
 800b122:	7960      	ldrb	r0, [r4, #5]
 800b124:	fab0 f080 	clz	r0, r0
 800b128:	0940      	lsrs	r0, r0, #5
 800b12a:	b00f      	add	sp, #60	@ 0x3c
 800b12c:	bd30      	pop	{r4, r5, pc}
 800b12e:	bf00      	nop

0800b130 <uxr_create_session>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	f100 0b08 	add.w	fp, r0, #8
 800b138:	b0ab      	sub	sp, #172	@ 0xac
 800b13a:	4604      	mov	r4, r0
 800b13c:	4658      	mov	r0, fp
 800b13e:	f000 fa99 	bl	800b674 <uxr_reset_stream_storage>
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fa00 	bl	800b548 <uxr_session_header_offset>
 800b148:	2300      	movs	r3, #0
 800b14a:	9000      	str	r0, [sp, #0]
 800b14c:	221c      	movs	r2, #28
 800b14e:	a90b      	add	r1, sp, #44	@ 0x2c
 800b150:	a812      	add	r0, sp, #72	@ 0x48
 800b152:	f7fe ff91 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800b156:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b158:	8a1a      	ldrh	r2, [r3, #16]
 800b15a:	3a04      	subs	r2, #4
 800b15c:	b292      	uxth	r2, r2
 800b15e:	a912      	add	r1, sp, #72	@ 0x48
 800b160:	4620      	mov	r0, r4
 800b162:	f000 f917 	bl	800b394 <uxr_buffer_create_session>
 800b166:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 f983 	bl	800b474 <uxr_stamp_create_session_header>
 800b16e:	a812      	add	r0, sp, #72	@ 0x48
 800b170:	f7fe ffc0 	bl	800a0f4 <ucdr_buffer_length>
 800b174:	23ff      	movs	r3, #255	@ 0xff
 800b176:	7163      	strb	r3, [r4, #5]
 800b178:	230a      	movs	r3, #10
 800b17a:	46da      	mov	sl, fp
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	4683      	mov	fp, r0
 800b180:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b182:	465a      	mov	r2, fp
 800b184:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b188:	a90b      	add	r1, sp, #44	@ 0x2c
 800b18a:	47a8      	blx	r5
 800b18c:	f000 fb92 	bl	800b8b4 <uxr_millis>
 800b190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b194:	4605      	mov	r5, r0
 800b196:	e009      	b.n	800b1ac <uxr_create_session+0x7c>
 800b198:	f000 fb8c 	bl	800b8b4 <uxr_millis>
 800b19c:	1b40      	subs	r0, r0, r5
 800b19e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	7962      	ldrb	r2, [r4, #5]
 800b1a6:	dd38      	ble.n	800b21a <uxr_create_session+0xea>
 800b1a8:	2aff      	cmp	r2, #255	@ 0xff
 800b1aa:	d13c      	bne.n	800b226 <uxr_create_session+0xf6>
 800b1ac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b1ae:	a907      	add	r1, sp, #28
 800b1b0:	6896      	ldr	r6, [r2, #8]
 800b1b2:	6810      	ldr	r0, [r2, #0]
 800b1b4:	aa08      	add	r2, sp, #32
 800b1b6:	47b0      	blx	r6
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d0ed      	beq.n	800b198 <uxr_create_session+0x68>
 800b1bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b1c0:	a81a      	add	r0, sp, #104	@ 0x68
 800b1c2:	f7fe ff6b 	bl	800a09c <ucdr_init_buffer>
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	f10d 031a 	add.w	r3, sp, #26
 800b1cc:	aa06      	add	r2, sp, #24
 800b1ce:	a91a      	add	r1, sp, #104	@ 0x68
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f88d 6018 	strb.w	r6, [sp, #24]
 800b1d6:	f000 f975 	bl	800b4c4 <uxr_read_session_header>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0dc      	beq.n	800b198 <uxr_create_session+0x68>
 800b1de:	4631      	mov	r1, r6
 800b1e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b1e4:	f000 fa12 	bl	800b60c <uxr_stream_id_from_raw>
 800b1e8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b1ec:	2e01      	cmp	r6, #1
 800b1ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800b1f2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b1f6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b1fa:	d053      	beq.n	800b2a4 <uxr_create_session+0x174>
 800b1fc:	2e02      	cmp	r6, #2
 800b1fe:	d018      	beq.n	800b232 <uxr_create_session+0x102>
 800b200:	2e00      	cmp	r6, #0
 800b202:	d1c9      	bne.n	800b198 <uxr_create_session+0x68>
 800b204:	4631      	mov	r1, r6
 800b206:	4630      	mov	r0, r6
 800b208:	f000 fa00 	bl	800b60c <uxr_stream_id_from_raw>
 800b20c:	a91a      	add	r1, sp, #104	@ 0x68
 800b20e:	4602      	mov	r2, r0
 800b210:	900a      	str	r0, [sp, #40]	@ 0x28
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fb1a 	bl	800a84c <read_submessage_list>
 800b218:	e7be      	b.n	800b198 <uxr_create_session+0x68>
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	d001      	beq.n	800b226 <uxr_create_session+0xf6>
 800b222:	2aff      	cmp	r2, #255	@ 0xff
 800b224:	d0ac      	beq.n	800b180 <uxr_create_session+0x50>
 800b226:	2a00      	cmp	r2, #0
 800b228:	d051      	beq.n	800b2ce <uxr_create_session+0x19e>
 800b22a:	2000      	movs	r0, #0
 800b22c:	b02b      	add	sp, #172	@ 0xac
 800b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	4639      	mov	r1, r7
 800b23a:	4650      	mov	r0, sl
 800b23c:	f000 fad4 	bl	800b7e8 <uxr_get_input_reliable_stream>
 800b240:	4680      	mov	r8, r0
 800b242:	b348      	cbz	r0, 800b298 <uxr_create_session+0x168>
 800b244:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b246:	9205      	str	r2, [sp, #20]
 800b248:	a81a      	add	r0, sp, #104	@ 0x68
 800b24a:	f7fe ff57 	bl	800a0fc <ucdr_buffer_remaining>
 800b24e:	4603      	mov	r3, r0
 800b250:	f10d 0019 	add.w	r0, sp, #25
 800b254:	9000      	str	r0, [sp, #0]
 800b256:	9a05      	ldr	r2, [sp, #20]
 800b258:	4649      	mov	r1, r9
 800b25a:	4640      	mov	r0, r8
 800b25c:	f006 f9f8 	bl	8011650 <uxr_receive_reliable_message>
 800b260:	b1d0      	cbz	r0, 800b298 <uxr_create_session+0x168>
 800b262:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d038      	beq.n	800b2dc <uxr_create_session+0x1ac>
 800b26a:	9e04      	ldr	r6, [sp, #16]
 800b26c:	e00a      	b.n	800b284 <uxr_create_session+0x154>
 800b26e:	f04f 0302 	mov.w	r3, #2
 800b272:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800b276:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800b27a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b27e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b280:	f7ff fae4 	bl	800a84c <read_submessage_list>
 800b284:	a922      	add	r1, sp, #136	@ 0x88
 800b286:	2204      	movs	r2, #4
 800b288:	4640      	mov	r0, r8
 800b28a:	f006 fa61 	bl	8011750 <uxr_next_input_reliable_buffer_available>
 800b28e:	4603      	mov	r3, r0
 800b290:	a922      	add	r1, sp, #136	@ 0x88
 800b292:	4620      	mov	r0, r4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1ea      	bne.n	800b26e <uxr_create_session+0x13e>
 800b298:	9904      	ldr	r1, [sp, #16]
 800b29a:	463a      	mov	r2, r7
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7ff f94f 	bl	800a540 <write_submessage_acknack.isra.0>
 800b2a2:	e779      	b.n	800b198 <uxr_create_session+0x68>
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	4650      	mov	r0, sl
 800b2a8:	f000 fa94 	bl	800b7d4 <uxr_get_input_best_effort_stream>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f af73 	beq.w	800b198 <uxr_create_session+0x68>
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f006 f938 	bl	8011528 <uxr_receive_best_effort_message>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f43f af6d 	beq.w	800b198 <uxr_create_session+0x68>
 800b2be:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b2c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2c4:	a91a      	add	r1, sp, #104	@ 0x68
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff fac0 	bl	800a84c <read_submessage_list>
 800b2cc:	e764      	b.n	800b198 <uxr_create_session+0x68>
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	f000 f9d0 	bl	800b674 <uxr_reset_stream_storage>
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	b02b      	add	sp, #172	@ 0xac
 800b2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2dc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b2e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2e2:	a91a      	add	r1, sp, #104	@ 0x68
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7ff fab1 	bl	800a84c <read_submessage_list>
 800b2ea:	e7be      	b.n	800b26a <uxr_create_session+0x13a>

0800b2ec <uxr_prepare_stream_to_write_submessage>:
 800b2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	4682      	mov	sl, r0
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4615      	mov	r5, r2
 800b2f8:	461e      	mov	r6, r3
 800b2fa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800b2fe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b302:	9101      	str	r1, [sp, #4]
 800b304:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b308:	f000 face 	bl	800b8a8 <uxr_submessage_padding>
 800b30c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b310:	f105 0904 	add.w	r9, r5, #4
 800b314:	2b01      	cmp	r3, #1
 800b316:	4481      	add	r9, r0
 800b318:	d01d      	beq.n	800b356 <uxr_prepare_stream_to_write_submessage+0x6a>
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d116      	bne.n	800b34c <uxr_prepare_stream_to_write_submessage+0x60>
 800b31e:	4621      	mov	r1, r4
 800b320:	f10a 0008 	add.w	r0, sl, #8
 800b324:	f000 fa4c 	bl	800b7c0 <uxr_get_output_reliable_stream>
 800b328:	4604      	mov	r4, r0
 800b32a:	b158      	cbz	r0, 800b344 <uxr_prepare_stream_to_write_submessage+0x58>
 800b32c:	4649      	mov	r1, r9
 800b32e:	4632      	mov	r2, r6
 800b330:	f006 fbca 	bl	8011ac8 <uxr_prepare_reliable_buffer_to_write>
 800b334:	4604      	mov	r4, r0
 800b336:	b12c      	cbz	r4, 800b344 <uxr_prepare_stream_to_write_submessage+0x58>
 800b338:	4643      	mov	r3, r8
 800b33a:	b2aa      	uxth	r2, r5
 800b33c:	4639      	mov	r1, r7
 800b33e:	4630      	mov	r0, r6
 800b340:	f000 fa72 	bl	800b828 <uxr_buffer_submessage_header>
 800b344:	4620      	mov	r0, r4
 800b346:	b002      	add	sp, #8
 800b348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34c:	2400      	movs	r4, #0
 800b34e:	4620      	mov	r0, r4
 800b350:	b002      	add	sp, #8
 800b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b356:	4621      	mov	r1, r4
 800b358:	f10a 0008 	add.w	r0, sl, #8
 800b35c:	f000 fa28 	bl	800b7b0 <uxr_get_output_best_effort_stream>
 800b360:	4604      	mov	r4, r0
 800b362:	2800      	cmp	r0, #0
 800b364:	d0ee      	beq.n	800b344 <uxr_prepare_stream_to_write_submessage+0x58>
 800b366:	4649      	mov	r1, r9
 800b368:	4632      	mov	r2, r6
 800b36a:	f006 fadd 	bl	8011928 <uxr_prepare_best_effort_buffer_to_write>
 800b36e:	4604      	mov	r4, r0
 800b370:	e7e1      	b.n	800b336 <uxr_prepare_stream_to_write_submessage+0x4a>
 800b372:	bf00      	nop

0800b374 <uxr_init_session_info>:
 800b374:	0e13      	lsrs	r3, r2, #24
 800b376:	7043      	strb	r3, [r0, #1]
 800b378:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b37c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b380:	7001      	strb	r1, [r0, #0]
 800b382:	70c3      	strb	r3, [r0, #3]
 800b384:	2109      	movs	r1, #9
 800b386:	23ff      	movs	r3, #255	@ 0xff
 800b388:	f880 c002 	strb.w	ip, [r0, #2]
 800b38c:	7102      	strb	r2, [r0, #4]
 800b38e:	80c1      	strh	r1, [r0, #6]
 800b390:	7143      	strb	r3, [r0, #5]
 800b392:	4770      	bx	lr

0800b394 <uxr_buffer_create_session>:
 800b394:	b530      	push	{r4, r5, lr}
 800b396:	b089      	sub	sp, #36	@ 0x24
 800b398:	2300      	movs	r3, #0
 800b39a:	4d12      	ldr	r5, [pc, #72]	@ (800b3e4 <uxr_buffer_create_session+0x50>)
 800b39c:	9307      	str	r3, [sp, #28]
 800b39e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	80c2      	strh	r2, [r0, #6]
 800b3a8:	f88d 2004 	strb.w	r2, [sp, #4]
 800b3ac:	682a      	ldr	r2, [r5, #0]
 800b3ae:	9200      	str	r2, [sp, #0]
 800b3b0:	88aa      	ldrh	r2, [r5, #4]
 800b3b2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b3b6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800b3ba:	9202      	str	r2, [sp, #8]
 800b3bc:	460c      	mov	r4, r1
 800b3be:	7802      	ldrb	r2, [r0, #0]
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	f88d 200c 	strb.w	r2, [sp, #12]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	2210      	movs	r2, #16
 800b3cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b3d0:	9306      	str	r3, [sp, #24]
 800b3d2:	f000 fa29 	bl	800b828 <uxr_buffer_submessage_header>
 800b3d6:	4669      	mov	r1, sp
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f001 f981 	bl	800c6e0 <uxr_serialize_CREATE_CLIENT_Payload>
 800b3de:	b009      	add	sp, #36	@ 0x24
 800b3e0:	bd30      	pop	{r4, r5, pc}
 800b3e2:	bf00      	nop
 800b3e4:	08014b04 	.word	0x08014b04

0800b3e8 <uxr_buffer_delete_session>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <uxr_buffer_delete_session+0x34>)
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800b3f2:	f8ad c006 	strh.w	ip, [sp, #6]
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3fe:	80c2      	strh	r2, [r0, #6]
 800b400:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b404:	2204      	movs	r2, #4
 800b406:	2300      	movs	r3, #0
 800b408:	2103      	movs	r1, #3
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fa0c 	bl	800b828 <uxr_buffer_submessage_header>
 800b410:	a901      	add	r1, sp, #4
 800b412:	4620      	mov	r0, r4
 800b414:	f001 fa0a 	bl	800c82c <uxr_serialize_DELETE_Payload>
 800b418:	b002      	add	sp, #8
 800b41a:	bd10      	pop	{r4, pc}
 800b41c:	08014b04 	.word	0x08014b04

0800b420 <uxr_read_create_session_status>:
 800b420:	b510      	push	{r4, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	4604      	mov	r4, r0
 800b426:	4608      	mov	r0, r1
 800b428:	a901      	add	r1, sp, #4
 800b42a:	f001 fa0f 	bl	800c84c <uxr_deserialize_STATUS_AGENT_Payload>
 800b42e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b432:	7163      	strb	r3, [r4, #5]
 800b434:	b008      	add	sp, #32
 800b436:	bd10      	pop	{r4, pc}

0800b438 <uxr_read_delete_session_status>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	b084      	sub	sp, #16
 800b43e:	4608      	mov	r0, r1
 800b440:	a902      	add	r1, sp, #8
 800b442:	f001 fa33 	bl	800c8ac <uxr_deserialize_STATUS_Payload>
 800b446:	88e3      	ldrh	r3, [r4, #6]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d001      	beq.n	800b450 <uxr_read_delete_session_status+0x18>
 800b44c:	b004      	add	sp, #16
 800b44e:	bd10      	pop	{r4, pc}
 800b450:	f10d 000a 	add.w	r0, sp, #10
 800b454:	f7fe fffa 	bl	800a44c <uxr_object_id_from_raw>
 800b458:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b45c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b460:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b464:	b29b      	uxth	r3, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	bf04      	itt	eq
 800b46a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800b46e:	7163      	strbeq	r3, [r4, #5]
 800b470:	b004      	add	sp, #16
 800b472:	bd10      	pop	{r4, pc}

0800b474 <uxr_stamp_create_session_header>:
 800b474:	b510      	push	{r4, lr}
 800b476:	2208      	movs	r2, #8
 800b478:	b08a      	sub	sp, #40	@ 0x28
 800b47a:	4604      	mov	r4, r0
 800b47c:	eb0d 0002 	add.w	r0, sp, r2
 800b480:	f7fe fe0c 	bl	800a09c <ucdr_init_buffer>
 800b484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b488:	9400      	str	r4, [sp, #0]
 800b48a:	2300      	movs	r3, #0
 800b48c:	461a      	mov	r2, r3
 800b48e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800b492:	a802      	add	r0, sp, #8
 800b494:	f000 fbc2 	bl	800bc1c <uxr_serialize_message_header>
 800b498:	b00a      	add	sp, #40	@ 0x28
 800b49a:	bd10      	pop	{r4, pc}

0800b49c <uxr_stamp_session_header>:
 800b49c:	b530      	push	{r4, r5, lr}
 800b49e:	b08d      	sub	sp, #52	@ 0x34
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	460d      	mov	r5, r1
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	a804      	add	r0, sp, #16
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	f7fe fdf6 	bl	800a09c <ucdr_init_buffer>
 800b4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	9400      	str	r4, [sp, #0]
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	a804      	add	r0, sp, #16
 800b4bc:	f000 fbae 	bl	800bc1c <uxr_serialize_message_header>
 800b4c0:	b00d      	add	sp, #52	@ 0x34
 800b4c2:	bd30      	pop	{r4, r5, pc}

0800b4c4 <uxr_read_session_header>:
 800b4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	461e      	mov	r6, r3
 800b4d4:	f7fe fe12 	bl	800a0fc <ucdr_buffer_remaining>
 800b4d8:	2808      	cmp	r0, #8
 800b4da:	d803      	bhi.n	800b4e4 <uxr_read_session_header+0x20>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	b004      	add	sp, #16
 800b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e4:	f10d 080c 	add.w	r8, sp, #12
 800b4e8:	4633      	mov	r3, r6
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	f8cd 8000 	str.w	r8, [sp]
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f10d 010b 	add.w	r1, sp, #11
 800b4f6:	f000 fbaf 	bl	800bc58 <uxr_deserialize_message_header>
 800b4fa:	783a      	ldrb	r2, [r7, #0]
 800b4fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b500:	4293      	cmp	r3, r2
 800b502:	d1eb      	bne.n	800b4dc <uxr_read_session_header+0x18>
 800b504:	061b      	lsls	r3, r3, #24
 800b506:	d41c      	bmi.n	800b542 <uxr_read_session_header+0x7e>
 800b508:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b50c:	787b      	ldrb	r3, [r7, #1]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d003      	beq.n	800b51a <uxr_read_session_header+0x56>
 800b512:	2001      	movs	r0, #1
 800b514:	f080 0001 	eor.w	r0, r0, #1
 800b518:	e7e1      	b.n	800b4de <uxr_read_session_header+0x1a>
 800b51a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b51e:	78bb      	ldrb	r3, [r7, #2]
 800b520:	429a      	cmp	r2, r3
 800b522:	f107 0102 	add.w	r1, r7, #2
 800b526:	d1f4      	bne.n	800b512 <uxr_read_session_header+0x4e>
 800b528:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b52c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b530:	429a      	cmp	r2, r3
 800b532:	d1ee      	bne.n	800b512 <uxr_read_session_header+0x4e>
 800b534:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b538:	784b      	ldrb	r3, [r1, #1]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d1e9      	bne.n	800b512 <uxr_read_session_header+0x4e>
 800b53e:	2000      	movs	r0, #0
 800b540:	e7e8      	b.n	800b514 <uxr_read_session_header+0x50>
 800b542:	2001      	movs	r0, #1
 800b544:	e7cb      	b.n	800b4de <uxr_read_session_header+0x1a>
 800b546:	bf00      	nop

0800b548 <uxr_session_header_offset>:
 800b548:	f990 3000 	ldrsb.w	r3, [r0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfac      	ite	ge
 800b550:	2008      	movge	r0, #8
 800b552:	2004      	movlt	r0, #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop

0800b558 <uxr_init_base_object_request>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	88c3      	ldrh	r3, [r0, #6]
 800b55c:	b082      	sub	sp, #8
 800b55e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800b562:	9101      	str	r1, [sp, #4]
 800b564:	f1a3 010a 	sub.w	r1, r3, #10
 800b568:	b289      	uxth	r1, r1
 800b56a:	42a1      	cmp	r1, r4
 800b56c:	d80e      	bhi.n	800b58c <uxr_init_base_object_request+0x34>
 800b56e:	3301      	adds	r3, #1
 800b570:	b29c      	uxth	r4, r3
 800b572:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b576:	b2db      	uxtb	r3, r3
 800b578:	80c4      	strh	r4, [r0, #6]
 800b57a:	9801      	ldr	r0, [sp, #4]
 800b57c:	7011      	strb	r1, [r2, #0]
 800b57e:	7053      	strb	r3, [r2, #1]
 800b580:	1c91      	adds	r1, r2, #2
 800b582:	f7fe ff77 	bl	800a474 <uxr_object_id_to_raw>
 800b586:	4620      	mov	r0, r4
 800b588:	b002      	add	sp, #8
 800b58a:	bd10      	pop	{r4, pc}
 800b58c:	230a      	movs	r3, #10
 800b58e:	2100      	movs	r1, #0
 800b590:	461c      	mov	r4, r3
 800b592:	e7f1      	b.n	800b578 <uxr_init_base_object_request+0x20>

0800b594 <uxr_parse_base_object_request>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4604      	mov	r4, r0
 800b598:	3002      	adds	r0, #2
 800b59a:	460d      	mov	r5, r1
 800b59c:	4616      	mov	r6, r2
 800b59e:	f7fe ff55 	bl	800a44c <uxr_object_id_from_raw>
 800b5a2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b5a6:	8028      	strh	r0, [r5, #0]
 800b5a8:	806b      	strh	r3, [r5, #2]
 800b5aa:	7822      	ldrb	r2, [r4, #0]
 800b5ac:	7863      	ldrb	r3, [r4, #1]
 800b5ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b5b2:	8033      	strh	r3, [r6, #0]
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	bf00      	nop

0800b5b8 <uxr_stream_id>:
 800b5b8:	2901      	cmp	r1, #1
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	d01d      	beq.n	800b5fa <uxr_stream_id+0x42>
 800b5be:	2902      	cmp	r1, #2
 800b5c0:	f04f 0c00 	mov.w	ip, #0
 800b5c4:	d01e      	beq.n	800b604 <uxr_stream_id+0x4c>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f36c 0307 	bfi	r3, ip, #0, #8
 800b5cc:	f360 230f 	bfi	r3, r0, #8, #8
 800b5d0:	f361 4317 	bfi	r3, r1, #16, #8
 800b5d4:	f362 631f 	bfi	r3, r2, #24, #8
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	2000      	movs	r0, #0
 800b5dc:	f362 0007 	bfi	r0, r2, #0, #8
 800b5e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b5e4:	f362 200f 	bfi	r0, r2, #8, #8
 800b5e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b5ec:	f362 4017 	bfi	r0, r2, #16, #8
 800b5f0:	0e1b      	lsrs	r3, r3, #24
 800b5f2:	f363 601f 	bfi	r0, r3, #24, #8
 800b5f6:	b002      	add	sp, #8
 800b5f8:	4770      	bx	lr
 800b5fa:	f100 0c01 	add.w	ip, r0, #1
 800b5fe:	fa5f fc8c 	uxtb.w	ip, ip
 800b602:	e7e0      	b.n	800b5c6 <uxr_stream_id+0xe>
 800b604:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800b608:	e7dd      	b.n	800b5c6 <uxr_stream_id+0xe>
 800b60a:	bf00      	nop

0800b60c <uxr_stream_id_from_raw>:
 800b60c:	b082      	sub	sp, #8
 800b60e:	b130      	cbz	r0, 800b61e <uxr_stream_id_from_raw+0x12>
 800b610:	0603      	lsls	r3, r0, #24
 800b612:	d420      	bmi.n	800b656 <uxr_stream_id_from_raw+0x4a>
 800b614:	1e42      	subs	r2, r0, #1
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	f04f 0c01 	mov.w	ip, #1
 800b61c:	e001      	b.n	800b622 <uxr_stream_id_from_raw+0x16>
 800b61e:	4684      	mov	ip, r0
 800b620:	4602      	mov	r2, r0
 800b622:	2300      	movs	r3, #0
 800b624:	f360 0307 	bfi	r3, r0, #0, #8
 800b628:	f362 230f 	bfi	r3, r2, #8, #8
 800b62c:	f36c 4317 	bfi	r3, ip, #16, #8
 800b630:	f361 631f 	bfi	r3, r1, #24, #8
 800b634:	b2da      	uxtb	r2, r3
 800b636:	2000      	movs	r0, #0
 800b638:	f362 0007 	bfi	r0, r2, #0, #8
 800b63c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b640:	f362 200f 	bfi	r0, r2, #8, #8
 800b644:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b648:	f362 4017 	bfi	r0, r2, #16, #8
 800b64c:	0e1b      	lsrs	r3, r3, #24
 800b64e:	f363 601f 	bfi	r0, r3, #24, #8
 800b652:	b002      	add	sp, #8
 800b654:	4770      	bx	lr
 800b656:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800b65a:	f04f 0c02 	mov.w	ip, #2
 800b65e:	e7e0      	b.n	800b622 <uxr_stream_id_from_raw+0x16>

0800b660 <uxr_init_stream_storage>:
 800b660:	2300      	movs	r3, #0
 800b662:	7403      	strb	r3, [r0, #16]
 800b664:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b668:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800b66c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop

0800b674 <uxr_reset_stream_storage>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	7c03      	ldrb	r3, [r0, #16]
 800b678:	4604      	mov	r4, r0
 800b67a:	b153      	cbz	r3, 800b692 <uxr_reset_stream_storage+0x1e>
 800b67c:	4606      	mov	r6, r0
 800b67e:	2500      	movs	r5, #0
 800b680:	4630      	mov	r0, r6
 800b682:	f006 f94b 	bl	801191c <uxr_reset_output_best_effort_stream>
 800b686:	7c23      	ldrb	r3, [r4, #16]
 800b688:	3501      	adds	r5, #1
 800b68a:	42ab      	cmp	r3, r5
 800b68c:	f106 0610 	add.w	r6, r6, #16
 800b690:	d8f6      	bhi.n	800b680 <uxr_reset_stream_storage+0xc>
 800b692:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b696:	b163      	cbz	r3, 800b6b2 <uxr_reset_stream_storage+0x3e>
 800b698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b69c:	2500      	movs	r5, #0
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f005 ff3e 	bl	8011520 <uxr_reset_input_best_effort_stream>
 800b6a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	42ab      	cmp	r3, r5
 800b6ac:	f106 0602 	add.w	r6, r6, #2
 800b6b0:	d8f5      	bhi.n	800b69e <uxr_reset_stream_storage+0x2a>
 800b6b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b6b6:	b163      	cbz	r3, 800b6d2 <uxr_reset_stream_storage+0x5e>
 800b6b8:	f104 0618 	add.w	r6, r4, #24
 800b6bc:	2500      	movs	r5, #0
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f006 f9d8 	bl	8011a74 <uxr_reset_output_reliable_stream>
 800b6c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b6c8:	3501      	adds	r5, #1
 800b6ca:	42ab      	cmp	r3, r5
 800b6cc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800b6d0:	d8f5      	bhi.n	800b6be <uxr_reset_stream_storage+0x4a>
 800b6d2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800b6d6:	b163      	cbz	r3, 800b6f2 <uxr_reset_stream_storage+0x7e>
 800b6d8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800b6dc:	2500      	movs	r5, #0
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f005 ff92 	bl	8011608 <uxr_reset_input_reliable_stream>
 800b6e4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	42ab      	cmp	r3, r5
 800b6ec:	f106 0618 	add.w	r6, r6, #24
 800b6f0:	d8f5      	bhi.n	800b6de <uxr_reset_stream_storage+0x6a>
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}

0800b6f4 <uxr_add_output_best_effort_buffer>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	7c04      	ldrb	r4, [r0, #16]
 800b6f8:	f104 0c01 	add.w	ip, r4, #1
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	f880 c010 	strb.w	ip, [r0, #16]
 800b702:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b706:	f006 f8ff 	bl	8011908 <uxr_init_output_best_effort_stream>
 800b70a:	2201      	movs	r2, #1
 800b70c:	4611      	mov	r1, r2
 800b70e:	4620      	mov	r0, r4
 800b710:	b002      	add	sp, #8
 800b712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b716:	f7ff bf4f 	b.w	800b5b8 <uxr_stream_id>
 800b71a:	bf00      	nop

0800b71c <uxr_add_output_reliable_buffer>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	4684      	mov	ip, r0
 800b722:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b726:	9000      	str	r0, [sp, #0]
 800b728:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800b72c:	2028      	movs	r0, #40	@ 0x28
 800b72e:	fb00 c004 	mla	r0, r0, r4, ip
 800b732:	f104 0e01 	add.w	lr, r4, #1
 800b736:	3018      	adds	r0, #24
 800b738:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800b73c:	f006 f962 	bl	8011a04 <uxr_init_output_reliable_stream>
 800b740:	2201      	movs	r2, #1
 800b742:	2102      	movs	r1, #2
 800b744:	4620      	mov	r0, r4
 800b746:	b004      	add	sp, #16
 800b748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74c:	f7ff bf34 	b.w	800b5b8 <uxr_stream_id>

0800b750 <uxr_add_input_best_effort_buffer>:
 800b750:	b510      	push	{r4, lr}
 800b752:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800b756:	4603      	mov	r3, r0
 800b758:	1c62      	adds	r2, r4, #1
 800b75a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800b75e:	b082      	sub	sp, #8
 800b760:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b768:	f005 fed6 	bl	8011518 <uxr_init_input_best_effort_stream>
 800b76c:	2200      	movs	r2, #0
 800b76e:	2101      	movs	r1, #1
 800b770:	4620      	mov	r0, r4
 800b772:	b002      	add	sp, #8
 800b774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b778:	f7ff bf1e 	b.w	800b5b8 <uxr_stream_id>

0800b77c <uxr_add_input_reliable_buffer>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	4684      	mov	ip, r0
 800b782:	9806      	ldr	r0, [sp, #24]
 800b784:	9000      	str	r0, [sp, #0]
 800b786:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800b78a:	2018      	movs	r0, #24
 800b78c:	fb00 c004 	mla	r0, r0, r4, ip
 800b790:	f104 0e01 	add.w	lr, r4, #1
 800b794:	3048      	adds	r0, #72	@ 0x48
 800b796:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800b79a:	f005 ff09 	bl	80115b0 <uxr_init_input_reliable_stream>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2102      	movs	r1, #2
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	b004      	add	sp, #16
 800b7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7aa:	f7ff bf05 	b.w	800b5b8 <uxr_stream_id>
 800b7ae:	bf00      	nop

0800b7b0 <uxr_get_output_best_effort_stream>:
 800b7b0:	7c03      	ldrb	r3, [r0, #16]
 800b7b2:	428b      	cmp	r3, r1
 800b7b4:	bf8c      	ite	hi
 800b7b6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b7ba:	2000      	movls	r0, #0
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop

0800b7c0 <uxr_get_output_reliable_stream>:
 800b7c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b7c4:	428b      	cmp	r3, r1
 800b7c6:	bf83      	ittte	hi
 800b7c8:	2328      	movhi	r3, #40	@ 0x28
 800b7ca:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b7ce:	3018      	addhi	r0, #24
 800b7d0:	2000      	movls	r0, #0
 800b7d2:	4770      	bx	lr

0800b7d4 <uxr_get_input_best_effort_stream>:
 800b7d4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b7d8:	428b      	cmp	r3, r1
 800b7da:	bf86      	itte	hi
 800b7dc:	3121      	addhi	r1, #33	@ 0x21
 800b7de:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800b7e2:	2000      	movls	r0, #0
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop

0800b7e8 <uxr_get_input_reliable_stream>:
 800b7e8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800b7ec:	428b      	cmp	r3, r1
 800b7ee:	bf83      	ittte	hi
 800b7f0:	2318      	movhi	r3, #24
 800b7f2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b7f6:	3048      	addhi	r0, #72	@ 0x48
 800b7f8:	2000      	movls	r0, #0
 800b7fa:	4770      	bx	lr

0800b7fc <uxr_output_streams_confirmed>:
 800b7fc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b800:	b183      	cbz	r3, 800b824 <uxr_output_streams_confirmed+0x28>
 800b802:	b570      	push	{r4, r5, r6, lr}
 800b804:	4606      	mov	r6, r0
 800b806:	f100 0518 	add.w	r5, r0, #24
 800b80a:	2400      	movs	r4, #0
 800b80c:	e001      	b.n	800b812 <uxr_output_streams_confirmed+0x16>
 800b80e:	3528      	adds	r5, #40	@ 0x28
 800b810:	b138      	cbz	r0, 800b822 <uxr_output_streams_confirmed+0x26>
 800b812:	4628      	mov	r0, r5
 800b814:	f006 fb9e 	bl	8011f54 <uxr_is_output_up_to_date>
 800b818:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800b81c:	3401      	adds	r4, #1
 800b81e:	42a3      	cmp	r3, r4
 800b820:	d8f5      	bhi.n	800b80e <uxr_output_streams_confirmed+0x12>
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	2001      	movs	r0, #1
 800b826:	4770      	bx	lr

0800b828 <uxr_buffer_submessage_header>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	4604      	mov	r4, r0
 800b82c:	460e      	mov	r6, r1
 800b82e:	2104      	movs	r1, #4
 800b830:	4615      	mov	r5, r2
 800b832:	461f      	mov	r7, r3
 800b834:	f7fe fc4c 	bl	800a0d0 <ucdr_align_to>
 800b838:	2301      	movs	r3, #1
 800b83a:	ea47 0203 	orr.w	r2, r7, r3
 800b83e:	4631      	mov	r1, r6
 800b840:	7523      	strb	r3, [r4, #20]
 800b842:	4620      	mov	r0, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f000 fa27 	bl	800bc98 <uxr_serialize_submessage_header>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f7fe fc56 	bl	800a0fc <ucdr_buffer_remaining>
 800b850:	42a8      	cmp	r0, r5
 800b852:	bf34      	ite	cc
 800b854:	2000      	movcc	r0, #0
 800b856:	2001      	movcs	r0, #1
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85a:	bf00      	nop

0800b85c <uxr_read_submessage_header>:
 800b85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b860:	4604      	mov	r4, r0
 800b862:	460d      	mov	r5, r1
 800b864:	2104      	movs	r1, #4
 800b866:	4616      	mov	r6, r2
 800b868:	4698      	mov	r8, r3
 800b86a:	f7fe fc31 	bl	800a0d0 <ucdr_align_to>
 800b86e:	4620      	mov	r0, r4
 800b870:	f7fe fc44 	bl	800a0fc <ucdr_buffer_remaining>
 800b874:	2803      	cmp	r0, #3
 800b876:	bf8c      	ite	hi
 800b878:	2701      	movhi	r7, #1
 800b87a:	2700      	movls	r7, #0
 800b87c:	d802      	bhi.n	800b884 <uxr_read_submessage_header+0x28>
 800b87e:	4638      	mov	r0, r7
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	4633      	mov	r3, r6
 800b886:	4642      	mov	r2, r8
 800b888:	4620      	mov	r0, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	f000 fa18 	bl	800bcc0 <uxr_deserialize_submessage_header>
 800b890:	f898 3000 	ldrb.w	r3, [r8]
 800b894:	f003 0201 	and.w	r2, r3, #1
 800b898:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b89c:	f888 3000 	strb.w	r3, [r8]
 800b8a0:	7522      	strb	r2, [r4, #20]
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8a8 <uxr_submessage_padding>:
 800b8a8:	f010 0003 	ands.w	r0, r0, #3
 800b8ac:	bf18      	it	ne
 800b8ae:	f1c0 0004 	rsbne	r0, r0, #4
 800b8b2:	4770      	bx	lr

0800b8b4 <uxr_millis>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	4669      	mov	r1, sp
 800b8ba:	2001      	movs	r0, #1
 800b8bc:	f7f5 fc08 	bl	80010d0 <clock_gettime>
 800b8c0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800b8c4:	4906      	ldr	r1, [pc, #24]	@ (800b8e0 <uxr_millis+0x2c>)
 800b8c6:	fba0 0301 	umull	r0, r3, r0, r1
 800b8ca:	1900      	adds	r0, r0, r4
 800b8cc:	fb01 3102 	mla	r1, r1, r2, r3
 800b8d0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b8d4:	4a03      	ldr	r2, [pc, #12]	@ (800b8e4 <uxr_millis+0x30>)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f7f4 fcea 	bl	80002b0 <__aeabi_ldivmod>
 800b8dc:	b004      	add	sp, #16
 800b8de:	bd10      	pop	{r4, pc}
 800b8e0:	3b9aca00 	.word	0x3b9aca00
 800b8e4:	000f4240 	.word	0x000f4240

0800b8e8 <uxr_nanos>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	4669      	mov	r1, sp
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	f7f5 fbee 	bl	80010d0 <clock_gettime>
 800b8f4:	4a06      	ldr	r2, [pc, #24]	@ (800b910 <uxr_nanos+0x28>)
 800b8f6:	9800      	ldr	r0, [sp, #0]
 800b8f8:	9902      	ldr	r1, [sp, #8]
 800b8fa:	9c01      	ldr	r4, [sp, #4]
 800b8fc:	fba0 0302 	umull	r0, r3, r0, r2
 800b900:	1840      	adds	r0, r0, r1
 800b902:	fb02 3304 	mla	r3, r2, r4, r3
 800b906:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800b90a:	b004      	add	sp, #16
 800b90c:	bd10      	pop	{r4, pc}
 800b90e:	bf00      	nop
 800b910:	3b9aca00 	.word	0x3b9aca00

0800b914 <on_full_output_buffer_fragmented>:
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	460c      	mov	r4, r1
 800b91a:	b08a      	sub	sp, #40	@ 0x28
 800b91c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800b920:	4606      	mov	r6, r0
 800b922:	f104 0008 	add.w	r0, r4, #8
 800b926:	f7ff ff4b 	bl	800b7c0 <uxr_get_output_reliable_stream>
 800b92a:	4605      	mov	r5, r0
 800b92c:	f006 fb1c 	bl	8011f68 <get_available_free_slots>
 800b930:	b968      	cbnz	r0, 800b94e <on_full_output_buffer_fragmented+0x3a>
 800b932:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800b936:	4620      	mov	r0, r4
 800b938:	4798      	blx	r3
 800b93a:	b918      	cbnz	r0, 800b944 <on_full_output_buffer_fragmented+0x30>
 800b93c:	2001      	movs	r0, #1
 800b93e:	b00a      	add	sp, #40	@ 0x28
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	4628      	mov	r0, r5
 800b946:	f006 fb0f 	bl	8011f68 <get_available_free_slots>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0f6      	beq.n	800b93c <on_full_output_buffer_fragmented+0x28>
 800b94e:	8929      	ldrh	r1, [r5, #8]
 800b950:	89eb      	ldrh	r3, [r5, #14]
 800b952:	7b28      	ldrb	r0, [r5, #12]
 800b954:	686a      	ldr	r2, [r5, #4]
 800b956:	fbb2 f8f1 	udiv	r8, r2, r1
 800b95a:	fbb3 f2f1 	udiv	r2, r3, r1
 800b95e:	fb01 3112 	mls	r1, r1, r2, r3
 800b962:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800b966:	b289      	uxth	r1, r1
 800b968:	fb08 f101 	mul.w	r1, r8, r1
 800b96c:	30fc      	adds	r0, #252	@ 0xfc
 800b96e:	f1a8 0804 	sub.w	r8, r8, #4
 800b972:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800b976:	4440      	add	r0, r8
 800b978:	b287      	uxth	r7, r0
 800b97a:	1bdb      	subs	r3, r3, r7
 800b97c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	3104      	adds	r1, #4
 800b984:	4419      	add	r1, r3
 800b986:	4642      	mov	r2, r8
 800b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	a802      	add	r0, sp, #8
 800b990:	2300      	movs	r3, #0
 800b992:	f7fe fb71 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800b996:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800b99a:	f102 0308 	add.w	r3, r2, #8
 800b99e:	4543      	cmp	r3, r8
 800b9a0:	d928      	bls.n	800b9f4 <on_full_output_buffer_fragmented+0xe0>
 800b9a2:	463a      	mov	r2, r7
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	210d      	movs	r1, #13
 800b9a8:	a802      	add	r0, sp, #8
 800b9aa:	f7ff ff3d 	bl	800b828 <uxr_buffer_submessage_header>
 800b9ae:	8929      	ldrh	r1, [r5, #8]
 800b9b0:	89eb      	ldrh	r3, [r5, #14]
 800b9b2:	fbb3 f2f1 	udiv	r2, r3, r1
 800b9b6:	fb01 3312 	mls	r3, r1, r2, r3
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	686a      	ldr	r2, [r5, #4]
 800b9be:	fbb2 f2f1 	udiv	r2, r2, r1
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	682a      	ldr	r2, [r5, #0]
 800b9c8:	f842 8003 	str.w	r8, [r2, r3]
 800b9cc:	89e8      	ldrh	r0, [r5, #14]
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	f006 fbe0 	bl	8012194 <uxr_seq_num_add>
 800b9d4:	9904      	ldr	r1, [sp, #16]
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	81e8      	strh	r0, [r5, #14]
 800b9da:	1a52      	subs	r2, r2, r1
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7fe fb5d 	bl	800a09c <ucdr_init_buffer>
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	490f      	ldr	r1, [pc, #60]	@ (800ba24 <on_full_output_buffer_fragmented+0x110>)
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	f7fe fb2c 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	b00a      	add	sp, #40	@ 0x28
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	210d      	movs	r1, #13
 800b9fa:	a802      	add	r0, sp, #8
 800b9fc:	f7ff ff14 	bl	800b828 <uxr_buffer_submessage_header>
 800ba00:	8928      	ldrh	r0, [r5, #8]
 800ba02:	89eb      	ldrh	r3, [r5, #14]
 800ba04:	fbb3 f1f0 	udiv	r1, r3, r0
 800ba08:	fb00 3311 	mls	r3, r0, r1, r3
 800ba0c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ba10:	6869      	ldr	r1, [r5, #4]
 800ba12:	fbb1 f1f0 	udiv	r1, r1, r0
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	fb01 f303 	mul.w	r3, r1, r3
 800ba1c:	6829      	ldr	r1, [r5, #0]
 800ba1e:	3208      	adds	r2, #8
 800ba20:	50ca      	str	r2, [r1, r3]
 800ba22:	e7d3      	b.n	800b9cc <on_full_output_buffer_fragmented+0xb8>
 800ba24:	0800b915 	.word	0x0800b915

0800ba28 <uxr_prepare_output_stream>:
 800ba28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	2707      	movs	r7, #7
 800ba2e:	9202      	str	r2, [sp, #8]
 800ba30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba32:	9103      	str	r1, [sp, #12]
 800ba34:	2500      	movs	r5, #0
 800ba36:	3204      	adds	r2, #4
 800ba38:	e9cd 7500 	strd	r7, r5, [sp]
 800ba3c:	461c      	mov	r4, r3
 800ba3e:	4606      	mov	r6, r0
 800ba40:	f7ff fc54 	bl	800b2ec <uxr_prepare_stream_to_write_submessage>
 800ba44:	f080 0201 	eor.w	r2, r0, #1
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	75a2      	strb	r2, [r4, #22]
 800ba4c:	b112      	cbz	r2, 800ba54 <uxr_prepare_output_stream+0x2c>
 800ba4e:	4628      	mov	r0, r5
 800ba50:	b007      	add	sp, #28
 800ba52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba54:	aa05      	add	r2, sp, #20
 800ba56:	9902      	ldr	r1, [sp, #8]
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff fd7d 	bl	800b558 <uxr_init_base_object_request>
 800ba5e:	a905      	add	r1, sp, #20
 800ba60:	4605      	mov	r5, r0
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 ffa0 	bl	800c9a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ba68:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800ba6c:	69a6      	ldr	r6, [r4, #24]
 800ba6e:	69e7      	ldr	r7, [r4, #28]
 800ba70:	1a52      	subs	r2, r2, r1
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7fe fb12 	bl	800a09c <ucdr_init_buffer>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	463a      	mov	r2, r7
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	f7fe fae1 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 800ba82:	4628      	mov	r0, r5
 800ba84:	b007      	add	sp, #28
 800ba86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba88 <uxr_prepare_output_stream_fragmented>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	b091      	sub	sp, #68	@ 0x44
 800ba8e:	4605      	mov	r5, r0
 800ba90:	9105      	str	r1, [sp, #20]
 800ba92:	3008      	adds	r0, #8
 800ba94:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ba98:	461e      	mov	r6, r3
 800ba9a:	9204      	str	r2, [sp, #16]
 800ba9c:	f7ff fe90 	bl	800b7c0 <uxr_get_output_reliable_stream>
 800baa0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	f000 8091 	beq.w	800bbcc <uxr_prepare_output_stream_fragmented+0x144>
 800baaa:	4604      	mov	r4, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	f000 808d 	beq.w	800bbcc <uxr_prepare_output_stream_fragmented+0x144>
 800bab2:	f006 fa59 	bl	8011f68 <get_available_free_slots>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	f000 8083 	beq.w	800bbc2 <uxr_prepare_output_stream_fragmented+0x13a>
 800babc:	8922      	ldrh	r2, [r4, #8]
 800babe:	89e7      	ldrh	r7, [r4, #14]
 800bac0:	fbb7 f9f2 	udiv	r9, r7, r2
 800bac4:	fb02 7919 	mls	r9, r2, r9, r7
 800bac8:	fa1f f989 	uxth.w	r9, r9
 800bacc:	6863      	ldr	r3, [r4, #4]
 800bace:	fbb3 f2f2 	udiv	r2, r3, r2
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	9203      	str	r2, [sp, #12]
 800bad6:	fb02 f909 	mul.w	r9, r2, r9
 800bada:	f109 0904 	add.w	r9, r9, #4
 800bade:	4499      	add	r9, r3
 800bae0:	7b23      	ldrb	r3, [r4, #12]
 800bae2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800bae6:	4543      	cmp	r3, r8
 800bae8:	f1a2 0b04 	sub.w	fp, r2, #4
 800baec:	d37a      	bcc.n	800bbe4 <uxr_prepare_output_stream_fragmented+0x15c>
 800baee:	f1ab 0a04 	sub.w	sl, fp, #4
 800baf2:	ebaa 0a03 	sub.w	sl, sl, r3
 800baf6:	465a      	mov	r2, fp
 800baf8:	2300      	movs	r3, #0
 800bafa:	4649      	mov	r1, r9
 800bafc:	a808      	add	r0, sp, #32
 800bafe:	f8cd 8000 	str.w	r8, [sp]
 800bb02:	f7fe fab9 	bl	800a078 <ucdr_init_buffer_origin_offset>
 800bb06:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bb08:	fa1f fa8a 	uxth.w	sl, sl
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	f103 0a08 	add.w	sl, r3, #8
 800bb12:	45da      	cmp	sl, fp
 800bb14:	bf34      	ite	cc
 800bb16:	2302      	movcc	r3, #2
 800bb18:	2300      	movcs	r3, #0
 800bb1a:	210d      	movs	r1, #13
 800bb1c:	a808      	add	r0, sp, #32
 800bb1e:	f7ff fe83 	bl	800b828 <uxr_buffer_submessage_header>
 800bb22:	8921      	ldrh	r1, [r4, #8]
 800bb24:	fbb7 f2f1 	udiv	r2, r7, r1
 800bb28:	fb01 7212 	mls	r2, r1, r2, r7
 800bb2c:	b292      	uxth	r2, r2
 800bb2e:	6863      	ldr	r3, [r4, #4]
 800bb30:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb34:	fb02 f303 	mul.w	r3, r2, r3
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f842 b003 	str.w	fp, [r2, r3]
 800bb40:	2101      	movs	r1, #1
 800bb42:	f006 fb27 	bl	8012194 <uxr_seq_num_add>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	f108 0104 	add.w	r1, r8, #4
 800bb4c:	f1a3 0208 	sub.w	r2, r3, #8
 800bb50:	eba2 0208 	sub.w	r2, r2, r8
 800bb54:	4449      	add	r1, r9
 800bb56:	4607      	mov	r7, r0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7fe fa9f 	bl	800a09c <ucdr_init_buffer>
 800bb5e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800bb60:	81e7      	strh	r7, [r4, #14]
 800bb62:	1d1a      	adds	r2, r3, #4
 800bb64:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800bb68:	bf28      	it	cs
 800bb6a:	2200      	movcs	r2, #0
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	b292      	uxth	r2, r2
 800bb70:	2107      	movs	r1, #7
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7ff fe58 	bl	800b828 <uxr_buffer_submessage_header>
 800bb78:	9904      	ldr	r1, [sp, #16]
 800bb7a:	aa07      	add	r2, sp, #28
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f7ff fceb 	bl	800b558 <uxr_init_base_object_request>
 800bb82:	4604      	mov	r4, r0
 800bb84:	b318      	cbz	r0, 800bbce <uxr_prepare_output_stream_fragmented+0x146>
 800bb86:	a907      	add	r1, sp, #28
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f000 ff0d 	bl	800c9a8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800bb8e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800bb92:	4630      	mov	r0, r6
 800bb94:	1a52      	subs	r2, r2, r1
 800bb96:	f7fe fa81 	bl	800a09c <ucdr_init_buffer>
 800bb9a:	9b05      	ldr	r3, [sp, #20]
 800bb9c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800bba0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bba2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800bba6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800bba8:	491b      	ldr	r1, [pc, #108]	@ (800bc18 <uxr_prepare_output_stream_fragmented+0x190>)
 800bbaa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	f7fe fa45 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 800bbba:	4620      	mov	r0, r4
 800bbbc:	b011      	add	sp, #68	@ 0x44
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800bbc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	4798      	blx	r3
 800bbca:	b920      	cbnz	r0, 800bbd6 <uxr_prepare_output_stream_fragmented+0x14e>
 800bbcc:	2400      	movs	r4, #0
 800bbce:	4620      	mov	r0, r4
 800bbd0:	b011      	add	sp, #68	@ 0x44
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f006 f9c6 	bl	8011f68 <get_available_free_slots>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f47f af6d 	bne.w	800babc <uxr_prepare_output_stream_fragmented+0x34>
 800bbe2:	e7f3      	b.n	800bbcc <uxr_prepare_output_stream_fragmented+0x144>
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	f006 fad4 	bl	8012194 <uxr_seq_num_add>
 800bbec:	8921      	ldrh	r1, [r4, #8]
 800bbee:	fbb0 f2f1 	udiv	r2, r0, r1
 800bbf2:	fb01 0912 	mls	r9, r1, r2, r0
 800bbf6:	fa1f f289 	uxth.w	r2, r9
 800bbfa:	6863      	ldr	r3, [r4, #4]
 800bbfc:	fbb3 f9f1 	udiv	r9, r3, r1
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	fb02 f909 	mul.w	r9, r2, r9
 800bc06:	f109 0904 	add.w	r9, r9, #4
 800bc0a:	4499      	add	r9, r3
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	7b23      	ldrb	r3, [r4, #12]
 800bc10:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800bc14:	e76b      	b.n	800baee <uxr_prepare_output_stream_fragmented+0x66>
 800bc16:	bf00      	nop
 800bc18:	0800b915 	.word	0x0800b915

0800bc1c <uxr_serialize_message_header>:
 800bc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	4616      	mov	r6, r2
 800bc22:	4604      	mov	r4, r0
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	460d      	mov	r5, r1
 800bc28:	9f08      	ldr	r7, [sp, #32]
 800bc2a:	f7fd fa8b 	bl	8009144 <ucdr_serialize_uint8_t>
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4620      	mov	r0, r4
 800bc32:	f7fd fa87 	bl	8009144 <ucdr_serialize_uint8_t>
 800bc36:	9a01      	ldr	r2, [sp, #4]
 800bc38:	2101      	movs	r1, #1
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f7fd fb2e 	bl	800929c <ucdr_serialize_endian_uint16_t>
 800bc40:	062b      	lsls	r3, r5, #24
 800bc42:	d501      	bpl.n	800bc48 <uxr_serialize_message_header+0x2c>
 800bc44:	b003      	add	sp, #12
 800bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc48:	2204      	movs	r2, #4
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	b003      	add	sp, #12
 800bc50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc54:	f005 ba66 	b.w	8011124 <ucdr_serialize_array_uint8_t>

0800bc58 <uxr_deserialize_message_header>:
 800bc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	4604      	mov	r4, r0
 800bc60:	9301      	str	r3, [sp, #4]
 800bc62:	460d      	mov	r5, r1
 800bc64:	9f08      	ldr	r7, [sp, #32]
 800bc66:	f7fd fa83 	bl	8009170 <ucdr_deserialize_uint8_t>
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f7fd fa7f 	bl	8009170 <ucdr_deserialize_uint8_t>
 800bc72:	9a01      	ldr	r2, [sp, #4]
 800bc74:	2101      	movs	r1, #1
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7fd fc04 	bl	8009484 <ucdr_deserialize_endian_uint16_t>
 800bc7c:	f995 3000 	ldrsb.w	r3, [r5]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	da01      	bge.n	800bc88 <uxr_deserialize_message_header+0x30>
 800bc84:	b003      	add	sp, #12
 800bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc88:	2204      	movs	r2, #4
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	b003      	add	sp, #12
 800bc90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc94:	f005 baaa 	b.w	80111ec <ucdr_deserialize_array_uint8_t>

0800bc98 <uxr_serialize_submessage_header>:
 800bc98:	b530      	push	{r4, r5, lr}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	4615      	mov	r5, r2
 800bc9e:	4604      	mov	r4, r0
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	f7fd fa4f 	bl	8009144 <ucdr_serialize_uint8_t>
 800bca6:	4629      	mov	r1, r5
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f7fd fa4b 	bl	8009144 <ucdr_serialize_uint8_t>
 800bcae:	9a01      	ldr	r2, [sp, #4]
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	b003      	add	sp, #12
 800bcb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcba:	f7fd baef 	b.w	800929c <ucdr_serialize_endian_uint16_t>
 800bcbe:	bf00      	nop

0800bcc0 <uxr_deserialize_submessage_header>:
 800bcc0:	b530      	push	{r4, r5, lr}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	4615      	mov	r5, r2
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	f7fd fa51 	bl	8009170 <ucdr_deserialize_uint8_t>
 800bcce:	4629      	mov	r1, r5
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f7fd fa4d 	bl	8009170 <ucdr_deserialize_uint8_t>
 800bcd6:	9a01      	ldr	r2, [sp, #4]
 800bcd8:	2101      	movs	r1, #1
 800bcda:	4620      	mov	r0, r4
 800bcdc:	b003      	add	sp, #12
 800bcde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bce2:	f7fd bbcf 	b.w	8009484 <ucdr_deserialize_endian_uint16_t>
 800bce6:	bf00      	nop

0800bce8 <uxr_serialize_CLIENT_Representation>:
 800bce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcec:	2204      	movs	r2, #4
 800bcee:	460e      	mov	r6, r1
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	f005 fa17 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	1d31      	adds	r1, r6, #4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f005 fa11 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bd02:	4038      	ands	r0, r7
 800bd04:	2202      	movs	r2, #2
 800bd06:	1db1      	adds	r1, r6, #6
 800bd08:	b2c7      	uxtb	r7, r0
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f005 fa0a 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bd10:	2204      	movs	r2, #4
 800bd12:	4007      	ands	r7, r0
 800bd14:	f106 0108 	add.w	r1, r6, #8
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f005 fa03 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bd1e:	7b31      	ldrb	r1, [r6, #12]
 800bd20:	4007      	ands	r7, r0
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7fd fa0e 	bl	8009144 <ucdr_serialize_uint8_t>
 800bd28:	7b71      	ldrb	r1, [r6, #13]
 800bd2a:	4007      	ands	r7, r0
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f7fd f9db 	bl	80090e8 <ucdr_serialize_bool>
 800bd32:	7b73      	ldrb	r3, [r6, #13]
 800bd34:	ea07 0800 	and.w	r8, r7, r0
 800bd38:	b93b      	cbnz	r3, 800bd4a <uxr_serialize_CLIENT_Representation+0x62>
 800bd3a:	8bb1      	ldrh	r1, [r6, #28]
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f7fd fa2d 	bl	800919c <ucdr_serialize_uint16_t>
 800bd42:	ea08 0000 	and.w	r0, r8, r0
 800bd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4a:	6931      	ldr	r1, [r6, #16]
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f7fd fc0f 	bl	8009570 <ucdr_serialize_uint32_t>
 800bd52:	6933      	ldr	r3, [r6, #16]
 800bd54:	b1e3      	cbz	r3, 800bd90 <uxr_serialize_CLIENT_Representation+0xa8>
 800bd56:	b1c0      	cbz	r0, 800bd8a <uxr_serialize_CLIENT_Representation+0xa2>
 800bd58:	4637      	mov	r7, r6
 800bd5a:	f04f 0900 	mov.w	r9, #0
 800bd5e:	e001      	b.n	800bd64 <uxr_serialize_CLIENT_Representation+0x7c>
 800bd60:	3708      	adds	r7, #8
 800bd62:	b194      	cbz	r4, 800bd8a <uxr_serialize_CLIENT_Representation+0xa2>
 800bd64:	6979      	ldr	r1, [r7, #20]
 800bd66:	4628      	mov	r0, r5
 800bd68:	f005 fafc 	bl	8011364 <ucdr_serialize_string>
 800bd6c:	69b9      	ldr	r1, [r7, #24]
 800bd6e:	4604      	mov	r4, r0
 800bd70:	4628      	mov	r0, r5
 800bd72:	f005 faf7 	bl	8011364 <ucdr_serialize_string>
 800bd76:	6933      	ldr	r3, [r6, #16]
 800bd78:	f109 0901 	add.w	r9, r9, #1
 800bd7c:	4004      	ands	r4, r0
 800bd7e:	4599      	cmp	r9, r3
 800bd80:	b2e4      	uxtb	r4, r4
 800bd82:	d3ed      	bcc.n	800bd60 <uxr_serialize_CLIENT_Representation+0x78>
 800bd84:	ea08 0804 	and.w	r8, r8, r4
 800bd88:	e7d7      	b.n	800bd3a <uxr_serialize_CLIENT_Representation+0x52>
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	e7d4      	b.n	800bd3a <uxr_serialize_CLIENT_Representation+0x52>
 800bd90:	ea08 0800 	and.w	r8, r8, r0
 800bd94:	e7d1      	b.n	800bd3a <uxr_serialize_CLIENT_Representation+0x52>
 800bd96:	bf00      	nop

0800bd98 <uxr_deserialize_CLIENT_Representation>:
 800bd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	460c      	mov	r4, r1
 800bda0:	4605      	mov	r5, r0
 800bda2:	f005 fa23 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800bda6:	2202      	movs	r2, #2
 800bda8:	4607      	mov	r7, r0
 800bdaa:	1d21      	adds	r1, r4, #4
 800bdac:	4628      	mov	r0, r5
 800bdae:	f005 fa1d 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800bdb2:	4038      	ands	r0, r7
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	1da1      	adds	r1, r4, #6
 800bdb8:	b2c6      	uxtb	r6, r0
 800bdba:	4628      	mov	r0, r5
 800bdbc:	f005 fa16 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	4006      	ands	r6, r0
 800bdc4:	f104 0108 	add.w	r1, r4, #8
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f005 fa0f 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800bdce:	f104 010c 	add.w	r1, r4, #12
 800bdd2:	4006      	ands	r6, r0
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7fd f9cb 	bl	8009170 <ucdr_deserialize_uint8_t>
 800bdda:	f104 010d 	add.w	r1, r4, #13
 800bdde:	ea06 0700 	and.w	r7, r6, r0
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7fd f996 	bl	8009114 <ucdr_deserialize_bool>
 800bde8:	7b63      	ldrb	r3, [r4, #13]
 800bdea:	4007      	ands	r7, r0
 800bdec:	b93b      	cbnz	r3, 800bdfe <uxr_deserialize_CLIENT_Representation+0x66>
 800bdee:	f104 011c 	add.w	r1, r4, #28
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f7fd fad2 	bl	800939c <ucdr_deserialize_uint16_t>
 800bdf8:	4038      	ands	r0, r7
 800bdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfe:	f104 0110 	add.w	r1, r4, #16
 800be02:	4628      	mov	r0, r5
 800be04:	f7fd fce4 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d903      	bls.n	800be16 <uxr_deserialize_CLIENT_Representation+0x7e>
 800be0e:	2301      	movs	r3, #1
 800be10:	75ab      	strb	r3, [r5, #22]
 800be12:	2700      	movs	r7, #0
 800be14:	e7eb      	b.n	800bdee <uxr_deserialize_CLIENT_Representation+0x56>
 800be16:	b30b      	cbz	r3, 800be5c <uxr_deserialize_CLIENT_Representation+0xc4>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d0fa      	beq.n	800be12 <uxr_deserialize_CLIENT_Representation+0x7a>
 800be1c:	46a0      	mov	r8, r4
 800be1e:	f04f 0900 	mov.w	r9, #0
 800be22:	e001      	b.n	800be28 <uxr_deserialize_CLIENT_Representation+0x90>
 800be24:	2e00      	cmp	r6, #0
 800be26:	d0f4      	beq.n	800be12 <uxr_deserialize_CLIENT_Representation+0x7a>
 800be28:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800be2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be30:	4628      	mov	r0, r5
 800be32:	f005 faa7 	bl	8011384 <ucdr_deserialize_string>
 800be36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be3a:	4606      	mov	r6, r0
 800be3c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800be40:	4628      	mov	r0, r5
 800be42:	f005 fa9f 	bl	8011384 <ucdr_deserialize_string>
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	f109 0901 	add.w	r9, r9, #1
 800be4c:	4006      	ands	r6, r0
 800be4e:	4599      	cmp	r9, r3
 800be50:	f108 0808 	add.w	r8, r8, #8
 800be54:	b2f6      	uxtb	r6, r6
 800be56:	d3e5      	bcc.n	800be24 <uxr_deserialize_CLIENT_Representation+0x8c>
 800be58:	4037      	ands	r7, r6
 800be5a:	e7c8      	b.n	800bdee <uxr_deserialize_CLIENT_Representation+0x56>
 800be5c:	4007      	ands	r7, r0
 800be5e:	e7c6      	b.n	800bdee <uxr_deserialize_CLIENT_Representation+0x56>

0800be60 <uxr_serialize_AGENT_Representation>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	2204      	movs	r2, #4
 800be66:	460f      	mov	r7, r1
 800be68:	4605      	mov	r5, r0
 800be6a:	f005 f95b 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800be6e:	2202      	movs	r2, #2
 800be70:	4604      	mov	r4, r0
 800be72:	1d39      	adds	r1, r7, #4
 800be74:	4628      	mov	r0, r5
 800be76:	f005 f955 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800be7a:	4020      	ands	r0, r4
 800be7c:	2202      	movs	r2, #2
 800be7e:	1db9      	adds	r1, r7, #6
 800be80:	b2c4      	uxtb	r4, r0
 800be82:	4628      	mov	r0, r5
 800be84:	f005 f94e 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800be88:	7a39      	ldrb	r1, [r7, #8]
 800be8a:	4004      	ands	r4, r0
 800be8c:	4628      	mov	r0, r5
 800be8e:	f7fd f92b 	bl	80090e8 <ucdr_serialize_bool>
 800be92:	7a3b      	ldrb	r3, [r7, #8]
 800be94:	ea00 0804 	and.w	r8, r0, r4
 800be98:	b913      	cbnz	r3, 800bea0 <uxr_serialize_AGENT_Representation+0x40>
 800be9a:	4640      	mov	r0, r8
 800be9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	4628      	mov	r0, r5
 800bea4:	f7fd fb64 	bl	8009570 <ucdr_serialize_uint32_t>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	b303      	cbz	r3, 800beee <uxr_serialize_AGENT_Representation+0x8e>
 800beac:	b1d0      	cbz	r0, 800bee4 <uxr_serialize_AGENT_Representation+0x84>
 800beae:	463e      	mov	r6, r7
 800beb0:	f04f 0900 	mov.w	r9, #0
 800beb4:	e001      	b.n	800beba <uxr_serialize_AGENT_Representation+0x5a>
 800beb6:	3608      	adds	r6, #8
 800beb8:	b1a4      	cbz	r4, 800bee4 <uxr_serialize_AGENT_Representation+0x84>
 800beba:	6931      	ldr	r1, [r6, #16]
 800bebc:	4628      	mov	r0, r5
 800bebe:	f005 fa51 	bl	8011364 <ucdr_serialize_string>
 800bec2:	6971      	ldr	r1, [r6, #20]
 800bec4:	4604      	mov	r4, r0
 800bec6:	4628      	mov	r0, r5
 800bec8:	f005 fa4c 	bl	8011364 <ucdr_serialize_string>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f109 0901 	add.w	r9, r9, #1
 800bed2:	4004      	ands	r4, r0
 800bed4:	4599      	cmp	r9, r3
 800bed6:	b2e4      	uxtb	r4, r4
 800bed8:	d3ed      	bcc.n	800beb6 <uxr_serialize_AGENT_Representation+0x56>
 800beda:	ea08 0804 	and.w	r8, r8, r4
 800bede:	4640      	mov	r0, r8
 800bee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee4:	f04f 0800 	mov.w	r8, #0
 800bee8:	4640      	mov	r0, r8
 800beea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beee:	ea08 0800 	and.w	r8, r8, r0
 800bef2:	e7d2      	b.n	800be9a <uxr_serialize_AGENT_Representation+0x3a>

0800bef4 <uxr_serialize_DATAWRITER_Representation>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	460d      	mov	r5, r1
 800bef8:	7809      	ldrb	r1, [r1, #0]
 800befa:	4606      	mov	r6, r0
 800befc:	f7fd f922 	bl	8009144 <ucdr_serialize_uint8_t>
 800bf00:	4604      	mov	r4, r0
 800bf02:	b130      	cbz	r0, 800bf12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bf04:	782b      	ldrb	r3, [r5, #0]
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d00c      	beq.n	800bf24 <uxr_serialize_DATAWRITER_Representation+0x30>
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d010      	beq.n	800bf30 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d008      	beq.n	800bf24 <uxr_serialize_DATAWRITER_Representation+0x30>
 800bf12:	2202      	movs	r2, #2
 800bf14:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f005 f903 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bf1e:	4020      	ands	r0, r4
 800bf20:	b2c0      	uxtb	r0, r0
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	6869      	ldr	r1, [r5, #4]
 800bf26:	4630      	mov	r0, r6
 800bf28:	f005 fa1c 	bl	8011364 <ucdr_serialize_string>
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	e7f0      	b.n	800bf12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bf30:	4629      	mov	r1, r5
 800bf32:	4630      	mov	r0, r6
 800bf34:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800bf38:	3104      	adds	r1, #4
 800bf3a:	f005 f9e7 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	e7e7      	b.n	800bf12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800bf42:	bf00      	nop

0800bf44 <uxr_serialize_ObjectVariant.part.0>:
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	780b      	ldrb	r3, [r1, #0]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	2b0d      	cmp	r3, #13
 800bf50:	d854      	bhi.n	800bffc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bf52:	e8df f003 	tbb	[pc, r3]
 800bf56:	0730      	.short	0x0730
 800bf58:	07071b1b 	.word	0x07071b1b
 800bf5c:	0c530707 	.word	0x0c530707
 800bf60:	494e0c0c 	.word	0x494e0c0c
 800bf64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf68:	3104      	adds	r1, #4
 800bf6a:	f7ff bfc3 	b.w	800bef4 <uxr_serialize_DATAWRITER_Representation>
 800bf6e:	7909      	ldrb	r1, [r1, #4]
 800bf70:	f7fd f8e8 	bl	8009144 <ucdr_serialize_uint8_t>
 800bf74:	b1e8      	cbz	r0, 800bfb2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800bf76:	7923      	ldrb	r3, [r4, #4]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d001      	beq.n	800bf80 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d13d      	bne.n	800bffc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bf80:	68a1      	ldr	r1, [r4, #8]
 800bf82:	4628      	mov	r0, r5
 800bf84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf88:	f005 b9ec 	b.w	8011364 <ucdr_serialize_string>
 800bf8c:	7909      	ldrb	r1, [r1, #4]
 800bf8e:	f7fd f8d9 	bl	8009144 <ucdr_serialize_uint8_t>
 800bf92:	4606      	mov	r6, r0
 800bf94:	b120      	cbz	r0, 800bfa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bf96:	7923      	ldrb	r3, [r4, #4]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d039      	beq.n	800c010 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d02f      	beq.n	800c000 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f005 f8bc 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800bfac:	4030      	ands	r0, r6
 800bfae:	b2c0      	uxtb	r0, r0
 800bfb0:	bd70      	pop	{r4, r5, r6, pc}
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	7909      	ldrb	r1, [r1, #4]
 800bfb8:	f7fd f8c4 	bl	8009144 <ucdr_serialize_uint8_t>
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	b158      	cbz	r0, 800bfd8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bfc0:	7923      	ldrb	r3, [r4, #4]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d003      	beq.n	800bfce <uxr_serialize_ObjectVariant.part.0+0x8a>
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d028      	beq.n	800c01c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d104      	bne.n	800bfd8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bfce:	68a1      	ldr	r1, [r4, #8]
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f005 f9c7 	bl	8011364 <ucdr_serialize_string>
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7fd fded 	bl	8009bbc <ucdr_serialize_int16_t>
 800bfe2:	4030      	ands	r0, r6
 800bfe4:	b2c0      	uxtb	r0, r0
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfec:	3104      	adds	r1, #4
 800bfee:	f7ff be7b 	b.w	800bce8 <uxr_serialize_CLIENT_Representation>
 800bff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bff6:	3104      	adds	r1, #4
 800bff8:	f7ff bf32 	b.w	800be60 <uxr_serialize_AGENT_Representation>
 800bffc:	2001      	movs	r0, #1
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	68a2      	ldr	r2, [r4, #8]
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	4628      	mov	r0, r5
 800c008:	f005 f980 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c00c:	4606      	mov	r6, r0
 800c00e:	e7c7      	b.n	800bfa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c010:	68a1      	ldr	r1, [r4, #8]
 800c012:	4628      	mov	r0, r5
 800c014:	f005 f9a6 	bl	8011364 <ucdr_serialize_string>
 800c018:	4606      	mov	r6, r0
 800c01a:	e7c1      	b.n	800bfa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c01c:	68a2      	ldr	r2, [r4, #8]
 800c01e:	f104 010c 	add.w	r1, r4, #12
 800c022:	4628      	mov	r0, r5
 800c024:	f005 f972 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c028:	4606      	mov	r6, r0
 800c02a:	e7d5      	b.n	800bfd8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800c02c <uxr_deserialize_DATAWRITER_Representation>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4606      	mov	r6, r0
 800c030:	460d      	mov	r5, r1
 800c032:	f7fd f89d 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c036:	4604      	mov	r4, r0
 800c038:	b130      	cbz	r0, 800c048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c03a:	782b      	ldrb	r3, [r5, #0]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d00c      	beq.n	800c05a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c040:	2b03      	cmp	r3, #3
 800c042:	d012      	beq.n	800c06a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800c044:	2b01      	cmp	r3, #1
 800c046:	d008      	beq.n	800c05a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c048:	2202      	movs	r2, #2
 800c04a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800c04e:	4630      	mov	r0, r6
 800c050:	f005 f8cc 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c054:	4020      	ands	r0, r4
 800c056:	b2c0      	uxtb	r0, r0
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	6869      	ldr	r1, [r5, #4]
 800c05c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c060:	4630      	mov	r0, r6
 800c062:	f005 f98f 	bl	8011384 <ucdr_deserialize_string>
 800c066:	4604      	mov	r4, r0
 800c068:	e7ee      	b.n	800c048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c06a:	1d2b      	adds	r3, r5, #4
 800c06c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c070:	f105 0108 	add.w	r1, r5, #8
 800c074:	4630      	mov	r0, r6
 800c076:	f005 f95b 	bl	8011330 <ucdr_deserialize_sequence_uint8_t>
 800c07a:	4604      	mov	r4, r0
 800c07c:	e7e4      	b.n	800c048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c07e:	bf00      	nop

0800c080 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	460d      	mov	r5, r1
 800c084:	7809      	ldrb	r1, [r1, #0]
 800c086:	4606      	mov	r6, r0
 800c088:	f7fd f82e 	bl	80090e8 <ucdr_serialize_bool>
 800c08c:	782b      	ldrb	r3, [r5, #0]
 800c08e:	4604      	mov	r4, r0
 800c090:	b94b      	cbnz	r3, 800c0a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c092:	7a29      	ldrb	r1, [r5, #8]
 800c094:	4630      	mov	r0, r6
 800c096:	f7fd f827 	bl	80090e8 <ucdr_serialize_bool>
 800c09a:	7a2b      	ldrb	r3, [r5, #8]
 800c09c:	4004      	ands	r4, r0
 800c09e:	b2e4      	uxtb	r4, r4
 800c0a0:	b943      	cbnz	r3, 800c0b4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
 800c0a6:	6869      	ldr	r1, [r5, #4]
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f005 f95b 	bl	8011364 <ucdr_serialize_string>
 800c0ae:	4004      	ands	r4, r0
 800c0b0:	b2e4      	uxtb	r4, r4
 800c0b2:	e7ee      	b.n	800c092 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c0b4:	68e9      	ldr	r1, [r5, #12]
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f005 f954 	bl	8011364 <ucdr_serialize_string>
 800c0bc:	4004      	ands	r4, r0
 800c0be:	4620      	mov	r0, r4
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	bf00      	nop

0800c0c4 <uxr_serialize_OBJK_Topic_Binary>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	6809      	ldr	r1, [r1, #0]
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	f005 f94a 	bl	8011364 <ucdr_serialize_string>
 800c0d0:	7929      	ldrb	r1, [r5, #4]
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7fd f807 	bl	80090e8 <ucdr_serialize_bool>
 800c0da:	792b      	ldrb	r3, [r5, #4]
 800c0dc:	4004      	ands	r4, r0
 800c0de:	b2e4      	uxtb	r4, r4
 800c0e0:	b943      	cbnz	r3, 800c0f4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c0e2:	7b29      	ldrb	r1, [r5, #12]
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7fc ffff 	bl	80090e8 <ucdr_serialize_bool>
 800c0ea:	7b2b      	ldrb	r3, [r5, #12]
 800c0ec:	4004      	ands	r4, r0
 800c0ee:	b93b      	cbnz	r3, 800c100 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	68a9      	ldr	r1, [r5, #8]
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f005 f934 	bl	8011364 <ucdr_serialize_string>
 800c0fc:	4004      	ands	r4, r0
 800c0fe:	e7f0      	b.n	800c0e2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c100:	6929      	ldr	r1, [r5, #16]
 800c102:	4630      	mov	r0, r6
 800c104:	f005 f92e 	bl	8011364 <ucdr_serialize_string>
 800c108:	4004      	ands	r4, r0
 800c10a:	b2e4      	uxtb	r4, r4
 800c10c:	4620      	mov	r0, r4
 800c10e:	bd70      	pop	{r4, r5, r6, pc}

0800c110 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	460c      	mov	r4, r1
 800c116:	7809      	ldrb	r1, [r1, #0]
 800c118:	4606      	mov	r6, r0
 800c11a:	f7fc ffe5 	bl	80090e8 <ucdr_serialize_bool>
 800c11e:	7823      	ldrb	r3, [r4, #0]
 800c120:	4605      	mov	r5, r0
 800c122:	b96b      	cbnz	r3, 800c140 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c124:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800c128:	4630      	mov	r0, r6
 800c12a:	f7fc ffdd 	bl	80090e8 <ucdr_serialize_bool>
 800c12e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c132:	4005      	ands	r5, r0
 800c134:	b2ed      	uxtb	r5, r5
 800c136:	2b00      	cmp	r3, #0
 800c138:	d169      	bne.n	800c20e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c13a:	4628      	mov	r0, r5
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	6861      	ldr	r1, [r4, #4]
 800c142:	4630      	mov	r0, r6
 800c144:	f7fd fa14 	bl	8009570 <ucdr_serialize_uint32_t>
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d06b      	beq.n	800c226 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d067      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c152:	68a1      	ldr	r1, [r4, #8]
 800c154:	4630      	mov	r0, r6
 800c156:	f005 f905 	bl	8011364 <ucdr_serialize_string>
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d953      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c160:	2800      	cmp	r0, #0
 800c162:	d05e      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c164:	68e1      	ldr	r1, [r4, #12]
 800c166:	4630      	mov	r0, r6
 800c168:	f005 f8fc 	bl	8011364 <ucdr_serialize_string>
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d94a      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c172:	2800      	cmp	r0, #0
 800c174:	d055      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c176:	6921      	ldr	r1, [r4, #16]
 800c178:	4630      	mov	r0, r6
 800c17a:	f005 f8f3 	bl	8011364 <ucdr_serialize_string>
 800c17e:	6863      	ldr	r3, [r4, #4]
 800c180:	2b03      	cmp	r3, #3
 800c182:	d941      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c184:	2800      	cmp	r0, #0
 800c186:	d04c      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c188:	6961      	ldr	r1, [r4, #20]
 800c18a:	4630      	mov	r0, r6
 800c18c:	f005 f8ea 	bl	8011364 <ucdr_serialize_string>
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	2b04      	cmp	r3, #4
 800c194:	d938      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c196:	2800      	cmp	r0, #0
 800c198:	d043      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c19a:	69a1      	ldr	r1, [r4, #24]
 800c19c:	4630      	mov	r0, r6
 800c19e:	f005 f8e1 	bl	8011364 <ucdr_serialize_string>
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	2b05      	cmp	r3, #5
 800c1a6:	d92f      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d03a      	beq.n	800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1ac:	69e1      	ldr	r1, [r4, #28]
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f005 f8d8 	bl	8011364 <ucdr_serialize_string>
 800c1b4:	6863      	ldr	r3, [r4, #4]
 800c1b6:	2b06      	cmp	r3, #6
 800c1b8:	d926      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c1ba:	b390      	cbz	r0, 800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1bc:	6a21      	ldr	r1, [r4, #32]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f005 f8d0 	bl	8011364 <ucdr_serialize_string>
 800c1c4:	6863      	ldr	r3, [r4, #4]
 800c1c6:	2b07      	cmp	r3, #7
 800c1c8:	d91e      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c1ca:	b350      	cbz	r0, 800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f005 f8c8 	bl	8011364 <ucdr_serialize_string>
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	2b08      	cmp	r3, #8
 800c1d8:	d916      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c1da:	b310      	cbz	r0, 800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f005 f8c0 	bl	8011364 <ucdr_serialize_string>
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	2b09      	cmp	r3, #9
 800c1e8:	d90e      	bls.n	800c208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c1ea:	b1d0      	cbz	r0, 800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800c1f0:	2709      	movs	r7, #9
 800c1f2:	e000      	b.n	800c1f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c1f4:	b1a8      	cbz	r0, 800c222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c1f6:	f858 1b04 	ldr.w	r1, [r8], #4
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f005 f8b2 	bl	8011364 <ucdr_serialize_string>
 800c200:	6862      	ldr	r2, [r4, #4]
 800c202:	3701      	adds	r7, #1
 800c204:	4297      	cmp	r7, r2
 800c206:	d3f5      	bcc.n	800c1f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c208:	4005      	ands	r5, r0
 800c20a:	b2ed      	uxtb	r5, r5
 800c20c:	e78a      	b.n	800c124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c20e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c210:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c214:	4630      	mov	r0, r6
 800c216:	f005 f879 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c21a:	4005      	ands	r5, r0
 800c21c:	4628      	mov	r0, r5
 800c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c222:	2500      	movs	r5, #0
 800c224:	e77e      	b.n	800c124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c226:	4028      	ands	r0, r5
 800c228:	b2c5      	uxtb	r5, r0
 800c22a:	e77b      	b.n	800c124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c22c <uxr_serialize_OBJK_Publisher_Binary>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	460d      	mov	r5, r1
 800c230:	7809      	ldrb	r1, [r1, #0]
 800c232:	4606      	mov	r6, r0
 800c234:	f7fc ff58 	bl	80090e8 <ucdr_serialize_bool>
 800c238:	782b      	ldrb	r3, [r5, #0]
 800c23a:	4604      	mov	r4, r0
 800c23c:	b94b      	cbnz	r3, 800c252 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c23e:	7a29      	ldrb	r1, [r5, #8]
 800c240:	4630      	mov	r0, r6
 800c242:	f7fc ff51 	bl	80090e8 <ucdr_serialize_bool>
 800c246:	7a2b      	ldrb	r3, [r5, #8]
 800c248:	4004      	ands	r4, r0
 800c24a:	b2e4      	uxtb	r4, r4
 800c24c:	b943      	cbnz	r3, 800c260 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c24e:	4620      	mov	r0, r4
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	6869      	ldr	r1, [r5, #4]
 800c254:	4630      	mov	r0, r6
 800c256:	f005 f885 	bl	8011364 <ucdr_serialize_string>
 800c25a:	4004      	ands	r4, r0
 800c25c:	b2e4      	uxtb	r4, r4
 800c25e:	e7ee      	b.n	800c23e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c260:	f105 010c 	add.w	r1, r5, #12
 800c264:	4630      	mov	r0, r6
 800c266:	f7ff ff53 	bl	800c110 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c26a:	4004      	ands	r4, r0
 800c26c:	4620      	mov	r0, r4
 800c26e:	bd70      	pop	{r4, r5, r6, pc}

0800c270 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c270:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c274:	4688      	mov	r8, r1
 800c276:	8809      	ldrh	r1, [r1, #0]
 800c278:	4681      	mov	r9, r0
 800c27a:	f7fc ff8f 	bl	800919c <ucdr_serialize_uint16_t>
 800c27e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c282:	4606      	mov	r6, r0
 800c284:	4648      	mov	r0, r9
 800c286:	f7fc ff2f 	bl	80090e8 <ucdr_serialize_bool>
 800c28a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c28e:	4006      	ands	r6, r0
 800c290:	b2f5      	uxtb	r5, r6
 800c292:	b9eb      	cbnz	r3, 800c2d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c294:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c298:	4648      	mov	r0, r9
 800c29a:	f7fc ff25 	bl	80090e8 <ucdr_serialize_bool>
 800c29e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c2a2:	4005      	ands	r5, r0
 800c2a4:	bb7b      	cbnz	r3, 800c306 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c2a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c2aa:	4648      	mov	r0, r9
 800c2ac:	f7fc ff1c 	bl	80090e8 <ucdr_serialize_bool>
 800c2b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c2b4:	4005      	ands	r5, r0
 800c2b6:	b9f3      	cbnz	r3, 800c2f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c2b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f7fc ff13 	bl	80090e8 <ucdr_serialize_bool>
 800c2c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c2c6:	4005      	ands	r5, r0
 800c2c8:	b94b      	cbnz	r3, 800c2de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c2d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f7fc ff61 	bl	800919c <ucdr_serialize_uint16_t>
 800c2da:	4005      	ands	r5, r0
 800c2dc:	e7da      	b.n	800c294 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c2de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c2e2:	f108 011c 	add.w	r1, r8, #28
 800c2e6:	4648      	mov	r0, r9
 800c2e8:	f005 f810 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c2ec:	4028      	ands	r0, r5
 800c2ee:	b2c5      	uxtb	r5, r0
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c2f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c2fa:	4648      	mov	r0, r9
 800c2fc:	f7fd f938 	bl	8009570 <ucdr_serialize_uint32_t>
 800c300:	4028      	ands	r0, r5
 800c302:	b2c5      	uxtb	r5, r0
 800c304:	e7d8      	b.n	800c2b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c306:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c30a:	4648      	mov	r0, r9
 800c30c:	f7fd f930 	bl	8009570 <ucdr_serialize_uint32_t>
 800c310:	4028      	ands	r0, r5
 800c312:	b2c5      	uxtb	r5, r0
 800c314:	e7c7      	b.n	800c2a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c316:	bf00      	nop

0800c318 <uxr_serialize_OBJK_DataWriter_Binary>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	2202      	movs	r2, #2
 800c31c:	460d      	mov	r5, r1
 800c31e:	4606      	mov	r6, r0
 800c320:	f004 ff00 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c324:	78a9      	ldrb	r1, [r5, #2]
 800c326:	4604      	mov	r4, r0
 800c328:	4630      	mov	r0, r6
 800c32a:	f7fc fedd 	bl	80090e8 <ucdr_serialize_bool>
 800c32e:	78ab      	ldrb	r3, [r5, #2]
 800c330:	4004      	ands	r4, r0
 800c332:	b2e4      	uxtb	r4, r4
 800c334:	b90b      	cbnz	r3, 800c33a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c336:	4620      	mov	r0, r4
 800c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c33a:	f105 0108 	add.w	r1, r5, #8
 800c33e:	4630      	mov	r0, r6
 800c340:	f7ff ff96 	bl	800c270 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c344:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800c348:	4607      	mov	r7, r0
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7fc fecc 	bl	80090e8 <ucdr_serialize_bool>
 800c350:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800c354:	4038      	ands	r0, r7
 800c356:	b2c7      	uxtb	r7, r0
 800c358:	b913      	cbnz	r3, 800c360 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c35a:	403c      	ands	r4, r7
 800c35c:	4620      	mov	r0, r4
 800c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c360:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800c364:	4630      	mov	r0, r6
 800c366:	f7fd fb59 	bl	8009a1c <ucdr_serialize_uint64_t>
 800c36a:	4007      	ands	r7, r0
 800c36c:	e7f5      	b.n	800c35a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c36e:	bf00      	nop

0800c370 <uxr_deserialize_ObjectVariant>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	4605      	mov	r5, r0
 800c374:	460e      	mov	r6, r1
 800c376:	f7fc fefb 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c37a:	b168      	cbz	r0, 800c398 <uxr_deserialize_ObjectVariant+0x28>
 800c37c:	7833      	ldrb	r3, [r6, #0]
 800c37e:	3b01      	subs	r3, #1
 800c380:	4604      	mov	r4, r0
 800c382:	2b0d      	cmp	r3, #13
 800c384:	d809      	bhi.n	800c39a <uxr_deserialize_ObjectVariant+0x2a>
 800c386:	e8df f003 	tbb	[pc, r3]
 800c38a:	0a41      	.short	0x0a41
 800c38c:	0a0a2323 	.word	0x0a0a2323
 800c390:	10080a0a 	.word	0x10080a0a
 800c394:	565c1010 	.word	0x565c1010
 800c398:	2400      	movs	r4, #0
 800c39a:	4620      	mov	r0, r4
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	1d31      	adds	r1, r6, #4
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3a6:	f7ff be41 	b.w	800c02c <uxr_deserialize_DATAWRITER_Representation>
 800c3aa:	1d31      	adds	r1, r6, #4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f7fc fedf 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0f0      	beq.n	800c398 <uxr_deserialize_ObjectVariant+0x28>
 800c3b6:	7933      	ldrb	r3, [r6, #4]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d001      	beq.n	800c3c0 <uxr_deserialize_ObjectVariant+0x50>
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d1ec      	bne.n	800c39a <uxr_deserialize_ObjectVariant+0x2a>
 800c3c0:	68b1      	ldr	r1, [r6, #8]
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3cc:	f004 bfda 	b.w	8011384 <ucdr_deserialize_string>
 800c3d0:	1d31      	adds	r1, r6, #4
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f7fc fecc 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c3d8:	4604      	mov	r4, r0
 800c3da:	b170      	cbz	r0, 800c3fa <uxr_deserialize_ObjectVariant+0x8a>
 800c3dc:	7933      	ldrb	r3, [r6, #4]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d04c      	beq.n	800c47c <uxr_deserialize_ObjectVariant+0x10c>
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d109      	bne.n	800c3fa <uxr_deserialize_ObjectVariant+0x8a>
 800c3e6:	f106 0308 	add.w	r3, r6, #8
 800c3ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3ee:	f106 010c 	add.w	r1, r6, #12
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f004 ff9c 	bl	8011330 <ucdr_deserialize_sequence_uint8_t>
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800c400:	4628      	mov	r0, r5
 800c402:	f004 fef3 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c406:	4020      	ands	r0, r4
 800c408:	b2c4      	uxtb	r4, r0
 800c40a:	e7c6      	b.n	800c39a <uxr_deserialize_ObjectVariant+0x2a>
 800c40c:	1d31      	adds	r1, r6, #4
 800c40e:	4628      	mov	r0, r5
 800c410:	f7fc feae 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c414:	4604      	mov	r4, r0
 800c416:	b130      	cbz	r0, 800c426 <uxr_deserialize_ObjectVariant+0xb6>
 800c418:	7933      	ldrb	r3, [r6, #4]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d036      	beq.n	800c48c <uxr_deserialize_ObjectVariant+0x11c>
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d03c      	beq.n	800c49c <uxr_deserialize_ObjectVariant+0x12c>
 800c422:	2b01      	cmp	r3, #1
 800c424:	d032      	beq.n	800c48c <uxr_deserialize_ObjectVariant+0x11c>
 800c426:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7fd fc46 	bl	8009cbc <ucdr_deserialize_int16_t>
 800c430:	4020      	ands	r0, r4
 800c432:	b2c4      	uxtb	r4, r0
 800c434:	e7b1      	b.n	800c39a <uxr_deserialize_ObjectVariant+0x2a>
 800c436:	1d31      	adds	r1, r6, #4
 800c438:	4628      	mov	r0, r5
 800c43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c43e:	f7ff bcab 	b.w	800bd98 <uxr_deserialize_CLIENT_Representation>
 800c442:	2204      	movs	r2, #4
 800c444:	18b1      	adds	r1, r6, r2
 800c446:	4628      	mov	r0, r5
 800c448:	f004 fed0 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c44c:	2202      	movs	r2, #2
 800c44e:	f106 0108 	add.w	r1, r6, #8
 800c452:	4604      	mov	r4, r0
 800c454:	4628      	mov	r0, r5
 800c456:	f004 fec9 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c45a:	2202      	movs	r2, #2
 800c45c:	4004      	ands	r4, r0
 800c45e:	f106 010a 	add.w	r1, r6, #10
 800c462:	4628      	mov	r0, r5
 800c464:	f004 fec2 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c468:	b2e4      	uxtb	r4, r4
 800c46a:	4603      	mov	r3, r0
 800c46c:	f106 010c 	add.w	r1, r6, #12
 800c470:	4628      	mov	r0, r5
 800c472:	401c      	ands	r4, r3
 800c474:	f7fc fe4e 	bl	8009114 <ucdr_deserialize_bool>
 800c478:	4004      	ands	r4, r0
 800c47a:	e78e      	b.n	800c39a <uxr_deserialize_ObjectVariant+0x2a>
 800c47c:	68b1      	ldr	r1, [r6, #8]
 800c47e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c482:	4628      	mov	r0, r5
 800c484:	f004 ff7e 	bl	8011384 <ucdr_deserialize_string>
 800c488:	4604      	mov	r4, r0
 800c48a:	e7b6      	b.n	800c3fa <uxr_deserialize_ObjectVariant+0x8a>
 800c48c:	68b1      	ldr	r1, [r6, #8]
 800c48e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c492:	4628      	mov	r0, r5
 800c494:	f004 ff76 	bl	8011384 <ucdr_deserialize_string>
 800c498:	4604      	mov	r4, r0
 800c49a:	e7c4      	b.n	800c426 <uxr_deserialize_ObjectVariant+0xb6>
 800c49c:	f106 0308 	add.w	r3, r6, #8
 800c4a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4a4:	f106 010c 	add.w	r1, r6, #12
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	f004 ff41 	bl	8011330 <ucdr_deserialize_sequence_uint8_t>
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	e7b9      	b.n	800c426 <uxr_deserialize_ObjectVariant+0xb6>
 800c4b2:	bf00      	nop

0800c4b4 <uxr_deserialize_BaseObjectRequest>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	f004 fe96 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	18b1      	adds	r1, r6, r2
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f004 fe90 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c4cc:	4020      	ands	r0, r4
 800c4ce:	b2c0      	uxtb	r0, r0
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
 800c4d2:	bf00      	nop

0800c4d4 <uxr_serialize_ActivityInfoVariant>:
 800c4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	460d      	mov	r5, r1
 800c4da:	7809      	ldrb	r1, [r1, #0]
 800c4dc:	4607      	mov	r7, r0
 800c4de:	f7fc fe31 	bl	8009144 <ucdr_serialize_uint8_t>
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	b138      	cbz	r0, 800c4f6 <uxr_serialize_ActivityInfoVariant+0x22>
 800c4e6:	782b      	ldrb	r3, [r5, #0]
 800c4e8:	2b06      	cmp	r3, #6
 800c4ea:	f000 8082 	beq.w	800c5f2 <uxr_serialize_ActivityInfoVariant+0x11e>
 800c4ee:	2b0d      	cmp	r3, #13
 800c4f0:	d016      	beq.n	800c520 <uxr_serialize_ActivityInfoVariant+0x4c>
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d002      	beq.n	800c4fc <uxr_serialize_ActivityInfoVariant+0x28>
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c500:	4638      	mov	r0, r7
 800c502:	f7fd fb5b 	bl	8009bbc <ucdr_serialize_int16_t>
 800c506:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800c50a:	4681      	mov	r9, r0
 800c50c:	4638      	mov	r0, r7
 800c50e:	f7fd fa85 	bl	8009a1c <ucdr_serialize_uint64_t>
 800c512:	ea09 0000 	and.w	r0, r9, r0
 800c516:	fa5f f980 	uxtb.w	r9, r0
 800c51a:	4648      	mov	r0, r9
 800c51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c520:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c524:	4638      	mov	r0, r7
 800c526:	f7fd fb49 	bl	8009bbc <ucdr_serialize_int16_t>
 800c52a:	68e9      	ldr	r1, [r5, #12]
 800c52c:	4681      	mov	r9, r0
 800c52e:	4638      	mov	r0, r7
 800c530:	f7fd f81e 	bl	8009570 <ucdr_serialize_uint32_t>
 800c534:	68eb      	ldr	r3, [r5, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0eb      	beq.n	800c512 <uxr_serialize_ActivityInfoVariant+0x3e>
 800c53a:	b320      	cbz	r0, 800c586 <uxr_serialize_ActivityInfoVariant+0xb2>
 800c53c:	f105 080c 	add.w	r8, r5, #12
 800c540:	2600      	movs	r6, #0
 800c542:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800c546:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800c54a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800c54e:	4638      	mov	r0, r7
 800c550:	f7fc fdf8 	bl	8009144 <ucdr_serialize_uint8_t>
 800c554:	2800      	cmp	r0, #0
 800c556:	d053      	beq.n	800c600 <uxr_serialize_ActivityInfoVariant+0x12c>
 800c558:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c55c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800c560:	0074      	lsls	r4, r6, #1
 800c562:	00c9      	lsls	r1, r1, #3
 800c564:	2b03      	cmp	r3, #3
 800c566:	d854      	bhi.n	800c612 <uxr_serialize_ActivityInfoVariant+0x13e>
 800c568:	e8df f003 	tbb	[pc, r3]
 800c56c:	02102132 	.word	0x02102132
 800c570:	4441      	add	r1, r8
 800c572:	4638      	mov	r0, r7
 800c574:	6889      	ldr	r1, [r1, #8]
 800c576:	f004 fef5 	bl	8011364 <ucdr_serialize_string>
 800c57a:	68ea      	ldr	r2, [r5, #12]
 800c57c:	3601      	adds	r6, #1
 800c57e:	4296      	cmp	r6, r2
 800c580:	d242      	bcs.n	800c608 <uxr_serialize_ActivityInfoVariant+0x134>
 800c582:	2800      	cmp	r0, #0
 800c584:	d1dd      	bne.n	800c542 <uxr_serialize_ActivityInfoVariant+0x6e>
 800c586:	f04f 0900 	mov.w	r9, #0
 800c58a:	e7b4      	b.n	800c4f6 <uxr_serialize_ActivityInfoVariant+0x22>
 800c58c:	3108      	adds	r1, #8
 800c58e:	4441      	add	r1, r8
 800c590:	2210      	movs	r2, #16
 800c592:	4638      	mov	r0, r7
 800c594:	f004 fdc6 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c598:	4434      	add	r4, r6
 800c59a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c59e:	4604      	mov	r4, r0
 800c5a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f7fc ffe4 	bl	8009570 <ucdr_serialize_uint32_t>
 800c5a8:	4020      	ands	r0, r4
 800c5aa:	b2c0      	uxtb	r0, r0
 800c5ac:	e7e5      	b.n	800c57a <uxr_serialize_ActivityInfoVariant+0xa6>
 800c5ae:	3108      	adds	r1, #8
 800c5b0:	4441      	add	r1, r8
 800c5b2:	2204      	movs	r2, #4
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	f004 fdb5 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c5ba:	4434      	add	r4, r6
 800c5bc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	8b19      	ldrh	r1, [r3, #24]
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7fc fde9 	bl	800919c <ucdr_serialize_uint16_t>
 800c5ca:	4020      	ands	r0, r4
 800c5cc:	b2c0      	uxtb	r0, r0
 800c5ce:	e7d4      	b.n	800c57a <uxr_serialize_ActivityInfoVariant+0xa6>
 800c5d0:	3108      	adds	r1, #8
 800c5d2:	4441      	add	r1, r8
 800c5d4:	2202      	movs	r2, #2
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	f004 fda4 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c5dc:	4434      	add	r4, r6
 800c5de:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	7d99      	ldrb	r1, [r3, #22]
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7fc fdac 	bl	8009144 <ucdr_serialize_uint8_t>
 800c5ec:	4020      	ands	r0, r4
 800c5ee:	b2c0      	uxtb	r0, r0
 800c5f0:	e7c3      	b.n	800c57a <uxr_serialize_ActivityInfoVariant+0xa6>
 800c5f2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fc:	f7fd bade 	b.w	8009bbc <ucdr_serialize_int16_t>
 800c600:	68ea      	ldr	r2, [r5, #12]
 800c602:	3601      	adds	r6, #1
 800c604:	42b2      	cmp	r2, r6
 800c606:	d8be      	bhi.n	800c586 <uxr_serialize_ActivityInfoVariant+0xb2>
 800c608:	ea09 0900 	and.w	r9, r9, r0
 800c60c:	fa5f f989 	uxtb.w	r9, r9
 800c610:	e771      	b.n	800c4f6 <uxr_serialize_ActivityInfoVariant+0x22>
 800c612:	68eb      	ldr	r3, [r5, #12]
 800c614:	3601      	adds	r6, #1
 800c616:	429e      	cmp	r6, r3
 800c618:	f10a 0a18 	add.w	sl, sl, #24
 800c61c:	d395      	bcc.n	800c54a <uxr_serialize_ActivityInfoVariant+0x76>
 800c61e:	e76a      	b.n	800c4f6 <uxr_serialize_ActivityInfoVariant+0x22>

0800c620 <uxr_deserialize_BaseObjectReply>:
 800c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	2202      	movs	r2, #2
 800c626:	4606      	mov	r6, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	f004 fddf 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c62e:	2202      	movs	r2, #2
 800c630:	18b9      	adds	r1, r7, r2
 800c632:	4605      	mov	r5, r0
 800c634:	4630      	mov	r0, r6
 800c636:	f004 fdd9 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c63a:	1d39      	adds	r1, r7, #4
 800c63c:	4680      	mov	r8, r0
 800c63e:	4630      	mov	r0, r6
 800c640:	f7fc fd96 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c644:	1d79      	adds	r1, r7, #5
 800c646:	4604      	mov	r4, r0
 800c648:	4630      	mov	r0, r6
 800c64a:	f7fc fd91 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c64e:	ea05 0508 	and.w	r5, r5, r8
 800c652:	402c      	ands	r4, r5
 800c654:	4020      	ands	r0, r4
 800c656:	b2c0      	uxtb	r0, r0
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c65c <uxr_serialize_ReadSpecification>:
 800c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c660:	460e      	mov	r6, r1
 800c662:	7809      	ldrb	r1, [r1, #0]
 800c664:	4607      	mov	r7, r0
 800c666:	f7fc fd6d 	bl	8009144 <ucdr_serialize_uint8_t>
 800c66a:	7871      	ldrb	r1, [r6, #1]
 800c66c:	4604      	mov	r4, r0
 800c66e:	4638      	mov	r0, r7
 800c670:	f7fc fd68 	bl	8009144 <ucdr_serialize_uint8_t>
 800c674:	78b1      	ldrb	r1, [r6, #2]
 800c676:	4004      	ands	r4, r0
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fc fd35 	bl	80090e8 <ucdr_serialize_bool>
 800c67e:	78b3      	ldrb	r3, [r6, #2]
 800c680:	b2e4      	uxtb	r4, r4
 800c682:	4004      	ands	r4, r0
 800c684:	b94b      	cbnz	r3, 800c69a <uxr_serialize_ReadSpecification+0x3e>
 800c686:	7a31      	ldrb	r1, [r6, #8]
 800c688:	4638      	mov	r0, r7
 800c68a:	f7fc fd2d 	bl	80090e8 <ucdr_serialize_bool>
 800c68e:	7a33      	ldrb	r3, [r6, #8]
 800c690:	4004      	ands	r4, r0
 800c692:	b943      	cbnz	r3, 800c6a6 <uxr_serialize_ReadSpecification+0x4a>
 800c694:	4620      	mov	r0, r4
 800c696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69a:	6871      	ldr	r1, [r6, #4]
 800c69c:	4638      	mov	r0, r7
 800c69e:	f004 fe61 	bl	8011364 <ucdr_serialize_string>
 800c6a2:	4004      	ands	r4, r0
 800c6a4:	e7ef      	b.n	800c686 <uxr_serialize_ReadSpecification+0x2a>
 800c6a6:	8971      	ldrh	r1, [r6, #10]
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7fc fd77 	bl	800919c <ucdr_serialize_uint16_t>
 800c6ae:	89b1      	ldrh	r1, [r6, #12]
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7fc fd72 	bl	800919c <ucdr_serialize_uint16_t>
 800c6b8:	89f1      	ldrh	r1, [r6, #14]
 800c6ba:	4005      	ands	r5, r0
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f7fc fd6d 	bl	800919c <ucdr_serialize_uint16_t>
 800c6c2:	8a31      	ldrh	r1, [r6, #16]
 800c6c4:	4680      	mov	r8, r0
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	f7fc fd68 	bl	800919c <ucdr_serialize_uint16_t>
 800c6cc:	b2ed      	uxtb	r5, r5
 800c6ce:	4025      	ands	r5, r4
 800c6d0:	ea08 0505 	and.w	r5, r8, r5
 800c6d4:	ea00 0405 	and.w	r4, r0, r5
 800c6d8:	4620      	mov	r0, r4
 800c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6de:	bf00      	nop

0800c6e0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800c6e0:	f7ff bb02 	b.w	800bce8 <uxr_serialize_CLIENT_Representation>

0800c6e4 <uxr_serialize_CREATE_Payload>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	460e      	mov	r6, r1
 800c6ec:	f004 fd1a 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	18b1      	adds	r1, r6, r2
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	f004 fd14 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c6fc:	7931      	ldrb	r1, [r6, #4]
 800c6fe:	4604      	mov	r4, r0
 800c700:	4638      	mov	r0, r7
 800c702:	f7fc fd1f 	bl	8009144 <ucdr_serialize_uint8_t>
 800c706:	b170      	cbz	r0, 800c726 <uxr_serialize_CREATE_Payload+0x42>
 800c708:	7933      	ldrb	r3, [r6, #4]
 800c70a:	402c      	ands	r4, r5
 800c70c:	3b01      	subs	r3, #1
 800c70e:	b2e4      	uxtb	r4, r4
 800c710:	2b0d      	cmp	r3, #13
 800c712:	d809      	bhi.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c714:	e8df f003 	tbb	[pc, r3]
 800c718:	23230a4c 	.word	0x23230a4c
 800c71c:	0a0a0a0a 	.word	0x0a0a0a0a
 800c720:	12121208 	.word	0x12121208
 800c724:	3e45      	.short	0x3e45
 800c726:	2400      	movs	r4, #0
 800c728:	4620      	mov	r0, r4
 800c72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72c:	f106 0108 	add.w	r1, r6, #8
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff fbdf 	bl	800bef4 <uxr_serialize_DATAWRITER_Representation>
 800c736:	4004      	ands	r4, r0
 800c738:	4620      	mov	r0, r4
 800c73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c73c:	7a31      	ldrb	r1, [r6, #8]
 800c73e:	4638      	mov	r0, r7
 800c740:	f7fc fd00 	bl	8009144 <ucdr_serialize_uint8_t>
 800c744:	2800      	cmp	r0, #0
 800c746:	d0ee      	beq.n	800c726 <uxr_serialize_CREATE_Payload+0x42>
 800c748:	7a33      	ldrb	r3, [r6, #8]
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d001      	beq.n	800c752 <uxr_serialize_CREATE_Payload+0x6e>
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d1ea      	bne.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c752:	68f1      	ldr	r1, [r6, #12]
 800c754:	4638      	mov	r0, r7
 800c756:	f004 fe05 	bl	8011364 <ucdr_serialize_string>
 800c75a:	4004      	ands	r4, r0
 800c75c:	e7e4      	b.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c75e:	7a31      	ldrb	r1, [r6, #8]
 800c760:	4638      	mov	r0, r7
 800c762:	f7fc fcef 	bl	8009144 <ucdr_serialize_uint8_t>
 800c766:	4605      	mov	r5, r0
 800c768:	b158      	cbz	r0, 800c782 <uxr_serialize_CREATE_Payload+0x9e>
 800c76a:	7a33      	ldrb	r3, [r6, #8]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d034      	beq.n	800c7da <uxr_serialize_CREATE_Payload+0xf6>
 800c770:	2b03      	cmp	r3, #3
 800c772:	d106      	bne.n	800c782 <uxr_serialize_CREATE_Payload+0x9e>
 800c774:	68f2      	ldr	r2, [r6, #12]
 800c776:	f106 0110 	add.w	r1, r6, #16
 800c77a:	4638      	mov	r0, r7
 800c77c:	f004 fdc6 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c780:	4605      	mov	r5, r0
 800c782:	2202      	movs	r2, #2
 800c784:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800c788:	4638      	mov	r0, r7
 800c78a:	f004 fccb 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c78e:	4028      	ands	r0, r5
 800c790:	4004      	ands	r4, r0
 800c792:	e7c9      	b.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c794:	f106 0108 	add.w	r1, r6, #8
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff faa5 	bl	800bce8 <uxr_serialize_CLIENT_Representation>
 800c79e:	4004      	ands	r4, r0
 800c7a0:	e7c2      	b.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c7a2:	f106 0108 	add.w	r1, r6, #8
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7ff fb5a 	bl	800be60 <uxr_serialize_AGENT_Representation>
 800c7ac:	4004      	ands	r4, r0
 800c7ae:	e7bb      	b.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c7b0:	7a31      	ldrb	r1, [r6, #8]
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	f7fc fcc6 	bl	8009144 <ucdr_serialize_uint8_t>
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	b130      	cbz	r0, 800c7ca <uxr_serialize_CREATE_Payload+0xe6>
 800c7bc:	7a33      	ldrb	r3, [r6, #8]
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d011      	beq.n	800c7e6 <uxr_serialize_CREATE_Payload+0x102>
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d015      	beq.n	800c7f2 <uxr_serialize_CREATE_Payload+0x10e>
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d00d      	beq.n	800c7e6 <uxr_serialize_CREATE_Payload+0x102>
 800c7ca:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f7fd f9f4 	bl	8009bbc <ucdr_serialize_int16_t>
 800c7d4:	4028      	ands	r0, r5
 800c7d6:	4004      	ands	r4, r0
 800c7d8:	e7a6      	b.n	800c728 <uxr_serialize_CREATE_Payload+0x44>
 800c7da:	68f1      	ldr	r1, [r6, #12]
 800c7dc:	4638      	mov	r0, r7
 800c7de:	f004 fdc1 	bl	8011364 <ucdr_serialize_string>
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	e7cd      	b.n	800c782 <uxr_serialize_CREATE_Payload+0x9e>
 800c7e6:	68f1      	ldr	r1, [r6, #12]
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	f004 fdbb 	bl	8011364 <ucdr_serialize_string>
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	e7eb      	b.n	800c7ca <uxr_serialize_CREATE_Payload+0xe6>
 800c7f2:	68f2      	ldr	r2, [r6, #12]
 800c7f4:	f106 0110 	add.w	r1, r6, #16
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f004 fd87 	bl	801130c <ucdr_serialize_sequence_uint8_t>
 800c7fe:	4605      	mov	r5, r0
 800c800:	e7e3      	b.n	800c7ca <uxr_serialize_CREATE_Payload+0xe6>
 800c802:	bf00      	nop

0800c804 <uxr_deserialize_GET_INFO_Payload>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	2202      	movs	r2, #2
 800c808:	4605      	mov	r5, r0
 800c80a:	460e      	mov	r6, r1
 800c80c:	f004 fcee 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c810:	2202      	movs	r2, #2
 800c812:	18b1      	adds	r1, r6, r2
 800c814:	4604      	mov	r4, r0
 800c816:	4628      	mov	r0, r5
 800c818:	f004 fce8 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c81c:	1d31      	adds	r1, r6, #4
 800c81e:	4004      	ands	r4, r0
 800c820:	4628      	mov	r0, r5
 800c822:	f7fc ffd5 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800c826:	b2e4      	uxtb	r4, r4
 800c828:	4020      	ands	r0, r4
 800c82a:	bd70      	pop	{r4, r5, r6, pc}

0800c82c <uxr_serialize_DELETE_Payload>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	2202      	movs	r2, #2
 800c830:	4605      	mov	r5, r0
 800c832:	460e      	mov	r6, r1
 800c834:	f004 fc76 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c838:	2202      	movs	r2, #2
 800c83a:	4604      	mov	r4, r0
 800c83c:	18b1      	adds	r1, r6, r2
 800c83e:	4628      	mov	r0, r5
 800c840:	f004 fc70 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c844:	4020      	ands	r0, r4
 800c846:	b2c0      	uxtb	r0, r0
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	bf00      	nop

0800c84c <uxr_deserialize_STATUS_AGENT_Payload>:
 800c84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c850:	4605      	mov	r5, r0
 800c852:	460e      	mov	r6, r1
 800c854:	f7fc fc8c 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c858:	1c71      	adds	r1, r6, #1
 800c85a:	4604      	mov	r4, r0
 800c85c:	4628      	mov	r0, r5
 800c85e:	f7fc fc87 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c862:	2204      	movs	r2, #4
 800c864:	18b1      	adds	r1, r6, r2
 800c866:	4680      	mov	r8, r0
 800c868:	4628      	mov	r0, r5
 800c86a:	f004 fcbf 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c86e:	f106 0108 	add.w	r1, r6, #8
 800c872:	4607      	mov	r7, r0
 800c874:	2202      	movs	r2, #2
 800c876:	4628      	mov	r0, r5
 800c878:	f004 fcb8 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c87c:	ea04 0308 	and.w	r3, r4, r8
 800c880:	b2db      	uxtb	r3, r3
 800c882:	ea03 0407 	and.w	r4, r3, r7
 800c886:	2202      	movs	r2, #2
 800c888:	4607      	mov	r7, r0
 800c88a:	f106 010a 	add.w	r1, r6, #10
 800c88e:	4628      	mov	r0, r5
 800c890:	f004 fcac 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c894:	f106 010c 	add.w	r1, r6, #12
 800c898:	4603      	mov	r3, r0
 800c89a:	4628      	mov	r0, r5
 800c89c:	461d      	mov	r5, r3
 800c89e:	f7fc fc39 	bl	8009114 <ucdr_deserialize_bool>
 800c8a2:	403c      	ands	r4, r7
 800c8a4:	4025      	ands	r5, r4
 800c8a6:	4028      	ands	r0, r5
 800c8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8ac <uxr_deserialize_STATUS_Payload>:
 800c8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	460f      	mov	r7, r1
 800c8b6:	f004 fc99 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	18b9      	adds	r1, r7, r2
 800c8be:	4605      	mov	r5, r0
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f004 fc93 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800c8c6:	1d39      	adds	r1, r7, #4
 800c8c8:	4680      	mov	r8, r0
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7fc fc50 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c8d0:	1d79      	adds	r1, r7, #5
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7fc fc4b 	bl	8009170 <ucdr_deserialize_uint8_t>
 800c8da:	ea05 0508 	and.w	r5, r5, r8
 800c8de:	402c      	ands	r4, r5
 800c8e0:	4020      	ands	r0, r4
 800c8e2:	b2c0      	uxtb	r0, r0
 800c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8e8 <uxr_serialize_INFO_Payload>:
 800c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	f004 fc17 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	18a1      	adds	r1, r4, r2
 800c8fa:	4680      	mov	r8, r0
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f004 fc11 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c902:	7921      	ldrb	r1, [r4, #4]
 800c904:	4607      	mov	r7, r0
 800c906:	4628      	mov	r0, r5
 800c908:	f7fc fc1c 	bl	8009144 <ucdr_serialize_uint8_t>
 800c90c:	7961      	ldrb	r1, [r4, #5]
 800c90e:	4606      	mov	r6, r0
 800c910:	4628      	mov	r0, r5
 800c912:	f7fc fc17 	bl	8009144 <ucdr_serialize_uint8_t>
 800c916:	ea08 0807 	and.w	r8, r8, r7
 800c91a:	ea06 0608 	and.w	r6, r6, r8
 800c91e:	4006      	ands	r6, r0
 800c920:	7a21      	ldrb	r1, [r4, #8]
 800c922:	4628      	mov	r0, r5
 800c924:	f7fc fbe0 	bl	80090e8 <ucdr_serialize_bool>
 800c928:	7a23      	ldrb	r3, [r4, #8]
 800c92a:	b2f7      	uxtb	r7, r6
 800c92c:	4606      	mov	r6, r0
 800c92e:	b96b      	cbnz	r3, 800c94c <uxr_serialize_INFO_Payload+0x64>
 800c930:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800c934:	4628      	mov	r0, r5
 800c936:	f7fc fbd7 	bl	80090e8 <ucdr_serialize_bool>
 800c93a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800c93e:	4030      	ands	r0, r6
 800c940:	b2c6      	uxtb	r6, r0
 800c942:	b983      	cbnz	r3, 800c966 <uxr_serialize_INFO_Payload+0x7e>
 800c944:	ea06 0007 	and.w	r0, r6, r7
 800c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94c:	7b21      	ldrb	r1, [r4, #12]
 800c94e:	4628      	mov	r0, r5
 800c950:	f7fc fbf8 	bl	8009144 <ucdr_serialize_uint8_t>
 800c954:	b188      	cbz	r0, 800c97a <uxr_serialize_INFO_Payload+0x92>
 800c956:	f104 010c 	add.w	r1, r4, #12
 800c95a:	4628      	mov	r0, r5
 800c95c:	f7ff faf2 	bl	800bf44 <uxr_serialize_ObjectVariant.part.0>
 800c960:	4030      	ands	r0, r6
 800c962:	b2c6      	uxtb	r6, r0
 800c964:	e7e4      	b.n	800c930 <uxr_serialize_INFO_Payload+0x48>
 800c966:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800c96a:	4628      	mov	r0, r5
 800c96c:	f7ff fdb2 	bl	800c4d4 <uxr_serialize_ActivityInfoVariant>
 800c970:	4006      	ands	r6, r0
 800c972:	ea06 0007 	and.w	r0, r6, r7
 800c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97a:	4606      	mov	r6, r0
 800c97c:	e7d8      	b.n	800c930 <uxr_serialize_INFO_Payload+0x48>
 800c97e:	bf00      	nop

0800c980 <uxr_serialize_READ_DATA_Payload>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	2202      	movs	r2, #2
 800c984:	4605      	mov	r5, r0
 800c986:	460e      	mov	r6, r1
 800c988:	f004 fbcc 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c98c:	2202      	movs	r2, #2
 800c98e:	18b1      	adds	r1, r6, r2
 800c990:	4604      	mov	r4, r0
 800c992:	4628      	mov	r0, r5
 800c994:	f004 fbc6 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c998:	1d31      	adds	r1, r6, #4
 800c99a:	4004      	ands	r4, r0
 800c99c:	4628      	mov	r0, r5
 800c99e:	f7ff fe5d 	bl	800c65c <uxr_serialize_ReadSpecification>
 800c9a2:	b2e4      	uxtb	r4, r4
 800c9a4:	4020      	ands	r0, r4
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}

0800c9a8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	460e      	mov	r6, r1
 800c9b0:	f004 fbb8 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	18b1      	adds	r1, r6, r2
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f004 fbb2 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c9c0:	4020      	ands	r0, r4
 800c9c2:	b2c0      	uxtb	r0, r0
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	bf00      	nop

0800c9c8 <uxr_serialize_ACKNACK_Payload>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	460e      	mov	r6, r1
 800c9ce:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	f7fc fbe2 	bl	800919c <ucdr_serialize_uint16_t>
 800c9d8:	2202      	movs	r2, #2
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4604      	mov	r4, r0
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f004 fba0 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800c9e4:	7931      	ldrb	r1, [r6, #4]
 800c9e6:	4004      	ands	r4, r0
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7fc fbab 	bl	8009144 <ucdr_serialize_uint8_t>
 800c9ee:	b2e4      	uxtb	r4, r4
 800c9f0:	4020      	ands	r0, r4
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}

0800c9f4 <uxr_deserialize_ACKNACK_Payload>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	f7fc fccf 	bl	800939c <ucdr_deserialize_uint16_t>
 800c9fe:	2202      	movs	r2, #2
 800ca00:	18b1      	adds	r1, r6, r2
 800ca02:	4604      	mov	r4, r0
 800ca04:	4628      	mov	r0, r5
 800ca06:	f004 fbf1 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800ca0a:	1d31      	adds	r1, r6, #4
 800ca0c:	4004      	ands	r4, r0
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f7fc fbae 	bl	8009170 <ucdr_deserialize_uint8_t>
 800ca14:	b2e4      	uxtb	r4, r4
 800ca16:	4020      	ands	r0, r4
 800ca18:	bd70      	pop	{r4, r5, r6, pc}
 800ca1a:	bf00      	nop

0800ca1c <uxr_serialize_HEARTBEAT_Payload>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	460d      	mov	r5, r1
 800ca20:	8809      	ldrh	r1, [r1, #0]
 800ca22:	4606      	mov	r6, r0
 800ca24:	f7fc fbba 	bl	800919c <ucdr_serialize_uint16_t>
 800ca28:	8869      	ldrh	r1, [r5, #2]
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7fc fbb5 	bl	800919c <ucdr_serialize_uint16_t>
 800ca32:	7929      	ldrb	r1, [r5, #4]
 800ca34:	4004      	ands	r4, r0
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7fc fb84 	bl	8009144 <ucdr_serialize_uint8_t>
 800ca3c:	b2e4      	uxtb	r4, r4
 800ca3e:	4020      	ands	r0, r4
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	bf00      	nop

0800ca44 <uxr_deserialize_HEARTBEAT_Payload>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	4605      	mov	r5, r0
 800ca48:	460e      	mov	r6, r1
 800ca4a:	f7fc fca7 	bl	800939c <ucdr_deserialize_uint16_t>
 800ca4e:	1cb1      	adds	r1, r6, #2
 800ca50:	4604      	mov	r4, r0
 800ca52:	4628      	mov	r0, r5
 800ca54:	f7fc fca2 	bl	800939c <ucdr_deserialize_uint16_t>
 800ca58:	1d31      	adds	r1, r6, #4
 800ca5a:	4004      	ands	r4, r0
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7fc fb87 	bl	8009170 <ucdr_deserialize_uint8_t>
 800ca62:	b2e4      	uxtb	r4, r4
 800ca64:	4020      	ands	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}

0800ca68 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	460e      	mov	r6, r1
 800ca70:	f7fd fa30 	bl	8009ed4 <ucdr_deserialize_int32_t>
 800ca74:	1d31      	adds	r1, r6, #4
 800ca76:	4607      	mov	r7, r0
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7fc fea9 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800ca7e:	f106 0108 	add.w	r1, r6, #8
 800ca82:	4680      	mov	r8, r0
 800ca84:	4628      	mov	r0, r5
 800ca86:	f7fd fa25 	bl	8009ed4 <ucdr_deserialize_int32_t>
 800ca8a:	f106 010c 	add.w	r1, r6, #12
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4628      	mov	r0, r5
 800ca92:	f7fc fe9d 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800ca96:	ea07 0708 	and.w	r7, r7, r8
 800ca9a:	403c      	ands	r4, r7
 800ca9c:	f106 0110 	add.w	r1, r6, #16
 800caa0:	4004      	ands	r4, r0
 800caa2:	4628      	mov	r0, r5
 800caa4:	f7fd fa16 	bl	8009ed4 <ucdr_deserialize_int32_t>
 800caa8:	f106 0114 	add.w	r1, r6, #20
 800caac:	4607      	mov	r7, r0
 800caae:	4628      	mov	r0, r5
 800cab0:	f7fc fe8e 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800cab4:	b2e4      	uxtb	r4, r4
 800cab6:	403c      	ands	r4, r7
 800cab8:	4020      	ands	r0, r4
 800caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabe:	bf00      	nop

0800cac0 <uxr_serialize_SampleIdentity>:
 800cac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac4:	220c      	movs	r2, #12
 800cac6:	4604      	mov	r4, r0
 800cac8:	460d      	mov	r5, r1
 800caca:	f004 fb2b 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800cace:	2203      	movs	r2, #3
 800cad0:	f105 010c 	add.w	r1, r5, #12
 800cad4:	4607      	mov	r7, r0
 800cad6:	4620      	mov	r0, r4
 800cad8:	f004 fb24 	bl	8011124 <ucdr_serialize_array_uint8_t>
 800cadc:	7be9      	ldrb	r1, [r5, #15]
 800cade:	4680      	mov	r8, r0
 800cae0:	4620      	mov	r0, r4
 800cae2:	f7fc fb2f 	bl	8009144 <ucdr_serialize_uint8_t>
 800cae6:	6929      	ldr	r1, [r5, #16]
 800cae8:	4606      	mov	r6, r0
 800caea:	4620      	mov	r0, r4
 800caec:	f7fd f95a 	bl	8009da4 <ucdr_serialize_int32_t>
 800caf0:	6969      	ldr	r1, [r5, #20]
 800caf2:	4603      	mov	r3, r0
 800caf4:	4620      	mov	r0, r4
 800caf6:	ea07 0708 	and.w	r7, r7, r8
 800cafa:	461c      	mov	r4, r3
 800cafc:	f7fc fd38 	bl	8009570 <ucdr_serialize_uint32_t>
 800cb00:	403e      	ands	r6, r7
 800cb02:	4034      	ands	r4, r6
 800cb04:	4020      	ands	r0, r4
 800cb06:	b2c0      	uxtb	r0, r0
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb0c <uxr_deserialize_SampleIdentity>:
 800cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb10:	220c      	movs	r2, #12
 800cb12:	4604      	mov	r4, r0
 800cb14:	460d      	mov	r5, r1
 800cb16:	f004 fb69 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	f105 010c 	add.w	r1, r5, #12
 800cb20:	4607      	mov	r7, r0
 800cb22:	4620      	mov	r0, r4
 800cb24:	f004 fb62 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 800cb28:	f105 010f 	add.w	r1, r5, #15
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7fc fb1e 	bl	8009170 <ucdr_deserialize_uint8_t>
 800cb34:	f105 0110 	add.w	r1, r5, #16
 800cb38:	4606      	mov	r6, r0
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7fd f9ca 	bl	8009ed4 <ucdr_deserialize_int32_t>
 800cb40:	f105 0114 	add.w	r1, r5, #20
 800cb44:	4603      	mov	r3, r0
 800cb46:	4620      	mov	r0, r4
 800cb48:	ea07 0708 	and.w	r7, r7, r8
 800cb4c:	461c      	mov	r4, r3
 800cb4e:	f7fc fe3f 	bl	80097d0 <ucdr_deserialize_uint32_t>
 800cb52:	403e      	ands	r6, r7
 800cb54:	4034      	ands	r4, r6
 800cb56:	4020      	ands	r0, r4
 800cb58:	b2c0      	uxtb	r0, r0
 800cb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5e:	bf00      	nop

0800cb60 <rcl_client_get_rmw_handle>:
 800cb60:	b118      	cbz	r0, 800cb6a <rcl_client_get_rmw_handle+0xa>
 800cb62:	6800      	ldr	r0, [r0, #0]
 800cb64:	b108      	cbz	r0, 800cb6a <rcl_client_get_rmw_handle+0xa>
 800cb66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800cb6a:	4770      	bx	lr

0800cb6c <rcl_send_request>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	b1e8      	cbz	r0, 800cbae <rcl_send_request+0x42>
 800cb72:	4604      	mov	r4, r0
 800cb74:	6800      	ldr	r0, [r0, #0]
 800cb76:	b1d0      	cbz	r0, 800cbae <rcl_send_request+0x42>
 800cb78:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800cb7c:	b1bb      	cbz	r3, 800cbae <rcl_send_request+0x42>
 800cb7e:	460e      	mov	r6, r1
 800cb80:	b1d1      	cbz	r1, 800cbb8 <rcl_send_request+0x4c>
 800cb82:	4615      	mov	r5, r2
 800cb84:	b1c2      	cbz	r2, 800cbb8 <rcl_send_request+0x4c>
 800cb86:	2105      	movs	r1, #5
 800cb88:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800cb8c:	f002 fc98 	bl	800f4c0 <__atomic_load_8>
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	e9c5 0100 	strd	r0, r1, [r5]
 800cb96:	462a      	mov	r2, r5
 800cb98:	4631      	mov	r1, r6
 800cb9a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800cb9e:	f003 fe23 	bl	80107e8 <rmw_send_request>
 800cba2:	4606      	mov	r6, r0
 800cba4:	b160      	cbz	r0, 800cbc0 <rcl_send_request+0x54>
 800cba6:	2601      	movs	r6, #1
 800cba8:	4630      	mov	r0, r6
 800cbaa:	b002      	add	sp, #8
 800cbac:	bd70      	pop	{r4, r5, r6, pc}
 800cbae:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	b002      	add	sp, #8
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	260b      	movs	r6, #11
 800cbba:	4630      	mov	r0, r6
 800cbbc:	b002      	add	sp, #8
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	6820      	ldr	r0, [r4, #0]
 800cbc2:	2105      	movs	r1, #5
 800cbc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbc8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800cbcc:	9100      	str	r1, [sp, #0]
 800cbce:	f002 fce3 	bl	800f598 <__atomic_exchange_8>
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	b002      	add	sp, #8
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}

0800cbd8 <rcl_take_response>:
 800cbd8:	b570      	push	{r4, r5, r6, lr}
 800cbda:	468e      	mov	lr, r1
 800cbdc:	460c      	mov	r4, r1
 800cbde:	4616      	mov	r6, r2
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbe6:	b08c      	sub	sp, #48	@ 0x30
 800cbe8:	f10d 0c18 	add.w	ip, sp, #24
 800cbec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbf0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cbf4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cbf8:	b35d      	cbz	r5, 800cc52 <rcl_take_response+0x7a>
 800cbfa:	682b      	ldr	r3, [r5, #0]
 800cbfc:	b34b      	cbz	r3, 800cc52 <rcl_take_response+0x7a>
 800cbfe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800cc02:	b330      	cbz	r0, 800cc52 <rcl_take_response+0x7a>
 800cc04:	b346      	cbz	r6, 800cc58 <rcl_take_response+0x80>
 800cc06:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800cc60 <rcl_take_response+0x88>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f88d 3007 	strb.w	r3, [sp, #7]
 800cc10:	4632      	mov	r2, r6
 800cc12:	f10d 0307 	add.w	r3, sp, #7
 800cc16:	a902      	add	r1, sp, #8
 800cc18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc20:	f003 feea 	bl	80109f8 <rmw_take_response>
 800cc24:	4605      	mov	r5, r0
 800cc26:	b9c8      	cbnz	r0, 800cc5c <rcl_take_response+0x84>
 800cc28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc2c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cc30:	2a00      	cmp	r2, #0
 800cc32:	bf08      	it	eq
 800cc34:	461d      	moveq	r5, r3
 800cc36:	f10d 0e18 	add.w	lr, sp, #24
 800cc3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc3e:	46a4      	mov	ip, r4
 800cc40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cc48:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	b00c      	add	sp, #48	@ 0x30
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800cc56:	e7ee      	b.n	800cc36 <rcl_take_response+0x5e>
 800cc58:	250b      	movs	r5, #11
 800cc5a:	e7ec      	b.n	800cc36 <rcl_take_response+0x5e>
 800cc5c:	2501      	movs	r5, #1
 800cc5e:	e7ea      	b.n	800cc36 <rcl_take_response+0x5e>
	...

0800cc68 <rcl_client_is_valid>:
 800cc68:	b130      	cbz	r0, 800cc78 <rcl_client_is_valid+0x10>
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	b120      	cbz	r0, 800cc78 <rcl_client_is_valid+0x10>
 800cc6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800cc72:	3800      	subs	r0, #0
 800cc74:	bf18      	it	ne
 800cc76:	2001      	movne	r0, #1
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop

0800cc7c <rcl_convert_rmw_ret_to_rcl_ret>:
 800cc7c:	280b      	cmp	r0, #11
 800cc7e:	dc0d      	bgt.n	800cc9c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	db09      	blt.n	800cc98 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800cc84:	280b      	cmp	r0, #11
 800cc86:	d807      	bhi.n	800cc98 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800cc88:	e8df f000 	tbb	[pc, r0]
 800cc8c:	07060607 	.word	0x07060607
 800cc90:	06060606 	.word	0x06060606
 800cc94:	07070606 	.word	0x07070606
 800cc98:	2001      	movs	r0, #1
 800cc9a:	4770      	bx	lr
 800cc9c:	28cb      	cmp	r0, #203	@ 0xcb
 800cc9e:	bf18      	it	ne
 800cca0:	2001      	movne	r0, #1
 800cca2:	4770      	bx	lr

0800cca4 <rcl_get_zero_initialized_context>:
 800cca4:	4a03      	ldr	r2, [pc, #12]	@ (800ccb4 <rcl_get_zero_initialized_context+0x10>)
 800cca6:	4603      	mov	r3, r0
 800cca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccac:	e883 0003 	stmia.w	r3, {r0, r1}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	4770      	bx	lr
 800ccb4:	08014e44 	.word	0x08014e44

0800ccb8 <rcl_context_is_valid>:
 800ccb8:	b118      	cbz	r0, 800ccc2 <rcl_context_is_valid+0xa>
 800ccba:	6840      	ldr	r0, [r0, #4]
 800ccbc:	3800      	subs	r0, #0
 800ccbe:	bf18      	it	ne
 800ccc0:	2001      	movne	r0, #1
 800ccc2:	4770      	bx	lr

0800ccc4 <__cleanup_context>:
 800ccc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	4606      	mov	r6, r0
 800ccca:	6800      	ldr	r0, [r0, #0]
 800cccc:	2300      	movs	r3, #0
 800ccce:	6073      	str	r3, [r6, #4]
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d049      	beq.n	800cd68 <__cleanup_context+0xa4>
 800ccd4:	6947      	ldr	r7, [r0, #20]
 800ccd6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ccda:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ccde:	b137      	cbz	r7, 800ccee <__cleanup_context+0x2a>
 800cce0:	3014      	adds	r0, #20
 800cce2:	f000 f9bb 	bl	800d05c <rcl_init_options_fini>
 800cce6:	4607      	mov	r7, r0
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d144      	bne.n	800cd76 <__cleanup_context+0xb2>
 800ccec:	6830      	ldr	r0, [r6, #0]
 800ccee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ccf0:	b143      	cbz	r3, 800cd04 <__cleanup_context+0x40>
 800ccf2:	3028      	adds	r0, #40	@ 0x28
 800ccf4:	f003 fbc0 	bl	8010478 <rmw_context_fini>
 800ccf8:	b118      	cbz	r0, 800cd02 <__cleanup_context+0x3e>
 800ccfa:	2f00      	cmp	r7, #0
 800ccfc:	d03e      	beq.n	800cd7c <__cleanup_context+0xb8>
 800ccfe:	f7fb fbff 	bl	8008500 <rcutils_reset_error>
 800cd02:	6830      	ldr	r0, [r6, #0]
 800cd04:	6a03      	ldr	r3, [r0, #32]
 800cd06:	b1db      	cbz	r3, 800cd40 <__cleanup_context+0x7c>
 800cd08:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800cd0c:	2a01      	cmp	r2, #1
 800cd0e:	f17c 0100 	sbcs.w	r1, ip, #0
 800cd12:	db11      	blt.n	800cd38 <__cleanup_context+0x74>
 800cd14:	2400      	movs	r4, #0
 800cd16:	4625      	mov	r5, r4
 800cd18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	b1b8      	cbz	r0, 800cd50 <__cleanup_context+0x8c>
 800cd20:	47c0      	blx	r8
 800cd22:	6833      	ldr	r3, [r6, #0]
 800cd24:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800cd28:	3401      	adds	r4, #1
 800cd2a:	f145 0500 	adc.w	r5, r5, #0
 800cd2e:	4294      	cmp	r4, r2
 800cd30:	eb75 010c 	sbcs.w	r1, r5, ip
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	dbef      	blt.n	800cd18 <__cleanup_context+0x54>
 800cd38:	4618      	mov	r0, r3
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	47c0      	blx	r8
 800cd3e:	6830      	ldr	r0, [r6, #0]
 800cd40:	4649      	mov	r1, r9
 800cd42:	47c0      	blx	r8
 800cd44:	2300      	movs	r3, #0
 800cd46:	e9c6 3300 	strd	r3, r3, [r6]
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd50:	3401      	adds	r4, #1
 800cd52:	f145 0500 	adc.w	r5, r5, #0
 800cd56:	4294      	cmp	r4, r2
 800cd58:	eb75 010c 	sbcs.w	r1, r5, ip
 800cd5c:	dbdc      	blt.n	800cd18 <__cleanup_context+0x54>
 800cd5e:	4618      	mov	r0, r3
 800cd60:	4649      	mov	r1, r9
 800cd62:	47c0      	blx	r8
 800cd64:	6830      	ldr	r0, [r6, #0]
 800cd66:	e7eb      	b.n	800cd40 <__cleanup_context+0x7c>
 800cd68:	4607      	mov	r7, r0
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e9c6 3300 	strd	r3, r3, [r6]
 800cd70:	4638      	mov	r0, r7
 800cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd76:	f7fb fbc3 	bl	8008500 <rcutils_reset_error>
 800cd7a:	e7b7      	b.n	800ccec <__cleanup_context+0x28>
 800cd7c:	f7ff ff7e 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800cd80:	4607      	mov	r7, r0
 800cd82:	e7bc      	b.n	800ccfe <__cleanup_context+0x3a>

0800cd84 <rcl_init>:
 800cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd88:	1e05      	subs	r5, r0, #0
 800cd8a:	b09e      	sub	sp, #120	@ 0x78
 800cd8c:	460e      	mov	r6, r1
 800cd8e:	4690      	mov	r8, r2
 800cd90:	461f      	mov	r7, r3
 800cd92:	f340 809c 	ble.w	800cece <rcl_init+0x14a>
 800cd96:	2900      	cmp	r1, #0
 800cd98:	f000 809c 	beq.w	800ced4 <rcl_init+0x150>
 800cd9c:	f1a1 0e04 	sub.w	lr, r1, #4
 800cda0:	f04f 0c00 	mov.w	ip, #0
 800cda4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800cda8:	f10c 0c01 	add.w	ip, ip, #1
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	f000 8091 	beq.w	800ced4 <rcl_init+0x150>
 800cdb2:	4565      	cmp	r5, ip
 800cdb4:	d1f6      	bne.n	800cda4 <rcl_init+0x20>
 800cdb6:	f1b8 0f00 	cmp.w	r8, #0
 800cdba:	f000 808b 	beq.w	800ced4 <rcl_init+0x150>
 800cdbe:	f8d8 4000 	ldr.w	r4, [r8]
 800cdc2:	2c00      	cmp	r4, #0
 800cdc4:	f000 8086 	beq.w	800ced4 <rcl_init+0x150>
 800cdc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdca:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800cdce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	f8cc 3000 	str.w	r3, [ip]
 800cdd8:	a819      	add	r0, sp, #100	@ 0x64
 800cdda:	f7fb fb6d 	bl	80084b8 <rcutils_allocator_is_valid>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d078      	beq.n	800ced4 <rcl_init+0x150>
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	d076      	beq.n	800ced4 <rcl_init+0x150>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d178      	bne.n	800cede <rcl_init+0x15a>
 800cdec:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800cdf0:	2178      	movs	r1, #120	@ 0x78
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	4798      	blx	r3
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	6038      	str	r0, [r7, #0]
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f000 80b6 	beq.w	800cf6c <rcl_init+0x1e8>
 800ce00:	a802      	add	r0, sp, #8
 800ce02:	f002 fead 	bl	800fb60 <rmw_get_zero_initialized_context>
 800ce06:	a902      	add	r1, sp, #8
 800ce08:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ce0c:	2250      	movs	r2, #80	@ 0x50
 800ce0e:	ac19      	add	r4, sp, #100	@ 0x64
 800ce10:	f006 ff51 	bl	8013cb6 <memcpy>
 800ce14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce16:	f8d7 e000 	ldr.w	lr, [r7]
 800ce1a:	46f4      	mov	ip, lr
 800ce1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	f8cc 3000 	str.w	r3, [ip]
 800ce26:	f10e 0114 	add.w	r1, lr, #20
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	f000 f940 	bl	800d0b0 <rcl_init_options_copy>
 800ce30:	4604      	mov	r4, r0
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d144      	bne.n	800cec0 <rcl_init+0x13c>
 800ce36:	f8d7 9000 	ldr.w	r9, [r7]
 800ce3a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ce3e:	f8c9 0020 	str.w	r0, [r9, #32]
 800ce42:	f8c9 5018 	str.w	r5, [r9, #24]
 800ce46:	f8c9 801c 	str.w	r8, [r9, #28]
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	d04e      	beq.n	800ceec <rcl_init+0x168>
 800ce4e:	2e00      	cmp	r6, #0
 800ce50:	d04c      	beq.n	800ceec <rcl_init+0x168>
 800ce52:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800ce56:	2104      	movs	r1, #4
 800ce58:	4628      	mov	r0, r5
 800ce5a:	4798      	blx	r3
 800ce5c:	f8c9 0020 	str.w	r0, [r9, #32]
 800ce60:	f8d7 9000 	ldr.w	r9, [r7]
 800ce64:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800ce68:	46ca      	mov	sl, r9
 800ce6a:	b343      	cbz	r3, 800cebe <rcl_init+0x13a>
 800ce6c:	2d01      	cmp	r5, #1
 800ce6e:	f178 0300 	sbcs.w	r3, r8, #0
 800ce72:	db3b      	blt.n	800ceec <rcl_init+0x168>
 800ce74:	2400      	movs	r4, #0
 800ce76:	3e04      	subs	r6, #4
 800ce78:	46a1      	mov	r9, r4
 800ce7a:	e00b      	b.n	800ce94 <rcl_init+0x110>
 800ce7c:	6831      	ldr	r1, [r6, #0]
 800ce7e:	f006 ff1a 	bl	8013cb6 <memcpy>
 800ce82:	3401      	adds	r4, #1
 800ce84:	f149 0900 	adc.w	r9, r9, #0
 800ce88:	45c8      	cmp	r8, r9
 800ce8a:	bf08      	it	eq
 800ce8c:	42a5      	cmpeq	r5, r4
 800ce8e:	d02b      	beq.n	800cee8 <rcl_init+0x164>
 800ce90:	f8d7 a000 	ldr.w	sl, [r7]
 800ce94:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800ce98:	f7f3 f9ac 	bl	80001f4 <strlen>
 800ce9c:	1c42      	adds	r2, r0, #1
 800ce9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cea0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800cea2:	f8da a020 	ldr.w	sl, [sl, #32]
 800cea6:	9201      	str	r2, [sp, #4]
 800cea8:	4610      	mov	r0, r2
 800ceaa:	4798      	blx	r3
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800ceb2:	6a1b      	ldr	r3, [r3, #32]
 800ceb4:	9a01      	ldr	r2, [sp, #4]
 800ceb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d1de      	bne.n	800ce7c <rcl_init+0xf8>
 800cebe:	240a      	movs	r4, #10
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff feff 	bl	800ccc4 <__cleanup_context>
 800cec6:	4620      	mov	r0, r4
 800cec8:	b01e      	add	sp, #120	@ 0x78
 800ceca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cece:	2900      	cmp	r1, #0
 800ced0:	f43f af71 	beq.w	800cdb6 <rcl_init+0x32>
 800ced4:	240b      	movs	r4, #11
 800ced6:	4620      	mov	r0, r4
 800ced8:	b01e      	add	sp, #120	@ 0x78
 800ceda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cede:	2464      	movs	r4, #100	@ 0x64
 800cee0:	4620      	mov	r0, r4
 800cee2:	b01e      	add	sp, #120	@ 0x78
 800cee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee8:	f8d7 9000 	ldr.w	r9, [r7]
 800ceec:	4926      	ldr	r1, [pc, #152]	@ (800cf88 <rcl_init+0x204>)
 800ceee:	680b      	ldr	r3, [r1, #0]
 800cef0:	3301      	adds	r3, #1
 800cef2:	d036      	beq.n	800cf62 <rcl_init+0x1de>
 800cef4:	600b      	str	r3, [r1, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	2400      	movs	r4, #0
 800cefa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800cefe:	607b      	str	r3, [r7, #4]
 800cf00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf02:	3301      	adds	r3, #1
 800cf04:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800cf08:	d034      	beq.n	800cf74 <rcl_init+0x1f0>
 800cf0a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800cf0e:	b93b      	cbnz	r3, 800cf20 <rcl_init+0x19c>
 800cf10:	3030      	adds	r0, #48	@ 0x30
 800cf12:	f000 f939 	bl	800d188 <rcl_get_localhost_only>
 800cf16:	4604      	mov	r4, r0
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d1d1      	bne.n	800cec0 <rcl_init+0x13c>
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	6958      	ldr	r0, [r3, #20]
 800cf20:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800cf22:	aa18      	add	r2, sp, #96	@ 0x60
 800cf24:	a917      	add	r1, sp, #92	@ 0x5c
 800cf26:	f000 ff65 	bl	800ddf4 <rcl_validate_enclave_name>
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d1c7      	bne.n	800cec0 <rcl_init+0x13c>
 800cf30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf32:	b9eb      	cbnz	r3, 800cf70 <rcl_init+0x1ec>
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	694b      	ldr	r3, [r1, #20]
 800cf38:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800cf3a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800cf3e:	f000 fc3d 	bl	800d7bc <rcl_get_security_options_from_environment>
 800cf42:	4604      	mov	r4, r0
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d1bb      	bne.n	800cec0 <rcl_init+0x13c>
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6948      	ldr	r0, [r1, #20]
 800cf4c:	3128      	adds	r1, #40	@ 0x28
 800cf4e:	3018      	adds	r0, #24
 800cf50:	f003 f95c 	bl	801020c <rmw_init>
 800cf54:	4604      	mov	r4, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0bd      	beq.n	800ced6 <rcl_init+0x152>
 800cf5a:	f7ff fe8f 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800cf5e:	4604      	mov	r4, r0
 800cf60:	e7ae      	b.n	800cec0 <rcl_init+0x13c>
 800cf62:	2201      	movs	r2, #1
 800cf64:	461c      	mov	r4, r3
 800cf66:	600a      	str	r2, [r1, #0]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	e7c6      	b.n	800cefa <rcl_init+0x176>
 800cf6c:	240a      	movs	r4, #10
 800cf6e:	e7b2      	b.n	800ced6 <rcl_init+0x152>
 800cf70:	2401      	movs	r4, #1
 800cf72:	e7a5      	b.n	800cec0 <rcl_init+0x13c>
 800cf74:	3024      	adds	r0, #36	@ 0x24
 800cf76:	f005 fdbf 	bl	8012af8 <rcl_get_default_domain_id>
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d19f      	bne.n	800cec0 <rcl_init+0x13c>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	6958      	ldr	r0, [r3, #20]
 800cf84:	e7c1      	b.n	800cf0a <rcl_init+0x186>
 800cf86:	bf00      	nop
 800cf88:	2000d9fc 	.word	0x2000d9fc

0800cf8c <rcl_get_zero_initialized_init_options>:
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	4770      	bx	lr

0800cf90 <rcl_init_options_init>:
 800cf90:	b084      	sub	sp, #16
 800cf92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf94:	b097      	sub	sp, #92	@ 0x5c
 800cf96:	ae1d      	add	r6, sp, #116	@ 0x74
 800cf98:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d058      	beq.n	800d052 <rcl_init_options_init+0xc2>
 800cfa0:	6803      	ldr	r3, [r0, #0]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	b133      	cbz	r3, 800cfb4 <rcl_init_options_init+0x24>
 800cfa6:	2464      	movs	r4, #100	@ 0x64
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	b017      	add	sp, #92	@ 0x5c
 800cfac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cfb0:	b004      	add	sp, #16
 800cfb2:	4770      	bx	lr
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7fb fa7f 	bl	80084b8 <rcutils_allocator_is_valid>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d049      	beq.n	800d052 <rcl_init_options_init+0xc2>
 800cfbe:	46b4      	mov	ip, r6
 800cfc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cfc4:	ac11      	add	r4, sp, #68	@ 0x44
 800cfc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfc8:	f8dc 3000 	ldr.w	r3, [ip]
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cfd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfd2:	2050      	movs	r0, #80	@ 0x50
 800cfd4:	4798      	blx	r3
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	6028      	str	r0, [r5, #0]
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d03b      	beq.n	800d056 <rcl_init_options_init+0xc6>
 800cfde:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cfe2:	4686      	mov	lr, r0
 800cfe4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cfe8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cfec:	f8dc 3000 	ldr.w	r3, [ip]
 800cff0:	f8ce 3000 	str.w	r3, [lr]
 800cff4:	a802      	add	r0, sp, #8
 800cff6:	f002 fdc3 	bl	800fb80 <rmw_get_zero_initialized_init_options>
 800cffa:	f10d 0e08 	add.w	lr, sp, #8
 800cffe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d002:	f104 0c18 	add.w	ip, r4, #24
 800d006:	682f      	ldr	r7, [r5, #0]
 800d008:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d00c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d014:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d01c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d020:	ac20      	add	r4, sp, #128	@ 0x80
 800d022:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d026:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d02a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d02e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d032:	f107 0018 	add.w	r0, r7, #24
 800d036:	f002 fff1 	bl	801001c <rmw_init_options_init>
 800d03a:	4604      	mov	r4, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d0b3      	beq.n	800cfa8 <rcl_init_options_init+0x18>
 800d040:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d042:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d044:	6828      	ldr	r0, [r5, #0]
 800d046:	4798      	blx	r3
 800d048:	4620      	mov	r0, r4
 800d04a:	f7ff fe17 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800d04e:	4604      	mov	r4, r0
 800d050:	e7aa      	b.n	800cfa8 <rcl_init_options_init+0x18>
 800d052:	240b      	movs	r4, #11
 800d054:	e7a8      	b.n	800cfa8 <rcl_init_options_init+0x18>
 800d056:	240a      	movs	r4, #10
 800d058:	e7a6      	b.n	800cfa8 <rcl_init_options_init+0x18>
 800d05a:	bf00      	nop

0800d05c <rcl_init_options_fini>:
 800d05c:	b530      	push	{r4, r5, lr}
 800d05e:	b087      	sub	sp, #28
 800d060:	b1f0      	cbz	r0, 800d0a0 <rcl_init_options_fini+0x44>
 800d062:	6803      	ldr	r3, [r0, #0]
 800d064:	4604      	mov	r4, r0
 800d066:	b1db      	cbz	r3, 800d0a0 <rcl_init_options_fini+0x44>
 800d068:	469c      	mov	ip, r3
 800d06a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d06e:	f10d 0e04 	add.w	lr, sp, #4
 800d072:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d076:	f8dc 3000 	ldr.w	r3, [ip]
 800d07a:	f8ce 3000 	str.w	r3, [lr]
 800d07e:	a801      	add	r0, sp, #4
 800d080:	f7fb fa1a 	bl	80084b8 <rcutils_allocator_is_valid>
 800d084:	b160      	cbz	r0, 800d0a0 <rcl_init_options_fini+0x44>
 800d086:	6820      	ldr	r0, [r4, #0]
 800d088:	3018      	adds	r0, #24
 800d08a:	f003 f877 	bl	801017c <rmw_init_options_fini>
 800d08e:	4605      	mov	r5, r0
 800d090:	b950      	cbnz	r0, 800d0a8 <rcl_init_options_fini+0x4c>
 800d092:	6820      	ldr	r0, [r4, #0]
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	9905      	ldr	r1, [sp, #20]
 800d098:	4798      	blx	r3
 800d09a:	4628      	mov	r0, r5
 800d09c:	b007      	add	sp, #28
 800d09e:	bd30      	pop	{r4, r5, pc}
 800d0a0:	250b      	movs	r5, #11
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	b007      	add	sp, #28
 800d0a6:	bd30      	pop	{r4, r5, pc}
 800d0a8:	f7ff fde8 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	e7f8      	b.n	800d0a2 <rcl_init_options_fini+0x46>

0800d0b0 <rcl_init_options_copy>:
 800d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b4:	b094      	sub	sp, #80	@ 0x50
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d058      	beq.n	800d16c <rcl_init_options_copy+0xbc>
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	6800      	ldr	r0, [r0, #0]
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d054      	beq.n	800d16c <rcl_init_options_copy+0xbc>
 800d0c2:	460e      	mov	r6, r1
 800d0c4:	f7fb f9f8 	bl	80084b8 <rcutils_allocator_is_valid>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d04f      	beq.n	800d16c <rcl_init_options_copy+0xbc>
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	d04d      	beq.n	800d16c <rcl_init_options_copy+0xbc>
 800d0d0:	6833      	ldr	r3, [r6, #0]
 800d0d2:	b123      	cbz	r3, 800d0de <rcl_init_options_copy+0x2e>
 800d0d4:	2464      	movs	r4, #100	@ 0x64
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	b014      	add	sp, #80	@ 0x50
 800d0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0de:	6827      	ldr	r7, [r4, #0]
 800d0e0:	46bc      	mov	ip, r7
 800d0e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d0e6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800d0e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d0ee:	f8d7 8000 	ldr.w	r8, [r7]
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	2050      	movs	r0, #80	@ 0x50
 800d0f8:	47c0      	blx	r8
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	6030      	str	r0, [r6, #0]
 800d0fe:	b3d0      	cbz	r0, 800d176 <rcl_init_options_copy+0xc6>
 800d100:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800d104:	4686      	mov	lr, r0
 800d106:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d10a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d10e:	f8dc 3000 	ldr.w	r3, [ip]
 800d112:	f8ce 3000 	str.w	r3, [lr]
 800d116:	4668      	mov	r0, sp
 800d118:	f002 fd32 	bl	800fb80 <rmw_get_zero_initialized_init_options>
 800d11c:	46ee      	mov	lr, sp
 800d11e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d122:	f105 0c18 	add.w	ip, r5, #24
 800d126:	6824      	ldr	r4, [r4, #0]
 800d128:	6835      	ldr	r5, [r6, #0]
 800d12a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d12e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d136:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d13e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d142:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d146:	f104 0018 	add.w	r0, r4, #24
 800d14a:	f105 0118 	add.w	r1, r5, #24
 800d14e:	f002 ffcd 	bl	80100ec <rmw_init_options_copy>
 800d152:	4604      	mov	r4, r0
 800d154:	2800      	cmp	r0, #0
 800d156:	d0be      	beq.n	800d0d6 <rcl_init_options_copy+0x26>
 800d158:	f7fb f9bc 	bl	80084d4 <rcutils_get_error_string>
 800d15c:	f7fb f9d0 	bl	8008500 <rcutils_reset_error>
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff ff7b 	bl	800d05c <rcl_init_options_fini>
 800d166:	b140      	cbz	r0, 800d17a <rcl_init_options_copy+0xca>
 800d168:	4604      	mov	r4, r0
 800d16a:	e7b4      	b.n	800d0d6 <rcl_init_options_copy+0x26>
 800d16c:	240b      	movs	r4, #11
 800d16e:	4620      	mov	r0, r4
 800d170:	b014      	add	sp, #80	@ 0x50
 800d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d176:	240a      	movs	r4, #10
 800d178:	e7ad      	b.n	800d0d6 <rcl_init_options_copy+0x26>
 800d17a:	4620      	mov	r0, r4
 800d17c:	b014      	add	sp, #80	@ 0x50
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f7ff bd7b 	b.w	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800d186:	bf00      	nop

0800d188 <rcl_get_localhost_only>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	2300      	movs	r3, #0
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	b1b8      	cbz	r0, 800d1c2 <rcl_get_localhost_only+0x3a>
 800d192:	4604      	mov	r4, r0
 800d194:	a901      	add	r1, sp, #4
 800d196:	480c      	ldr	r0, [pc, #48]	@ (800d1c8 <rcl_get_localhost_only+0x40>)
 800d198:	f002 fa36 	bl	800f608 <rcutils_get_env>
 800d19c:	b110      	cbz	r0, 800d1a4 <rcl_get_localhost_only+0x1c>
 800d19e:	2001      	movs	r0, #1
 800d1a0:	b002      	add	sp, #8
 800d1a2:	bd10      	pop	{r4, pc}
 800d1a4:	9b01      	ldr	r3, [sp, #4]
 800d1a6:	b113      	cbz	r3, 800d1ae <rcl_get_localhost_only+0x26>
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	2a31      	cmp	r2, #49	@ 0x31
 800d1ac:	d004      	beq.n	800d1b8 <rcl_get_localhost_only+0x30>
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	7023      	strb	r3, [r4, #0]
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1f7      	bne.n	800d1ae <rcl_get_localhost_only+0x26>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e7f6      	b.n	800d1b0 <rcl_get_localhost_only+0x28>
 800d1c2:	200b      	movs	r0, #11
 800d1c4:	b002      	add	sp, #8
 800d1c6:	bd10      	pop	{r4, pc}
 800d1c8:	08014e4c 	.word	0x08014e4c

0800d1cc <rcl_get_zero_initialized_node>:
 800d1cc:	4a03      	ldr	r2, [pc, #12]	@ (800d1dc <rcl_get_zero_initialized_node+0x10>)
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	4770      	bx	lr
 800d1dc:	08014e74 	.word	0x08014e74

0800d1e0 <rcl_node_init>:
 800d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	b0a9      	sub	sp, #164	@ 0xa4
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800d1ec:	a823      	add	r0, sp, #140	@ 0x8c
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	4615      	mov	r5, r2
 800d1f2:	461f      	mov	r7, r3
 800d1f4:	f005 fea8 	bl	8012f48 <rcl_guard_condition_get_default_options>
 800d1f8:	f1b8 0f00 	cmp.w	r8, #0
 800d1fc:	f000 80e6 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d200:	4640      	mov	r0, r8
 800d202:	f7fb f959 	bl	80084b8 <rcutils_allocator_is_valid>
 800d206:	2800      	cmp	r0, #0
 800d208:	f000 80e0 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d20c:	2e00      	cmp	r6, #0
 800d20e:	f000 80dd 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d212:	2d00      	cmp	r5, #0
 800d214:	f000 80da 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d218:	2c00      	cmp	r4, #0
 800d21a:	f000 80d7 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d21e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d222:	f1b9 0f00 	cmp.w	r9, #0
 800d226:	f040 80fd 	bne.w	800d424 <rcl_node_init+0x244>
 800d22a:	2f00      	cmp	r7, #0
 800d22c:	f000 80ce 	beq.w	800d3cc <rcl_node_init+0x1ec>
 800d230:	4638      	mov	r0, r7
 800d232:	f7ff fd41 	bl	800ccb8 <rcl_context_is_valid>
 800d236:	4682      	mov	sl, r0
 800d238:	2800      	cmp	r0, #0
 800d23a:	f000 80cd 	beq.w	800d3d8 <rcl_node_init+0x1f8>
 800d23e:	464a      	mov	r2, r9
 800d240:	a922      	add	r1, sp, #136	@ 0x88
 800d242:	4630      	mov	r0, r6
 800d244:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800d248:	f002 fe1c 	bl	800fe84 <rmw_validate_node_name>
 800d24c:	4681      	mov	r9, r0
 800d24e:	2800      	cmp	r0, #0
 800d250:	f040 80be 	bne.w	800d3d0 <rcl_node_init+0x1f0>
 800d254:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800d256:	2800      	cmp	r0, #0
 800d258:	f040 80f0 	bne.w	800d43c <rcl_node_init+0x25c>
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7f2 ffc9 	bl	80001f4 <strlen>
 800d262:	2800      	cmp	r0, #0
 800d264:	f040 80bb 	bne.w	800d3de <rcl_node_init+0x1fe>
 800d268:	4d7c      	ldr	r5, [pc, #496]	@ (800d45c <rcl_node_init+0x27c>)
 800d26a:	a922      	add	r1, sp, #136	@ 0x88
 800d26c:	2200      	movs	r2, #0
 800d26e:	4628      	mov	r0, r5
 800d270:	f002 fdea 	bl	800fe48 <rmw_validate_namespace>
 800d274:	4681      	mov	r9, r0
 800d276:	2800      	cmp	r0, #0
 800d278:	f040 80aa 	bne.w	800d3d0 <rcl_node_init+0x1f0>
 800d27c:	4682      	mov	sl, r0
 800d27e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800d280:	2800      	cmp	r0, #0
 800d282:	f040 80e0 	bne.w	800d446 <rcl_node_init+0x266>
 800d286:	f8d8 3000 	ldr.w	r3, [r8]
 800d28a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d28e:	2078      	movs	r0, #120	@ 0x78
 800d290:	4798      	blx	r3
 800d292:	4681      	mov	r9, r0
 800d294:	6060      	str	r0, [r4, #4]
 800d296:	2800      	cmp	r0, #0
 800d298:	f000 80ca 	beq.w	800d430 <rcl_node_init+0x250>
 800d29c:	2200      	movs	r2, #0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800d2a4:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800d2a8:	a808      	add	r0, sp, #32
 800d2aa:	f000 f907 	bl	800d4bc <rcl_node_get_default_options>
 800d2ae:	a908      	add	r1, sp, #32
 800d2b0:	4648      	mov	r0, r9
 800d2b2:	2268      	movs	r2, #104	@ 0x68
 800d2b4:	f006 fcff 	bl	8013cb6 <memcpy>
 800d2b8:	6861      	ldr	r1, [r4, #4]
 800d2ba:	6027      	str	r7, [r4, #0]
 800d2bc:	4640      	mov	r0, r8
 800d2be:	f000 f90b 	bl	800d4d8 <rcl_node_options_copy>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d158      	bne.n	800d378 <rcl_node_init+0x198>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7f2 ff94 	bl	80001f4 <strlen>
 800d2cc:	4428      	add	r0, r5
 800d2ce:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d2d2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800d2d6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	bf0c      	ite	eq
 800d2e0:	4b5f      	ldreq	r3, [pc, #380]	@ (800d460 <rcl_node_init+0x280>)
 800d2e2:	4b60      	ldrne	r3, [pc, #384]	@ (800d464 <rcl_node_init+0x284>)
 800d2e4:	9302      	str	r3, [sp, #8]
 800d2e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d2f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d2f4:	f002 f9b0 	bl	800f658 <rcutils_format_string_limit>
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800d2fe:	6818      	ldr	r0, [r3, #0]
 800d300:	4631      	mov	r1, r6
 800d302:	3028      	adds	r0, #40	@ 0x28
 800d304:	462a      	mov	r2, r5
 800d306:	6866      	ldr	r6, [r4, #4]
 800d308:	f003 f9d4 	bl	80106b4 <rmw_create_node>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	66b0      	str	r0, [r6, #104]	@ 0x68
 800d310:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d312:	2800      	cmp	r0, #0
 800d314:	d032      	beq.n	800d37c <rcl_node_init+0x19c>
 800d316:	f003 fa61 	bl	80107dc <rmw_node_get_graph_guard_condition>
 800d31a:	4681      	mov	r9, r0
 800d31c:	b360      	cbz	r0, 800d378 <rcl_node_init+0x198>
 800d31e:	f8d8 3000 	ldr.w	r3, [r8]
 800d322:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d326:	6866      	ldr	r6, [r4, #4]
 800d328:	2008      	movs	r0, #8
 800d32a:	4798      	blx	r3
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800d330:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800d334:	f1bb 0f00 	cmp.w	fp, #0
 800d338:	d020      	beq.n	800d37c <rcl_node_init+0x19c>
 800d33a:	a806      	add	r0, sp, #24
 800d33c:	f005 fd74 	bl	8012e28 <rcl_get_zero_initialized_guard_condition>
 800d340:	a806      	add	r0, sp, #24
 800d342:	c803      	ldmia	r0, {r0, r1}
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	46c4      	mov	ip, r8
 800d348:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800d34c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800d350:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d354:	ae23      	add	r6, sp, #140	@ 0x8c
 800d356:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d358:	f8dc 3000 	ldr.w	r3, [ip]
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	ab28      	add	r3, sp, #160	@ 0xa0
 800d360:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d364:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d368:	4649      	mov	r1, r9
 800d36a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d36c:	463a      	mov	r2, r7
 800d36e:	4670      	mov	r0, lr
 800d370:	f005 fd64 	bl	8012e3c <rcl_guard_condition_init_from_rmw>
 800d374:	4681      	mov	r9, r0
 800d376:	b328      	cbz	r0, 800d3c4 <rcl_node_init+0x1e4>
 800d378:	6863      	ldr	r3, [r4, #4]
 800d37a:	b1f3      	cbz	r3, 800d3ba <rcl_node_init+0x1da>
 800d37c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d37e:	b128      	cbz	r0, 800d38c <rcl_node_init+0x1ac>
 800d380:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d384:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d388:	4798      	blx	r3
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d38e:	b110      	cbz	r0, 800d396 <rcl_node_init+0x1b6>
 800d390:	f003 f9a8 	bl	80106e4 <rmw_destroy_node>
 800d394:	6863      	ldr	r3, [r4, #4]
 800d396:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d398:	b148      	cbz	r0, 800d3ae <rcl_node_init+0x1ce>
 800d39a:	f005 fdaf 	bl	8012efc <rcl_guard_condition_fini>
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d3a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d3a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3aa:	4798      	blx	r3
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3b8:	4798      	blx	r3
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e9c4 3300 	strd	r3, r3, [r4]
 800d3c0:	f04f 0901 	mov.w	r9, #1
 800d3c4:	f1ba 0f00 	cmp.w	sl, #0
 800d3c8:	d125      	bne.n	800d416 <rcl_node_init+0x236>
 800d3ca:	e001      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d3cc:	f04f 090b 	mov.w	r9, #11
 800d3d0:	4648      	mov	r0, r9
 800d3d2:	b029      	add	sp, #164	@ 0xa4
 800d3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800d3dc:	e7f8      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d3de:	782b      	ldrb	r3, [r5, #0]
 800d3e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3e2:	f43f af42 	beq.w	800d26a <rcl_node_init+0x8a>
 800d3e6:	9503      	str	r5, [sp, #12]
 800d3e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d468 <rcl_node_init+0x288>)
 800d3f0:	9302      	str	r3, [sp, #8]
 800d3f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d3fc:	f002 f92c 	bl	800f658 <rcutils_format_string_limit>
 800d400:	4605      	mov	r5, r0
 800d402:	b340      	cbz	r0, 800d456 <rcl_node_init+0x276>
 800d404:	2200      	movs	r2, #0
 800d406:	a922      	add	r1, sp, #136	@ 0x88
 800d408:	9222      	str	r2, [sp, #136]	@ 0x88
 800d40a:	f002 fd1d 	bl	800fe48 <rmw_validate_namespace>
 800d40e:	4681      	mov	r9, r0
 800d410:	2800      	cmp	r0, #0
 800d412:	f43f af34 	beq.w	800d27e <rcl_node_init+0x9e>
 800d416:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d41a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d41e:	4628      	mov	r0, r5
 800d420:	4798      	blx	r3
 800d422:	e7d5      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d424:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800d428:	4648      	mov	r0, r9
 800d42a:	b029      	add	sp, #164	@ 0xa4
 800d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d430:	f04f 090a 	mov.w	r9, #10
 800d434:	f1ba 0f00 	cmp.w	sl, #0
 800d438:	d1ed      	bne.n	800d416 <rcl_node_init+0x236>
 800d43a:	e7c9      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d43c:	f002 fd74 	bl	800ff28 <rmw_node_name_validation_result_string>
 800d440:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800d444:	e7c4      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d446:	f002 fd11 	bl	800fe6c <rmw_namespace_validation_result_string>
 800d44a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800d44e:	f1ba 0f00 	cmp.w	sl, #0
 800d452:	d1e0      	bne.n	800d416 <rcl_node_init+0x236>
 800d454:	e7bc      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d456:	f04f 090a 	mov.w	r9, #10
 800d45a:	e7b9      	b.n	800d3d0 <rcl_node_init+0x1f0>
 800d45c:	08014e64 	.word	0x08014e64
 800d460:	08014ce8 	.word	0x08014ce8
 800d464:	08014e6c 	.word	0x08014e6c
 800d468:	08014e68 	.word	0x08014e68

0800d46c <rcl_node_is_valid>:
 800d46c:	b130      	cbz	r0, 800d47c <rcl_node_is_valid+0x10>
 800d46e:	6843      	ldr	r3, [r0, #4]
 800d470:	b123      	cbz	r3, 800d47c <rcl_node_is_valid+0x10>
 800d472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d474:	b113      	cbz	r3, 800d47c <rcl_node_is_valid+0x10>
 800d476:	6800      	ldr	r0, [r0, #0]
 800d478:	f7ff bc1e 	b.w	800ccb8 <rcl_context_is_valid>
 800d47c:	2000      	movs	r0, #0
 800d47e:	4770      	bx	lr

0800d480 <rcl_node_get_name>:
 800d480:	b120      	cbz	r0, 800d48c <rcl_node_get_name+0xc>
 800d482:	6840      	ldr	r0, [r0, #4]
 800d484:	b110      	cbz	r0, 800d48c <rcl_node_get_name+0xc>
 800d486:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d488:	b100      	cbz	r0, 800d48c <rcl_node_get_name+0xc>
 800d48a:	6880      	ldr	r0, [r0, #8]
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop

0800d490 <rcl_node_get_namespace>:
 800d490:	b120      	cbz	r0, 800d49c <rcl_node_get_namespace+0xc>
 800d492:	6840      	ldr	r0, [r0, #4]
 800d494:	b110      	cbz	r0, 800d49c <rcl_node_get_namespace+0xc>
 800d496:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d498:	b100      	cbz	r0, 800d49c <rcl_node_get_namespace+0xc>
 800d49a:	68c0      	ldr	r0, [r0, #12]
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <rcl_node_get_options>:
 800d4a0:	b128      	cbz	r0, 800d4ae <rcl_node_get_options+0xe>
 800d4a2:	6840      	ldr	r0, [r0, #4]
 800d4a4:	b118      	cbz	r0, 800d4ae <rcl_node_get_options+0xe>
 800d4a6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	bf08      	it	eq
 800d4ac:	2000      	moveq	r0, #0
 800d4ae:	4770      	bx	lr

0800d4b0 <rcl_node_get_rmw_handle>:
 800d4b0:	b110      	cbz	r0, 800d4b8 <rcl_node_get_rmw_handle+0x8>
 800d4b2:	6840      	ldr	r0, [r0, #4]
 800d4b4:	b100      	cbz	r0, 800d4b8 <rcl_node_get_rmw_handle+0x8>
 800d4b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop

0800d4bc <rcl_node_get_default_options>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	2268      	movs	r2, #104	@ 0x68
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	f006 fb2e 	bl	8013b24 <memset>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7fa ffe7 	bl	800849c <rcutils_get_default_allocator>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	7523      	strb	r3, [r4, #20]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	bd10      	pop	{r4, pc}
 800d4d6:	bf00      	nop

0800d4d8 <rcl_node_options_copy>:
 800d4d8:	b1d0      	cbz	r0, 800d510 <rcl_node_options_copy+0x38>
 800d4da:	b570      	push	{r4, r5, r6, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	b1a9      	cbz	r1, 800d50c <rcl_node_options_copy+0x34>
 800d4e0:	4288      	cmp	r0, r1
 800d4e2:	4684      	mov	ip, r0
 800d4e4:	d012      	beq.n	800d50c <rcl_node_options_copy+0x34>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	8a86      	ldrh	r6, [r0, #20]
 800d4ea:	468e      	mov	lr, r1
 800d4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	f8ce 3000 	str.w	r3, [lr]
 800d4f8:	f10c 0118 	add.w	r1, ip, #24
 800d4fc:	2250      	movs	r2, #80	@ 0x50
 800d4fe:	82a6      	strh	r6, [r4, #20]
 800d500:	f104 0018 	add.w	r0, r4, #24
 800d504:	f006 fbd7 	bl	8013cb6 <memcpy>
 800d508:	2000      	movs	r0, #0
 800d50a:	bd70      	pop	{r4, r5, r6, pc}
 800d50c:	200b      	movs	r0, #11
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	200b      	movs	r0, #11
 800d512:	4770      	bx	lr

0800d514 <rcl_node_resolve_name>:
 800d514:	b082      	sub	sp, #8
 800d516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51a:	b091      	sub	sp, #68	@ 0x44
 800d51c:	ac1a      	add	r4, sp, #104	@ 0x68
 800d51e:	e884 000c 	stmia.w	r4, {r2, r3}
 800d522:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800d526:	2800      	cmp	r0, #0
 800d528:	d03b      	beq.n	800d5a2 <rcl_node_resolve_name+0x8e>
 800d52a:	460c      	mov	r4, r1
 800d52c:	4605      	mov	r5, r0
 800d52e:	f7ff ffb7 	bl	800d4a0 <rcl_node_get_options>
 800d532:	2800      	cmp	r0, #0
 800d534:	d037      	beq.n	800d5a6 <rcl_node_resolve_name+0x92>
 800d536:	4628      	mov	r0, r5
 800d538:	f7ff ffa2 	bl	800d480 <rcl_node_get_name>
 800d53c:	4606      	mov	r6, r0
 800d53e:	4628      	mov	r0, r5
 800d540:	f7ff ffa6 	bl	800d490 <rcl_node_get_namespace>
 800d544:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800d548:	4681      	mov	r9, r0
 800d54a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d54e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800d550:	46ac      	mov	ip, r5
 800d552:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d556:	f8de 3000 	ldr.w	r3, [lr]
 800d55a:	f8cc 3000 	str.w	r3, [ip]
 800d55e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d560:	b1fb      	cbz	r3, 800d5a2 <rcl_node_resolve_name+0x8e>
 800d562:	468a      	mov	sl, r1
 800d564:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800d568:	f002 f9ce 	bl	800f908 <rcutils_get_zero_initialized_string_map>
 800d56c:	ab10      	add	r3, sp, #64	@ 0x40
 800d56e:	9008      	str	r0, [sp, #32]
 800d570:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d574:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d578:	2100      	movs	r1, #0
 800d57a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d57e:	a808      	add	r0, sp, #32
 800d580:	f002 fa3a 	bl	800f9f8 <rcutils_string_map_init>
 800d584:	4607      	mov	r7, r0
 800d586:	b180      	cbz	r0, 800d5aa <rcl_node_resolve_name+0x96>
 800d588:	f7fa ffa4 	bl	80084d4 <rcutils_get_error_string>
 800d58c:	f7fa ffb8 	bl	8008500 <rcutils_reset_error>
 800d590:	2f0a      	cmp	r7, #10
 800d592:	bf18      	it	ne
 800d594:	2701      	movne	r7, #1
 800d596:	4638      	mov	r0, r7
 800d598:	b011      	add	sp, #68	@ 0x44
 800d59a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59e:	b002      	add	sp, #8
 800d5a0:	4770      	bx	lr
 800d5a2:	270b      	movs	r7, #11
 800d5a4:	e7f7      	b.n	800d596 <rcl_node_resolve_name+0x82>
 800d5a6:	2701      	movs	r7, #1
 800d5a8:	e7f5      	b.n	800d596 <rcl_node_resolve_name+0x82>
 800d5aa:	9009      	str	r0, [sp, #36]	@ 0x24
 800d5ac:	9007      	str	r0, [sp, #28]
 800d5ae:	a808      	add	r0, sp, #32
 800d5b0:	f005 fc34 	bl	8012e1c <rcl_get_default_topic_name_substitutions>
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	b1a8      	cbz	r0, 800d5e4 <rcl_node_resolve_name+0xd0>
 800d5b8:	280a      	cmp	r0, #10
 800d5ba:	9c07      	ldr	r4, [sp, #28]
 800d5bc:	d000      	beq.n	800d5c0 <rcl_node_resolve_name+0xac>
 800d5be:	2701      	movs	r7, #1
 800d5c0:	a808      	add	r0, sp, #32
 800d5c2:	f002 fa59 	bl	800fa78 <rcutils_string_map_fini>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d13d      	bne.n	800d646 <rcl_node_resolve_name+0x132>
 800d5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5cc:	4659      	mov	r1, fp
 800d5ce:	47d0      	blx	sl
 800d5d0:	4659      	mov	r1, fp
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	47d0      	blx	sl
 800d5d6:	f1b8 0f00 	cmp.w	r8, #0
 800d5da:	d0dc      	beq.n	800d596 <rcl_node_resolve_name+0x82>
 800d5dc:	2f67      	cmp	r7, #103	@ 0x67
 800d5de:	bf08      	it	eq
 800d5e0:	2768      	moveq	r7, #104	@ 0x68
 800d5e2:	e7d8      	b.n	800d596 <rcl_node_resolve_name+0x82>
 800d5e4:	ab09      	add	r3, sp, #36	@ 0x24
 800d5e6:	9305      	str	r3, [sp, #20]
 800d5e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5ea:	46ec      	mov	ip, sp
 800d5ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5f0:	682b      	ldr	r3, [r5, #0]
 800d5f2:	f8cc 3000 	str.w	r3, [ip]
 800d5f6:	464a      	mov	r2, r9
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	ab08      	add	r3, sp, #32
 800d5fe:	f005 faaf 	bl	8012b60 <rcl_expand_topic_name>
 800d602:	4607      	mov	r7, r0
 800d604:	b9b8      	cbnz	r0, 800d636 <rcl_node_resolve_name+0x122>
 800d606:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d608:	9009      	str	r0, [sp, #36]	@ 0x24
 800d60a:	4602      	mov	r2, r0
 800d60c:	a90a      	add	r1, sp, #40	@ 0x28
 800d60e:	4620      	mov	r0, r4
 800d610:	f002 fb56 	bl	800fcc0 <rmw_validate_full_topic_name>
 800d614:	b988      	cbnz	r0, 800d63a <rcl_node_resolve_name+0x126>
 800d616:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d618:	b9d5      	cbnz	r5, 800d650 <rcl_node_resolve_name+0x13c>
 800d61a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d61c:	a808      	add	r0, sp, #32
 800d61e:	601c      	str	r4, [r3, #0]
 800d620:	f002 fa2a 	bl	800fa78 <rcutils_string_map_fini>
 800d624:	4607      	mov	r7, r0
 800d626:	b1a8      	cbz	r0, 800d654 <rcl_node_resolve_name+0x140>
 800d628:	f7fa ff54 	bl	80084d4 <rcutils_get_error_string>
 800d62c:	462c      	mov	r4, r5
 800d62e:	f7fa ff67 	bl	8008500 <rcutils_reset_error>
 800d632:	2701      	movs	r7, #1
 800d634:	e7c9      	b.n	800d5ca <rcl_node_resolve_name+0xb6>
 800d636:	9c07      	ldr	r4, [sp, #28]
 800d638:	e7c2      	b.n	800d5c0 <rcl_node_resolve_name+0xac>
 800d63a:	f7fa ff4b 	bl	80084d4 <rcutils_get_error_string>
 800d63e:	2701      	movs	r7, #1
 800d640:	f7fa ff5e 	bl	8008500 <rcutils_reset_error>
 800d644:	e7bc      	b.n	800d5c0 <rcl_node_resolve_name+0xac>
 800d646:	f7fa ff45 	bl	80084d4 <rcutils_get_error_string>
 800d64a:	f7fa ff59 	bl	8008500 <rcutils_reset_error>
 800d64e:	e7bc      	b.n	800d5ca <rcl_node_resolve_name+0xb6>
 800d650:	2767      	movs	r7, #103	@ 0x67
 800d652:	e7b5      	b.n	800d5c0 <rcl_node_resolve_name+0xac>
 800d654:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d656:	4659      	mov	r1, fp
 800d658:	47d0      	blx	sl
 800d65a:	4659      	mov	r1, fp
 800d65c:	4638      	mov	r0, r7
 800d65e:	47d0      	blx	sl
 800d660:	e799      	b.n	800d596 <rcl_node_resolve_name+0x82>
 800d662:	bf00      	nop

0800d664 <exact_match_lookup>:
 800d664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d666:	f102 0708 	add.w	r7, r2, #8
 800d66a:	460b      	mov	r3, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	4606      	mov	r6, r0
 800d670:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d674:	b085      	sub	sp, #20
 800d676:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d67a:	4618      	mov	r0, r3
 800d67c:	4919      	ldr	r1, [pc, #100]	@ (800d6e4 <exact_match_lookup+0x80>)
 800d67e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d682:	f001 ffdb 	bl	800f63c <rcutils_join_path>
 800d686:	7833      	ldrb	r3, [r6, #0]
 800d688:	2b2f      	cmp	r3, #47	@ 0x2f
 800d68a:	4605      	mov	r5, r0
 800d68c:	d023      	beq.n	800d6d6 <exact_match_lookup+0x72>
 800d68e:	f104 030c 	add.w	r3, r4, #12
 800d692:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d696:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d69a:	1c70      	adds	r0, r6, #1
 800d69c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d6a0:	f001 ffd2 	bl	800f648 <rcutils_to_native_path>
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d6aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	f001 ffc1 	bl	800f63c <rcutils_join_path>
 800d6ba:	6862      	ldr	r2, [r4, #4]
 800d6bc:	6921      	ldr	r1, [r4, #16]
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	461e      	mov	r6, r3
 800d6c4:	4790      	blx	r2
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	6921      	ldr	r1, [r4, #16]
 800d6cc:	4798      	blx	r3
 800d6ce:	4635      	mov	r5, r6
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	b005      	add	sp, #20
 800d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d6:	7873      	ldrb	r3, [r6, #1]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1d8      	bne.n	800d68e <exact_match_lookup+0x2a>
 800d6dc:	4628      	mov	r0, r5
 800d6de:	b005      	add	sp, #20
 800d6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	08014eb8 	.word	0x08014eb8

0800d6e8 <rcl_get_secure_root>:
 800d6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	b168      	cbz	r0, 800d70c <rcl_get_secure_root+0x24>
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	f7fa fedf 	bl	80084b8 <rcutils_allocator_is_valid>
 800d6fa:	b138      	cbz	r0, 800d70c <rcl_get_secure_root+0x24>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	482d      	ldr	r0, [pc, #180]	@ (800d7b4 <rcl_get_secure_root+0xcc>)
 800d700:	9303      	str	r3, [sp, #12]
 800d702:	a903      	add	r1, sp, #12
 800d704:	f001 ff80 	bl	800f608 <rcutils_get_env>
 800d708:	4605      	mov	r5, r0
 800d70a:	b120      	cbz	r0, 800d716 <rcl_get_secure_root+0x2e>
 800d70c:	2500      	movs	r5, #0
 800d70e:	4628      	mov	r0, r5
 800d710:	b005      	add	sp, #20
 800d712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	781a      	ldrb	r2, [r3, #0]
 800d71a:	2a00      	cmp	r2, #0
 800d71c:	d0f6      	beq.n	800d70c <rcl_get_secure_root+0x24>
 800d71e:	f104 090c 	add.w	r9, r4, #12
 800d722:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d726:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d72a:	4618      	mov	r0, r3
 800d72c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d730:	f002 f8ac 	bl	800f88c <rcutils_strdup>
 800d734:	4680      	mov	r8, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	d0e8      	beq.n	800d70c <rcl_get_secure_root+0x24>
 800d73a:	481f      	ldr	r0, [pc, #124]	@ (800d7b8 <rcl_get_secure_root+0xd0>)
 800d73c:	9503      	str	r5, [sp, #12]
 800d73e:	a903      	add	r1, sp, #12
 800d740:	f001 ff62 	bl	800f608 <rcutils_get_env>
 800d744:	b160      	cbz	r0, 800d760 <rcl_get_secure_root+0x78>
 800d746:	2600      	movs	r6, #0
 800d748:	6863      	ldr	r3, [r4, #4]
 800d74a:	6921      	ldr	r1, [r4, #16]
 800d74c:	4630      	mov	r0, r6
 800d74e:	4798      	blx	r3
 800d750:	4640      	mov	r0, r8
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	6921      	ldr	r1, [r4, #16]
 800d756:	4798      	blx	r3
 800d758:	4628      	mov	r0, r5
 800d75a:	b005      	add	sp, #20
 800d75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d760:	9b03      	ldr	r3, [sp, #12]
 800d762:	781e      	ldrb	r6, [r3, #0]
 800d764:	b1f6      	cbz	r6, 800d7a4 <rcl_get_secure_root+0xbc>
 800d766:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d76a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d76e:	4618      	mov	r0, r3
 800d770:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d774:	f002 f88a 	bl	800f88c <rcutils_strdup>
 800d778:	4606      	mov	r6, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d0e3      	beq.n	800d746 <rcl_get_secure_root+0x5e>
 800d77e:	4622      	mov	r2, r4
 800d780:	4641      	mov	r1, r8
 800d782:	f7ff ff6f 	bl	800d664 <exact_match_lookup>
 800d786:	4605      	mov	r5, r0
 800d788:	2d00      	cmp	r5, #0
 800d78a:	d0dd      	beq.n	800d748 <rcl_get_secure_root+0x60>
 800d78c:	4628      	mov	r0, r5
 800d78e:	f001 ff53 	bl	800f638 <rcutils_is_directory>
 800d792:	4603      	mov	r3, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	d1d7      	bne.n	800d748 <rcl_get_secure_root+0x60>
 800d798:	4628      	mov	r0, r5
 800d79a:	6921      	ldr	r1, [r4, #16]
 800d79c:	461d      	mov	r5, r3
 800d79e:	6863      	ldr	r3, [r4, #4]
 800d7a0:	4798      	blx	r3
 800d7a2:	e7d1      	b.n	800d748 <rcl_get_secure_root+0x60>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	4641      	mov	r1, r8
 800d7aa:	f7ff ff5b 	bl	800d664 <exact_match_lookup>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	e7ea      	b.n	800d788 <rcl_get_secure_root+0xa0>
 800d7b2:	bf00      	nop
 800d7b4:	08014ec4 	.word	0x08014ec4
 800d7b8:	08014edc 	.word	0x08014edc

0800d7bc <rcl_get_security_options_from_environment>:
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4606      	mov	r6, r0
 800d7c6:	460f      	mov	r7, r1
 800d7c8:	4820      	ldr	r0, [pc, #128]	@ (800d84c <rcl_get_security_options_from_environment+0x90>)
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	a901      	add	r1, sp, #4
 800d7ce:	4690      	mov	r8, r2
 800d7d0:	f001 ff1a 	bl	800f608 <rcutils_get_env>
 800d7d4:	b120      	cbz	r0, 800d7e0 <rcl_get_security_options_from_environment+0x24>
 800d7d6:	2501      	movs	r5, #1
 800d7d8:	4628      	mov	r0, r5
 800d7da:	b002      	add	sp, #8
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e0:	491b      	ldr	r1, [pc, #108]	@ (800d850 <rcl_get_security_options_from_environment+0x94>)
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	9801      	ldr	r0, [sp, #4]
 800d7e6:	f7f2 fcfb 	bl	80001e0 <strcmp>
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	b9e8      	cbnz	r0, 800d82a <rcl_get_security_options_from_environment+0x6e>
 800d7ee:	9001      	str	r0, [sp, #4]
 800d7f0:	f1b8 0f00 	cmp.w	r8, #0
 800d7f4:	d020      	beq.n	800d838 <rcl_get_security_options_from_environment+0x7c>
 800d7f6:	4817      	ldr	r0, [pc, #92]	@ (800d854 <rcl_get_security_options_from_environment+0x98>)
 800d7f8:	a901      	add	r1, sp, #4
 800d7fa:	f001 ff05 	bl	800f608 <rcutils_get_env>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1e9      	bne.n	800d7d6 <rcl_get_security_options_from_environment+0x1a>
 800d802:	4915      	ldr	r1, [pc, #84]	@ (800d858 <rcl_get_security_options_from_environment+0x9c>)
 800d804:	9801      	ldr	r0, [sp, #4]
 800d806:	f7f2 fceb 	bl	80001e0 <strcmp>
 800d80a:	fab0 f080 	clz	r0, r0
 800d80e:	0940      	lsrs	r0, r0, #5
 800d810:	f888 0000 	strb.w	r0, [r8]
 800d814:	4639      	mov	r1, r7
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ff66 	bl	800d6e8 <rcl_get_secure_root>
 800d81c:	b170      	cbz	r0, 800d83c <rcl_get_security_options_from_environment+0x80>
 800d81e:	f8c8 0004 	str.w	r0, [r8, #4]
 800d822:	4628      	mov	r0, r5
 800d824:	b002      	add	sp, #8
 800d826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82a:	4625      	mov	r5, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f888 4000 	strb.w	r4, [r8]
 800d832:	b002      	add	sp, #8
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	250b      	movs	r5, #11
 800d83a:	e7cd      	b.n	800d7d8 <rcl_get_security_options_from_environment+0x1c>
 800d83c:	f898 5000 	ldrb.w	r5, [r8]
 800d840:	f1a5 0501 	sub.w	r5, r5, #1
 800d844:	fab5 f585 	clz	r5, r5
 800d848:	096d      	lsrs	r5, r5, #5
 800d84a:	e7c5      	b.n	800d7d8 <rcl_get_security_options_from_environment+0x1c>
 800d84c:	08014e7c 	.word	0x08014e7c
 800d850:	08014e90 	.word	0x08014e90
 800d854:	08014e98 	.word	0x08014e98
 800d858:	08014eb0 	.word	0x08014eb0

0800d85c <rcl_service_get_rmw_handle>:
 800d85c:	b118      	cbz	r0, 800d866 <rcl_service_get_rmw_handle+0xa>
 800d85e:	6800      	ldr	r0, [r0, #0]
 800d860:	b108      	cbz	r0, 800d866 <rcl_service_get_rmw_handle+0xa>
 800d862:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d866:	4770      	bx	lr

0800d868 <rcl_take_request>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	468e      	mov	lr, r1
 800d86c:	460c      	mov	r4, r1
 800d86e:	4616      	mov	r6, r2
 800d870:	4605      	mov	r5, r0
 800d872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d876:	b08c      	sub	sp, #48	@ 0x30
 800d878:	f10d 0c18 	add.w	ip, sp, #24
 800d87c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d880:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d884:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d888:	b30d      	cbz	r5, 800d8ce <rcl_take_request+0x66>
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	b1fb      	cbz	r3, 800d8ce <rcl_take_request+0x66>
 800d88e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d892:	b1e0      	cbz	r0, 800d8ce <rcl_take_request+0x66>
 800d894:	b336      	cbz	r6, 800d8e4 <rcl_take_request+0x7c>
 800d896:	2300      	movs	r3, #0
 800d898:	f88d 3007 	strb.w	r3, [sp, #7]
 800d89c:	4632      	mov	r2, r6
 800d89e:	f10d 0307 	add.w	r3, sp, #7
 800d8a2:	a902      	add	r1, sp, #8
 800d8a4:	f002 ffee 	bl	8010884 <rmw_take_request>
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	b198      	cbz	r0, 800d8d4 <rcl_take_request+0x6c>
 800d8ac:	280a      	cmp	r0, #10
 800d8ae:	bf18      	it	ne
 800d8b0:	2501      	movne	r5, #1
 800d8b2:	f10d 0e18 	add.w	lr, sp, #24
 800d8b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8ba:	46a4      	mov	ip, r4
 800d8bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d8c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	b00c      	add	sp, #48	@ 0x30
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
 800d8ce:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800d8d2:	e7ee      	b.n	800d8b2 <rcl_take_request+0x4a>
 800d8d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d8d8:	f240 2359 	movw	r3, #601	@ 0x259
 800d8dc:	2a00      	cmp	r2, #0
 800d8de:	bf08      	it	eq
 800d8e0:	461d      	moveq	r5, r3
 800d8e2:	e7e6      	b.n	800d8b2 <rcl_take_request+0x4a>
 800d8e4:	250b      	movs	r5, #11
 800d8e6:	e7e4      	b.n	800d8b2 <rcl_take_request+0x4a>

0800d8e8 <rcl_send_response>:
 800d8e8:	b170      	cbz	r0, 800d908 <rcl_send_response+0x20>
 800d8ea:	6800      	ldr	r0, [r0, #0]
 800d8ec:	b160      	cbz	r0, 800d908 <rcl_send_response+0x20>
 800d8ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d8f2:	b148      	cbz	r0, 800d908 <rcl_send_response+0x20>
 800d8f4:	b159      	cbz	r1, 800d90e <rcl_send_response+0x26>
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	b15a      	cbz	r2, 800d912 <rcl_send_response+0x2a>
 800d8fa:	f003 f821 	bl	8010940 <rmw_send_response>
 800d8fe:	b110      	cbz	r0, 800d906 <rcl_send_response+0x1e>
 800d900:	2802      	cmp	r0, #2
 800d902:	bf18      	it	ne
 800d904:	2001      	movne	r0, #1
 800d906:	bd10      	pop	{r4, pc}
 800d908:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800d90c:	4770      	bx	lr
 800d90e:	200b      	movs	r0, #11
 800d910:	4770      	bx	lr
 800d912:	200b      	movs	r0, #11
 800d914:	bd10      	pop	{r4, pc}
 800d916:	bf00      	nop

0800d918 <rcl_service_is_valid>:
 800d918:	b130      	cbz	r0, 800d928 <rcl_service_is_valid+0x10>
 800d91a:	6800      	ldr	r0, [r0, #0]
 800d91c:	b120      	cbz	r0, 800d928 <rcl_service_is_valid+0x10>
 800d91e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d922:	3800      	subs	r0, #0
 800d924:	bf18      	it	ne
 800d926:	2001      	movne	r0, #1
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop

0800d92c <rcl_take>:
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d04a      	beq.n	800d9c6 <rcl_take+0x9a>
 800d930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d934:	4604      	mov	r4, r0
 800d936:	6800      	ldr	r0, [r0, #0]
 800d938:	b0a4      	sub	sp, #144	@ 0x90
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d03b      	beq.n	800d9b6 <rcl_take+0x8a>
 800d93e:	461f      	mov	r7, r3
 800d940:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d036      	beq.n	800d9b6 <rcl_take+0x8a>
 800d948:	460e      	mov	r6, r1
 800d94a:	2900      	cmp	r1, #0
 800d94c:	d039      	beq.n	800d9c2 <rcl_take+0x96>
 800d94e:	4615      	mov	r5, r2
 800d950:	2a00      	cmp	r2, #0
 800d952:	d03c      	beq.n	800d9ce <rcl_take+0xa2>
 800d954:	a802      	add	r0, sp, #8
 800d956:	f002 f9ab 	bl	800fcb0 <rmw_get_zero_initialized_message_info>
 800d95a:	f10d 0c08 	add.w	ip, sp, #8
 800d95e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d962:	46ae      	mov	lr, r5
 800d964:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d968:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d96c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d970:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d974:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d978:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800d97c:	f04f 0800 	mov.w	r8, #0
 800d980:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800d984:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800d988:	6822      	ldr	r2, [r4, #0]
 800d98a:	462b      	mov	r3, r5
 800d98c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800d990:	9700      	str	r7, [sp, #0]
 800d992:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800d996:	4631      	mov	r1, r6
 800d998:	f003 f91c 	bl	8010bd4 <rmw_take_with_info>
 800d99c:	4603      	mov	r3, r0
 800d99e:	b9c0      	cbnz	r0, 800d9d2 <rcl_take+0xa6>
 800d9a0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800d9a4:	f240 1291 	movw	r2, #401	@ 0x191
 800d9a8:	2900      	cmp	r1, #0
 800d9aa:	bf08      	it	eq
 800d9ac:	4613      	moveq	r3, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	b024      	add	sp, #144	@ 0x90
 800d9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	b024      	add	sp, #144	@ 0x90
 800d9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c2:	230b      	movs	r3, #11
 800d9c4:	e7f3      	b.n	800d9ae <rcl_take+0x82>
 800d9c6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	4770      	bx	lr
 800d9ce:	ad14      	add	r5, sp, #80	@ 0x50
 800d9d0:	e7c0      	b.n	800d954 <rcl_take+0x28>
 800d9d2:	f7ff f953 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	e7e9      	b.n	800d9ae <rcl_take+0x82>
 800d9da:	bf00      	nop

0800d9dc <rcl_subscription_get_rmw_handle>:
 800d9dc:	b118      	cbz	r0, 800d9e6 <rcl_subscription_get_rmw_handle+0xa>
 800d9de:	6800      	ldr	r0, [r0, #0]
 800d9e0:	b108      	cbz	r0, 800d9e6 <rcl_subscription_get_rmw_handle+0xa>
 800d9e2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800d9e6:	4770      	bx	lr

0800d9e8 <rcl_subscription_is_valid>:
 800d9e8:	b130      	cbz	r0, 800d9f8 <rcl_subscription_is_valid+0x10>
 800d9ea:	6800      	ldr	r0, [r0, #0]
 800d9ec:	b120      	cbz	r0, 800d9f8 <rcl_subscription_is_valid+0x10>
 800d9ee:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800d9f2:	3800      	subs	r0, #0
 800d9f4:	bf18      	it	ne
 800d9f6:	2001      	movne	r0, #1
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop

0800d9fc <rcl_get_system_time>:
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	f7fa bd9b 	b.w	8008538 <rcutils_system_time_now>
 800da02:	bf00      	nop

0800da04 <rcl_get_steady_time>:
 800da04:	4608      	mov	r0, r1
 800da06:	f7fa bdbf 	b.w	8008588 <rcutils_steady_time_now>
 800da0a:	bf00      	nop

0800da0c <rcl_get_ros_time>:
 800da0c:	7a03      	ldrb	r3, [r0, #8]
 800da0e:	b510      	push	{r4, lr}
 800da10:	460c      	mov	r4, r1
 800da12:	b133      	cbz	r3, 800da22 <rcl_get_ros_time+0x16>
 800da14:	2105      	movs	r1, #5
 800da16:	f001 fd53 	bl	800f4c0 <__atomic_load_8>
 800da1a:	e9c4 0100 	strd	r0, r1, [r4]
 800da1e:	2000      	movs	r0, #0
 800da20:	bd10      	pop	{r4, pc}
 800da22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da26:	4608      	mov	r0, r1
 800da28:	f7fa bd86 	b.w	8008538 <rcutils_system_time_now>

0800da2c <rcl_clock_init>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	4605      	mov	r5, r0
 800da30:	4610      	mov	r0, r2
 800da32:	4614      	mov	r4, r2
 800da34:	460e      	mov	r6, r1
 800da36:	f7fa fd3f 	bl	80084b8 <rcutils_allocator_is_valid>
 800da3a:	b128      	cbz	r0, 800da48 <rcl_clock_init+0x1c>
 800da3c:	2d03      	cmp	r5, #3
 800da3e:	d803      	bhi.n	800da48 <rcl_clock_init+0x1c>
 800da40:	e8df f005 	tbb	[pc, r5]
 800da44:	06532e1d 	.word	0x06532e1d
 800da48:	f04f 0c0b 	mov.w	ip, #11
 800da4c:	4660      	mov	r0, ip
 800da4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da50:	2e00      	cmp	r6, #0
 800da52:	d0f9      	beq.n	800da48 <rcl_clock_init+0x1c>
 800da54:	2c00      	cmp	r4, #0
 800da56:	d0f7      	beq.n	800da48 <rcl_clock_init+0x1c>
 800da58:	2300      	movs	r3, #0
 800da5a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800da5e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800db14 <rcl_clock_init+0xe8>
 800da62:	6133      	str	r3, [r6, #16]
 800da64:	f106 0514 	add.w	r5, r6, #20
 800da68:	469c      	mov	ip, r3
 800da6a:	2703      	movs	r7, #3
 800da6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	602b      	str	r3, [r5, #0]
 800da74:	7037      	strb	r7, [r6, #0]
 800da76:	f8c6 e00c 	str.w	lr, [r6, #12]
 800da7a:	4660      	mov	r0, ip
 800da7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da7e:	2e00      	cmp	r6, #0
 800da80:	d0e2      	beq.n	800da48 <rcl_clock_init+0x1c>
 800da82:	2300      	movs	r3, #0
 800da84:	7033      	strb	r3, [r6, #0]
 800da86:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800da8a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800da8e:	469c      	mov	ip, r3
 800da90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da92:	f106 0514 	add.w	r5, r6, #20
 800da96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	4660      	mov	r0, ip
 800da9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa0:	2e00      	cmp	r6, #0
 800daa2:	d0d1      	beq.n	800da48 <rcl_clock_init+0x1c>
 800daa4:	2c00      	cmp	r4, #0
 800daa6:	d0cf      	beq.n	800da48 <rcl_clock_init+0x1c>
 800daa8:	2700      	movs	r7, #0
 800daaa:	7037      	strb	r7, [r6, #0]
 800daac:	46a4      	mov	ip, r4
 800daae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dab2:	f106 0514 	add.w	r5, r6, #20
 800dab6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800daba:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800dabe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dac0:	f8dc 3000 	ldr.w	r3, [ip]
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	6921      	ldr	r1, [r4, #16]
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	2010      	movs	r0, #16
 800dacc:	4798      	blx	r3
 800dace:	6130      	str	r0, [r6, #16]
 800dad0:	b1d0      	cbz	r0, 800db08 <rcl_clock_init+0xdc>
 800dad2:	2200      	movs	r2, #0
 800dad4:	2300      	movs	r3, #0
 800dad6:	e9c0 2300 	strd	r2, r3, [r0]
 800dada:	2301      	movs	r3, #1
 800dadc:	7207      	strb	r7, [r0, #8]
 800dade:	4a0c      	ldr	r2, [pc, #48]	@ (800db10 <rcl_clock_init+0xe4>)
 800dae0:	7033      	strb	r3, [r6, #0]
 800dae2:	46bc      	mov	ip, r7
 800dae4:	60f2      	str	r2, [r6, #12]
 800dae6:	4660      	mov	r0, ip
 800dae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daea:	2e00      	cmp	r6, #0
 800daec:	d0ac      	beq.n	800da48 <rcl_clock_init+0x1c>
 800daee:	2c00      	cmp	r4, #0
 800daf0:	d0aa      	beq.n	800da48 <rcl_clock_init+0x1c>
 800daf2:	2300      	movs	r3, #0
 800daf4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800daf8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800db18 <rcl_clock_init+0xec>
 800dafc:	6133      	str	r3, [r6, #16]
 800dafe:	f106 0514 	add.w	r5, r6, #20
 800db02:	469c      	mov	ip, r3
 800db04:	2702      	movs	r7, #2
 800db06:	e7b1      	b.n	800da6c <rcl_clock_init+0x40>
 800db08:	f04f 0c0a 	mov.w	ip, #10
 800db0c:	e79e      	b.n	800da4c <rcl_clock_init+0x20>
 800db0e:	bf00      	nop
 800db10:	0800da0d 	.word	0x0800da0d
 800db14:	0800da05 	.word	0x0800da05
 800db18:	0800d9fd 	.word	0x0800d9fd

0800db1c <rcl_clock_get_now>:
 800db1c:	b140      	cbz	r0, 800db30 <rcl_clock_get_now+0x14>
 800db1e:	b139      	cbz	r1, 800db30 <rcl_clock_get_now+0x14>
 800db20:	7803      	ldrb	r3, [r0, #0]
 800db22:	b11b      	cbz	r3, 800db2c <rcl_clock_get_now+0x10>
 800db24:	68c3      	ldr	r3, [r0, #12]
 800db26:	b10b      	cbz	r3, 800db2c <rcl_clock_get_now+0x10>
 800db28:	6900      	ldr	r0, [r0, #16]
 800db2a:	4718      	bx	r3
 800db2c:	2001      	movs	r0, #1
 800db2e:	4770      	bx	lr
 800db30:	200b      	movs	r0, #11
 800db32:	4770      	bx	lr

0800db34 <rcl_timer_call>:
 800db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db38:	b087      	sub	sp, #28
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d06d      	beq.n	800dc1a <rcl_timer_call+0xe6>
 800db3e:	6803      	ldr	r3, [r0, #0]
 800db40:	4604      	mov	r4, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d063      	beq.n	800dc0e <rcl_timer_call+0xda>
 800db46:	f3bf 8f5b 	dmb	ish
 800db4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db4e:	f3bf 8f5b 	dmb	ish
 800db52:	2b00      	cmp	r3, #0
 800db54:	d150      	bne.n	800dbf8 <rcl_timer_call+0xc4>
 800db56:	6803      	ldr	r3, [r0, #0]
 800db58:	a904      	add	r1, sp, #16
 800db5a:	6818      	ldr	r0, [r3, #0]
 800db5c:	f7ff ffde 	bl	800db1c <rcl_clock_get_now>
 800db60:	4605      	mov	r5, r0
 800db62:	2800      	cmp	r0, #0
 800db64:	d14a      	bne.n	800dbfc <rcl_timer_call+0xc8>
 800db66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	db4a      	blt.n	800dc04 <rcl_timer_call+0xd0>
 800db6e:	6820      	ldr	r0, [r4, #0]
 800db70:	f04f 0a05 	mov.w	sl, #5
 800db74:	f8cd a000 	str.w	sl, [sp]
 800db78:	3020      	adds	r0, #32
 800db7a:	f001 fd0d 	bl	800f598 <__atomic_exchange_8>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	f3bf 8f5b 	dmb	ish
 800db84:	4680      	mov	r8, r0
 800db86:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800db8a:	f3bf 8f5b 	dmb	ish
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	4689      	mov	r9, r1
 800db92:	3028      	adds	r0, #40	@ 0x28
 800db94:	4651      	mov	r1, sl
 800db96:	f001 fc93 	bl	800f4c0 <__atomic_load_8>
 800db9a:	4606      	mov	r6, r0
 800db9c:	6820      	ldr	r0, [r4, #0]
 800db9e:	460f      	mov	r7, r1
 800dba0:	3018      	adds	r0, #24
 800dba2:	4651      	mov	r1, sl
 800dba4:	f001 fc8c 	bl	800f4c0 <__atomic_load_8>
 800dba8:	1836      	adds	r6, r6, r0
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4682      	mov	sl, r0
 800dbae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800dbb2:	eb47 0701 	adc.w	r7, r7, r1
 800dbb6:	4286      	cmp	r6, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	eb77 010c 	sbcs.w	r1, r7, ip
 800dbbe:	da04      	bge.n	800dbca <rcl_timer_call+0x96>
 800dbc0:	ea53 0102 	orrs.w	r1, r3, r2
 800dbc4:	d12e      	bne.n	800dc24 <rcl_timer_call+0xf0>
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	4667      	mov	r7, ip
 800dbca:	6820      	ldr	r0, [r4, #0]
 800dbcc:	2105      	movs	r1, #5
 800dbce:	4632      	mov	r2, r6
 800dbd0:	463b      	mov	r3, r7
 800dbd2:	3028      	adds	r0, #40	@ 0x28
 800dbd4:	9100      	str	r1, [sp, #0]
 800dbd6:	f001 fca9 	bl	800f52c <__atomic_store_8>
 800dbda:	f1bb 0f00 	cmp.w	fp, #0
 800dbde:	d00d      	beq.n	800dbfc <rcl_timer_call+0xc8>
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	9b05      	ldr	r3, [sp, #20]
 800dbe4:	ebb2 0208 	subs.w	r2, r2, r8
 800dbe8:	4620      	mov	r0, r4
 800dbea:	eb63 0309 	sbc.w	r3, r3, r9
 800dbee:	47d8      	blx	fp
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	b007      	add	sp, #28
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	f240 3521 	movw	r5, #801	@ 0x321
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	b007      	add	sp, #28
 800dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	2501      	movs	r5, #1
 800dc06:	4628      	mov	r0, r5
 800dc08:	b007      	add	sp, #28
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800dc12:	4628      	mov	r0, r5
 800dc14:	b007      	add	sp, #28
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1a:	250b      	movs	r5, #11
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	b007      	add	sp, #28
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	1b80      	subs	r0, r0, r6
 800dc26:	eb6c 0107 	sbc.w	r1, ip, r7
 800dc2a:	3801      	subs	r0, #1
 800dc2c:	f161 0100 	sbc.w	r1, r1, #0
 800dc30:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800dc34:	f7f2 fb3c 	bl	80002b0 <__aeabi_ldivmod>
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	f141 0100 	adc.w	r1, r1, #0
 800dc40:	fb00 f303 	mul.w	r3, r0, r3
 800dc44:	fb01 330a 	mla	r3, r1, sl, r3
 800dc48:	fba0 0a0a 	umull	r0, sl, r0, sl
 800dc4c:	1986      	adds	r6, r0, r6
 800dc4e:	4453      	add	r3, sl
 800dc50:	eb43 0707 	adc.w	r7, r3, r7
 800dc54:	e7b9      	b.n	800dbca <rcl_timer_call+0x96>
 800dc56:	bf00      	nop

0800dc58 <rcl_timer_is_ready>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	b378      	cbz	r0, 800dcbe <rcl_timer_is_ready+0x66>
 800dc5e:	6803      	ldr	r3, [r0, #0]
 800dc60:	4604      	mov	r4, r0
 800dc62:	b383      	cbz	r3, 800dcc6 <rcl_timer_is_ready+0x6e>
 800dc64:	460d      	mov	r5, r1
 800dc66:	b351      	cbz	r1, 800dcbe <rcl_timer_is_ready+0x66>
 800dc68:	f3bf 8f5b 	dmb	ish
 800dc6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc70:	f3bf 8f5b 	dmb	ish
 800dc74:	b953      	cbnz	r3, 800dc8c <rcl_timer_is_ready+0x34>
 800dc76:	6803      	ldr	r3, [r0, #0]
 800dc78:	4669      	mov	r1, sp
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	f7ff ff4e 	bl	800db1c <rcl_clock_get_now>
 800dc80:	4606      	mov	r6, r0
 800dc82:	b140      	cbz	r0, 800dc96 <rcl_timer_is_ready+0x3e>
 800dc84:	f240 3321 	movw	r3, #801	@ 0x321
 800dc88:	4298      	cmp	r0, r3
 800dc8a:	d101      	bne.n	800dc90 <rcl_timer_is_ready+0x38>
 800dc8c:	2600      	movs	r6, #0
 800dc8e:	702e      	strb	r6, [r5, #0]
 800dc90:	4630      	mov	r0, r6
 800dc92:	b002      	add	sp, #8
 800dc94:	bd70      	pop	{r4, r5, r6, pc}
 800dc96:	6820      	ldr	r0, [r4, #0]
 800dc98:	2105      	movs	r1, #5
 800dc9a:	3028      	adds	r0, #40	@ 0x28
 800dc9c:	f001 fc10 	bl	800f4c0 <__atomic_load_8>
 800dca0:	9b00      	ldr	r3, [sp, #0]
 800dca2:	1ac0      	subs	r0, r0, r3
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	eb61 0103 	sbc.w	r1, r1, r3
 800dcaa:	2801      	cmp	r0, #1
 800dcac:	f171 0300 	sbcs.w	r3, r1, #0
 800dcb0:	bfb4      	ite	lt
 800dcb2:	2301      	movlt	r3, #1
 800dcb4:	2300      	movge	r3, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	702b      	strb	r3, [r5, #0]
 800dcba:	b002      	add	sp, #8
 800dcbc:	bd70      	pop	{r4, r5, r6, pc}
 800dcbe:	260b      	movs	r6, #11
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	b002      	add	sp, #8
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
 800dcc6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800dcca:	e7e1      	b.n	800dc90 <rcl_timer_is_ready+0x38>

0800dccc <rcl_timer_get_time_until_next_call>:
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	b330      	cbz	r0, 800dd20 <rcl_timer_get_time_until_next_call+0x54>
 800dcd2:	6803      	ldr	r3, [r0, #0]
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	b33b      	cbz	r3, 800dd28 <rcl_timer_get_time_until_next_call+0x5c>
 800dcd8:	460d      	mov	r5, r1
 800dcda:	b309      	cbz	r1, 800dd20 <rcl_timer_get_time_until_next_call+0x54>
 800dcdc:	f3bf 8f5b 	dmb	ish
 800dce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dce4:	f3bf 8f5b 	dmb	ish
 800dce8:	b9ab      	cbnz	r3, 800dd16 <rcl_timer_get_time_until_next_call+0x4a>
 800dcea:	6803      	ldr	r3, [r0, #0]
 800dcec:	4669      	mov	r1, sp
 800dcee:	6818      	ldr	r0, [r3, #0]
 800dcf0:	f7ff ff14 	bl	800db1c <rcl_clock_get_now>
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	b958      	cbnz	r0, 800dd10 <rcl_timer_get_time_until_next_call+0x44>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	2105      	movs	r1, #5
 800dcfc:	3028      	adds	r0, #40	@ 0x28
 800dcfe:	f001 fbdf 	bl	800f4c0 <__atomic_load_8>
 800dd02:	9b00      	ldr	r3, [sp, #0]
 800dd04:	1ac0      	subs	r0, r0, r3
 800dd06:	9b01      	ldr	r3, [sp, #4]
 800dd08:	6028      	str	r0, [r5, #0]
 800dd0a:	eb61 0103 	sbc.w	r1, r1, r3
 800dd0e:	6069      	str	r1, [r5, #4]
 800dd10:	4630      	mov	r0, r6
 800dd12:	b002      	add	sp, #8
 800dd14:	bd70      	pop	{r4, r5, r6, pc}
 800dd16:	f240 3621 	movw	r6, #801	@ 0x321
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	b002      	add	sp, #8
 800dd1e:	bd70      	pop	{r4, r5, r6, pc}
 800dd20:	260b      	movs	r6, #11
 800dd22:	4630      	mov	r0, r6
 800dd24:	b002      	add	sp, #8
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800dd2c:	e7f0      	b.n	800dd10 <rcl_timer_get_time_until_next_call+0x44>
 800dd2e:	bf00      	nop

0800dd30 <rcl_timer_get_guard_condition>:
 800dd30:	b130      	cbz	r0, 800dd40 <rcl_timer_get_guard_condition+0x10>
 800dd32:	6800      	ldr	r0, [r0, #0]
 800dd34:	b120      	cbz	r0, 800dd40 <rcl_timer_get_guard_condition+0x10>
 800dd36:	68c3      	ldr	r3, [r0, #12]
 800dd38:	b10b      	cbz	r3, 800dd3e <rcl_timer_get_guard_condition+0xe>
 800dd3a:	3008      	adds	r0, #8
 800dd3c:	4770      	bx	lr
 800dd3e:	4618      	mov	r0, r3
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop

0800dd44 <rcl_validate_enclave_name_with_size>:
 800dd44:	b378      	cbz	r0, 800dda6 <rcl_validate_enclave_name_with_size+0x62>
 800dd46:	b570      	push	{r4, r5, r6, lr}
 800dd48:	4615      	mov	r5, r2
 800dd4a:	b0c2      	sub	sp, #264	@ 0x108
 800dd4c:	b302      	cbz	r2, 800dd90 <rcl_validate_enclave_name_with_size+0x4c>
 800dd4e:	461e      	mov	r6, r3
 800dd50:	466a      	mov	r2, sp
 800dd52:	ab01      	add	r3, sp, #4
 800dd54:	460c      	mov	r4, r1
 800dd56:	f002 f829 	bl	800fdac <rmw_validate_namespace_with_size>
 800dd5a:	4684      	mov	ip, r0
 800dd5c:	b9e8      	cbnz	r0, 800dd9a <rcl_validate_enclave_name_with_size+0x56>
 800dd5e:	9b00      	ldr	r3, [sp, #0]
 800dd60:	b923      	cbnz	r3, 800dd6c <rcl_validate_enclave_name_with_size+0x28>
 800dd62:	2300      	movs	r3, #0
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	4660      	mov	r0, ip
 800dd68:	b042      	add	sp, #264	@ 0x108
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	2b07      	cmp	r3, #7
 800dd6e:	d007      	beq.n	800dd80 <rcl_validate_enclave_name_with_size+0x3c>
 800dd70:	1e5a      	subs	r2, r3, #1
 800dd72:	2a05      	cmp	r2, #5
 800dd74:	d833      	bhi.n	800ddde <rcl_validate_enclave_name_with_size+0x9a>
 800dd76:	e8df f002 	tbb	[pc, r2]
 800dd7a:	2c2f      	.short	0x2c2f
 800dd7c:	1a232629 	.word	0x1a232629
 800dd80:	2cff      	cmp	r4, #255	@ 0xff
 800dd82:	d9ee      	bls.n	800dd62 <rcl_validate_enclave_name_with_size+0x1e>
 800dd84:	602b      	str	r3, [r5, #0]
 800dd86:	2e00      	cmp	r6, #0
 800dd88:	d0ed      	beq.n	800dd66 <rcl_validate_enclave_name_with_size+0x22>
 800dd8a:	23fe      	movs	r3, #254	@ 0xfe
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	e7ea      	b.n	800dd66 <rcl_validate_enclave_name_with_size+0x22>
 800dd90:	f04f 0c0b 	mov.w	ip, #11
 800dd94:	4660      	mov	r0, ip
 800dd96:	b042      	add	sp, #264	@ 0x108
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	f7fe ff6f 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 800dd9e:	4684      	mov	ip, r0
 800dda0:	4660      	mov	r0, ip
 800dda2:	b042      	add	sp, #264	@ 0x108
 800dda4:	bd70      	pop	{r4, r5, r6, pc}
 800dda6:	f04f 0c0b 	mov.w	ip, #11
 800ddaa:	4660      	mov	r0, ip
 800ddac:	4770      	bx	lr
 800ddae:	2306      	movs	r3, #6
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	2e00      	cmp	r6, #0
 800ddb4:	d0d7      	beq.n	800dd66 <rcl_validate_enclave_name_with_size+0x22>
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	6033      	str	r3, [r6, #0]
 800ddba:	4660      	mov	r0, ip
 800ddbc:	b042      	add	sp, #264	@ 0x108
 800ddbe:	bd70      	pop	{r4, r5, r6, pc}
 800ddc0:	2305      	movs	r3, #5
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	e7f5      	b.n	800ddb2 <rcl_validate_enclave_name_with_size+0x6e>
 800ddc6:	2304      	movs	r3, #4
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	e7f2      	b.n	800ddb2 <rcl_validate_enclave_name_with_size+0x6e>
 800ddcc:	2303      	movs	r3, #3
 800ddce:	602b      	str	r3, [r5, #0]
 800ddd0:	e7ef      	b.n	800ddb2 <rcl_validate_enclave_name_with_size+0x6e>
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	602b      	str	r3, [r5, #0]
 800ddd6:	e7ec      	b.n	800ddb2 <rcl_validate_enclave_name_with_size+0x6e>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	602b      	str	r3, [r5, #0]
 800dddc:	e7e9      	b.n	800ddb2 <rcl_validate_enclave_name_with_size+0x6e>
 800ddde:	4a04      	ldr	r2, [pc, #16]	@ (800ddf0 <rcl_validate_enclave_name_with_size+0xac>)
 800dde0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dde4:	a802      	add	r0, sp, #8
 800dde6:	f001 fd25 	bl	800f834 <rcutils_snprintf>
 800ddea:	f04f 0c01 	mov.w	ip, #1
 800ddee:	e7ba      	b.n	800dd66 <rcl_validate_enclave_name_with_size+0x22>
 800ddf0:	08014efc 	.word	0x08014efc

0800ddf4 <rcl_validate_enclave_name>:
 800ddf4:	b168      	cbz	r0, 800de12 <rcl_validate_enclave_name+0x1e>
 800ddf6:	b570      	push	{r4, r5, r6, lr}
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	4616      	mov	r6, r2
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	f7f2 f9f9 	bl	80001f4 <strlen>
 800de02:	4633      	mov	r3, r6
 800de04:	4601      	mov	r1, r0
 800de06:	462a      	mov	r2, r5
 800de08:	4620      	mov	r0, r4
 800de0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de0e:	f7ff bf99 	b.w	800dd44 <rcl_validate_enclave_name_with_size>
 800de12:	200b      	movs	r0, #11
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop

0800de18 <rcl_get_zero_initialized_wait_set>:
 800de18:	b510      	push	{r4, lr}
 800de1a:	4c08      	ldr	r4, [pc, #32]	@ (800de3c <rcl_get_zero_initialized_wait_set+0x24>)
 800de1c:	4686      	mov	lr, r0
 800de1e:	4684      	mov	ip, r0
 800de20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	f8cc 3000 	str.w	r3, [ip]
 800de38:	4670      	mov	r0, lr
 800de3a:	bd10      	pop	{r4, pc}
 800de3c:	08014f5c 	.word	0x08014f5c

0800de40 <rcl_wait_set_is_valid>:
 800de40:	b118      	cbz	r0, 800de4a <rcl_wait_set_is_valid+0xa>
 800de42:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800de44:	3800      	subs	r0, #0
 800de46:	bf18      	it	ne
 800de48:	2001      	movne	r0, #1
 800de4a:	4770      	bx	lr

0800de4c <rcl_wait_set_fini>:
 800de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	b082      	sub	sp, #8
 800de52:	2800      	cmp	r0, #0
 800de54:	f000 8095 	beq.w	800df82 <rcl_wait_set_fini+0x136>
 800de58:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800de5a:	4604      	mov	r4, r0
 800de5c:	2e00      	cmp	r6, #0
 800de5e:	f000 808c 	beq.w	800df7a <rcl_wait_set_fini+0x12e>
 800de62:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800de64:	f003 f8a4 	bl	8010fb0 <rmw_destroy_wait_set>
 800de68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800de6a:	1e06      	subs	r6, r0, #0
 800de6c:	bf18      	it	ne
 800de6e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800de72:	2d00      	cmp	r5, #0
 800de74:	f000 8081 	beq.w	800df7a <rcl_wait_set_fini+0x12e>
 800de78:	6820      	ldr	r0, [r4, #0]
 800de7a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800de7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800de80:	2700      	movs	r7, #0
 800de82:	6067      	str	r7, [r4, #4]
 800de84:	602f      	str	r7, [r5, #0]
 800de86:	b120      	cbz	r0, 800de92 <rcl_wait_set_fini+0x46>
 800de88:	9101      	str	r1, [sp, #4]
 800de8a:	47c0      	blx	r8
 800de8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800de8e:	9901      	ldr	r1, [sp, #4]
 800de90:	6027      	str	r7, [r4, #0]
 800de92:	68a8      	ldr	r0, [r5, #8]
 800de94:	b120      	cbz	r0, 800dea0 <rcl_wait_set_fini+0x54>
 800de96:	47c0      	blx	r8
 800de98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800de9a:	2300      	movs	r3, #0
 800de9c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800dea0:	68a0      	ldr	r0, [r4, #8]
 800dea2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800dea4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	f8c4 800c 	str.w	r8, [r4, #12]
 800deae:	f8c5 800c 	str.w	r8, [r5, #12]
 800deb2:	b128      	cbz	r0, 800dec0 <rcl_wait_set_fini+0x74>
 800deb4:	47b8      	blx	r7
 800deb6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800deb8:	f8c4 8008 	str.w	r8, [r4, #8]
 800debc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800debe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800dec0:	6968      	ldr	r0, [r5, #20]
 800dec2:	f04f 0800 	mov.w	r8, #0
 800dec6:	f8c5 8010 	str.w	r8, [r5, #16]
 800deca:	b128      	cbz	r0, 800ded8 <rcl_wait_set_fini+0x8c>
 800decc:	47b8      	blx	r7
 800dece:	f8c5 8014 	str.w	r8, [r5, #20]
 800ded2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ded4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ded6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ded8:	6920      	ldr	r0, [r4, #16]
 800deda:	f04f 0800 	mov.w	r8, #0
 800dede:	f8c4 8014 	str.w	r8, [r4, #20]
 800dee2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800dee6:	b128      	cbz	r0, 800def4 <rcl_wait_set_fini+0xa8>
 800dee8:	47b8      	blx	r7
 800deea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800deec:	f8c4 8010 	str.w	r8, [r4, #16]
 800def0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800def2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800def4:	69a0      	ldr	r0, [r4, #24]
 800def6:	f04f 0800 	mov.w	r8, #0
 800defa:	f8c4 801c 	str.w	r8, [r4, #28]
 800defe:	f8c5 8018 	str.w	r8, [r5, #24]
 800df02:	b128      	cbz	r0, 800df10 <rcl_wait_set_fini+0xc4>
 800df04:	9101      	str	r1, [sp, #4]
 800df06:	47b8      	blx	r7
 800df08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df0a:	9901      	ldr	r1, [sp, #4]
 800df0c:	f8c4 8018 	str.w	r8, [r4, #24]
 800df10:	6a28      	ldr	r0, [r5, #32]
 800df12:	b120      	cbz	r0, 800df1e <rcl_wait_set_fini+0xd2>
 800df14:	47b8      	blx	r7
 800df16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df18:	2300      	movs	r3, #0
 800df1a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800df1e:	6a20      	ldr	r0, [r4, #32]
 800df20:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800df24:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800df26:	2700      	movs	r7, #0
 800df28:	6267      	str	r7, [r4, #36]	@ 0x24
 800df2a:	626f      	str	r7, [r5, #36]	@ 0x24
 800df2c:	b120      	cbz	r0, 800df38 <rcl_wait_set_fini+0xec>
 800df2e:	9101      	str	r1, [sp, #4]
 800df30:	47c0      	blx	r8
 800df32:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df34:	9901      	ldr	r1, [sp, #4]
 800df36:	6227      	str	r7, [r4, #32]
 800df38:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800df3a:	b120      	cbz	r0, 800df46 <rcl_wait_set_fini+0xfa>
 800df3c:	47c0      	blx	r8
 800df3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df40:	2300      	movs	r3, #0
 800df42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800df46:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800df48:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800df4c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800df4e:	2700      	movs	r7, #0
 800df50:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800df52:	632f      	str	r7, [r5, #48]	@ 0x30
 800df54:	b120      	cbz	r0, 800df60 <rcl_wait_set_fini+0x114>
 800df56:	9101      	str	r1, [sp, #4]
 800df58:	47c0      	blx	r8
 800df5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df5c:	9901      	ldr	r1, [sp, #4]
 800df5e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800df60:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800df62:	b120      	cbz	r0, 800df6e <rcl_wait_set_fini+0x122>
 800df64:	47c0      	blx	r8
 800df66:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800df68:	2300      	movs	r3, #0
 800df6a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800df6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800df70:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800df72:	4628      	mov	r0, r5
 800df74:	4798      	blx	r3
 800df76:	2300      	movs	r3, #0
 800df78:	6323      	str	r3, [r4, #48]	@ 0x30
 800df7a:	4630      	mov	r0, r6
 800df7c:	b002      	add	sp, #8
 800df7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df82:	260b      	movs	r6, #11
 800df84:	4630      	mov	r0, r6
 800df86:	b002      	add	sp, #8
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df8c <rcl_wait_set_add_subscription>:
 800df8c:	b318      	cbz	r0, 800dfd6 <rcl_wait_set_add_subscription+0x4a>
 800df8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	4604      	mov	r4, r0
 800df94:	b30b      	cbz	r3, 800dfda <rcl_wait_set_add_subscription+0x4e>
 800df96:	b319      	cbz	r1, 800dfe0 <rcl_wait_set_add_subscription+0x54>
 800df98:	681d      	ldr	r5, [r3, #0]
 800df9a:	6840      	ldr	r0, [r0, #4]
 800df9c:	4285      	cmp	r5, r0
 800df9e:	d217      	bcs.n	800dfd0 <rcl_wait_set_add_subscription+0x44>
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	1c6e      	adds	r6, r5, #1
 800dfa4:	601e      	str	r6, [r3, #0]
 800dfa6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800dfaa:	b102      	cbz	r2, 800dfae <rcl_wait_set_add_subscription+0x22>
 800dfac:	6015      	str	r5, [r2, #0]
 800dfae:	4608      	mov	r0, r1
 800dfb0:	f7ff fd14 	bl	800d9dc <rcl_subscription_get_rmw_handle>
 800dfb4:	b150      	cbz	r0, 800dfcc <rcl_wait_set_add_subscription+0x40>
 800dfb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dfb8:	6842      	ldr	r2, [r0, #4]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfc0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dfc2:	6853      	ldr	r3, [r2, #4]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	6053      	str	r3, [r2, #4]
 800dfca:	bd70      	pop	{r4, r5, r6, pc}
 800dfcc:	2001      	movs	r0, #1
 800dfce:	bd70      	pop	{r4, r5, r6, pc}
 800dfd0:	f240 3086 	movw	r0, #902	@ 0x386
 800dfd4:	bd70      	pop	{r4, r5, r6, pc}
 800dfd6:	200b      	movs	r0, #11
 800dfd8:	4770      	bx	lr
 800dfda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	200b      	movs	r0, #11
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}

0800dfe4 <rcl_wait_set_clear>:
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d073      	beq.n	800e0d0 <rcl_wait_set_clear+0xec>
 800dfe8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dfea:	b510      	push	{r4, lr}
 800dfec:	4604      	mov	r4, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d070      	beq.n	800e0d4 <rcl_wait_set_clear+0xf0>
 800dff2:	6800      	ldr	r0, [r0, #0]
 800dff4:	b138      	cbz	r0, 800e006 <rcl_wait_set_clear+0x22>
 800dff6:	6862      	ldr	r2, [r4, #4]
 800dff8:	2100      	movs	r1, #0
 800dffa:	0092      	lsls	r2, r2, #2
 800dffc:	f005 fd92 	bl	8013b24 <memset>
 800e000:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e002:	2200      	movs	r2, #0
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	68a0      	ldr	r0, [r4, #8]
 800e008:	b138      	cbz	r0, 800e01a <rcl_wait_set_clear+0x36>
 800e00a:	68e2      	ldr	r2, [r4, #12]
 800e00c:	2100      	movs	r1, #0
 800e00e:	0092      	lsls	r2, r2, #2
 800e010:	f005 fd88 	bl	8013b24 <memset>
 800e014:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e016:	2200      	movs	r2, #0
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	69a0      	ldr	r0, [r4, #24]
 800e01c:	b138      	cbz	r0, 800e02e <rcl_wait_set_clear+0x4a>
 800e01e:	69e2      	ldr	r2, [r4, #28]
 800e020:	2100      	movs	r1, #0
 800e022:	0092      	lsls	r2, r2, #2
 800e024:	f005 fd7e 	bl	8013b24 <memset>
 800e028:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e02a:	2200      	movs	r2, #0
 800e02c:	619a      	str	r2, [r3, #24]
 800e02e:	6a20      	ldr	r0, [r4, #32]
 800e030:	b138      	cbz	r0, 800e042 <rcl_wait_set_clear+0x5e>
 800e032:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e034:	2100      	movs	r1, #0
 800e036:	0092      	lsls	r2, r2, #2
 800e038:	f005 fd74 	bl	8013b24 <memset>
 800e03c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e03e:	2200      	movs	r2, #0
 800e040:	625a      	str	r2, [r3, #36]	@ 0x24
 800e042:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e044:	b138      	cbz	r0, 800e056 <rcl_wait_set_clear+0x72>
 800e046:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e048:	2100      	movs	r1, #0
 800e04a:	0092      	lsls	r2, r2, #2
 800e04c:	f005 fd6a 	bl	8013b24 <memset>
 800e050:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e052:	2200      	movs	r2, #0
 800e054:	631a      	str	r2, [r3, #48]	@ 0x30
 800e056:	6920      	ldr	r0, [r4, #16]
 800e058:	b138      	cbz	r0, 800e06a <rcl_wait_set_clear+0x86>
 800e05a:	6962      	ldr	r2, [r4, #20]
 800e05c:	2100      	movs	r1, #0
 800e05e:	0092      	lsls	r2, r2, #2
 800e060:	f005 fd60 	bl	8013b24 <memset>
 800e064:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e066:	2200      	movs	r2, #0
 800e068:	641a      	str	r2, [r3, #64]	@ 0x40
 800e06a:	6898      	ldr	r0, [r3, #8]
 800e06c:	b138      	cbz	r0, 800e07e <rcl_wait_set_clear+0x9a>
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	2100      	movs	r1, #0
 800e072:	0092      	lsls	r2, r2, #2
 800e074:	f005 fd56 	bl	8013b24 <memset>
 800e078:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e07a:	2200      	movs	r2, #0
 800e07c:	605a      	str	r2, [r3, #4]
 800e07e:	6958      	ldr	r0, [r3, #20]
 800e080:	b138      	cbz	r0, 800e092 <rcl_wait_set_clear+0xae>
 800e082:	691a      	ldr	r2, [r3, #16]
 800e084:	2100      	movs	r1, #0
 800e086:	0092      	lsls	r2, r2, #2
 800e088:	f005 fd4c 	bl	8013b24 <memset>
 800e08c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e08e:	2200      	movs	r2, #0
 800e090:	611a      	str	r2, [r3, #16]
 800e092:	6a18      	ldr	r0, [r3, #32]
 800e094:	b138      	cbz	r0, 800e0a6 <rcl_wait_set_clear+0xc2>
 800e096:	69da      	ldr	r2, [r3, #28]
 800e098:	2100      	movs	r1, #0
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	f005 fd42 	bl	8013b24 <memset>
 800e0a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	61da      	str	r2, [r3, #28]
 800e0a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e0a8:	b138      	cbz	r0, 800e0ba <rcl_wait_set_clear+0xd6>
 800e0aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	0092      	lsls	r2, r2, #2
 800e0b0:	f005 fd38 	bl	8013b24 <memset>
 800e0b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	629a      	str	r2, [r3, #40]	@ 0x28
 800e0ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e0bc:	b138      	cbz	r0, 800e0ce <rcl_wait_set_clear+0xea>
 800e0be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	f005 fd2e 	bl	8013b24 <memset>
 800e0c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	6358      	str	r0, [r3, #52]	@ 0x34
 800e0ce:	bd10      	pop	{r4, pc}
 800e0d0:	200b      	movs	r0, #11
 800e0d2:	4770      	bx	lr
 800e0d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	bf00      	nop

0800e0dc <rcl_wait_set_resize>:
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	f000 8185 	beq.w	800e3ec <rcl_wait_set_resize+0x310>
 800e0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	f000 817f 	beq.w	800e3f0 <rcl_wait_set_resize+0x314>
 800e0f2:	f04f 0900 	mov.w	r9, #0
 800e0f6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800e0fa:	461f      	mov	r7, r3
 800e0fc:	4688      	mov	r8, r1
 800e0fe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800e102:	4616      	mov	r6, r2
 800e104:	f8c0 9004 	str.w	r9, [r0, #4]
 800e108:	f8c4 9000 	str.w	r9, [r4]
 800e10c:	2900      	cmp	r1, #0
 800e10e:	f000 80bd 	beq.w	800e28c <rcl_wait_set_resize+0x1b0>
 800e112:	008c      	lsls	r4, r1, #2
 800e114:	6800      	ldr	r0, [r0, #0]
 800e116:	9301      	str	r3, [sp, #4]
 800e118:	4652      	mov	r2, sl
 800e11a:	4621      	mov	r1, r4
 800e11c:	4798      	blx	r3
 800e11e:	9b01      	ldr	r3, [sp, #4]
 800e120:	6028      	str	r0, [r5, #0]
 800e122:	2800      	cmp	r0, #0
 800e124:	f000 80cb 	beq.w	800e2be <rcl_wait_set_resize+0x1e2>
 800e128:	4622      	mov	r2, r4
 800e12a:	4649      	mov	r1, r9
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f005 fcf9 	bl	8013b24 <memset>
 800e132:	f8c5 8004 	str.w	r8, [r5, #4]
 800e136:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800e13a:	9b01      	ldr	r3, [sp, #4]
 800e13c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800e140:	f8c8 9004 	str.w	r9, [r8, #4]
 800e144:	4652      	mov	r2, sl
 800e146:	4621      	mov	r1, r4
 800e148:	4798      	blx	r3
 800e14a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e14c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 80ac 	beq.w	800e2b0 <rcl_wait_set_resize+0x1d4>
 800e158:	4622      	mov	r2, r4
 800e15a:	4649      	mov	r1, r9
 800e15c:	4618      	mov	r0, r3
 800e15e:	f005 fce1 	bl	8013b24 <memset>
 800e162:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e164:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e168:	f04f 0800 	mov.w	r8, #0
 800e16c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800e170:	f8c5 800c 	str.w	r8, [r5, #12]
 800e174:	f8c4 800c 	str.w	r8, [r4, #12]
 800e178:	2e00      	cmp	r6, #0
 800e17a:	f040 80a4 	bne.w	800e2c6 <rcl_wait_set_resize+0x1ea>
 800e17e:	68a8      	ldr	r0, [r5, #8]
 800e180:	b128      	cbz	r0, 800e18e <rcl_wait_set_resize+0xb2>
 800e182:	4649      	mov	r1, r9
 800e184:	4790      	blx	r2
 800e186:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e188:	60ae      	str	r6, [r5, #8]
 800e18a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e18e:	f04f 0800 	mov.w	r8, #0
 800e192:	19f6      	adds	r6, r6, r7
 800e194:	f8c4 8010 	str.w	r8, [r4, #16]
 800e198:	f040 80ac 	bne.w	800e2f4 <rcl_wait_set_resize+0x218>
 800e19c:	6960      	ldr	r0, [r4, #20]
 800e19e:	b130      	cbz	r0, 800e1ae <rcl_wait_set_resize+0xd2>
 800e1a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	4798      	blx	r3
 800e1a6:	6166      	str	r6, [r4, #20]
 800e1a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e1aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e1ae:	2600      	movs	r6, #0
 800e1b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800e1b4:	616e      	str	r6, [r5, #20]
 800e1b6:	6426      	str	r6, [r4, #64]	@ 0x40
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	f040 80ad 	bne.w	800e318 <rcl_wait_set_resize+0x23c>
 800e1be:	6928      	ldr	r0, [r5, #16]
 800e1c0:	b138      	cbz	r0, 800e1d2 <rcl_wait_set_resize+0xf6>
 800e1c2:	4649      	mov	r1, r9
 800e1c4:	47d0      	blx	sl
 800e1c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e1c8:	612f      	str	r7, [r5, #16]
 800e1ca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800e1ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e1d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1d4:	2600      	movs	r6, #0
 800e1d6:	61ee      	str	r6, [r5, #28]
 800e1d8:	61a6      	str	r6, [r4, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f040 80af 	bne.w	800e33e <rcl_wait_set_resize+0x262>
 800e1e0:	69a8      	ldr	r0, [r5, #24]
 800e1e2:	b120      	cbz	r0, 800e1ee <rcl_wait_set_resize+0x112>
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	47d0      	blx	sl
 800e1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e1ec:	61ab      	str	r3, [r5, #24]
 800e1ee:	6a20      	ldr	r0, [r4, #32]
 800e1f0:	b128      	cbz	r0, 800e1fe <rcl_wait_set_resize+0x122>
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	47d0      	blx	sl
 800e1f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e200:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800e202:	2600      	movs	r6, #0
 800e204:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800e208:	626e      	str	r6, [r5, #36]	@ 0x24
 800e20a:	6266      	str	r6, [r4, #36]	@ 0x24
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 80b6 	beq.w	800e37e <rcl_wait_set_resize+0x2a2>
 800e212:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800e216:	6a28      	ldr	r0, [r5, #32]
 800e218:	463a      	mov	r2, r7
 800e21a:	4651      	mov	r1, sl
 800e21c:	47c8      	blx	r9
 800e21e:	6228      	str	r0, [r5, #32]
 800e220:	2800      	cmp	r0, #0
 800e222:	d04c      	beq.n	800e2be <rcl_wait_set_resize+0x1e2>
 800e224:	4652      	mov	r2, sl
 800e226:	4631      	mov	r1, r6
 800e228:	f005 fc7c 	bl	8013b24 <memset>
 800e22c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e22e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e230:	626b      	str	r3, [r5, #36]	@ 0x24
 800e232:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e234:	62a6      	str	r6, [r4, #40]	@ 0x28
 800e236:	463a      	mov	r2, r7
 800e238:	4651      	mov	r1, sl
 800e23a:	47c8      	blx	r9
 800e23c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e23e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800e240:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800e242:	2c00      	cmp	r4, #0
 800e244:	f000 80f0 	beq.w	800e428 <rcl_wait_set_resize+0x34c>
 800e248:	4620      	mov	r0, r4
 800e24a:	4652      	mov	r2, sl
 800e24c:	4631      	mov	r1, r6
 800e24e:	f005 fc69 	bl	8013b24 <memset>
 800e252:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e256:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800e258:	2600      	movs	r6, #0
 800e25a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800e25e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800e260:	6326      	str	r6, [r4, #48]	@ 0x30
 800e262:	2b00      	cmp	r3, #0
 800e264:	f040 809d 	bne.w	800e3a2 <rcl_wait_set_resize+0x2c6>
 800e268:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800e26a:	b120      	cbz	r0, 800e276 <rcl_wait_set_resize+0x19a>
 800e26c:	4639      	mov	r1, r7
 800e26e:	47c0      	blx	r8
 800e270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e272:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e274:	62ab      	str	r3, [r5, #40]	@ 0x28
 800e276:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800e278:	b310      	cbz	r0, 800e2c0 <rcl_wait_set_resize+0x1e4>
 800e27a:	4639      	mov	r1, r7
 800e27c:	47c0      	blx	r8
 800e27e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e280:	2000      	movs	r0, #0
 800e282:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800e286:	b003      	add	sp, #12
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	6800      	ldr	r0, [r0, #0]
 800e28e:	b120      	cbz	r0, 800e29a <rcl_wait_set_resize+0x1be>
 800e290:	4651      	mov	r1, sl
 800e292:	47d8      	blx	fp
 800e294:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e296:	f8c5 8000 	str.w	r8, [r5]
 800e29a:	68a0      	ldr	r0, [r4, #8]
 800e29c:	2800      	cmp	r0, #0
 800e29e:	f43f af61 	beq.w	800e164 <rcl_wait_set_resize+0x88>
 800e2a2:	4651      	mov	r1, sl
 800e2a4:	47d8      	blx	fp
 800e2a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800e2ae:	e759      	b.n	800e164 <rcl_wait_set_resize+0x88>
 800e2b0:	6828      	ldr	r0, [r5, #0]
 800e2b2:	9301      	str	r3, [sp, #4]
 800e2b4:	4651      	mov	r1, sl
 800e2b6:	47d8      	blx	fp
 800e2b8:	9b01      	ldr	r3, [sp, #4]
 800e2ba:	e9c5 3300 	strd	r3, r3, [r5]
 800e2be:	200a      	movs	r0, #10
 800e2c0:	b003      	add	sp, #12
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c6:	00b4      	lsls	r4, r6, #2
 800e2c8:	68a8      	ldr	r0, [r5, #8]
 800e2ca:	464a      	mov	r2, r9
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4798      	blx	r3
 800e2d0:	60a8      	str	r0, [r5, #8]
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d0f3      	beq.n	800e2be <rcl_wait_set_resize+0x1e2>
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	4641      	mov	r1, r8
 800e2da:	f005 fc23 	bl	8013b24 <memset>
 800e2de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e2e0:	60ee      	str	r6, [r5, #12]
 800e2e2:	f04f 0800 	mov.w	r8, #0
 800e2e6:	19f6      	adds	r6, r6, r7
 800e2e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e2ec:	f8c4 8010 	str.w	r8, [r4, #16]
 800e2f0:	f43f af54 	beq.w	800e19c <rcl_wait_set_resize+0xc0>
 800e2f4:	00b6      	lsls	r6, r6, #2
 800e2f6:	464a      	mov	r2, r9
 800e2f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e2fa:	6960      	ldr	r0, [r4, #20]
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	4798      	blx	r3
 800e300:	4681      	mov	r9, r0
 800e302:	6160      	str	r0, [r4, #20]
 800e304:	2800      	cmp	r0, #0
 800e306:	d076      	beq.n	800e3f6 <rcl_wait_set_resize+0x31a>
 800e308:	4632      	mov	r2, r6
 800e30a:	4641      	mov	r1, r8
 800e30c:	f005 fc0a 	bl	8013b24 <memset>
 800e310:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e312:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e316:	e74a      	b.n	800e1ae <rcl_wait_set_resize+0xd2>
 800e318:	00bc      	lsls	r4, r7, #2
 800e31a:	6928      	ldr	r0, [r5, #16]
 800e31c:	464a      	mov	r2, r9
 800e31e:	4621      	mov	r1, r4
 800e320:	47c0      	blx	r8
 800e322:	6128      	str	r0, [r5, #16]
 800e324:	2800      	cmp	r0, #0
 800e326:	d0ca      	beq.n	800e2be <rcl_wait_set_resize+0x1e2>
 800e328:	4622      	mov	r2, r4
 800e32a:	4631      	mov	r1, r6
 800e32c:	f005 fbfa 	bl	8013b24 <memset>
 800e330:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e332:	616f      	str	r7, [r5, #20]
 800e334:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800e338:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800e33c:	e749      	b.n	800e1d2 <rcl_wait_set_resize+0xf6>
 800e33e:	009c      	lsls	r4, r3, #2
 800e340:	69a8      	ldr	r0, [r5, #24]
 800e342:	464a      	mov	r2, r9
 800e344:	4621      	mov	r1, r4
 800e346:	47c0      	blx	r8
 800e348:	61a8      	str	r0, [r5, #24]
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d0b7      	beq.n	800e2be <rcl_wait_set_resize+0x1e2>
 800e34e:	4622      	mov	r2, r4
 800e350:	4631      	mov	r1, r6
 800e352:	f005 fbe7 	bl	8013b24 <memset>
 800e356:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800e358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e35a:	61eb      	str	r3, [r5, #28]
 800e35c:	6a38      	ldr	r0, [r7, #32]
 800e35e:	61fe      	str	r6, [r7, #28]
 800e360:	464a      	mov	r2, r9
 800e362:	4621      	mov	r1, r4
 800e364:	47c0      	blx	r8
 800e366:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e368:	6238      	str	r0, [r7, #32]
 800e36a:	6a1f      	ldr	r7, [r3, #32]
 800e36c:	2f00      	cmp	r7, #0
 800e36e:	d054      	beq.n	800e41a <rcl_wait_set_resize+0x33e>
 800e370:	4622      	mov	r2, r4
 800e372:	4631      	mov	r1, r6
 800e374:	4638      	mov	r0, r7
 800e376:	f005 fbd5 	bl	8013b24 <memset>
 800e37a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e37c:	e73f      	b.n	800e1fe <rcl_wait_set_resize+0x122>
 800e37e:	6a28      	ldr	r0, [r5, #32]
 800e380:	b120      	cbz	r0, 800e38c <rcl_wait_set_resize+0x2b0>
 800e382:	4639      	mov	r1, r7
 800e384:	47c0      	blx	r8
 800e386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e388:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e38a:	622b      	str	r3, [r5, #32]
 800e38c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e38e:	2800      	cmp	r0, #0
 800e390:	f43f af60 	beq.w	800e254 <rcl_wait_set_resize+0x178>
 800e394:	4639      	mov	r1, r7
 800e396:	47c0      	blx	r8
 800e398:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800e39a:	2300      	movs	r3, #0
 800e39c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800e3a0:	e758      	b.n	800e254 <rcl_wait_set_resize+0x178>
 800e3a2:	009c      	lsls	r4, r3, #2
 800e3a4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800e3a6:	463a      	mov	r2, r7
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	47c8      	blx	r9
 800e3ac:	62a8      	str	r0, [r5, #40]	@ 0x28
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d085      	beq.n	800e2be <rcl_wait_set_resize+0x1e2>
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	f005 fbb5 	bl	8013b24 <memset>
 800e3ba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800e3be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800e3c2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800e3c6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800e3ca:	463a      	mov	r2, r7
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	47c8      	blx	r9
 800e3d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e3d2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3d8:	b36b      	cbz	r3, 800e436 <rcl_wait_set_resize+0x35a>
 800e3da:	4622      	mov	r2, r4
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f005 fba0 	bl	8013b24 <memset>
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	b003      	add	sp, #12
 800e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ec:	200b      	movs	r0, #11
 800e3ee:	4770      	bx	lr
 800e3f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e3f4:	e764      	b.n	800e2c0 <rcl_wait_set_resize+0x1e4>
 800e3f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e3f8:	68a8      	ldr	r0, [r5, #8]
 800e3fa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800e3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3fe:	4798      	blx	r3
 800e400:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e402:	6928      	ldr	r0, [r5, #16]
 800e404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e406:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800e408:	f8c5 900c 	str.w	r9, [r5, #12]
 800e40c:	f8c5 9008 	str.w	r9, [r5, #8]
 800e410:	4790      	blx	r2
 800e412:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800e416:	200a      	movs	r0, #10
 800e418:	e752      	b.n	800e2c0 <rcl_wait_set_resize+0x1e4>
 800e41a:	69a8      	ldr	r0, [r5, #24]
 800e41c:	4649      	mov	r1, r9
 800e41e:	47d0      	blx	sl
 800e420:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800e424:	200a      	movs	r0, #10
 800e426:	e74b      	b.n	800e2c0 <rcl_wait_set_resize+0x1e4>
 800e428:	6a28      	ldr	r0, [r5, #32]
 800e42a:	4639      	mov	r1, r7
 800e42c:	47c0      	blx	r8
 800e42e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800e432:	200a      	movs	r0, #10
 800e434:	e744      	b.n	800e2c0 <rcl_wait_set_resize+0x1e4>
 800e436:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	4639      	mov	r1, r7
 800e43c:	47c0      	blx	r8
 800e43e:	9b01      	ldr	r3, [sp, #4]
 800e440:	200a      	movs	r0, #10
 800e442:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800e446:	e73b      	b.n	800e2c0 <rcl_wait_set_resize+0x1e4>

0800e448 <rcl_wait_set_init>:
 800e448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	4604      	mov	r4, r0
 800e450:	a810      	add	r0, sp, #64	@ 0x40
 800e452:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800e456:	460f      	mov	r7, r1
 800e458:	4690      	mov	r8, r2
 800e45a:	4699      	mov	r9, r3
 800e45c:	f7fa f82c 	bl	80084b8 <rcutils_allocator_is_valid>
 800e460:	2800      	cmp	r0, #0
 800e462:	d06b      	beq.n	800e53c <rcl_wait_set_init+0xf4>
 800e464:	2c00      	cmp	r4, #0
 800e466:	d069      	beq.n	800e53c <rcl_wait_set_init+0xf4>
 800e468:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e46a:	b125      	cbz	r5, 800e476 <rcl_wait_set_init+0x2e>
 800e46c:	2564      	movs	r5, #100	@ 0x64
 800e46e:	4628      	mov	r0, r5
 800e470:	b004      	add	sp, #16
 800e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e476:	f1ba 0f00 	cmp.w	sl, #0
 800e47a:	d05f      	beq.n	800e53c <rcl_wait_set_init+0xf4>
 800e47c:	4650      	mov	r0, sl
 800e47e:	f7fe fc1b 	bl	800ccb8 <rcl_context_is_valid>
 800e482:	2800      	cmp	r0, #0
 800e484:	d067      	beq.n	800e556 <rcl_wait_set_init+0x10e>
 800e486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e488:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800e48a:	205c      	movs	r0, #92	@ 0x5c
 800e48c:	4798      	blx	r3
 800e48e:	6320      	str	r0, [r4, #48]	@ 0x30
 800e490:	2800      	cmp	r0, #0
 800e492:	d062      	beq.n	800e55a <rcl_wait_set_init+0x112>
 800e494:	4629      	mov	r1, r5
 800e496:	225c      	movs	r2, #92	@ 0x5c
 800e498:	f005 fb44 	bl	8013b24 <memset>
 800e49c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800e4a0:	eb03 0e02 	add.w	lr, r3, r2
 800e4a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4a6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800e4a8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800e4ac:	449e      	add	lr, r3
 800e4ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4b2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800e4b6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800e4ba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800e4be:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800e4c2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800e4c6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800e4ca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800e4ce:	f8da a000 	ldr.w	sl, [sl]
 800e4d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e4d4:	44c6      	add	lr, r8
 800e4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800e4da:	602b      	str	r3, [r5, #0]
 800e4dc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800e4e0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800e4e4:	f002 fd5a 	bl	8010f9c <rmw_create_wait_set>
 800e4e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e4ea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800e4ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e4ee:	b350      	cbz	r0, 800e546 <rcl_wait_set_init+0xfe>
 800e4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	464b      	mov	r3, r9
 800e500:	4639      	mov	r1, r7
 800e502:	4620      	mov	r0, r4
 800e504:	f7ff fdea 	bl	800e0dc <rcl_wait_set_resize>
 800e508:	4605      	mov	r5, r0
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0af      	beq.n	800e46e <rcl_wait_set_init+0x26>
 800e50e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e510:	bb2b      	cbnz	r3, 800e55e <rcl_wait_set_init+0x116>
 800e512:	2600      	movs	r6, #0
 800e514:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800e518:	9600      	str	r6, [sp, #0]
 800e51a:	4633      	mov	r3, r6
 800e51c:	4632      	mov	r2, r6
 800e51e:	4631      	mov	r1, r6
 800e520:	4620      	mov	r0, r4
 800e522:	f7ff fddb 	bl	800e0dc <rcl_wait_set_resize>
 800e526:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e528:	2800      	cmp	r0, #0
 800e52a:	d0a0      	beq.n	800e46e <rcl_wait_set_init+0x26>
 800e52c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e52e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800e530:	4798      	blx	r3
 800e532:	4628      	mov	r0, r5
 800e534:	6326      	str	r6, [r4, #48]	@ 0x30
 800e536:	b004      	add	sp, #16
 800e538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53c:	250b      	movs	r5, #11
 800e53e:	4628      	mov	r0, r5
 800e540:	b004      	add	sp, #16
 800e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e546:	2501      	movs	r5, #1
 800e548:	f002 fd32 	bl	8010fb0 <rmw_destroy_wait_set>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	bf18      	it	ne
 800e550:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800e554:	e7dd      	b.n	800e512 <rcl_wait_set_init+0xca>
 800e556:	2565      	movs	r5, #101	@ 0x65
 800e558:	e789      	b.n	800e46e <rcl_wait_set_init+0x26>
 800e55a:	250a      	movs	r5, #10
 800e55c:	e787      	b.n	800e46e <rcl_wait_set_init+0x26>
 800e55e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e560:	e7f2      	b.n	800e548 <rcl_wait_set_init+0x100>
 800e562:	bf00      	nop

0800e564 <rcl_wait_set_add_guard_condition>:
 800e564:	b318      	cbz	r0, 800e5ae <rcl_wait_set_add_guard_condition+0x4a>
 800e566:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	4604      	mov	r4, r0
 800e56c:	b30b      	cbz	r3, 800e5b2 <rcl_wait_set_add_guard_condition+0x4e>
 800e56e:	b319      	cbz	r1, 800e5b8 <rcl_wait_set_add_guard_condition+0x54>
 800e570:	68dd      	ldr	r5, [r3, #12]
 800e572:	68c0      	ldr	r0, [r0, #12]
 800e574:	4285      	cmp	r5, r0
 800e576:	d217      	bcs.n	800e5a8 <rcl_wait_set_add_guard_condition+0x44>
 800e578:	68a0      	ldr	r0, [r4, #8]
 800e57a:	1c6e      	adds	r6, r5, #1
 800e57c:	60de      	str	r6, [r3, #12]
 800e57e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800e582:	b102      	cbz	r2, 800e586 <rcl_wait_set_add_guard_condition+0x22>
 800e584:	6015      	str	r5, [r2, #0]
 800e586:	4608      	mov	r0, r1
 800e588:	f004 fcfa 	bl	8012f80 <rcl_guard_condition_get_rmw_handle>
 800e58c:	b150      	cbz	r0, 800e5a4 <rcl_wait_set_add_guard_condition+0x40>
 800e58e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e590:	6842      	ldr	r2, [r0, #4]
 800e592:	695b      	ldr	r3, [r3, #20]
 800e594:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e598:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e59a:	6913      	ldr	r3, [r2, #16]
 800e59c:	3301      	adds	r3, #1
 800e59e:	2000      	movs	r0, #0
 800e5a0:	6113      	str	r3, [r2, #16]
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	f240 3086 	movw	r0, #902	@ 0x386
 800e5ac:	bd70      	pop	{r4, r5, r6, pc}
 800e5ae:	200b      	movs	r0, #11
 800e5b0:	4770      	bx	lr
 800e5b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}
 800e5b8:	200b      	movs	r0, #11
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}

0800e5bc <rcl_wait_set_add_timer>:
 800e5bc:	b328      	cbz	r0, 800e60a <rcl_wait_set_add_timer+0x4e>
 800e5be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5c0:	b570      	push	{r4, r5, r6, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	b31b      	cbz	r3, 800e60e <rcl_wait_set_add_timer+0x52>
 800e5c6:	b329      	cbz	r1, 800e614 <rcl_wait_set_add_timer+0x58>
 800e5c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800e5ca:	6965      	ldr	r5, [r4, #20]
 800e5cc:	42a8      	cmp	r0, r5
 800e5ce:	d219      	bcs.n	800e604 <rcl_wait_set_add_timer+0x48>
 800e5d0:	6925      	ldr	r5, [r4, #16]
 800e5d2:	1c46      	adds	r6, r0, #1
 800e5d4:	641e      	str	r6, [r3, #64]	@ 0x40
 800e5d6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800e5da:	b102      	cbz	r2, 800e5de <rcl_wait_set_add_timer+0x22>
 800e5dc:	6010      	str	r0, [r2, #0]
 800e5de:	4608      	mov	r0, r1
 800e5e0:	f7ff fba6 	bl	800dd30 <rcl_timer_get_guard_condition>
 800e5e4:	b168      	cbz	r0, 800e602 <rcl_wait_set_add_timer+0x46>
 800e5e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e5e8:	68e3      	ldr	r3, [r4, #12]
 800e5ea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	441d      	add	r5, r3
 800e5f0:	f004 fcc6 	bl	8012f80 <rcl_guard_condition_get_rmw_handle>
 800e5f4:	b180      	cbz	r0, 800e618 <rcl_wait_set_add_timer+0x5c>
 800e5f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e5f8:	6842      	ldr	r2, [r0, #4]
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e600:	2000      	movs	r0, #0
 800e602:	bd70      	pop	{r4, r5, r6, pc}
 800e604:	f240 3086 	movw	r0, #902	@ 0x386
 800e608:	bd70      	pop	{r4, r5, r6, pc}
 800e60a:	200b      	movs	r0, #11
 800e60c:	4770      	bx	lr
 800e60e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e612:	bd70      	pop	{r4, r5, r6, pc}
 800e614:	200b      	movs	r0, #11
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	2001      	movs	r0, #1
 800e61a:	bd70      	pop	{r4, r5, r6, pc}

0800e61c <rcl_wait_set_add_client>:
 800e61c:	b318      	cbz	r0, 800e666 <rcl_wait_set_add_client+0x4a>
 800e61e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e620:	b570      	push	{r4, r5, r6, lr}
 800e622:	4604      	mov	r4, r0
 800e624:	b30b      	cbz	r3, 800e66a <rcl_wait_set_add_client+0x4e>
 800e626:	b319      	cbz	r1, 800e670 <rcl_wait_set_add_client+0x54>
 800e628:	699d      	ldr	r5, [r3, #24]
 800e62a:	69c0      	ldr	r0, [r0, #28]
 800e62c:	4285      	cmp	r5, r0
 800e62e:	d217      	bcs.n	800e660 <rcl_wait_set_add_client+0x44>
 800e630:	69a0      	ldr	r0, [r4, #24]
 800e632:	1c6e      	adds	r6, r5, #1
 800e634:	619e      	str	r6, [r3, #24]
 800e636:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800e63a:	b102      	cbz	r2, 800e63e <rcl_wait_set_add_client+0x22>
 800e63c:	6015      	str	r5, [r2, #0]
 800e63e:	4608      	mov	r0, r1
 800e640:	f7fe fa8e 	bl	800cb60 <rcl_client_get_rmw_handle>
 800e644:	b150      	cbz	r0, 800e65c <rcl_wait_set_add_client+0x40>
 800e646:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e648:	6842      	ldr	r2, [r0, #4]
 800e64a:	6a1b      	ldr	r3, [r3, #32]
 800e64c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e650:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e652:	69d3      	ldr	r3, [r2, #28]
 800e654:	3301      	adds	r3, #1
 800e656:	2000      	movs	r0, #0
 800e658:	61d3      	str	r3, [r2, #28]
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	2001      	movs	r0, #1
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f240 3086 	movw	r0, #902	@ 0x386
 800e664:	bd70      	pop	{r4, r5, r6, pc}
 800e666:	200b      	movs	r0, #11
 800e668:	4770      	bx	lr
 800e66a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	200b      	movs	r0, #11
 800e672:	bd70      	pop	{r4, r5, r6, pc}

0800e674 <rcl_wait_set_add_service>:
 800e674:	b318      	cbz	r0, 800e6be <rcl_wait_set_add_service+0x4a>
 800e676:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	4604      	mov	r4, r0
 800e67c:	b30b      	cbz	r3, 800e6c2 <rcl_wait_set_add_service+0x4e>
 800e67e:	b319      	cbz	r1, 800e6c8 <rcl_wait_set_add_service+0x54>
 800e680:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800e682:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e684:	4285      	cmp	r5, r0
 800e686:	d217      	bcs.n	800e6b8 <rcl_wait_set_add_service+0x44>
 800e688:	6a20      	ldr	r0, [r4, #32]
 800e68a:	1c6e      	adds	r6, r5, #1
 800e68c:	625e      	str	r6, [r3, #36]	@ 0x24
 800e68e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800e692:	b102      	cbz	r2, 800e696 <rcl_wait_set_add_service+0x22>
 800e694:	6015      	str	r5, [r2, #0]
 800e696:	4608      	mov	r0, r1
 800e698:	f7ff f8e0 	bl	800d85c <rcl_service_get_rmw_handle>
 800e69c:	b150      	cbz	r0, 800e6b4 <rcl_wait_set_add_service+0x40>
 800e69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e6a0:	6842      	ldr	r2, [r0, #4]
 800e6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e6aa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	6293      	str	r3, [r2, #40]	@ 0x28
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	f240 3086 	movw	r0, #902	@ 0x386
 800e6bc:	bd70      	pop	{r4, r5, r6, pc}
 800e6be:	200b      	movs	r0, #11
 800e6c0:	4770      	bx	lr
 800e6c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}
 800e6c8:	200b      	movs	r0, #11
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	0000      	movs	r0, r0
	...

0800e6d0 <rcl_wait>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	ed2d 8b02 	vpush	{d8}
 800e6d8:	b08d      	sub	sp, #52	@ 0x34
 800e6da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f000 8143 	beq.w	800e96a <rcl_wait+0x29a>
 800e6e4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	2e00      	cmp	r6, #0
 800e6ea:	f000 8112 	beq.w	800e912 <rcl_wait+0x242>
 800e6ee:	6843      	ldr	r3, [r0, #4]
 800e6f0:	b983      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e6f2:	68eb      	ldr	r3, [r5, #12]
 800e6f4:	b973      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e6f6:	696b      	ldr	r3, [r5, #20]
 800e6f8:	b963      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e6fa:	69eb      	ldr	r3, [r5, #28]
 800e6fc:	b953      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e6fe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800e700:	b943      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e702:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e704:	b933      	cbnz	r3, 800e714 <rcl_wait+0x44>
 800e706:	f240 3085 	movw	r0, #901	@ 0x385
 800e70a:	b00d      	add	sp, #52	@ 0x34
 800e70c:	ecbd 8b02 	vpop	{d8}
 800e710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e714:	9b04      	ldr	r3, [sp, #16]
 800e716:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800e718:	2b01      	cmp	r3, #1
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	f173 0300 	sbcs.w	r3, r3, #0
 800e720:	f2c0 80f0 	blt.w	800e904 <rcl_wait+0x234>
 800e724:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800e728:	4643      	mov	r3, r8
 800e72a:	2a00      	cmp	r2, #0
 800e72c:	f000 8133 	beq.w	800e996 <rcl_wait+0x2c6>
 800e730:	2400      	movs	r4, #0
 800e732:	4613      	mov	r3, r2
 800e734:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800e9a8 <rcl_wait+0x2d8>
 800e738:	46a2      	mov	sl, r4
 800e73a:	46a3      	mov	fp, r4
 800e73c:	f240 3921 	movw	r9, #801	@ 0x321
 800e740:	4632      	mov	r2, r6
 800e742:	e014      	b.n	800e76e <rcl_wait+0x9e>
 800e744:	2800      	cmp	r0, #0
 800e746:	d1e0      	bne.n	800e70a <rcl_wait+0x3a>
 800e748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e74c:	4542      	cmp	r2, r8
 800e74e:	eb73 0107 	sbcs.w	r1, r3, r7
 800e752:	da03      	bge.n	800e75c <rcl_wait+0x8c>
 800e754:	4690      	mov	r8, r2
 800e756:	461f      	mov	r7, r3
 800e758:	f04f 0b01 	mov.w	fp, #1
 800e75c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800e75e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800e760:	3401      	adds	r4, #1
 800e762:	f14a 0a00 	adc.w	sl, sl, #0
 800e766:	429c      	cmp	r4, r3
 800e768:	f17a 0100 	sbcs.w	r1, sl, #0
 800e76c:	d228      	bcs.n	800e7c0 <rcl_wait+0xf0>
 800e76e:	6928      	ldr	r0, [r5, #16]
 800e770:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e774:	a908      	add	r1, sp, #32
 800e776:	00a6      	lsls	r6, r4, #2
 800e778:	2800      	cmp	r0, #0
 800e77a:	d0f1      	beq.n	800e760 <rcl_wait+0x90>
 800e77c:	68eb      	ldr	r3, [r5, #12]
 800e77e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800e782:	4423      	add	r3, r4
 800e784:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800e788:	f1be 0f00 	cmp.w	lr, #0
 800e78c:	d006      	beq.n	800e79c <rcl_wait+0xcc>
 800e78e:	6913      	ldr	r3, [r2, #16]
 800e790:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800e794:	3301      	adds	r3, #1
 800e796:	6113      	str	r3, [r2, #16]
 800e798:	692b      	ldr	r3, [r5, #16]
 800e79a:	5998      	ldr	r0, [r3, r6]
 800e79c:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e7a0:	f7ff fa94 	bl	800dccc <rcl_timer_get_time_until_next_call>
 800e7a4:	4548      	cmp	r0, r9
 800e7a6:	d1cd      	bne.n	800e744 <rcl_wait+0x74>
 800e7a8:	692b      	ldr	r3, [r5, #16]
 800e7aa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	5199      	str	r1, [r3, r6]
 800e7b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800e7b2:	3401      	adds	r4, #1
 800e7b4:	f14a 0a00 	adc.w	sl, sl, #0
 800e7b8:	429c      	cmp	r4, r3
 800e7ba:	f17a 0100 	sbcs.w	r1, sl, #0
 800e7be:	d3d6      	bcc.n	800e76e <rcl_wait+0x9e>
 800e7c0:	4616      	mov	r6, r2
 800e7c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	46d9      	mov	r9, fp
 800e7ca:	f040 80a9 	bne.w	800e920 <rcl_wait+0x250>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e7d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800e7da:	ab08      	add	r3, sp, #32
 800e7dc:	9302      	str	r3, [sp, #8]
 800e7de:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800e7e0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800e7e4:	e9cd 3200 	strd	r3, r2, [sp]
 800e7e8:	f106 0110 	add.w	r1, r6, #16
 800e7ec:	f106 031c 	add.w	r3, r6, #28
 800e7f0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800e7f4:	1d30      	adds	r0, r6, #4
 800e7f6:	f002 fa59 	bl	8010cac <rmw_wait>
 800e7fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e7fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7fe:	4680      	mov	r8, r0
 800e800:	b1ca      	cbz	r2, 800e836 <rcl_wait+0x166>
 800e802:	2400      	movs	r4, #0
 800e804:	4627      	mov	r7, r4
 800e806:	692a      	ldr	r2, [r5, #16]
 800e808:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800e80c:	f10d 011f 	add.w	r1, sp, #31
 800e810:	00a6      	lsls	r6, r4, #2
 800e812:	b160      	cbz	r0, 800e82e <rcl_wait+0x15e>
 800e814:	f88d 701f 	strb.w	r7, [sp, #31]
 800e818:	f7ff fa1e 	bl	800dc58 <rcl_timer_is_ready>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f47f af74 	bne.w	800e70a <rcl_wait+0x3a>
 800e822:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e826:	b90b      	cbnz	r3, 800e82c <rcl_wait+0x15c>
 800e828:	692a      	ldr	r2, [r5, #16]
 800e82a:	5193      	str	r3, [r2, r6]
 800e82c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e82e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e830:	3401      	adds	r4, #1
 800e832:	42a2      	cmp	r2, r4
 800e834:	d8e7      	bhi.n	800e806 <rcl_wait+0x136>
 800e836:	f038 0002 	bics.w	r0, r8, #2
 800e83a:	f040 8090 	bne.w	800e95e <rcl_wait+0x28e>
 800e83e:	686e      	ldr	r6, [r5, #4]
 800e840:	4602      	mov	r2, r0
 800e842:	b91e      	cbnz	r6, 800e84c <rcl_wait+0x17c>
 800e844:	e00d      	b.n	800e862 <rcl_wait+0x192>
 800e846:	3201      	adds	r2, #1
 800e848:	42b2      	cmp	r2, r6
 800e84a:	d00a      	beq.n	800e862 <rcl_wait+0x192>
 800e84c:	6899      	ldr	r1, [r3, #8]
 800e84e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e852:	2900      	cmp	r1, #0
 800e854:	d1f7      	bne.n	800e846 <rcl_wait+0x176>
 800e856:	682c      	ldr	r4, [r5, #0]
 800e858:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800e85c:	3201      	adds	r2, #1
 800e85e:	42b2      	cmp	r2, r6
 800e860:	d1f4      	bne.n	800e84c <rcl_wait+0x17c>
 800e862:	68ee      	ldr	r6, [r5, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	b91e      	cbnz	r6, 800e870 <rcl_wait+0x1a0>
 800e868:	e00d      	b.n	800e886 <rcl_wait+0x1b6>
 800e86a:	3201      	adds	r2, #1
 800e86c:	42b2      	cmp	r2, r6
 800e86e:	d00a      	beq.n	800e886 <rcl_wait+0x1b6>
 800e870:	6959      	ldr	r1, [r3, #20]
 800e872:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e876:	2900      	cmp	r1, #0
 800e878:	d1f7      	bne.n	800e86a <rcl_wait+0x19a>
 800e87a:	68ac      	ldr	r4, [r5, #8]
 800e87c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800e880:	3201      	adds	r2, #1
 800e882:	42b2      	cmp	r2, r6
 800e884:	d1f4      	bne.n	800e870 <rcl_wait+0x1a0>
 800e886:	69ee      	ldr	r6, [r5, #28]
 800e888:	2200      	movs	r2, #0
 800e88a:	b91e      	cbnz	r6, 800e894 <rcl_wait+0x1c4>
 800e88c:	e00d      	b.n	800e8aa <rcl_wait+0x1da>
 800e88e:	3201      	adds	r2, #1
 800e890:	42b2      	cmp	r2, r6
 800e892:	d00a      	beq.n	800e8aa <rcl_wait+0x1da>
 800e894:	6a19      	ldr	r1, [r3, #32]
 800e896:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e89a:	2900      	cmp	r1, #0
 800e89c:	d1f7      	bne.n	800e88e <rcl_wait+0x1be>
 800e89e:	69ac      	ldr	r4, [r5, #24]
 800e8a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	42b2      	cmp	r2, r6
 800e8a8:	d1f4      	bne.n	800e894 <rcl_wait+0x1c4>
 800e8aa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	b91e      	cbnz	r6, 800e8b8 <rcl_wait+0x1e8>
 800e8b0:	e00d      	b.n	800e8ce <rcl_wait+0x1fe>
 800e8b2:	3201      	adds	r2, #1
 800e8b4:	4296      	cmp	r6, r2
 800e8b6:	d00a      	beq.n	800e8ce <rcl_wait+0x1fe>
 800e8b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e8ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e8be:	2900      	cmp	r1, #0
 800e8c0:	d1f7      	bne.n	800e8b2 <rcl_wait+0x1e2>
 800e8c2:	6a2c      	ldr	r4, [r5, #32]
 800e8c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800e8c8:	3201      	adds	r2, #1
 800e8ca:	4296      	cmp	r6, r2
 800e8cc:	d1f4      	bne.n	800e8b8 <rcl_wait+0x1e8>
 800e8ce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	b91e      	cbnz	r6, 800e8dc <rcl_wait+0x20c>
 800e8d4:	e00d      	b.n	800e8f2 <rcl_wait+0x222>
 800e8d6:	3201      	adds	r2, #1
 800e8d8:	42b2      	cmp	r2, r6
 800e8da:	d00a      	beq.n	800e8f2 <rcl_wait+0x222>
 800e8dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800e8de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e8e2:	2900      	cmp	r1, #0
 800e8e4:	d1f7      	bne.n	800e8d6 <rcl_wait+0x206>
 800e8e6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800e8e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800e8ec:	3201      	adds	r2, #1
 800e8ee:	42b2      	cmp	r2, r6
 800e8f0:	d1f4      	bne.n	800e8dc <rcl_wait+0x20c>
 800e8f2:	f1b8 0f02 	cmp.w	r8, #2
 800e8f6:	f47f af08 	bne.w	800e70a <rcl_wait+0x3a>
 800e8fa:	464b      	mov	r3, r9
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	bf08      	it	eq
 800e900:	2002      	moveq	r0, #2
 800e902:	e702      	b.n	800e70a <rcl_wait+0x3a>
 800e904:	2a00      	cmp	r2, #0
 800e906:	d03a      	beq.n	800e97e <rcl_wait+0x2ae>
 800e908:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800e90c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800e910:	e70e      	b.n	800e730 <rcl_wait+0x60>
 800e912:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e916:	b00d      	add	sp, #52	@ 0x34
 800e918:	ecbd 8b02 	vpop	{d8}
 800e91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e920:	9b04      	ldr	r3, [sp, #16]
 800e922:	2b01      	cmp	r3, #1
 800e924:	9b05      	ldr	r3, [sp, #20]
 800e926:	f173 0300 	sbcs.w	r3, r3, #0
 800e92a:	db24      	blt.n	800e976 <rcl_wait+0x2a6>
 800e92c:	2f00      	cmp	r7, #0
 800e92e:	bfbc      	itt	lt
 800e930:	f04f 0800 	movlt.w	r8, #0
 800e934:	4647      	movlt	r7, r8
 800e936:	a31e      	add	r3, pc, #120	@ (adr r3, 800e9b0 <rcl_wait+0x2e0>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	4640      	mov	r0, r8
 800e93e:	4639      	mov	r1, r7
 800e940:	f7f1 fcb6 	bl	80002b0 <__aeabi_ldivmod>
 800e944:	a31a      	add	r3, pc, #104	@ (adr r3, 800e9b0 <rcl_wait+0x2e0>)
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e94e:	4640      	mov	r0, r8
 800e950:	4639      	mov	r1, r7
 800e952:	f7f1 fcad 	bl	80002b0 <__aeabi_ldivmod>
 800e956:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800e95a:	ab08      	add	r3, sp, #32
 800e95c:	e73e      	b.n	800e7dc <rcl_wait+0x10c>
 800e95e:	2001      	movs	r0, #1
 800e960:	b00d      	add	sp, #52	@ 0x34
 800e962:	ecbd 8b02 	vpop	{d8}
 800e966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96a:	200b      	movs	r0, #11
 800e96c:	b00d      	add	sp, #52	@ 0x34
 800e96e:	ecbd 8b02 	vpop	{d8}
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	465b      	mov	r3, fp
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1d7      	bne.n	800e92c <rcl_wait+0x25c>
 800e97c:	e72e      	b.n	800e7dc <rcl_wait+0x10c>
 800e97e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e982:	430b      	orrs	r3, r1
 800e984:	bf08      	it	eq
 800e986:	4691      	moveq	r9, r2
 800e988:	f43f af21 	beq.w	800e7ce <rcl_wait+0xfe>
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800e992:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800e996:	2b01      	cmp	r3, #1
 800e998:	9b05      	ldr	r3, [sp, #20]
 800e99a:	f173 0300 	sbcs.w	r3, r3, #0
 800e99e:	f04f 0300 	mov.w	r3, #0
 800e9a2:	4699      	mov	r9, r3
 800e9a4:	dac2      	bge.n	800e92c <rcl_wait+0x25c>
 800e9a6:	e719      	b.n	800e7dc <rcl_wait+0x10c>
 800e9a8:	ffffffff 	.word	0xffffffff
 800e9ac:	7fffffff 	.word	0x7fffffff
 800e9b0:	3b9aca00 	.word	0x3b9aca00
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <rcl_action_take_goal_response>:
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d039      	beq.n	800ea30 <rcl_action_take_goal_response+0x78>
 800e9bc:	b570      	push	{r4, r5, r6, lr}
 800e9be:	4604      	mov	r4, r0
 800e9c0:	6800      	ldr	r0, [r0, #0]
 800e9c2:	b380      	cbz	r0, 800ea26 <rcl_action_take_goal_response+0x6e>
 800e9c4:	460d      	mov	r5, r1
 800e9c6:	4616      	mov	r6, r2
 800e9c8:	f7fe f94e 	bl	800cc68 <rcl_client_is_valid>
 800e9cc:	b330      	cbz	r0, 800ea1c <rcl_action_take_goal_response+0x64>
 800e9ce:	6820      	ldr	r0, [r4, #0]
 800e9d0:	3004      	adds	r0, #4
 800e9d2:	f7fe f949 	bl	800cc68 <rcl_client_is_valid>
 800e9d6:	b308      	cbz	r0, 800ea1c <rcl_action_take_goal_response+0x64>
 800e9d8:	6820      	ldr	r0, [r4, #0]
 800e9da:	3008      	adds	r0, #8
 800e9dc:	f7fe f944 	bl	800cc68 <rcl_client_is_valid>
 800e9e0:	b1e0      	cbz	r0, 800ea1c <rcl_action_take_goal_response+0x64>
 800e9e2:	6820      	ldr	r0, [r4, #0]
 800e9e4:	300c      	adds	r0, #12
 800e9e6:	f7fe ffff 	bl	800d9e8 <rcl_subscription_is_valid>
 800e9ea:	b1b8      	cbz	r0, 800ea1c <rcl_action_take_goal_response+0x64>
 800e9ec:	6820      	ldr	r0, [r4, #0]
 800e9ee:	3010      	adds	r0, #16
 800e9f0:	f7fe fffa 	bl	800d9e8 <rcl_subscription_is_valid>
 800e9f4:	b190      	cbz	r0, 800ea1c <rcl_action_take_goal_response+0x64>
 800e9f6:	b1cd      	cbz	r5, 800ea2c <rcl_action_take_goal_response+0x74>
 800e9f8:	b1c6      	cbz	r6, 800ea2c <rcl_action_take_goal_response+0x74>
 800e9fa:	6820      	ldr	r0, [r4, #0]
 800e9fc:	4632      	mov	r2, r6
 800e9fe:	4629      	mov	r1, r5
 800ea00:	f7fe f8ea 	bl	800cbd8 <rcl_take_response>
 800ea04:	b148      	cbz	r0, 800ea1a <rcl_action_take_goal_response+0x62>
 800ea06:	280a      	cmp	r0, #10
 800ea08:	d007      	beq.n	800ea1a <rcl_action_take_goal_response+0x62>
 800ea0a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800ea0e:	f640 0337 	movw	r3, #2103	@ 0x837
 800ea12:	4290      	cmp	r0, r2
 800ea14:	bf0c      	ite	eq
 800ea16:	4618      	moveq	r0, r3
 800ea18:	2001      	movne	r0, #1
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
 800ea1c:	f7f9 fd70 	bl	8008500 <rcutils_reset_error>
 800ea20:	f640 0036 	movw	r0, #2102	@ 0x836
 800ea24:	bd70      	pop	{r4, r5, r6, pc}
 800ea26:	f640 0036 	movw	r0, #2102	@ 0x836
 800ea2a:	bd70      	pop	{r4, r5, r6, pc}
 800ea2c:	200b      	movs	r0, #11
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	f640 0036 	movw	r0, #2102	@ 0x836
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop

0800ea38 <rcl_action_send_result_request>:
 800ea38:	b390      	cbz	r0, 800eaa0 <rcl_action_send_result_request+0x68>
 800ea3a:	b570      	push	{r4, r5, r6, lr}
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	6800      	ldr	r0, [r0, #0]
 800ea40:	b348      	cbz	r0, 800ea96 <rcl_action_send_result_request+0x5e>
 800ea42:	460d      	mov	r5, r1
 800ea44:	4616      	mov	r6, r2
 800ea46:	f7fe f90f 	bl	800cc68 <rcl_client_is_valid>
 800ea4a:	b1f8      	cbz	r0, 800ea8c <rcl_action_send_result_request+0x54>
 800ea4c:	6820      	ldr	r0, [r4, #0]
 800ea4e:	3004      	adds	r0, #4
 800ea50:	f7fe f90a 	bl	800cc68 <rcl_client_is_valid>
 800ea54:	b1d0      	cbz	r0, 800ea8c <rcl_action_send_result_request+0x54>
 800ea56:	6820      	ldr	r0, [r4, #0]
 800ea58:	3008      	adds	r0, #8
 800ea5a:	f7fe f905 	bl	800cc68 <rcl_client_is_valid>
 800ea5e:	b1a8      	cbz	r0, 800ea8c <rcl_action_send_result_request+0x54>
 800ea60:	6820      	ldr	r0, [r4, #0]
 800ea62:	300c      	adds	r0, #12
 800ea64:	f7fe ffc0 	bl	800d9e8 <rcl_subscription_is_valid>
 800ea68:	b180      	cbz	r0, 800ea8c <rcl_action_send_result_request+0x54>
 800ea6a:	6820      	ldr	r0, [r4, #0]
 800ea6c:	3010      	adds	r0, #16
 800ea6e:	f7fe ffbb 	bl	800d9e8 <rcl_subscription_is_valid>
 800ea72:	b158      	cbz	r0, 800ea8c <rcl_action_send_result_request+0x54>
 800ea74:	b195      	cbz	r5, 800ea9c <rcl_action_send_result_request+0x64>
 800ea76:	b18e      	cbz	r6, 800ea9c <rcl_action_send_result_request+0x64>
 800ea78:	6820      	ldr	r0, [r4, #0]
 800ea7a:	4632      	mov	r2, r6
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	3008      	adds	r0, #8
 800ea80:	f7fe f874 	bl	800cb6c <rcl_send_request>
 800ea84:	3800      	subs	r0, #0
 800ea86:	bf18      	it	ne
 800ea88:	2001      	movne	r0, #1
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	f7f9 fd38 	bl	8008500 <rcutils_reset_error>
 800ea90:	f640 0036 	movw	r0, #2102	@ 0x836
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
 800ea96:	f640 0036 	movw	r0, #2102	@ 0x836
 800ea9a:	bd70      	pop	{r4, r5, r6, pc}
 800ea9c:	200b      	movs	r0, #11
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	f640 0036 	movw	r0, #2102	@ 0x836
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop

0800eaa8 <rcl_action_take_result_response>:
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d03a      	beq.n	800eb22 <rcl_action_take_result_response+0x7a>
 800eaac:	b570      	push	{r4, r5, r6, lr}
 800eaae:	4604      	mov	r4, r0
 800eab0:	6800      	ldr	r0, [r0, #0]
 800eab2:	b388      	cbz	r0, 800eb18 <rcl_action_take_result_response+0x70>
 800eab4:	460d      	mov	r5, r1
 800eab6:	4616      	mov	r6, r2
 800eab8:	f7fe f8d6 	bl	800cc68 <rcl_client_is_valid>
 800eabc:	b338      	cbz	r0, 800eb0e <rcl_action_take_result_response+0x66>
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	3004      	adds	r0, #4
 800eac2:	f7fe f8d1 	bl	800cc68 <rcl_client_is_valid>
 800eac6:	b310      	cbz	r0, 800eb0e <rcl_action_take_result_response+0x66>
 800eac8:	6820      	ldr	r0, [r4, #0]
 800eaca:	3008      	adds	r0, #8
 800eacc:	f7fe f8cc 	bl	800cc68 <rcl_client_is_valid>
 800ead0:	b1e8      	cbz	r0, 800eb0e <rcl_action_take_result_response+0x66>
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	300c      	adds	r0, #12
 800ead6:	f7fe ff87 	bl	800d9e8 <rcl_subscription_is_valid>
 800eada:	b1c0      	cbz	r0, 800eb0e <rcl_action_take_result_response+0x66>
 800eadc:	6820      	ldr	r0, [r4, #0]
 800eade:	3010      	adds	r0, #16
 800eae0:	f7fe ff82 	bl	800d9e8 <rcl_subscription_is_valid>
 800eae4:	b198      	cbz	r0, 800eb0e <rcl_action_take_result_response+0x66>
 800eae6:	b1d5      	cbz	r5, 800eb1e <rcl_action_take_result_response+0x76>
 800eae8:	b1ce      	cbz	r6, 800eb1e <rcl_action_take_result_response+0x76>
 800eaea:	6820      	ldr	r0, [r4, #0]
 800eaec:	4632      	mov	r2, r6
 800eaee:	4629      	mov	r1, r5
 800eaf0:	3008      	adds	r0, #8
 800eaf2:	f7fe f871 	bl	800cbd8 <rcl_take_response>
 800eaf6:	b148      	cbz	r0, 800eb0c <rcl_action_take_result_response+0x64>
 800eaf8:	280a      	cmp	r0, #10
 800eafa:	d007      	beq.n	800eb0c <rcl_action_take_result_response+0x64>
 800eafc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800eb00:	f640 0337 	movw	r3, #2103	@ 0x837
 800eb04:	4290      	cmp	r0, r2
 800eb06:	bf0c      	ite	eq
 800eb08:	4618      	moveq	r0, r3
 800eb0a:	2001      	movne	r0, #1
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
 800eb0e:	f7f9 fcf7 	bl	8008500 <rcutils_reset_error>
 800eb12:	f640 0036 	movw	r0, #2102	@ 0x836
 800eb16:	bd70      	pop	{r4, r5, r6, pc}
 800eb18:	f640 0036 	movw	r0, #2102	@ 0x836
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
 800eb1e:	200b      	movs	r0, #11
 800eb20:	bd70      	pop	{r4, r5, r6, pc}
 800eb22:	f640 0036 	movw	r0, #2102	@ 0x836
 800eb26:	4770      	bx	lr

0800eb28 <rcl_action_take_cancel_response>:
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d03a      	beq.n	800eba2 <rcl_action_take_cancel_response+0x7a>
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	4604      	mov	r4, r0
 800eb30:	6800      	ldr	r0, [r0, #0]
 800eb32:	b388      	cbz	r0, 800eb98 <rcl_action_take_cancel_response+0x70>
 800eb34:	460d      	mov	r5, r1
 800eb36:	4616      	mov	r6, r2
 800eb38:	f7fe f896 	bl	800cc68 <rcl_client_is_valid>
 800eb3c:	b338      	cbz	r0, 800eb8e <rcl_action_take_cancel_response+0x66>
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	3004      	adds	r0, #4
 800eb42:	f7fe f891 	bl	800cc68 <rcl_client_is_valid>
 800eb46:	b310      	cbz	r0, 800eb8e <rcl_action_take_cancel_response+0x66>
 800eb48:	6820      	ldr	r0, [r4, #0]
 800eb4a:	3008      	adds	r0, #8
 800eb4c:	f7fe f88c 	bl	800cc68 <rcl_client_is_valid>
 800eb50:	b1e8      	cbz	r0, 800eb8e <rcl_action_take_cancel_response+0x66>
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	300c      	adds	r0, #12
 800eb56:	f7fe ff47 	bl	800d9e8 <rcl_subscription_is_valid>
 800eb5a:	b1c0      	cbz	r0, 800eb8e <rcl_action_take_cancel_response+0x66>
 800eb5c:	6820      	ldr	r0, [r4, #0]
 800eb5e:	3010      	adds	r0, #16
 800eb60:	f7fe ff42 	bl	800d9e8 <rcl_subscription_is_valid>
 800eb64:	b198      	cbz	r0, 800eb8e <rcl_action_take_cancel_response+0x66>
 800eb66:	b1d5      	cbz	r5, 800eb9e <rcl_action_take_cancel_response+0x76>
 800eb68:	b1ce      	cbz	r6, 800eb9e <rcl_action_take_cancel_response+0x76>
 800eb6a:	6820      	ldr	r0, [r4, #0]
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	4629      	mov	r1, r5
 800eb70:	3004      	adds	r0, #4
 800eb72:	f7fe f831 	bl	800cbd8 <rcl_take_response>
 800eb76:	b148      	cbz	r0, 800eb8c <rcl_action_take_cancel_response+0x64>
 800eb78:	280a      	cmp	r0, #10
 800eb7a:	d007      	beq.n	800eb8c <rcl_action_take_cancel_response+0x64>
 800eb7c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800eb80:	f640 0337 	movw	r3, #2103	@ 0x837
 800eb84:	4290      	cmp	r0, r2
 800eb86:	bf0c      	ite	eq
 800eb88:	4618      	moveq	r0, r3
 800eb8a:	2001      	movne	r0, #1
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	f7f9 fcb7 	bl	8008500 <rcutils_reset_error>
 800eb92:	f640 0036 	movw	r0, #2102	@ 0x836
 800eb96:	bd70      	pop	{r4, r5, r6, pc}
 800eb98:	f640 0036 	movw	r0, #2102	@ 0x836
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
 800eb9e:	200b      	movs	r0, #11
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	f640 0036 	movw	r0, #2102	@ 0x836
 800eba6:	4770      	bx	lr

0800eba8 <rcl_action_take_feedback>:
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d038      	beq.n	800ec1e <rcl_action_take_feedback+0x76>
 800ebac:	b530      	push	{r4, r5, lr}
 800ebae:	4604      	mov	r4, r0
 800ebb0:	6800      	ldr	r0, [r0, #0]
 800ebb2:	b091      	sub	sp, #68	@ 0x44
 800ebb4:	b378      	cbz	r0, 800ec16 <rcl_action_take_feedback+0x6e>
 800ebb6:	460d      	mov	r5, r1
 800ebb8:	f7fe f856 	bl	800cc68 <rcl_client_is_valid>
 800ebbc:	b328      	cbz	r0, 800ec0a <rcl_action_take_feedback+0x62>
 800ebbe:	6820      	ldr	r0, [r4, #0]
 800ebc0:	3004      	adds	r0, #4
 800ebc2:	f7fe f851 	bl	800cc68 <rcl_client_is_valid>
 800ebc6:	b300      	cbz	r0, 800ec0a <rcl_action_take_feedback+0x62>
 800ebc8:	6820      	ldr	r0, [r4, #0]
 800ebca:	3008      	adds	r0, #8
 800ebcc:	f7fe f84c 	bl	800cc68 <rcl_client_is_valid>
 800ebd0:	b1d8      	cbz	r0, 800ec0a <rcl_action_take_feedback+0x62>
 800ebd2:	6820      	ldr	r0, [r4, #0]
 800ebd4:	300c      	adds	r0, #12
 800ebd6:	f7fe ff07 	bl	800d9e8 <rcl_subscription_is_valid>
 800ebda:	b1b0      	cbz	r0, 800ec0a <rcl_action_take_feedback+0x62>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	3010      	adds	r0, #16
 800ebe0:	f7fe ff02 	bl	800d9e8 <rcl_subscription_is_valid>
 800ebe4:	b188      	cbz	r0, 800ec0a <rcl_action_take_feedback+0x62>
 800ebe6:	b1ed      	cbz	r5, 800ec24 <rcl_action_take_feedback+0x7c>
 800ebe8:	6820      	ldr	r0, [r4, #0]
 800ebea:	2300      	movs	r3, #0
 800ebec:	466a      	mov	r2, sp
 800ebee:	4629      	mov	r1, r5
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	f7fe fe9b 	bl	800d92c <rcl_take>
 800ebf6:	b160      	cbz	r0, 800ec12 <rcl_action_take_feedback+0x6a>
 800ebf8:	f240 1391 	movw	r3, #401	@ 0x191
 800ebfc:	4298      	cmp	r0, r3
 800ebfe:	d014      	beq.n	800ec2a <rcl_action_take_feedback+0x82>
 800ec00:	280a      	cmp	r0, #10
 800ec02:	bf18      	it	ne
 800ec04:	2001      	movne	r0, #1
 800ec06:	b011      	add	sp, #68	@ 0x44
 800ec08:	bd30      	pop	{r4, r5, pc}
 800ec0a:	f7f9 fc79 	bl	8008500 <rcutils_reset_error>
 800ec0e:	f640 0036 	movw	r0, #2102	@ 0x836
 800ec12:	b011      	add	sp, #68	@ 0x44
 800ec14:	bd30      	pop	{r4, r5, pc}
 800ec16:	f640 0036 	movw	r0, #2102	@ 0x836
 800ec1a:	b011      	add	sp, #68	@ 0x44
 800ec1c:	bd30      	pop	{r4, r5, pc}
 800ec1e:	f640 0036 	movw	r0, #2102	@ 0x836
 800ec22:	4770      	bx	lr
 800ec24:	200b      	movs	r0, #11
 800ec26:	b011      	add	sp, #68	@ 0x44
 800ec28:	bd30      	pop	{r4, r5, pc}
 800ec2a:	f640 0037 	movw	r0, #2103	@ 0x837
 800ec2e:	e7f0      	b.n	800ec12 <rcl_action_take_feedback+0x6a>

0800ec30 <rcl_action_wait_set_add_action_client>:
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d048      	beq.n	800ecc6 <rcl_action_wait_set_add_action_client+0x96>
 800ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec36:	460c      	mov	r4, r1
 800ec38:	2900      	cmp	r1, #0
 800ec3a:	d03c      	beq.n	800ecb6 <rcl_action_wait_set_add_action_client+0x86>
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	6808      	ldr	r0, [r1, #0]
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d038      	beq.n	800ecb6 <rcl_action_wait_set_add_action_client+0x86>
 800ec44:	4617      	mov	r7, r2
 800ec46:	461e      	mov	r6, r3
 800ec48:	f7fe f80e 	bl	800cc68 <rcl_client_is_valid>
 800ec4c:	b3b0      	cbz	r0, 800ecbc <rcl_action_wait_set_add_action_client+0x8c>
 800ec4e:	6820      	ldr	r0, [r4, #0]
 800ec50:	3004      	adds	r0, #4
 800ec52:	f7fe f809 	bl	800cc68 <rcl_client_is_valid>
 800ec56:	b388      	cbz	r0, 800ecbc <rcl_action_wait_set_add_action_client+0x8c>
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	3008      	adds	r0, #8
 800ec5c:	f7fe f804 	bl	800cc68 <rcl_client_is_valid>
 800ec60:	b360      	cbz	r0, 800ecbc <rcl_action_wait_set_add_action_client+0x8c>
 800ec62:	6820      	ldr	r0, [r4, #0]
 800ec64:	300c      	adds	r0, #12
 800ec66:	f7fe febf 	bl	800d9e8 <rcl_subscription_is_valid>
 800ec6a:	b338      	cbz	r0, 800ecbc <rcl_action_wait_set_add_action_client+0x8c>
 800ec6c:	6820      	ldr	r0, [r4, #0]
 800ec6e:	3010      	adds	r0, #16
 800ec70:	f7fe feba 	bl	800d9e8 <rcl_subscription_is_valid>
 800ec74:	b310      	cbz	r0, 800ecbc <rcl_action_wait_set_add_action_client+0x8c>
 800ec76:	6821      	ldr	r1, [r4, #0]
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800ec7e:	f7ff fccd 	bl	800e61c <rcl_wait_set_add_client>
 800ec82:	b9b8      	cbnz	r0, 800ecb4 <rcl_action_wait_set_add_action_client+0x84>
 800ec84:	6821      	ldr	r1, [r4, #0]
 800ec86:	4628      	mov	r0, r5
 800ec88:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800ec8c:	3104      	adds	r1, #4
 800ec8e:	f7ff fcc5 	bl	800e61c <rcl_wait_set_add_client>
 800ec92:	b978      	cbnz	r0, 800ecb4 <rcl_action_wait_set_add_action_client+0x84>
 800ec94:	6821      	ldr	r1, [r4, #0]
 800ec96:	4628      	mov	r0, r5
 800ec98:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800ec9c:	3108      	adds	r1, #8
 800ec9e:	f7ff fcbd 	bl	800e61c <rcl_wait_set_add_client>
 800eca2:	b938      	cbnz	r0, 800ecb4 <rcl_action_wait_set_add_action_client+0x84>
 800eca4:	6821      	ldr	r1, [r4, #0]
 800eca6:	4628      	mov	r0, r5
 800eca8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800ecac:	310c      	adds	r1, #12
 800ecae:	f7ff f96d 	bl	800df8c <rcl_wait_set_add_subscription>
 800ecb2:	b158      	cbz	r0, 800eccc <rcl_action_wait_set_add_action_client+0x9c>
 800ecb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb6:	f640 0036 	movw	r0, #2102	@ 0x836
 800ecba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecbc:	f7f9 fc20 	bl	8008500 <rcutils_reset_error>
 800ecc0:	f640 0036 	movw	r0, #2102	@ 0x836
 800ecc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ecca:	4770      	bx	lr
 800eccc:	6821      	ldr	r1, [r4, #0]
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800ecd4:	3110      	adds	r1, #16
 800ecd6:	f7ff f959 	bl	800df8c <rcl_wait_set_add_subscription>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d1ea      	bne.n	800ecb4 <rcl_action_wait_set_add_action_client+0x84>
 800ecde:	b11f      	cbz	r7, 800ece8 <rcl_action_wait_set_add_action_client+0xb8>
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	d0e3      	beq.n	800ecb4 <rcl_action_wait_set_add_action_client+0x84>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800ecf2:	6033      	str	r3, [r6, #0]
 800ecf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecf6:	bf00      	nop

0800ecf8 <rcl_action_client_wait_set_get_entities_ready>:
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	f000 808d 	beq.w	800ee18 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800ecfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed02:	460c      	mov	r4, r1
 800ed04:	2900      	cmp	r1, #0
 800ed06:	d077      	beq.n	800edf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800ed08:	4605      	mov	r5, r0
 800ed0a:	6808      	ldr	r0, [r1, #0]
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d073      	beq.n	800edf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800ed10:	4616      	mov	r6, r2
 800ed12:	461f      	mov	r7, r3
 800ed14:	f7fd ffa8 	bl	800cc68 <rcl_client_is_valid>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d071      	beq.n	800ee00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800ed1c:	6820      	ldr	r0, [r4, #0]
 800ed1e:	3004      	adds	r0, #4
 800ed20:	f7fd ffa2 	bl	800cc68 <rcl_client_is_valid>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d06b      	beq.n	800ee00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800ed28:	6820      	ldr	r0, [r4, #0]
 800ed2a:	3008      	adds	r0, #8
 800ed2c:	f7fd ff9c 	bl	800cc68 <rcl_client_is_valid>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d065      	beq.n	800ee00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800ed34:	6820      	ldr	r0, [r4, #0]
 800ed36:	300c      	adds	r0, #12
 800ed38:	f7fe fe56 	bl	800d9e8 <rcl_subscription_is_valid>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d05f      	beq.n	800ee00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800ed40:	6820      	ldr	r0, [r4, #0]
 800ed42:	3010      	adds	r0, #16
 800ed44:	f7fe fe50 	bl	800d9e8 <rcl_subscription_is_valid>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d059      	beq.n	800ee00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800ed4c:	2e00      	cmp	r6, #0
 800ed4e:	d060      	beq.n	800ee12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800ed50:	2f00      	cmp	r7, #0
 800ed52:	d05e      	beq.n	800ee12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800ed54:	9b06      	ldr	r3, [sp, #24]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d05b      	beq.n	800ee12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800ed5a:	9b07      	ldr	r3, [sp, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d058      	beq.n	800ee12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800ed60:	9b08      	ldr	r3, [sp, #32]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d055      	beq.n	800ee12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	686a      	ldr	r2, [r5, #4]
 800ed6a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800ed6e:	428a      	cmp	r2, r1
 800ed70:	d94c      	bls.n	800ee0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800ed72:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800ed76:	4282      	cmp	r2, r0
 800ed78:	d948      	bls.n	800ee0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800ed7a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800ed7e:	69ea      	ldr	r2, [r5, #28]
 800ed80:	42a2      	cmp	r2, r4
 800ed82:	d943      	bls.n	800ee0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800ed84:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800ed88:	4562      	cmp	r2, ip
 800ed8a:	d93f      	bls.n	800ee0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800ed8c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800ed90:	4572      	cmp	r2, lr
 800ed92:	d93b      	bls.n	800ee0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800ed94:	69aa      	ldr	r2, [r5, #24]
 800ed96:	682d      	ldr	r5, [r5, #0]
 800ed98:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800ed9c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800eda0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800eda4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800eda8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800edac:	f103 0c0c 	add.w	ip, r3, #12
 800edb0:	eba5 050c 	sub.w	r5, r5, ip
 800edb4:	fab5 f585 	clz	r5, r5
 800edb8:	096d      	lsrs	r5, r5, #5
 800edba:	7035      	strb	r5, [r6, #0]
 800edbc:	f103 0510 	add.w	r5, r3, #16
 800edc0:	1b64      	subs	r4, r4, r5
 800edc2:	fab4 f484 	clz	r4, r4
 800edc6:	0964      	lsrs	r4, r4, #5
 800edc8:	703c      	strb	r4, [r7, #0]
 800edca:	eba3 0008 	sub.w	r0, r3, r8
 800edce:	1d1c      	adds	r4, r3, #4
 800edd0:	3308      	adds	r3, #8
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	fab0 f080 	clz	r0, r0
 800edd8:	9a06      	ldr	r2, [sp, #24]
 800edda:	0940      	lsrs	r0, r0, #5
 800eddc:	1b09      	subs	r1, r1, r4
 800edde:	7010      	strb	r0, [r2, #0]
 800ede0:	fab1 f181 	clz	r1, r1
 800ede4:	9a07      	ldr	r2, [sp, #28]
 800ede6:	0949      	lsrs	r1, r1, #5
 800ede8:	7011      	strb	r1, [r2, #0]
 800edea:	fab3 f383 	clz	r3, r3
 800edee:	9a08      	ldr	r2, [sp, #32]
 800edf0:	095b      	lsrs	r3, r3, #5
 800edf2:	2000      	movs	r0, #0
 800edf4:	7013      	strb	r3, [r2, #0]
 800edf6:	e001      	b.n	800edfc <rcl_action_client_wait_set_get_entities_ready+0x104>
 800edf8:	f640 0036 	movw	r0, #2102	@ 0x836
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	f7f9 fb7e 	bl	8008500 <rcutils_reset_error>
 800ee04:	f640 0036 	movw	r0, #2102	@ 0x836
 800ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee0c:	2001      	movs	r0, #1
 800ee0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee12:	200b      	movs	r0, #11
 800ee14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <rcl_action_take_goal_request>:
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d039      	beq.n	800ee98 <rcl_action_take_goal_request+0x78>
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	4604      	mov	r4, r0
 800ee28:	6800      	ldr	r0, [r0, #0]
 800ee2a:	b380      	cbz	r0, 800ee8e <rcl_action_take_goal_request+0x6e>
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	4616      	mov	r6, r2
 800ee30:	f7fe fd72 	bl	800d918 <rcl_service_is_valid>
 800ee34:	b330      	cbz	r0, 800ee84 <rcl_action_take_goal_request+0x64>
 800ee36:	6820      	ldr	r0, [r4, #0]
 800ee38:	3004      	adds	r0, #4
 800ee3a:	f7fe fd6d 	bl	800d918 <rcl_service_is_valid>
 800ee3e:	b308      	cbz	r0, 800ee84 <rcl_action_take_goal_request+0x64>
 800ee40:	6820      	ldr	r0, [r4, #0]
 800ee42:	3008      	adds	r0, #8
 800ee44:	f7fe fd68 	bl	800d918 <rcl_service_is_valid>
 800ee48:	b1e0      	cbz	r0, 800ee84 <rcl_action_take_goal_request+0x64>
 800ee4a:	6820      	ldr	r0, [r4, #0]
 800ee4c:	300c      	adds	r0, #12
 800ee4e:	f7f8 fc39 	bl	80076c4 <rcl_publisher_is_valid>
 800ee52:	b1b8      	cbz	r0, 800ee84 <rcl_action_take_goal_request+0x64>
 800ee54:	6820      	ldr	r0, [r4, #0]
 800ee56:	3010      	adds	r0, #16
 800ee58:	f7f8 fc34 	bl	80076c4 <rcl_publisher_is_valid>
 800ee5c:	b190      	cbz	r0, 800ee84 <rcl_action_take_goal_request+0x64>
 800ee5e:	b1cd      	cbz	r5, 800ee94 <rcl_action_take_goal_request+0x74>
 800ee60:	b1c6      	cbz	r6, 800ee94 <rcl_action_take_goal_request+0x74>
 800ee62:	6820      	ldr	r0, [r4, #0]
 800ee64:	4632      	mov	r2, r6
 800ee66:	4629      	mov	r1, r5
 800ee68:	f7fe fcfe 	bl	800d868 <rcl_take_request>
 800ee6c:	b148      	cbz	r0, 800ee82 <rcl_action_take_goal_request+0x62>
 800ee6e:	280a      	cmp	r0, #10
 800ee70:	d007      	beq.n	800ee82 <rcl_action_take_goal_request+0x62>
 800ee72:	f240 2259 	movw	r2, #601	@ 0x259
 800ee76:	f640 0399 	movw	r3, #2201	@ 0x899
 800ee7a:	4290      	cmp	r0, r2
 800ee7c:	bf0c      	ite	eq
 800ee7e:	4618      	moveq	r0, r3
 800ee80:	2001      	movne	r0, #1
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f7f9 fb3c 	bl	8008500 <rcutils_reset_error>
 800ee88:	f640 0098 	movw	r0, #2200	@ 0x898
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	f640 0098 	movw	r0, #2200	@ 0x898
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	200b      	movs	r0, #11
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	f640 0098 	movw	r0, #2200	@ 0x898
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop

0800eea0 <rcl_action_send_goal_response>:
 800eea0:	b390      	cbz	r0, 800ef08 <rcl_action_send_goal_response+0x68>
 800eea2:	b570      	push	{r4, r5, r6, lr}
 800eea4:	4604      	mov	r4, r0
 800eea6:	6800      	ldr	r0, [r0, #0]
 800eea8:	b348      	cbz	r0, 800eefe <rcl_action_send_goal_response+0x5e>
 800eeaa:	460d      	mov	r5, r1
 800eeac:	4616      	mov	r6, r2
 800eeae:	f7fe fd33 	bl	800d918 <rcl_service_is_valid>
 800eeb2:	b1f8      	cbz	r0, 800eef4 <rcl_action_send_goal_response+0x54>
 800eeb4:	6820      	ldr	r0, [r4, #0]
 800eeb6:	3004      	adds	r0, #4
 800eeb8:	f7fe fd2e 	bl	800d918 <rcl_service_is_valid>
 800eebc:	b1d0      	cbz	r0, 800eef4 <rcl_action_send_goal_response+0x54>
 800eebe:	6820      	ldr	r0, [r4, #0]
 800eec0:	3008      	adds	r0, #8
 800eec2:	f7fe fd29 	bl	800d918 <rcl_service_is_valid>
 800eec6:	b1a8      	cbz	r0, 800eef4 <rcl_action_send_goal_response+0x54>
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	300c      	adds	r0, #12
 800eecc:	f7f8 fbfa 	bl	80076c4 <rcl_publisher_is_valid>
 800eed0:	b180      	cbz	r0, 800eef4 <rcl_action_send_goal_response+0x54>
 800eed2:	6820      	ldr	r0, [r4, #0]
 800eed4:	3010      	adds	r0, #16
 800eed6:	f7f8 fbf5 	bl	80076c4 <rcl_publisher_is_valid>
 800eeda:	b158      	cbz	r0, 800eef4 <rcl_action_send_goal_response+0x54>
 800eedc:	b195      	cbz	r5, 800ef04 <rcl_action_send_goal_response+0x64>
 800eede:	b18e      	cbz	r6, 800ef04 <rcl_action_send_goal_response+0x64>
 800eee0:	6820      	ldr	r0, [r4, #0]
 800eee2:	4632      	mov	r2, r6
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7fe fcff 	bl	800d8e8 <rcl_send_response>
 800eeea:	b110      	cbz	r0, 800eef2 <rcl_action_send_goal_response+0x52>
 800eeec:	2802      	cmp	r0, #2
 800eeee:	bf18      	it	ne
 800eef0:	2001      	movne	r0, #1
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	f7f9 fb04 	bl	8008500 <rcutils_reset_error>
 800eef8:	f640 0098 	movw	r0, #2200	@ 0x898
 800eefc:	bd70      	pop	{r4, r5, r6, pc}
 800eefe:	f640 0098 	movw	r0, #2200	@ 0x898
 800ef02:	bd70      	pop	{r4, r5, r6, pc}
 800ef04:	200b      	movs	r0, #11
 800ef06:	bd70      	pop	{r4, r5, r6, pc}
 800ef08:	f640 0098 	movw	r0, #2200	@ 0x898
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop

0800ef10 <rcl_action_take_result_request>:
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d03a      	beq.n	800ef8a <rcl_action_take_result_request+0x7a>
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	4604      	mov	r4, r0
 800ef18:	6800      	ldr	r0, [r0, #0]
 800ef1a:	b388      	cbz	r0, 800ef80 <rcl_action_take_result_request+0x70>
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	4616      	mov	r6, r2
 800ef20:	f7fe fcfa 	bl	800d918 <rcl_service_is_valid>
 800ef24:	b338      	cbz	r0, 800ef76 <rcl_action_take_result_request+0x66>
 800ef26:	6820      	ldr	r0, [r4, #0]
 800ef28:	3004      	adds	r0, #4
 800ef2a:	f7fe fcf5 	bl	800d918 <rcl_service_is_valid>
 800ef2e:	b310      	cbz	r0, 800ef76 <rcl_action_take_result_request+0x66>
 800ef30:	6820      	ldr	r0, [r4, #0]
 800ef32:	3008      	adds	r0, #8
 800ef34:	f7fe fcf0 	bl	800d918 <rcl_service_is_valid>
 800ef38:	b1e8      	cbz	r0, 800ef76 <rcl_action_take_result_request+0x66>
 800ef3a:	6820      	ldr	r0, [r4, #0]
 800ef3c:	300c      	adds	r0, #12
 800ef3e:	f7f8 fbc1 	bl	80076c4 <rcl_publisher_is_valid>
 800ef42:	b1c0      	cbz	r0, 800ef76 <rcl_action_take_result_request+0x66>
 800ef44:	6820      	ldr	r0, [r4, #0]
 800ef46:	3010      	adds	r0, #16
 800ef48:	f7f8 fbbc 	bl	80076c4 <rcl_publisher_is_valid>
 800ef4c:	b198      	cbz	r0, 800ef76 <rcl_action_take_result_request+0x66>
 800ef4e:	b1d5      	cbz	r5, 800ef86 <rcl_action_take_result_request+0x76>
 800ef50:	b1ce      	cbz	r6, 800ef86 <rcl_action_take_result_request+0x76>
 800ef52:	6820      	ldr	r0, [r4, #0]
 800ef54:	4632      	mov	r2, r6
 800ef56:	4629      	mov	r1, r5
 800ef58:	3008      	adds	r0, #8
 800ef5a:	f7fe fc85 	bl	800d868 <rcl_take_request>
 800ef5e:	b148      	cbz	r0, 800ef74 <rcl_action_take_result_request+0x64>
 800ef60:	280a      	cmp	r0, #10
 800ef62:	d007      	beq.n	800ef74 <rcl_action_take_result_request+0x64>
 800ef64:	f240 2259 	movw	r2, #601	@ 0x259
 800ef68:	f640 0399 	movw	r3, #2201	@ 0x899
 800ef6c:	4290      	cmp	r0, r2
 800ef6e:	bf0c      	ite	eq
 800ef70:	4618      	moveq	r0, r3
 800ef72:	2001      	movne	r0, #1
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
 800ef76:	f7f9 fac3 	bl	8008500 <rcutils_reset_error>
 800ef7a:	f640 0098 	movw	r0, #2200	@ 0x898
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
 800ef80:	f640 0098 	movw	r0, #2200	@ 0x898
 800ef84:	bd70      	pop	{r4, r5, r6, pc}
 800ef86:	200b      	movs	r0, #11
 800ef88:	bd70      	pop	{r4, r5, r6, pc}
 800ef8a:	f640 0098 	movw	r0, #2200	@ 0x898
 800ef8e:	4770      	bx	lr

0800ef90 <rcl_action_take_cancel_request>:
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d03a      	beq.n	800f00a <rcl_action_take_cancel_request+0x7a>
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	4604      	mov	r4, r0
 800ef98:	6800      	ldr	r0, [r0, #0]
 800ef9a:	b388      	cbz	r0, 800f000 <rcl_action_take_cancel_request+0x70>
 800ef9c:	460d      	mov	r5, r1
 800ef9e:	4616      	mov	r6, r2
 800efa0:	f7fe fcba 	bl	800d918 <rcl_service_is_valid>
 800efa4:	b338      	cbz	r0, 800eff6 <rcl_action_take_cancel_request+0x66>
 800efa6:	6820      	ldr	r0, [r4, #0]
 800efa8:	3004      	adds	r0, #4
 800efaa:	f7fe fcb5 	bl	800d918 <rcl_service_is_valid>
 800efae:	b310      	cbz	r0, 800eff6 <rcl_action_take_cancel_request+0x66>
 800efb0:	6820      	ldr	r0, [r4, #0]
 800efb2:	3008      	adds	r0, #8
 800efb4:	f7fe fcb0 	bl	800d918 <rcl_service_is_valid>
 800efb8:	b1e8      	cbz	r0, 800eff6 <rcl_action_take_cancel_request+0x66>
 800efba:	6820      	ldr	r0, [r4, #0]
 800efbc:	300c      	adds	r0, #12
 800efbe:	f7f8 fb81 	bl	80076c4 <rcl_publisher_is_valid>
 800efc2:	b1c0      	cbz	r0, 800eff6 <rcl_action_take_cancel_request+0x66>
 800efc4:	6820      	ldr	r0, [r4, #0]
 800efc6:	3010      	adds	r0, #16
 800efc8:	f7f8 fb7c 	bl	80076c4 <rcl_publisher_is_valid>
 800efcc:	b198      	cbz	r0, 800eff6 <rcl_action_take_cancel_request+0x66>
 800efce:	b1d5      	cbz	r5, 800f006 <rcl_action_take_cancel_request+0x76>
 800efd0:	b1ce      	cbz	r6, 800f006 <rcl_action_take_cancel_request+0x76>
 800efd2:	6820      	ldr	r0, [r4, #0]
 800efd4:	4632      	mov	r2, r6
 800efd6:	4629      	mov	r1, r5
 800efd8:	3004      	adds	r0, #4
 800efda:	f7fe fc45 	bl	800d868 <rcl_take_request>
 800efde:	b148      	cbz	r0, 800eff4 <rcl_action_take_cancel_request+0x64>
 800efe0:	280a      	cmp	r0, #10
 800efe2:	d007      	beq.n	800eff4 <rcl_action_take_cancel_request+0x64>
 800efe4:	f240 2259 	movw	r2, #601	@ 0x259
 800efe8:	f640 0399 	movw	r3, #2201	@ 0x899
 800efec:	4290      	cmp	r0, r2
 800efee:	bf0c      	ite	eq
 800eff0:	4618      	moveq	r0, r3
 800eff2:	2001      	movne	r0, #1
 800eff4:	bd70      	pop	{r4, r5, r6, pc}
 800eff6:	f7f9 fa83 	bl	8008500 <rcutils_reset_error>
 800effa:	f640 0098 	movw	r0, #2200	@ 0x898
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	f640 0098 	movw	r0, #2200	@ 0x898
 800f004:	bd70      	pop	{r4, r5, r6, pc}
 800f006:	200b      	movs	r0, #11
 800f008:	bd70      	pop	{r4, r5, r6, pc}
 800f00a:	f640 0098 	movw	r0, #2200	@ 0x898
 800f00e:	4770      	bx	lr

0800f010 <rcl_action_send_cancel_response>:
 800f010:	b398      	cbz	r0, 800f07a <rcl_action_send_cancel_response+0x6a>
 800f012:	b570      	push	{r4, r5, r6, lr}
 800f014:	4604      	mov	r4, r0
 800f016:	6800      	ldr	r0, [r0, #0]
 800f018:	b350      	cbz	r0, 800f070 <rcl_action_send_cancel_response+0x60>
 800f01a:	460d      	mov	r5, r1
 800f01c:	4616      	mov	r6, r2
 800f01e:	f7fe fc7b 	bl	800d918 <rcl_service_is_valid>
 800f022:	b300      	cbz	r0, 800f066 <rcl_action_send_cancel_response+0x56>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	3004      	adds	r0, #4
 800f028:	f7fe fc76 	bl	800d918 <rcl_service_is_valid>
 800f02c:	b1d8      	cbz	r0, 800f066 <rcl_action_send_cancel_response+0x56>
 800f02e:	6820      	ldr	r0, [r4, #0]
 800f030:	3008      	adds	r0, #8
 800f032:	f7fe fc71 	bl	800d918 <rcl_service_is_valid>
 800f036:	b1b0      	cbz	r0, 800f066 <rcl_action_send_cancel_response+0x56>
 800f038:	6820      	ldr	r0, [r4, #0]
 800f03a:	300c      	adds	r0, #12
 800f03c:	f7f8 fb42 	bl	80076c4 <rcl_publisher_is_valid>
 800f040:	b188      	cbz	r0, 800f066 <rcl_action_send_cancel_response+0x56>
 800f042:	6820      	ldr	r0, [r4, #0]
 800f044:	3010      	adds	r0, #16
 800f046:	f7f8 fb3d 	bl	80076c4 <rcl_publisher_is_valid>
 800f04a:	b160      	cbz	r0, 800f066 <rcl_action_send_cancel_response+0x56>
 800f04c:	b19d      	cbz	r5, 800f076 <rcl_action_send_cancel_response+0x66>
 800f04e:	b196      	cbz	r6, 800f076 <rcl_action_send_cancel_response+0x66>
 800f050:	6820      	ldr	r0, [r4, #0]
 800f052:	4632      	mov	r2, r6
 800f054:	4629      	mov	r1, r5
 800f056:	3004      	adds	r0, #4
 800f058:	f7fe fc46 	bl	800d8e8 <rcl_send_response>
 800f05c:	b110      	cbz	r0, 800f064 <rcl_action_send_cancel_response+0x54>
 800f05e:	2802      	cmp	r0, #2
 800f060:	bf18      	it	ne
 800f062:	2001      	movne	r0, #1
 800f064:	bd70      	pop	{r4, r5, r6, pc}
 800f066:	f7f9 fa4b 	bl	8008500 <rcutils_reset_error>
 800f06a:	f640 0098 	movw	r0, #2200	@ 0x898
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	f640 0098 	movw	r0, #2200	@ 0x898
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	200b      	movs	r0, #11
 800f078:	bd70      	pop	{r4, r5, r6, pc}
 800f07a:	f640 0098 	movw	r0, #2200	@ 0x898
 800f07e:	4770      	bx	lr

0800f080 <rcl_action_wait_set_add_action_server>:
 800f080:	2800      	cmp	r0, #0
 800f082:	d04d      	beq.n	800f120 <rcl_action_wait_set_add_action_server+0xa0>
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	460c      	mov	r4, r1
 800f088:	b159      	cbz	r1, 800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f08a:	4605      	mov	r5, r0
 800f08c:	6808      	ldr	r0, [r1, #0]
 800f08e:	b140      	cbz	r0, 800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f090:	4616      	mov	r6, r2
 800f092:	f7fe fc41 	bl	800d918 <rcl_service_is_valid>
 800f096:	b120      	cbz	r0, 800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f098:	6820      	ldr	r0, [r4, #0]
 800f09a:	3004      	adds	r0, #4
 800f09c:	f7fe fc3c 	bl	800d918 <rcl_service_is_valid>
 800f0a0:	b910      	cbnz	r0, 800f0a8 <rcl_action_wait_set_add_action_server+0x28>
 800f0a2:	f640 0098 	movw	r0, #2200	@ 0x898
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	3008      	adds	r0, #8
 800f0ac:	f7fe fc34 	bl	800d918 <rcl_service_is_valid>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d0f6      	beq.n	800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f0b4:	6820      	ldr	r0, [r4, #0]
 800f0b6:	300c      	adds	r0, #12
 800f0b8:	f7f8 fb1c 	bl	80076f4 <rcl_publisher_is_valid_except_context>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d0f0      	beq.n	800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f0c0:	6820      	ldr	r0, [r4, #0]
 800f0c2:	3010      	adds	r0, #16
 800f0c4:	f7f8 fb16 	bl	80076f4 <rcl_publisher_is_valid_except_context>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d0ea      	beq.n	800f0a2 <rcl_action_wait_set_add_action_server+0x22>
 800f0cc:	6821      	ldr	r1, [r4, #0]
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800f0d4:	f7ff face 	bl	800e674 <rcl_wait_set_add_service>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d1e4      	bne.n	800f0a6 <rcl_action_wait_set_add_action_server+0x26>
 800f0dc:	6821      	ldr	r1, [r4, #0]
 800f0de:	4628      	mov	r0, r5
 800f0e0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800f0e4:	3104      	adds	r1, #4
 800f0e6:	f7ff fac5 	bl	800e674 <rcl_wait_set_add_service>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d1db      	bne.n	800f0a6 <rcl_action_wait_set_add_action_server+0x26>
 800f0ee:	6821      	ldr	r1, [r4, #0]
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800f0f6:	3108      	adds	r1, #8
 800f0f8:	f7ff fabc 	bl	800e674 <rcl_wait_set_add_service>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d1d2      	bne.n	800f0a6 <rcl_action_wait_set_add_action_server+0x26>
 800f100:	6821      	ldr	r1, [r4, #0]
 800f102:	4628      	mov	r0, r5
 800f104:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800f108:	3114      	adds	r1, #20
 800f10a:	f7ff fa57 	bl	800e5bc <rcl_wait_set_add_timer>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d1c9      	bne.n	800f0a6 <rcl_action_wait_set_add_action_server+0x26>
 800f112:	2e00      	cmp	r6, #0
 800f114:	d0c7      	beq.n	800f0a6 <rcl_action_wait_set_add_action_server+0x26>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800f11c:	6033      	str	r3, [r6, #0]
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop

0800f128 <rcl_action_server_wait_set_get_entities_ready>:
 800f128:	2800      	cmp	r0, #0
 800f12a:	d05a      	beq.n	800f1e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	460c      	mov	r4, r1
 800f130:	b161      	cbz	r1, 800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f132:	4605      	mov	r5, r0
 800f134:	6808      	ldr	r0, [r1, #0]
 800f136:	b148      	cbz	r0, 800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f138:	4616      	mov	r6, r2
 800f13a:	461f      	mov	r7, r3
 800f13c:	f7fe fbec 	bl	800d918 <rcl_service_is_valid>
 800f140:	b120      	cbz	r0, 800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f142:	6820      	ldr	r0, [r4, #0]
 800f144:	3004      	adds	r0, #4
 800f146:	f7fe fbe7 	bl	800d918 <rcl_service_is_valid>
 800f14a:	b910      	cbnz	r0, 800f152 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800f14c:	f640 0098 	movw	r0, #2200	@ 0x898
 800f150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f152:	6820      	ldr	r0, [r4, #0]
 800f154:	3008      	adds	r0, #8
 800f156:	f7fe fbdf 	bl	800d918 <rcl_service_is_valid>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d0f6      	beq.n	800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f15e:	6820      	ldr	r0, [r4, #0]
 800f160:	300c      	adds	r0, #12
 800f162:	f7f8 fac7 	bl	80076f4 <rcl_publisher_is_valid_except_context>
 800f166:	2800      	cmp	r0, #0
 800f168:	d0f0      	beq.n	800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f16a:	6820      	ldr	r0, [r4, #0]
 800f16c:	3010      	adds	r0, #16
 800f16e:	f7f8 fac1 	bl	80076f4 <rcl_publisher_is_valid_except_context>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0ea      	beq.n	800f14c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800f176:	b3be      	cbz	r6, 800f1e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800f178:	b3b7      	cbz	r7, 800f1e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800f17a:	9b06      	ldr	r3, [sp, #24]
 800f17c:	b3a3      	cbz	r3, 800f1e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800f17e:	9b07      	ldr	r3, [sp, #28]
 800f180:	b393      	cbz	r3, 800f1e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800f182:	6821      	ldr	r1, [r4, #0]
 800f184:	692a      	ldr	r2, [r5, #16]
 800f186:	6a2c      	ldr	r4, [r5, #32]
 800f188:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800f18c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800f190:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800f194:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800f198:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800f19c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800f1a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800f1a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800f1a8:	1a64      	subs	r4, r4, r1
 800f1aa:	fab4 f484 	clz	r4, r4
 800f1ae:	0964      	lsrs	r4, r4, #5
 800f1b0:	7034      	strb	r4, [r6, #0]
 800f1b2:	1d0c      	adds	r4, r1, #4
 800f1b4:	1b1b      	subs	r3, r3, r4
 800f1b6:	fab3 f383 	clz	r3, r3
 800f1ba:	095b      	lsrs	r3, r3, #5
 800f1bc:	f101 0408 	add.w	r4, r1, #8
 800f1c0:	703b      	strb	r3, [r7, #0]
 800f1c2:	f101 0314 	add.w	r3, r1, #20
 800f1c6:	1b01      	subs	r1, r0, r4
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	fab1 f181 	clz	r1, r1
 800f1ce:	9a06      	ldr	r2, [sp, #24]
 800f1d0:	0949      	lsrs	r1, r1, #5
 800f1d2:	7011      	strb	r1, [r2, #0]
 800f1d4:	fab3 f383 	clz	r3, r3
 800f1d8:	9a07      	ldr	r2, [sp, #28]
 800f1da:	095b      	lsrs	r3, r3, #5
 800f1dc:	2000      	movs	r0, #0
 800f1de:	7013      	strb	r3, [r2, #0]
 800f1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f1e6:	4770      	bx	lr
 800f1e8:	200b      	movs	r0, #11
 800f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1ec <_execute_event_handler>:
 800f1ec:	2002      	movs	r0, #2
 800f1ee:	4770      	bx	lr

0800f1f0 <_cancel_goal_event_handler>:
 800f1f0:	2003      	movs	r0, #3
 800f1f2:	4770      	bx	lr

0800f1f4 <_succeed_event_handler>:
 800f1f4:	2004      	movs	r0, #4
 800f1f6:	4770      	bx	lr

0800f1f8 <_abort_event_handler>:
 800f1f8:	2006      	movs	r0, #6
 800f1fa:	4770      	bx	lr

0800f1fc <_canceled_event_handler>:
 800f1fc:	2005      	movs	r0, #5
 800f1fe:	4770      	bx	lr

0800f200 <rcl_action_transition_goal_state>:
 800f200:	b2c2      	uxtb	r2, r0
 800f202:	2a06      	cmp	r2, #6
 800f204:	d80c      	bhi.n	800f220 <rcl_action_transition_goal_state+0x20>
 800f206:	2904      	cmp	r1, #4
 800f208:	d80a      	bhi.n	800f220 <rcl_action_transition_goal_state+0x20>
 800f20a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800f20e:	b410      	push	{r4}
 800f210:	1853      	adds	r3, r2, r1
 800f212:	4c06      	ldr	r4, [pc, #24]	@ (800f22c <rcl_action_transition_goal_state+0x2c>)
 800f214:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800f218:	b123      	cbz	r3, 800f224 <rcl_action_transition_goal_state+0x24>
 800f21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f21e:	4718      	bx	r3
 800f220:	2000      	movs	r0, #0
 800f222:	4770      	bx	lr
 800f224:	2000      	movs	r0, #0
 800f226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	08014f90 	.word	0x08014f90

0800f230 <rcl_action_get_zero_initialized_cancel_response>:
 800f230:	b510      	push	{r4, lr}
 800f232:	4c07      	ldr	r4, [pc, #28]	@ (800f250 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800f234:	4686      	mov	lr, r0
 800f236:	4684      	mov	ip, r0
 800f238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f23a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f23e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	f8cc 3000 	str.w	r3, [ip]
 800f24a:	4670      	mov	r0, lr
 800f24c:	bd10      	pop	{r4, pc}
 800f24e:	bf00      	nop
 800f250:	0801501c 	.word	0x0801501c

0800f254 <rclc_action_send_result_request>:
 800f254:	b1d0      	cbz	r0, 800f28c <rclc_action_send_result_request+0x38>
 800f256:	b500      	push	{lr}
 800f258:	4684      	mov	ip, r0
 800f25a:	b087      	sub	sp, #28
 800f25c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800f260:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800f264:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800f268:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800f26c:	f10d 0e08 	add.w	lr, sp, #8
 800f270:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f274:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800f278:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800f27c:	a902      	add	r1, sp, #8
 800f27e:	3010      	adds	r0, #16
 800f280:	f7ff fbda 	bl	800ea38 <rcl_action_send_result_request>
 800f284:	b920      	cbnz	r0, 800f290 <rclc_action_send_result_request+0x3c>
 800f286:	b007      	add	sp, #28
 800f288:	f85d fb04 	ldr.w	pc, [sp], #4
 800f28c:	200b      	movs	r0, #11
 800f28e:	4770      	bx	lr
 800f290:	9001      	str	r0, [sp, #4]
 800f292:	f7f9 f935 	bl	8008500 <rcutils_reset_error>
 800f296:	9801      	ldr	r0, [sp, #4]
 800f298:	b007      	add	sp, #28
 800f29a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f29e:	bf00      	nop

0800f2a0 <rclc_action_take_goal_handle>:
 800f2a0:	b160      	cbz	r0, 800f2bc <rclc_action_take_goal_handle+0x1c>
 800f2a2:	6883      	ldr	r3, [r0, #8]
 800f2a4:	b143      	cbz	r3, 800f2b8 <rclc_action_take_goal_handle+0x18>
 800f2a6:	6819      	ldr	r1, [r3, #0]
 800f2a8:	6081      	str	r1, [r0, #8]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	721a      	strb	r2, [r3, #8]
 800f2ae:	68c1      	ldr	r1, [r0, #12]
 800f2b0:	6019      	str	r1, [r3, #0]
 800f2b2:	621a      	str	r2, [r3, #32]
 800f2b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 800f2b6:	60c3      	str	r3, [r0, #12]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	4770      	bx	lr
 800f2bc:	4603      	mov	r3, r0
 800f2be:	e7fb      	b.n	800f2b8 <rclc_action_take_goal_handle+0x18>

0800f2c0 <rclc_action_remove_used_goal_handle>:
 800f2c0:	b180      	cbz	r0, 800f2e4 <rclc_action_remove_used_goal_handle+0x24>
 800f2c2:	b179      	cbz	r1, 800f2e4 <rclc_action_remove_used_goal_handle+0x24>
 800f2c4:	68c3      	ldr	r3, [r0, #12]
 800f2c6:	4299      	cmp	r1, r3
 800f2c8:	d00d      	beq.n	800f2e6 <rclc_action_remove_used_goal_handle+0x26>
 800f2ca:	b12b      	cbz	r3, 800f2d8 <rclc_action_remove_used_goal_handle+0x18>
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	4291      	cmp	r1, r2
 800f2d0:	d003      	beq.n	800f2da <rclc_action_remove_used_goal_handle+0x1a>
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1f9      	bne.n	800f2cc <rclc_action_remove_used_goal_handle+0xc>
 800f2d8:	4770      	bx	lr
 800f2da:	680a      	ldr	r2, [r1, #0]
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	6883      	ldr	r3, [r0, #8]
 800f2e0:	600b      	str	r3, [r1, #0]
 800f2e2:	6081      	str	r1, [r0, #8]
 800f2e4:	4770      	bx	lr
 800f2e6:	680b      	ldr	r3, [r1, #0]
 800f2e8:	60c3      	str	r3, [r0, #12]
 800f2ea:	e7f8      	b.n	800f2de <rclc_action_remove_used_goal_handle+0x1e>

0800f2ec <rclc_action_find_goal_handle_by_uuid>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	b180      	cbz	r0, 800f312 <rclc_action_find_goal_handle_by_uuid+0x26>
 800f2f0:	460d      	mov	r5, r1
 800f2f2:	b181      	cbz	r1, 800f316 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800f2f4:	68c4      	ldr	r4, [r0, #12]
 800f2f6:	b914      	cbnz	r4, 800f2fe <rclc_action_find_goal_handle_by_uuid+0x12>
 800f2f8:	e009      	b.n	800f30e <rclc_action_find_goal_handle_by_uuid+0x22>
 800f2fa:	6824      	ldr	r4, [r4, #0]
 800f2fc:	b13c      	cbz	r4, 800f30e <rclc_action_find_goal_handle_by_uuid+0x22>
 800f2fe:	f104 0009 	add.w	r0, r4, #9
 800f302:	2210      	movs	r2, #16
 800f304:	4629      	mov	r1, r5
 800f306:	f004 fbe3 	bl	8013ad0 <memcmp>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d1f5      	bne.n	800f2fa <rclc_action_find_goal_handle_by_uuid+0xe>
 800f30e:	4620      	mov	r0, r4
 800f310:	bd38      	pop	{r3, r4, r5, pc}
 800f312:	4604      	mov	r4, r0
 800f314:	e7fb      	b.n	800f30e <rclc_action_find_goal_handle_by_uuid+0x22>
 800f316:	460c      	mov	r4, r1
 800f318:	e7f9      	b.n	800f30e <rclc_action_find_goal_handle_by_uuid+0x22>
 800f31a:	bf00      	nop

0800f31c <rclc_action_find_first_handle_by_status>:
 800f31c:	b140      	cbz	r0, 800f330 <rclc_action_find_first_handle_by_status+0x14>
 800f31e:	68c0      	ldr	r0, [r0, #12]
 800f320:	b910      	cbnz	r0, 800f328 <rclc_action_find_first_handle_by_status+0xc>
 800f322:	e005      	b.n	800f330 <rclc_action_find_first_handle_by_status+0x14>
 800f324:	6800      	ldr	r0, [r0, #0]
 800f326:	b118      	cbz	r0, 800f330 <rclc_action_find_first_handle_by_status+0x14>
 800f328:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f32c:	428b      	cmp	r3, r1
 800f32e:	d1f9      	bne.n	800f324 <rclc_action_find_first_handle_by_status+0x8>
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop

0800f334 <rclc_action_find_first_terminated_handle>:
 800f334:	b140      	cbz	r0, 800f348 <rclc_action_find_first_terminated_handle+0x14>
 800f336:	68c0      	ldr	r0, [r0, #12]
 800f338:	b910      	cbnz	r0, 800f340 <rclc_action_find_first_terminated_handle+0xc>
 800f33a:	e005      	b.n	800f348 <rclc_action_find_first_terminated_handle+0x14>
 800f33c:	6800      	ldr	r0, [r0, #0]
 800f33e:	b118      	cbz	r0, 800f348 <rclc_action_find_first_terminated_handle+0x14>
 800f340:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f344:	2b03      	cmp	r3, #3
 800f346:	ddf9      	ble.n	800f33c <rclc_action_find_first_terminated_handle+0x8>
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop

0800f34c <rclc_action_find_handle_by_goal_request_sequence_number>:
 800f34c:	b170      	cbz	r0, 800f36c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800f34e:	68c0      	ldr	r0, [r0, #12]
 800f350:	b160      	cbz	r0, 800f36c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800f352:	b410      	push	{r4}
 800f354:	e001      	b.n	800f35a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800f356:	6800      	ldr	r0, [r0, #0]
 800f358:	b128      	cbz	r0, 800f366 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800f35a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800f35e:	4299      	cmp	r1, r3
 800f360:	bf08      	it	eq
 800f362:	4294      	cmpeq	r4, r2
 800f364:	d1f7      	bne.n	800f356 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800f366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop

0800f370 <rclc_action_find_handle_by_result_request_sequence_number>:
 800f370:	b170      	cbz	r0, 800f390 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800f372:	68c0      	ldr	r0, [r0, #12]
 800f374:	b160      	cbz	r0, 800f390 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800f376:	b410      	push	{r4}
 800f378:	e001      	b.n	800f37e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800f37a:	6800      	ldr	r0, [r0, #0]
 800f37c:	b128      	cbz	r0, 800f38a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800f37e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800f382:	4299      	cmp	r1, r3
 800f384:	bf08      	it	eq
 800f386:	4294      	cmpeq	r4, r2
 800f388:	d1f7      	bne.n	800f37a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800f38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop

0800f394 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800f394:	b170      	cbz	r0, 800f3b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800f396:	68c0      	ldr	r0, [r0, #12]
 800f398:	b160      	cbz	r0, 800f3b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800f39a:	b410      	push	{r4}
 800f39c:	e001      	b.n	800f3a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800f39e:	6800      	ldr	r0, [r0, #0]
 800f3a0:	b128      	cbz	r0, 800f3ae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800f3a2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800f3a6:	4299      	cmp	r1, r3
 800f3a8:	bf08      	it	eq
 800f3aa:	4294      	cmpeq	r4, r2
 800f3ac:	d1f7      	bne.n	800f39e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800f3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop

0800f3b8 <rclc_action_find_first_handle_with_goal_response>:
 800f3b8:	b140      	cbz	r0, 800f3cc <rclc_action_find_first_handle_with_goal_response+0x14>
 800f3ba:	68c0      	ldr	r0, [r0, #12]
 800f3bc:	b910      	cbnz	r0, 800f3c4 <rclc_action_find_first_handle_with_goal_response+0xc>
 800f3be:	e005      	b.n	800f3cc <rclc_action_find_first_handle_with_goal_response+0x14>
 800f3c0:	6800      	ldr	r0, [r0, #0]
 800f3c2:	b118      	cbz	r0, 800f3cc <rclc_action_find_first_handle_with_goal_response+0x14>
 800f3c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0f9      	beq.n	800f3c0 <rclc_action_find_first_handle_with_goal_response+0x8>
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop

0800f3d0 <rclc_action_find_first_handle_with_result_response>:
 800f3d0:	b140      	cbz	r0, 800f3e4 <rclc_action_find_first_handle_with_result_response+0x14>
 800f3d2:	68c0      	ldr	r0, [r0, #12]
 800f3d4:	b910      	cbnz	r0, 800f3dc <rclc_action_find_first_handle_with_result_response+0xc>
 800f3d6:	e005      	b.n	800f3e4 <rclc_action_find_first_handle_with_result_response+0x14>
 800f3d8:	6800      	ldr	r0, [r0, #0]
 800f3da:	b118      	cbz	r0, 800f3e4 <rclc_action_find_first_handle_with_result_response+0x14>
 800f3dc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d0f9      	beq.n	800f3d8 <rclc_action_find_first_handle_with_result_response+0x8>
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop

0800f3e8 <rclc_action_server_response_goal_request>:
 800f3e8:	b198      	cbz	r0, 800f412 <rclc_action_server_response_goal_request+0x2a>
 800f3ea:	b510      	push	{r4, lr}
 800f3ec:	6844      	ldr	r4, [r0, #4]
 800f3ee:	b086      	sub	sp, #24
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	9205      	str	r2, [sp, #20]
 800f3fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800f3fe:	aa03      	add	r2, sp, #12
 800f400:	f104 0010 	add.w	r0, r4, #16
 800f404:	f88d 300c 	strb.w	r3, [sp, #12]
 800f408:	f7ff fd4a 	bl	800eea0 <rcl_action_send_goal_response>
 800f40c:	b918      	cbnz	r0, 800f416 <rclc_action_server_response_goal_request+0x2e>
 800f40e:	b006      	add	sp, #24
 800f410:	bd10      	pop	{r4, pc}
 800f412:	200b      	movs	r0, #11
 800f414:	4770      	bx	lr
 800f416:	9001      	str	r0, [sp, #4]
 800f418:	f7f9 f872 	bl	8008500 <rcutils_reset_error>
 800f41c:	9801      	ldr	r0, [sp, #4]
 800f41e:	b006      	add	sp, #24
 800f420:	bd10      	pop	{r4, pc}
 800f422:	bf00      	nop
 800f424:	0000      	movs	r0, r0
	...

0800f428 <rclc_action_server_goal_cancel_accept>:
 800f428:	b310      	cbz	r0, 800f470 <rclc_action_server_goal_cancel_accept+0x48>
 800f42a:	b510      	push	{r4, lr}
 800f42c:	b090      	sub	sp, #64	@ 0x40
 800f42e:	4604      	mov	r4, r0
 800f430:	a806      	add	r0, sp, #24
 800f432:	f7ff fefd 	bl	800f230 <rcl_action_get_zero_initialized_cancel_response>
 800f436:	2300      	movs	r3, #0
 800f438:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800f43c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800f440:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800f444:	f88d 3018 	strb.w	r3, [sp, #24]
 800f448:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800f44c:	f8cd d01c 	str.w	sp, [sp, #28]
 800f450:	46ec      	mov	ip, sp
 800f452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f456:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800f478 <rclc_action_server_goal_cancel_accept+0x50>
 800f45a:	6860      	ldr	r0, [r4, #4]
 800f45c:	aa06      	add	r2, sp, #24
 800f45e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800f462:	3010      	adds	r0, #16
 800f464:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f468:	f7ff fdd2 	bl	800f010 <rcl_action_send_cancel_response>
 800f46c:	b010      	add	sp, #64	@ 0x40
 800f46e:	bd10      	pop	{r4, pc}
 800f470:	200b      	movs	r0, #11
 800f472:	4770      	bx	lr
 800f474:	f3af 8000 	nop.w
 800f478:	00000001 	.word	0x00000001
 800f47c:	00000001 	.word	0x00000001

0800f480 <rclc_action_server_goal_cancel_reject>:
 800f480:	b082      	sub	sp, #8
 800f482:	b530      	push	{r4, r5, lr}
 800f484:	b08b      	sub	sp, #44	@ 0x2c
 800f486:	ac0e      	add	r4, sp, #56	@ 0x38
 800f488:	e884 000c 	stmia.w	r4, {r2, r3}
 800f48c:	b188      	cbz	r0, 800f4b2 <rclc_action_server_goal_cancel_reject+0x32>
 800f48e:	4604      	mov	r4, r0
 800f490:	a801      	add	r0, sp, #4
 800f492:	460d      	mov	r5, r1
 800f494:	f7ff fecc 	bl	800f230 <rcl_action_get_zero_initialized_cancel_response>
 800f498:	aa01      	add	r2, sp, #4
 800f49a:	a90e      	add	r1, sp, #56	@ 0x38
 800f49c:	f104 0010 	add.w	r0, r4, #16
 800f4a0:	f88d 5004 	strb.w	r5, [sp, #4]
 800f4a4:	f7ff fdb4 	bl	800f010 <rcl_action_send_cancel_response>
 800f4a8:	b00b      	add	sp, #44	@ 0x2c
 800f4aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ae:	b002      	add	sp, #8
 800f4b0:	4770      	bx	lr
 800f4b2:	200b      	movs	r0, #11
 800f4b4:	b00b      	add	sp, #44	@ 0x2c
 800f4b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ba:	b002      	add	sp, #8
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop

0800f4c0 <__atomic_load_8>:
 800f4c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f4c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f4c8:	4a15      	ldr	r2, [pc, #84]	@ (800f520 <__atomic_load_8+0x60>)
 800f4ca:	4b16      	ldr	r3, [pc, #88]	@ (800f524 <__atomic_load_8+0x64>)
 800f4cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f4d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f4d4:	fb02 f101 	mul.w	r1, r2, r1
 800f4d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f4dc:	fba3 2301 	umull	r2, r3, r3, r1
 800f4e0:	091b      	lsrs	r3, r3, #4
 800f4e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f4e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800f4ea:	b4d0      	push	{r4, r6, r7}
 800f4ec:	4c0e      	ldr	r4, [pc, #56]	@ (800f528 <__atomic_load_8+0x68>)
 800f4ee:	1ac9      	subs	r1, r1, r3
 800f4f0:	1862      	adds	r2, r4, r1
 800f4f2:	f04f 0c01 	mov.w	ip, #1
 800f4f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 800f4fa:	e8c2 cf46 	strexb	r6, ip, [r2]
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	d1f9      	bne.n	800f4f6 <__atomic_load_8+0x36>
 800f502:	f3bf 8f5b 	dmb	ish
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1f4      	bne.n	800f4f6 <__atomic_load_8+0x36>
 800f50c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f510:	f3bf 8f5b 	dmb	ish
 800f514:	5463      	strb	r3, [r4, r1]
 800f516:	4630      	mov	r0, r6
 800f518:	4639      	mov	r1, r7
 800f51a:	bcd0      	pop	{r4, r6, r7}
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	27d4eb2d 	.word	0x27d4eb2d
 800f524:	b21642c9 	.word	0xb21642c9
 800f528:	2000da00 	.word	0x2000da00

0800f52c <__atomic_store_8>:
 800f52c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f530:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f53a:	4c14      	ldr	r4, [pc, #80]	@ (800f58c <__atomic_store_8+0x60>)
 800f53c:	4d14      	ldr	r5, [pc, #80]	@ (800f590 <__atomic_store_8+0x64>)
 800f53e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f542:	fb04 f101 	mul.w	r1, r4, r1
 800f546:	4c13      	ldr	r4, [pc, #76]	@ (800f594 <__atomic_store_8+0x68>)
 800f548:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f54c:	fba4 4e01 	umull	r4, lr, r4, r1
 800f550:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800f554:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800f558:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800f55c:	eba1 0e0e 	sub.w	lr, r1, lr
 800f560:	eb05 0c0e 	add.w	ip, r5, lr
 800f564:	f04f 0401 	mov.w	r4, #1
 800f568:	e8dc 1f4f 	ldrexb	r1, [ip]
 800f56c:	e8cc 4f46 	strexb	r6, r4, [ip]
 800f570:	2e00      	cmp	r6, #0
 800f572:	d1f9      	bne.n	800f568 <__atomic_store_8+0x3c>
 800f574:	f3bf 8f5b 	dmb	ish
 800f578:	b2c9      	uxtb	r1, r1
 800f57a:	2900      	cmp	r1, #0
 800f57c:	d1f4      	bne.n	800f568 <__atomic_store_8+0x3c>
 800f57e:	e9c0 2300 	strd	r2, r3, [r0]
 800f582:	f3bf 8f5b 	dmb	ish
 800f586:	f805 100e 	strb.w	r1, [r5, lr]
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	27d4eb2d 	.word	0x27d4eb2d
 800f590:	2000da00 	.word	0x2000da00
 800f594:	b21642c9 	.word	0xb21642c9

0800f598 <__atomic_exchange_8>:
 800f598:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800f59c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800f5a0:	4916      	ldr	r1, [pc, #88]	@ (800f5fc <__atomic_exchange_8+0x64>)
 800f5a2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800f5a6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800f5aa:	fb01 fc0c 	mul.w	ip, r1, ip
 800f5ae:	4914      	ldr	r1, [pc, #80]	@ (800f600 <__atomic_exchange_8+0x68>)
 800f5b0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	fba1 010c 	umull	r0, r1, r1, ip
 800f5bc:	0909      	lsrs	r1, r1, #4
 800f5be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800f5c2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800f5c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f604 <__atomic_exchange_8+0x6c>)
 800f5c8:	ebac 0c01 	sub.w	ip, ip, r1
 800f5cc:	eb06 010c 	add.w	r1, r6, ip
 800f5d0:	f04f 0e01 	mov.w	lr, #1
 800f5d4:	e8d1 4f4f 	ldrexb	r4, [r1]
 800f5d8:	e8c1 ef40 	strexb	r0, lr, [r1]
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d1f9      	bne.n	800f5d4 <__atomic_exchange_8+0x3c>
 800f5e0:	f3bf 8f5b 	dmb	ish
 800f5e4:	b2e4      	uxtb	r4, r4
 800f5e6:	2c00      	cmp	r4, #0
 800f5e8:	d1f4      	bne.n	800f5d4 <__atomic_exchange_8+0x3c>
 800f5ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f5ee:	e9c5 2300 	strd	r2, r3, [r5]
 800f5f2:	f3bf 8f5b 	dmb	ish
 800f5f6:	f806 400c 	strb.w	r4, [r6, ip]
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	27d4eb2d 	.word	0x27d4eb2d
 800f600:	b21642c9 	.word	0xb21642c9
 800f604:	2000da00 	.word	0x2000da00

0800f608 <rcutils_get_env>:
 800f608:	b168      	cbz	r0, 800f626 <rcutils_get_env+0x1e>
 800f60a:	b510      	push	{r4, lr}
 800f60c:	460c      	mov	r4, r1
 800f60e:	b129      	cbz	r1, 800f61c <rcutils_get_env+0x14>
 800f610:	f003 feba 	bl	8013388 <getenv>
 800f614:	b120      	cbz	r0, 800f620 <rcutils_get_env+0x18>
 800f616:	6020      	str	r0, [r4, #0]
 800f618:	2000      	movs	r0, #0
 800f61a:	bd10      	pop	{r4, pc}
 800f61c:	4803      	ldr	r0, [pc, #12]	@ (800f62c <rcutils_get_env+0x24>)
 800f61e:	bd10      	pop	{r4, pc}
 800f620:	4b03      	ldr	r3, [pc, #12]	@ (800f630 <rcutils_get_env+0x28>)
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	bd10      	pop	{r4, pc}
 800f626:	4803      	ldr	r0, [pc, #12]	@ (800f634 <rcutils_get_env+0x2c>)
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	0801505c 	.word	0x0801505c
 800f630:	08015180 	.word	0x08015180
 800f634:	08015040 	.word	0x08015040

0800f638 <rcutils_is_directory>:
 800f638:	2000      	movs	r0, #0
 800f63a:	4770      	bx	lr

0800f63c <rcutils_join_path>:
 800f63c:	b082      	sub	sp, #8
 800f63e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800f642:	2000      	movs	r0, #0
 800f644:	b002      	add	sp, #8
 800f646:	4770      	bx	lr

0800f648 <rcutils_to_native_path>:
 800f648:	b084      	sub	sp, #16
 800f64a:	a801      	add	r0, sp, #4
 800f64c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f650:	b004      	add	sp, #16
 800f652:	2000      	movs	r0, #0
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop

0800f658 <rcutils_format_string_limit>:
 800f658:	b40f      	push	{r0, r1, r2, r3}
 800f65a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65c:	b083      	sub	sp, #12
 800f65e:	ac08      	add	r4, sp, #32
 800f660:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800f662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f666:	b34e      	cbz	r6, 800f6bc <rcutils_format_string_limit+0x64>
 800f668:	a808      	add	r0, sp, #32
 800f66a:	f7f8 ff25 	bl	80084b8 <rcutils_allocator_is_valid>
 800f66e:	b328      	cbz	r0, 800f6bc <rcutils_format_string_limit+0x64>
 800f670:	2100      	movs	r1, #0
 800f672:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f674:	4632      	mov	r2, r6
 800f676:	4608      	mov	r0, r1
 800f678:	e9cd 3300 	strd	r3, r3, [sp]
 800f67c:	f000 f8f4 	bl	800f868 <rcutils_vsnprintf>
 800f680:	1c43      	adds	r3, r0, #1
 800f682:	4605      	mov	r5, r0
 800f684:	d01a      	beq.n	800f6bc <rcutils_format_string_limit+0x64>
 800f686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f688:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f68a:	1c47      	adds	r7, r0, #1
 800f68c:	429f      	cmp	r7, r3
 800f68e:	bf84      	itt	hi
 800f690:	461f      	movhi	r7, r3
 800f692:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800f696:	4638      	mov	r0, r7
 800f698:	9b08      	ldr	r3, [sp, #32]
 800f69a:	4798      	blx	r3
 800f69c:	4604      	mov	r4, r0
 800f69e:	b168      	cbz	r0, 800f6bc <rcutils_format_string_limit+0x64>
 800f6a0:	9b01      	ldr	r3, [sp, #4]
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f000 f8df 	bl	800f868 <rcutils_vsnprintf>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	db02      	blt.n	800f6b4 <rcutils_format_string_limit+0x5c>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	5563      	strb	r3, [r4, r5]
 800f6b2:	e004      	b.n	800f6be <rcutils_format_string_limit+0x66>
 800f6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	4798      	blx	r3
 800f6bc:	2400      	movs	r4, #0
 800f6be:	4620      	mov	r0, r4
 800f6c0:	b003      	add	sp, #12
 800f6c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f6c6:	b004      	add	sp, #16
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop

0800f6cc <rcutils_repl_str>:
 800f6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d0:	ed2d 8b02 	vpush	{d8}
 800f6d4:	b087      	sub	sp, #28
 800f6d6:	4680      	mov	r8, r0
 800f6d8:	4608      	mov	r0, r1
 800f6da:	f8cd 8004 	str.w	r8, [sp, #4]
 800f6de:	ee08 2a10 	vmov	s16, r2
 800f6e2:	468a      	mov	sl, r1
 800f6e4:	4699      	mov	r9, r3
 800f6e6:	f7f0 fd85 	bl	80001f4 <strlen>
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	4647      	mov	r7, r8
 800f6ee:	9002      	str	r0, [sp, #8]
 800f6f0:	46b3      	mov	fp, r6
 800f6f2:	2510      	movs	r5, #16
 800f6f4:	46b0      	mov	r8, r6
 800f6f6:	e01d      	b.n	800f734 <rcutils_repl_str+0x68>
 800f6f8:	f10b 0b01 	add.w	fp, fp, #1
 800f6fc:	455e      	cmp	r6, fp
 800f6fe:	d211      	bcs.n	800f724 <rcutils_repl_str+0x58>
 800f700:	442e      	add	r6, r5
 800f702:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f706:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f70a:	00b1      	lsls	r1, r6, #2
 800f70c:	4798      	blx	r3
 800f70e:	2800      	cmp	r0, #0
 800f710:	f000 8088 	beq.w	800f824 <rcutils_repl_str+0x158>
 800f714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f718:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800f71c:	4680      	mov	r8, r0
 800f71e:	bf28      	it	cs
 800f720:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800f724:	9a01      	ldr	r2, [sp, #4]
 800f726:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800f72a:	1aa2      	subs	r2, r4, r2
 800f72c:	f843 2c04 	str.w	r2, [r3, #-4]
 800f730:	9b02      	ldr	r3, [sp, #8]
 800f732:	18e7      	adds	r7, r4, r3
 800f734:	4651      	mov	r1, sl
 800f736:	4638      	mov	r0, r7
 800f738:	f004 fa1b 	bl	8013b72 <strstr>
 800f73c:	4604      	mov	r4, r0
 800f73e:	4640      	mov	r0, r8
 800f740:	2c00      	cmp	r4, #0
 800f742:	d1d9      	bne.n	800f6f8 <rcutils_repl_str+0x2c>
 800f744:	46b8      	mov	r8, r7
 800f746:	4607      	mov	r7, r0
 800f748:	4640      	mov	r0, r8
 800f74a:	f7f0 fd53 	bl	80001f4 <strlen>
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	eba8 0303 	sub.w	r3, r8, r3
 800f754:	181c      	adds	r4, r3, r0
 800f756:	9404      	str	r4, [sp, #16]
 800f758:	f1bb 0f00 	cmp.w	fp, #0
 800f75c:	d04a      	beq.n	800f7f4 <rcutils_repl_str+0x128>
 800f75e:	ee18 0a10 	vmov	r0, s16
 800f762:	f7f0 fd47 	bl	80001f4 <strlen>
 800f766:	9b02      	ldr	r3, [sp, #8]
 800f768:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f76c:	1ac3      	subs	r3, r0, r3
 800f76e:	fb0b 4303 	mla	r3, fp, r3, r4
 800f772:	461a      	mov	r2, r3
 800f774:	9305      	str	r3, [sp, #20]
 800f776:	4606      	mov	r6, r0
 800f778:	f8d9 3000 	ldr.w	r3, [r9]
 800f77c:	1c50      	adds	r0, r2, #1
 800f77e:	4798      	blx	r3
 800f780:	9003      	str	r0, [sp, #12]
 800f782:	2800      	cmp	r0, #0
 800f784:	d04f      	beq.n	800f826 <rcutils_repl_str+0x15a>
 800f786:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	4641      	mov	r1, r8
 800f78e:	f004 fa92 	bl	8013cb6 <memcpy>
 800f792:	683d      	ldr	r5, [r7, #0]
 800f794:	9b03      	ldr	r3, [sp, #12]
 800f796:	9701      	str	r7, [sp, #4]
 800f798:	46ba      	mov	sl, r7
 800f79a:	441d      	add	r5, r3
 800f79c:	9f02      	ldr	r7, [sp, #8]
 800f79e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f7a2:	2401      	movs	r4, #1
 800f7a4:	46d1      	mov	r9, sl
 800f7a6:	ee18 aa10 	vmov	sl, s16
 800f7aa:	e00a      	b.n	800f7c2 <rcutils_repl_str+0xf6>
 800f7ac:	f8d9 5000 	ldr.w	r5, [r9]
 800f7b0:	1aaa      	subs	r2, r5, r2
 800f7b2:	1885      	adds	r5, r0, r2
 800f7b4:	f004 fa7f 	bl	8013cb6 <memcpy>
 800f7b8:	45a3      	cmp	fp, r4
 800f7ba:	f104 0201 	add.w	r2, r4, #1
 800f7be:	d935      	bls.n	800f82c <rcutils_repl_str+0x160>
 800f7c0:	4614      	mov	r4, r2
 800f7c2:	4632      	mov	r2, r6
 800f7c4:	4651      	mov	r1, sl
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f004 fa75 	bl	8013cb6 <memcpy>
 800f7cc:	f859 2b04 	ldr.w	r2, [r9], #4
 800f7d0:	45a3      	cmp	fp, r4
 800f7d2:	443a      	add	r2, r7
 800f7d4:	eb05 0006 	add.w	r0, r5, r6
 800f7d8:	eb08 0102 	add.w	r1, r8, r2
 800f7dc:	d1e6      	bne.n	800f7ac <rcutils_repl_str+0xe0>
 800f7de:	9b04      	ldr	r3, [sp, #16]
 800f7e0:	1a9a      	subs	r2, r3, r2
 800f7e2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f7e6:	f004 fa66 	bl	8013cb6 <memcpy>
 800f7ea:	9a03      	ldr	r2, [sp, #12]
 800f7ec:	9905      	ldr	r1, [sp, #20]
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	5453      	strb	r3, [r2, r1]
 800f7f2:	e00b      	b.n	800f80c <rcutils_repl_str+0x140>
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f8d9 3000 	ldr.w	r3, [r9]
 800f7fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f7fe:	3001      	adds	r0, #1
 800f800:	4798      	blx	r3
 800f802:	9003      	str	r0, [sp, #12]
 800f804:	b110      	cbz	r0, 800f80c <rcutils_repl_str+0x140>
 800f806:	9901      	ldr	r1, [sp, #4]
 800f808:	f004 fa4d 	bl	8013ca6 <strcpy>
 800f80c:	4638      	mov	r0, r7
 800f80e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f812:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f816:	4798      	blx	r3
 800f818:	9803      	ldr	r0, [sp, #12]
 800f81a:	b007      	add	sp, #28
 800f81c:	ecbd 8b02 	vpop	{d8}
 800f820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f824:	4647      	mov	r7, r8
 800f826:	2300      	movs	r3, #0
 800f828:	9303      	str	r3, [sp, #12]
 800f82a:	e7ef      	b.n	800f80c <rcutils_repl_str+0x140>
 800f82c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f830:	e7db      	b.n	800f7ea <rcutils_repl_str+0x11e>
 800f832:	bf00      	nop

0800f834 <rcutils_snprintf>:
 800f834:	b40c      	push	{r2, r3}
 800f836:	b530      	push	{r4, r5, lr}
 800f838:	b083      	sub	sp, #12
 800f83a:	ab06      	add	r3, sp, #24
 800f83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	b152      	cbz	r2, 800f85a <rcutils_snprintf+0x26>
 800f844:	b138      	cbz	r0, 800f856 <rcutils_snprintf+0x22>
 800f846:	b141      	cbz	r1, 800f85a <rcutils_snprintf+0x26>
 800f848:	f004 f934 	bl	8013ab4 <vsniprintf>
 800f84c:	b003      	add	sp, #12
 800f84e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f852:	b002      	add	sp, #8
 800f854:	4770      	bx	lr
 800f856:	2900      	cmp	r1, #0
 800f858:	d0f6      	beq.n	800f848 <rcutils_snprintf+0x14>
 800f85a:	f004 f9f7 	bl	8013c4c <__errno>
 800f85e:	2316      	movs	r3, #22
 800f860:	6003      	str	r3, [r0, #0]
 800f862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f866:	e7f1      	b.n	800f84c <rcutils_snprintf+0x18>

0800f868 <rcutils_vsnprintf>:
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	b13a      	cbz	r2, 800f87c <rcutils_vsnprintf+0x14>
 800f86c:	b120      	cbz	r0, 800f878 <rcutils_vsnprintf+0x10>
 800f86e:	b129      	cbz	r1, 800f87c <rcutils_vsnprintf+0x14>
 800f870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f874:	f004 b91e 	b.w	8013ab4 <vsniprintf>
 800f878:	2900      	cmp	r1, #0
 800f87a:	d0f9      	beq.n	800f870 <rcutils_vsnprintf+0x8>
 800f87c:	f004 f9e6 	bl	8013c4c <__errno>
 800f880:	2316      	movs	r3, #22
 800f882:	6003      	str	r3, [r0, #0]
 800f884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f888:	bd70      	pop	{r4, r5, r6, pc}
 800f88a:	bf00      	nop

0800f88c <rcutils_strdup>:
 800f88c:	b084      	sub	sp, #16
 800f88e:	b570      	push	{r4, r5, r6, lr}
 800f890:	b082      	sub	sp, #8
 800f892:	ac07      	add	r4, sp, #28
 800f894:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f898:	4605      	mov	r5, r0
 800f89a:	b1b0      	cbz	r0, 800f8ca <rcutils_strdup+0x3e>
 800f89c:	f7f0 fcaa 	bl	80001f4 <strlen>
 800f8a0:	1c42      	adds	r2, r0, #1
 800f8a2:	9b07      	ldr	r3, [sp, #28]
 800f8a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f8a6:	9201      	str	r2, [sp, #4]
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	4798      	blx	r3
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	b128      	cbz	r0, 800f8be <rcutils_strdup+0x32>
 800f8b2:	9a01      	ldr	r2, [sp, #4]
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	f004 f9fe 	bl	8013cb6 <memcpy>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	55a3      	strb	r3, [r4, r6]
 800f8be:	4620      	mov	r0, r4
 800f8c0:	b002      	add	sp, #8
 800f8c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8c6:	b004      	add	sp, #16
 800f8c8:	4770      	bx	lr
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	e7f7      	b.n	800f8be <rcutils_strdup+0x32>
 800f8ce:	bf00      	nop

0800f8d0 <rcutils_strndup>:
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d4:	ac06      	add	r4, sp, #24
 800f8d6:	e884 000c 	stmia.w	r4, {r2, r3}
 800f8da:	4605      	mov	r5, r0
 800f8dc:	b188      	cbz	r0, 800f902 <rcutils_strndup+0x32>
 800f8de:	1c4f      	adds	r7, r1, #1
 800f8e0:	460e      	mov	r6, r1
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8e6:	4790      	blx	r2
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	b128      	cbz	r0, 800f8f8 <rcutils_strndup+0x28>
 800f8ec:	463a      	mov	r2, r7
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f004 f9e1 	bl	8013cb6 <memcpy>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	55a3      	strb	r3, [r4, r6]
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8fe:	b002      	add	sp, #8
 800f900:	4770      	bx	lr
 800f902:	4604      	mov	r4, r0
 800f904:	e7f8      	b.n	800f8f8 <rcutils_strndup+0x28>
 800f906:	bf00      	nop

0800f908 <rcutils_get_zero_initialized_string_map>:
 800f908:	4b01      	ldr	r3, [pc, #4]	@ (800f910 <rcutils_get_zero_initialized_string_map+0x8>)
 800f90a:	2000      	movs	r0, #0
 800f90c:	6018      	str	r0, [r3, #0]
 800f90e:	4770      	bx	lr
 800f910:	2000da18 	.word	0x2000da18

0800f914 <rcutils_string_map_reserve>:
 800f914:	2800      	cmp	r0, #0
 800f916:	d05f      	beq.n	800f9d8 <rcutils_string_map_reserve+0xc4>
 800f918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91c:	460c      	mov	r4, r1
 800f91e:	6801      	ldr	r1, [r0, #0]
 800f920:	b082      	sub	sp, #8
 800f922:	4605      	mov	r5, r0
 800f924:	b129      	cbz	r1, 800f932 <rcutils_string_map_reserve+0x1e>
 800f926:	68cb      	ldr	r3, [r1, #12]
 800f928:	42a3      	cmp	r3, r4
 800f92a:	d906      	bls.n	800f93a <rcutils_string_map_reserve+0x26>
 800f92c:	461c      	mov	r4, r3
 800f92e:	2900      	cmp	r1, #0
 800f930:	d1f9      	bne.n	800f926 <rcutils_string_map_reserve+0x12>
 800f932:	201f      	movs	r0, #31
 800f934:	b002      	add	sp, #8
 800f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93a:	688b      	ldr	r3, [r1, #8]
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	d047      	beq.n	800f9d0 <rcutils_string_map_reserve+0xbc>
 800f940:	6a0e      	ldr	r6, [r1, #32]
 800f942:	2c00      	cmp	r4, #0
 800f944:	d034      	beq.n	800f9b0 <rcutils_string_map_reserve+0x9c>
 800f946:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f94a:	d243      	bcs.n	800f9d4 <rcutils_string_map_reserve+0xc0>
 800f94c:	00a7      	lsls	r7, r4, #2
 800f94e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800f952:	6808      	ldr	r0, [r1, #0]
 800f954:	4632      	mov	r2, r6
 800f956:	4639      	mov	r1, r7
 800f958:	47c0      	blx	r8
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d03a      	beq.n	800f9d4 <rcutils_string_map_reserve+0xc0>
 800f95e:	682b      	ldr	r3, [r5, #0]
 800f960:	4632      	mov	r2, r6
 800f962:	6018      	str	r0, [r3, #0]
 800f964:	4639      	mov	r1, r7
 800f966:	6858      	ldr	r0, [r3, #4]
 800f968:	47c0      	blx	r8
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d032      	beq.n	800f9d4 <rcutils_string_map_reserve+0xc0>
 800f96e:	682d      	ldr	r5, [r5, #0]
 800f970:	68ab      	ldr	r3, [r5, #8]
 800f972:	6068      	str	r0, [r5, #4]
 800f974:	42a3      	cmp	r3, r4
 800f976:	d226      	bcs.n	800f9c6 <rcutils_string_map_reserve+0xb2>
 800f978:	682a      	ldr	r2, [r5, #0]
 800f97a:	eb00 0c07 	add.w	ip, r0, r7
 800f97e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800f982:	45e6      	cmp	lr, ip
 800f984:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800f988:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f98c:	d203      	bcs.n	800f996 <rcutils_string_map_reserve+0x82>
 800f98e:	eb02 0c07 	add.w	ip, r2, r7
 800f992:	4566      	cmp	r6, ip
 800f994:	d322      	bcc.n	800f9dc <rcutils_string_map_reserve+0xc8>
 800f996:	1ae3      	subs	r3, r4, r3
 800f998:	009a      	lsls	r2, r3, #2
 800f99a:	4670      	mov	r0, lr
 800f99c:	2100      	movs	r1, #0
 800f99e:	9201      	str	r2, [sp, #4]
 800f9a0:	f004 f8c0 	bl	8013b24 <memset>
 800f9a4:	9a01      	ldr	r2, [sp, #4]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f004 f8bb 	bl	8013b24 <memset>
 800f9ae:	e00a      	b.n	800f9c6 <rcutils_string_map_reserve+0xb2>
 800f9b0:	694f      	ldr	r7, [r1, #20]
 800f9b2:	6808      	ldr	r0, [r1, #0]
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	47b8      	blx	r7
 800f9b8:	682b      	ldr	r3, [r5, #0]
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	6858      	ldr	r0, [r3, #4]
 800f9be:	601c      	str	r4, [r3, #0]
 800f9c0:	47b8      	blx	r7
 800f9c2:	682d      	ldr	r5, [r5, #0]
 800f9c4:	606c      	str	r4, [r5, #4]
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	60ac      	str	r4, [r5, #8]
 800f9ca:	b002      	add	sp, #8
 800f9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	e7af      	b.n	800f934 <rcutils_string_map_reserve+0x20>
 800f9d4:	200a      	movs	r0, #10
 800f9d6:	e7ad      	b.n	800f934 <rcutils_string_map_reserve+0x20>
 800f9d8:	200b      	movs	r0, #11
 800f9da:	4770      	bx	lr
 800f9dc:	1f0b      	subs	r3, r1, #4
 800f9de:	4418      	add	r0, r3
 800f9e0:	4413      	add	r3, r2
 800f9e2:	3a04      	subs	r2, #4
 800f9e4:	4417      	add	r7, r2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f843 2f04 	str.w	r2, [r3, #4]!
 800f9ec:	42bb      	cmp	r3, r7
 800f9ee:	f840 2f04 	str.w	r2, [r0, #4]!
 800f9f2:	d1f9      	bne.n	800f9e8 <rcutils_string_map_reserve+0xd4>
 800f9f4:	e7e7      	b.n	800f9c6 <rcutils_string_map_reserve+0xb2>
 800f9f6:	bf00      	nop

0800f9f8 <rcutils_string_map_init>:
 800f9f8:	b082      	sub	sp, #8
 800f9fa:	b570      	push	{r4, r5, r6, lr}
 800f9fc:	ac04      	add	r4, sp, #16
 800f9fe:	e884 000c 	stmia.w	r4, {r2, r3}
 800fa02:	b380      	cbz	r0, 800fa66 <rcutils_string_map_init+0x6e>
 800fa04:	6806      	ldr	r6, [r0, #0]
 800fa06:	4604      	mov	r4, r0
 800fa08:	b12e      	cbz	r6, 800fa16 <rcutils_string_map_init+0x1e>
 800fa0a:	251e      	movs	r5, #30
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa12:	b002      	add	sp, #8
 800fa14:	4770      	bx	lr
 800fa16:	a804      	add	r0, sp, #16
 800fa18:	460d      	mov	r5, r1
 800fa1a:	f7f8 fd4d 	bl	80084b8 <rcutils_allocator_is_valid>
 800fa1e:	b310      	cbz	r0, 800fa66 <rcutils_string_map_init+0x6e>
 800fa20:	9b04      	ldr	r3, [sp, #16]
 800fa22:	9908      	ldr	r1, [sp, #32]
 800fa24:	2024      	movs	r0, #36	@ 0x24
 800fa26:	4798      	blx	r3
 800fa28:	6020      	str	r0, [r4, #0]
 800fa2a:	b310      	cbz	r0, 800fa72 <rcutils_string_map_init+0x7a>
 800fa2c:	f10d 0e10 	add.w	lr, sp, #16
 800fa30:	e9c0 6600 	strd	r6, r6, [r0]
 800fa34:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800fa38:	f100 0c10 	add.w	ip, r0, #16
 800fa3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa44:	f8de 3000 	ldr.w	r3, [lr]
 800fa48:	f8cc 3000 	str.w	r3, [ip]
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f7ff ff60 	bl	800f914 <rcutils_string_map_reserve>
 800fa54:	4605      	mov	r5, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0d8      	beq.n	800fa0c <rcutils_string_map_init+0x14>
 800fa5a:	9b05      	ldr	r3, [sp, #20]
 800fa5c:	9908      	ldr	r1, [sp, #32]
 800fa5e:	6820      	ldr	r0, [r4, #0]
 800fa60:	4798      	blx	r3
 800fa62:	6026      	str	r6, [r4, #0]
 800fa64:	e7d2      	b.n	800fa0c <rcutils_string_map_init+0x14>
 800fa66:	250b      	movs	r5, #11
 800fa68:	4628      	mov	r0, r5
 800fa6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa6e:	b002      	add	sp, #8
 800fa70:	4770      	bx	lr
 800fa72:	250a      	movs	r5, #10
 800fa74:	e7ca      	b.n	800fa0c <rcutils_string_map_init+0x14>
 800fa76:	bf00      	nop

0800fa78 <rcutils_string_map_fini>:
 800fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7c:	b082      	sub	sp, #8
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d03a      	beq.n	800faf8 <rcutils_string_map_fini+0x80>
 800fa82:	6804      	ldr	r4, [r0, #0]
 800fa84:	4606      	mov	r6, r0
 800fa86:	2c00      	cmp	r4, #0
 800fa88:	d032      	beq.n	800faf0 <rcutils_string_map_fini+0x78>
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	b32b      	cbz	r3, 800fada <rcutils_string_map_fini+0x62>
 800fa8e:	2500      	movs	r5, #0
 800fa90:	6822      	ldr	r2, [r4, #0]
 800fa92:	462f      	mov	r7, r5
 800fa94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fa98:	b1e0      	cbz	r0, 800fad4 <rcutils_string_map_fini+0x5c>
 800fa9a:	6a21      	ldr	r1, [r4, #32]
 800fa9c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800faa0:	9101      	str	r1, [sp, #4]
 800faa2:	47c0      	blx	r8
 800faa4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800faa8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800faac:	9901      	ldr	r1, [sp, #4]
 800faae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fab2:	47c0      	blx	r8
 800fab4:	68e3      	ldr	r3, [r4, #12]
 800fab6:	6862      	ldr	r2, [r4, #4]
 800fab8:	3b01      	subs	r3, #1
 800faba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800fabe:	60e3      	str	r3, [r4, #12]
 800fac0:	6834      	ldr	r4, [r6, #0]
 800fac2:	68a3      	ldr	r3, [r4, #8]
 800fac4:	3501      	adds	r5, #1
 800fac6:	429d      	cmp	r5, r3
 800fac8:	d207      	bcs.n	800fada <rcutils_string_map_fini+0x62>
 800faca:	6822      	ldr	r2, [r4, #0]
 800facc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d1e2      	bne.n	800fa9a <rcutils_string_map_fini+0x22>
 800fad4:	3501      	adds	r5, #1
 800fad6:	429d      	cmp	r5, r3
 800fad8:	d3dc      	bcc.n	800fa94 <rcutils_string_map_fini+0x1c>
 800fada:	2100      	movs	r1, #0
 800fadc:	4630      	mov	r0, r6
 800fade:	f7ff ff19 	bl	800f914 <rcutils_string_map_reserve>
 800fae2:	4604      	mov	r4, r0
 800fae4:	b920      	cbnz	r0, 800faf0 <rcutils_string_map_fini+0x78>
 800fae6:	6830      	ldr	r0, [r6, #0]
 800fae8:	6943      	ldr	r3, [r0, #20]
 800faea:	6a01      	ldr	r1, [r0, #32]
 800faec:	4798      	blx	r3
 800faee:	6034      	str	r4, [r6, #0]
 800faf0:	4620      	mov	r0, r4
 800faf2:	b002      	add	sp, #8
 800faf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf8:	240b      	movs	r4, #11
 800fafa:	4620      	mov	r0, r4
 800fafc:	b002      	add	sp, #8
 800fafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb02:	bf00      	nop

0800fb04 <rcutils_string_map_getn>:
 800fb04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	b300      	cbz	r0, 800fb4c <rcutils_string_map_getn+0x48>
 800fb0a:	6807      	ldr	r7, [r0, #0]
 800fb0c:	b1ff      	cbz	r7, 800fb4e <rcutils_string_map_getn+0x4a>
 800fb0e:	4688      	mov	r8, r1
 800fb10:	b1e1      	cbz	r1, 800fb4c <rcutils_string_map_getn+0x48>
 800fb12:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800fb16:	683e      	ldr	r6, [r7, #0]
 800fb18:	f1ba 0f00 	cmp.w	sl, #0
 800fb1c:	d016      	beq.n	800fb4c <rcutils_string_map_getn+0x48>
 800fb1e:	4691      	mov	r9, r2
 800fb20:	3e04      	subs	r6, #4
 800fb22:	2400      	movs	r4, #0
 800fb24:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800fb28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	3401      	adds	r4, #1
 800fb30:	b155      	cbz	r5, 800fb48 <rcutils_string_map_getn+0x44>
 800fb32:	f7f0 fb5f 	bl	80001f4 <strlen>
 800fb36:	4548      	cmp	r0, r9
 800fb38:	4602      	mov	r2, r0
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	bf38      	it	cc
 800fb3e:	464a      	movcc	r2, r9
 800fb40:	4640      	mov	r0, r8
 800fb42:	f004 f804 	bl	8013b4e <strncmp>
 800fb46:	b128      	cbz	r0, 800fb54 <rcutils_string_map_getn+0x50>
 800fb48:	45a2      	cmp	sl, r4
 800fb4a:	d1eb      	bne.n	800fb24 <rcutils_string_map_getn+0x20>
 800fb4c:	2700      	movs	r7, #0
 800fb4e:	4638      	mov	r0, r7
 800fb50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f853 700b 	ldr.w	r7, [r3, fp]
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb60 <rmw_get_zero_initialized_context>:
 800fb60:	b510      	push	{r4, lr}
 800fb62:	4604      	mov	r4, r0
 800fb64:	3010      	adds	r0, #16
 800fb66:	f000 f80b 	bl	800fb80 <rmw_get_zero_initialized_init_options>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	2100      	movs	r1, #0
 800fb70:	e9c4 0100 	strd	r0, r1, [r4]
 800fb74:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800fb78:	60a3      	str	r3, [r4, #8]
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	bd10      	pop	{r4, pc}
 800fb7e:	bf00      	nop

0800fb80 <rmw_get_zero_initialized_init_options>:
 800fb80:	b510      	push	{r4, lr}
 800fb82:	2238      	movs	r2, #56	@ 0x38
 800fb84:	4604      	mov	r4, r0
 800fb86:	2100      	movs	r1, #0
 800fb88:	f003 ffcc 	bl	8013b24 <memset>
 800fb8c:	f104 0010 	add.w	r0, r4, #16
 800fb90:	f000 f806 	bl	800fba0 <rmw_get_default_security_options>
 800fb94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb98:	60e3      	str	r3, [r4, #12]
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	bd10      	pop	{r4, pc}
 800fb9e:	bf00      	nop

0800fba0 <rmw_get_default_security_options>:
 800fba0:	2200      	movs	r2, #0
 800fba2:	7002      	strb	r2, [r0, #0]
 800fba4:	6042      	str	r2, [r0, #4]
 800fba6:	4770      	bx	lr

0800fba8 <rmw_time_equal>:
 800fba8:	b4f0      	push	{r4, r5, r6, r7}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	ac04      	add	r4, sp, #16
 800fbae:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	4924      	ldr	r1, [pc, #144]	@ (800fc48 <rmw_time_equal+0xa0>)
 800fbb6:	9e03      	ldr	r6, [sp, #12]
 800fbb8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	41aa      	sbcs	r2, r5
 800fbc2:	d330      	bcc.n	800fc26 <rmw_time_equal+0x7e>
 800fbc4:	4c21      	ldr	r4, [pc, #132]	@ (800fc4c <rmw_time_equal+0xa4>)
 800fbc6:	fba3 3204 	umull	r3, r2, r3, r4
 800fbca:	fb04 2205 	mla	r2, r4, r5, r2
 800fbce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fbd2:	43dd      	mvns	r5, r3
 800fbd4:	1a8c      	subs	r4, r1, r2
 800fbd6:	4285      	cmp	r5, r0
 800fbd8:	41b4      	sbcs	r4, r6
 800fbda:	d332      	bcc.n	800fc42 <rmw_time_equal+0x9a>
 800fbdc:	eb10 0c03 	adds.w	ip, r0, r3
 800fbe0:	eb42 0106 	adc.w	r1, r2, r6
 800fbe4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 800fbe8:	4817      	ldr	r0, [pc, #92]	@ (800fc48 <rmw_time_equal+0xa0>)
 800fbea:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fbec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fbee:	2202      	movs	r2, #2
 800fbf0:	4298      	cmp	r0, r3
 800fbf2:	41b2      	sbcs	r2, r6
 800fbf4:	d31c      	bcc.n	800fc30 <rmw_time_equal+0x88>
 800fbf6:	4c15      	ldr	r4, [pc, #84]	@ (800fc4c <rmw_time_equal+0xa4>)
 800fbf8:	fba3 3204 	umull	r3, r2, r3, r4
 800fbfc:	fb04 2206 	mla	r2, r4, r6, r2
 800fc00:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800fc04:	43de      	mvns	r6, r3
 800fc06:	1a84      	subs	r4, r0, r2
 800fc08:	42ae      	cmp	r6, r5
 800fc0a:	41bc      	sbcs	r4, r7
 800fc0c:	d315      	bcc.n	800fc3a <rmw_time_equal+0x92>
 800fc0e:	195b      	adds	r3, r3, r5
 800fc10:	eb42 0207 	adc.w	r2, r2, r7
 800fc14:	428a      	cmp	r2, r1
 800fc16:	bf08      	it	eq
 800fc18:	4563      	cmpeq	r3, ip
 800fc1a:	bf0c      	ite	eq
 800fc1c:	2001      	moveq	r0, #1
 800fc1e:	2000      	movne	r0, #0
 800fc20:	b004      	add	sp, #16
 800fc22:	bcf0      	pop	{r4, r5, r6, r7}
 800fc24:	4770      	bx	lr
 800fc26:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fc2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc2e:	e7d9      	b.n	800fbe4 <rmw_time_equal+0x3c>
 800fc30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc34:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800fc38:	e7ec      	b.n	800fc14 <rmw_time_equal+0x6c>
 800fc3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc3e:	4602      	mov	r2, r0
 800fc40:	e7e8      	b.n	800fc14 <rmw_time_equal+0x6c>
 800fc42:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fc46:	e7cd      	b.n	800fbe4 <rmw_time_equal+0x3c>
 800fc48:	25c17d04 	.word	0x25c17d04
 800fc4c:	3b9aca00 	.word	0x3b9aca00

0800fc50 <rmw_time_total_nsec>:
 800fc50:	b470      	push	{r4, r5, r6}
 800fc52:	b085      	sub	sp, #20
 800fc54:	ac04      	add	r4, sp, #16
 800fc56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	4912      	ldr	r1, [pc, #72]	@ (800fca8 <rmw_time_total_nsec+0x58>)
 800fc5e:	9e03      	ldr	r6, [sp, #12]
 800fc60:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 800fc64:	2202      	movs	r2, #2
 800fc66:	4299      	cmp	r1, r3
 800fc68:	41aa      	sbcs	r2, r5
 800fc6a:	d311      	bcc.n	800fc90 <rmw_time_total_nsec+0x40>
 800fc6c:	4c0f      	ldr	r4, [pc, #60]	@ (800fcac <rmw_time_total_nsec+0x5c>)
 800fc6e:	fba3 3204 	umull	r3, r2, r3, r4
 800fc72:	fb04 2205 	mla	r2, r4, r5, r2
 800fc76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc7a:	43dd      	mvns	r5, r3
 800fc7c:	1a8c      	subs	r4, r1, r2
 800fc7e:	4285      	cmp	r5, r0
 800fc80:	41b4      	sbcs	r4, r6
 800fc82:	d30c      	bcc.n	800fc9e <rmw_time_total_nsec+0x4e>
 800fc84:	1818      	adds	r0, r3, r0
 800fc86:	eb42 0106 	adc.w	r1, r2, r6
 800fc8a:	b005      	add	sp, #20
 800fc8c:	bc70      	pop	{r4, r5, r6}
 800fc8e:	4770      	bx	lr
 800fc90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc98:	b005      	add	sp, #20
 800fc9a:	bc70      	pop	{r4, r5, r6}
 800fc9c:	4770      	bx	lr
 800fc9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fca2:	b005      	add	sp, #20
 800fca4:	bc70      	pop	{r4, r5, r6}
 800fca6:	4770      	bx	lr
 800fca8:	25c17d04 	.word	0x25c17d04
 800fcac:	3b9aca00 	.word	0x3b9aca00

0800fcb0 <rmw_get_zero_initialized_message_info>:
 800fcb0:	b510      	push	{r4, lr}
 800fcb2:	2240      	movs	r2, #64	@ 0x40
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	f003 ff34 	bl	8013b24 <memset>
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	bd10      	pop	{r4, pc}

0800fcc0 <rmw_validate_full_topic_name>:
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d057      	beq.n	800fd74 <rmw_validate_full_topic_name+0xb4>
 800fcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc8:	460d      	mov	r5, r1
 800fcca:	2900      	cmp	r1, #0
 800fccc:	d054      	beq.n	800fd78 <rmw_validate_full_topic_name+0xb8>
 800fcce:	4616      	mov	r6, r2
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	f7f0 fa8f 	bl	80001f4 <strlen>
 800fcd6:	b148      	cbz	r0, 800fcec <rmw_validate_full_topic_name+0x2c>
 800fcd8:	7823      	ldrb	r3, [r4, #0]
 800fcda:	2b2f      	cmp	r3, #47	@ 0x2f
 800fcdc:	d00d      	beq.n	800fcfa <rmw_validate_full_topic_name+0x3a>
 800fcde:	2302      	movs	r3, #2
 800fce0:	602b      	str	r3, [r5, #0]
 800fce2:	b13e      	cbz	r6, 800fcf4 <rmw_validate_full_topic_name+0x34>
 800fce4:	2000      	movs	r0, #0
 800fce6:	6030      	str	r0, [r6, #0]
 800fce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcec:	2301      	movs	r3, #1
 800fcee:	602b      	str	r3, [r5, #0]
 800fcf0:	2e00      	cmp	r6, #0
 800fcf2:	d1f7      	bne.n	800fce4 <rmw_validate_full_topic_name+0x24>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfa:	1e43      	subs	r3, r0, #1
 800fcfc:	5ce2      	ldrb	r2, [r4, r3]
 800fcfe:	2a2f      	cmp	r2, #47	@ 0x2f
 800fd00:	d03c      	beq.n	800fd7c <rmw_validate_full_topic_name+0xbc>
 800fd02:	1e63      	subs	r3, r4, #1
 800fd04:	eb03 0800 	add.w	r8, r3, r0
 800fd08:	f1c4 0e01 	rsb	lr, r4, #1
 800fd0c:	eb0e 0703 	add.w	r7, lr, r3
 800fd10:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fd14:	f021 0220 	bic.w	r2, r1, #32
 800fd18:	3a41      	subs	r2, #65	@ 0x41
 800fd1a:	2a19      	cmp	r2, #25
 800fd1c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800fd20:	d90b      	bls.n	800fd3a <rmw_validate_full_topic_name+0x7a>
 800fd22:	295f      	cmp	r1, #95	@ 0x5f
 800fd24:	d009      	beq.n	800fd3a <rmw_validate_full_topic_name+0x7a>
 800fd26:	f1bc 0f0a 	cmp.w	ip, #10
 800fd2a:	d906      	bls.n	800fd3a <rmw_validate_full_topic_name+0x7a>
 800fd2c:	2304      	movs	r3, #4
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	2e00      	cmp	r6, #0
 800fd32:	d0df      	beq.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fd34:	6037      	str	r7, [r6, #0]
 800fd36:	2000      	movs	r0, #0
 800fd38:	e7d6      	b.n	800fce8 <rmw_validate_full_topic_name+0x28>
 800fd3a:	4543      	cmp	r3, r8
 800fd3c:	d1e6      	bne.n	800fd0c <rmw_validate_full_topic_name+0x4c>
 800fd3e:	4f1a      	ldr	r7, [pc, #104]	@ (800fda8 <rmw_validate_full_topic_name+0xe8>)
 800fd40:	2301      	movs	r3, #1
 800fd42:	e004      	b.n	800fd4e <rmw_validate_full_topic_name+0x8e>
 800fd44:	4298      	cmp	r0, r3
 800fd46:	f104 0401 	add.w	r4, r4, #1
 800fd4a:	d91c      	bls.n	800fd86 <rmw_validate_full_topic_name+0xc6>
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	4298      	cmp	r0, r3
 800fd50:	f103 0201 	add.w	r2, r3, #1
 800fd54:	d0f6      	beq.n	800fd44 <rmw_validate_full_topic_name+0x84>
 800fd56:	7821      	ldrb	r1, [r4, #0]
 800fd58:	292f      	cmp	r1, #47	@ 0x2f
 800fd5a:	d1f3      	bne.n	800fd44 <rmw_validate_full_topic_name+0x84>
 800fd5c:	7861      	ldrb	r1, [r4, #1]
 800fd5e:	292f      	cmp	r1, #47	@ 0x2f
 800fd60:	d01c      	beq.n	800fd9c <rmw_validate_full_topic_name+0xdc>
 800fd62:	5dc9      	ldrb	r1, [r1, r7]
 800fd64:	0749      	lsls	r1, r1, #29
 800fd66:	d5ed      	bpl.n	800fd44 <rmw_validate_full_topic_name+0x84>
 800fd68:	2206      	movs	r2, #6
 800fd6a:	602a      	str	r2, [r5, #0]
 800fd6c:	2e00      	cmp	r6, #0
 800fd6e:	d0c1      	beq.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fd70:	6033      	str	r3, [r6, #0]
 800fd72:	e7bf      	b.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fd74:	200b      	movs	r0, #11
 800fd76:	4770      	bx	lr
 800fd78:	200b      	movs	r0, #11
 800fd7a:	e7b5      	b.n	800fce8 <rmw_validate_full_topic_name+0x28>
 800fd7c:	2203      	movs	r2, #3
 800fd7e:	602a      	str	r2, [r5, #0]
 800fd80:	2e00      	cmp	r6, #0
 800fd82:	d1f5      	bne.n	800fd70 <rmw_validate_full_topic_name+0xb0>
 800fd84:	e7b6      	b.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fd86:	28f7      	cmp	r0, #247	@ 0xf7
 800fd88:	d802      	bhi.n	800fd90 <rmw_validate_full_topic_name+0xd0>
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	6028      	str	r0, [r5, #0]
 800fd8e:	e7ab      	b.n	800fce8 <rmw_validate_full_topic_name+0x28>
 800fd90:	2307      	movs	r3, #7
 800fd92:	602b      	str	r3, [r5, #0]
 800fd94:	2e00      	cmp	r6, #0
 800fd96:	d0ad      	beq.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fd98:	23f6      	movs	r3, #246	@ 0xf6
 800fd9a:	e7e9      	b.n	800fd70 <rmw_validate_full_topic_name+0xb0>
 800fd9c:	2205      	movs	r2, #5
 800fd9e:	602a      	str	r2, [r5, #0]
 800fda0:	2e00      	cmp	r6, #0
 800fda2:	d1e5      	bne.n	800fd70 <rmw_validate_full_topic_name+0xb0>
 800fda4:	e7a6      	b.n	800fcf4 <rmw_validate_full_topic_name+0x34>
 800fda6:	bf00      	nop
 800fda8:	08015670 	.word	0x08015670

0800fdac <rmw_validate_namespace_with_size>:
 800fdac:	b340      	cbz	r0, 800fe00 <rmw_validate_namespace_with_size+0x54>
 800fdae:	b570      	push	{r4, r5, r6, lr}
 800fdb0:	4614      	mov	r4, r2
 800fdb2:	b0c2      	sub	sp, #264	@ 0x108
 800fdb4:	b332      	cbz	r2, 800fe04 <rmw_validate_namespace_with_size+0x58>
 800fdb6:	2901      	cmp	r1, #1
 800fdb8:	460d      	mov	r5, r1
 800fdba:	461e      	mov	r6, r3
 800fdbc:	d102      	bne.n	800fdc4 <rmw_validate_namespace_with_size+0x18>
 800fdbe:	7803      	ldrb	r3, [r0, #0]
 800fdc0:	2b2f      	cmp	r3, #47	@ 0x2f
 800fdc2:	d012      	beq.n	800fdea <rmw_validate_namespace_with_size+0x3e>
 800fdc4:	aa01      	add	r2, sp, #4
 800fdc6:	4669      	mov	r1, sp
 800fdc8:	f7ff ff7a 	bl	800fcc0 <rmw_validate_full_topic_name>
 800fdcc:	b978      	cbnz	r0, 800fdee <rmw_validate_namespace_with_size+0x42>
 800fdce:	9b00      	ldr	r3, [sp, #0]
 800fdd0:	b14b      	cbz	r3, 800fde6 <rmw_validate_namespace_with_size+0x3a>
 800fdd2:	2b07      	cmp	r3, #7
 800fdd4:	d007      	beq.n	800fde6 <rmw_validate_namespace_with_size+0x3a>
 800fdd6:	1e5a      	subs	r2, r3, #1
 800fdd8:	2a05      	cmp	r2, #5
 800fdda:	d82b      	bhi.n	800fe34 <rmw_validate_namespace_with_size+0x88>
 800fddc:	e8df f002 	tbb	[pc, r2]
 800fde0:	1e212427 	.word	0x1e212427
 800fde4:	141b      	.short	0x141b
 800fde6:	2df5      	cmp	r5, #245	@ 0xf5
 800fde8:	d803      	bhi.n	800fdf2 <rmw_validate_namespace_with_size+0x46>
 800fdea:	2000      	movs	r0, #0
 800fdec:	6020      	str	r0, [r4, #0]
 800fdee:	b042      	add	sp, #264	@ 0x108
 800fdf0:	bd70      	pop	{r4, r5, r6, pc}
 800fdf2:	2307      	movs	r3, #7
 800fdf4:	6023      	str	r3, [r4, #0]
 800fdf6:	2e00      	cmp	r6, #0
 800fdf8:	d0f9      	beq.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fdfa:	23f4      	movs	r3, #244	@ 0xf4
 800fdfc:	6033      	str	r3, [r6, #0]
 800fdfe:	e7f6      	b.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fe00:	200b      	movs	r0, #11
 800fe02:	4770      	bx	lr
 800fe04:	200b      	movs	r0, #11
 800fe06:	e7f2      	b.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fe08:	2306      	movs	r3, #6
 800fe0a:	6023      	str	r3, [r4, #0]
 800fe0c:	2e00      	cmp	r6, #0
 800fe0e:	d0ee      	beq.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	6033      	str	r3, [r6, #0]
 800fe14:	e7eb      	b.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fe16:	2305      	movs	r3, #5
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	e7f7      	b.n	800fe0c <rmw_validate_namespace_with_size+0x60>
 800fe1c:	2304      	movs	r3, #4
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	e7f4      	b.n	800fe0c <rmw_validate_namespace_with_size+0x60>
 800fe22:	2303      	movs	r3, #3
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	e7f1      	b.n	800fe0c <rmw_validate_namespace_with_size+0x60>
 800fe28:	2302      	movs	r3, #2
 800fe2a:	6023      	str	r3, [r4, #0]
 800fe2c:	e7ee      	b.n	800fe0c <rmw_validate_namespace_with_size+0x60>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	e7eb      	b.n	800fe0c <rmw_validate_namespace_with_size+0x60>
 800fe34:	4a03      	ldr	r2, [pc, #12]	@ (800fe44 <rmw_validate_namespace_with_size+0x98>)
 800fe36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fe3a:	a802      	add	r0, sp, #8
 800fe3c:	f7ff fcfa 	bl	800f834 <rcutils_snprintf>
 800fe40:	2001      	movs	r0, #1
 800fe42:	e7d4      	b.n	800fdee <rmw_validate_namespace_with_size+0x42>
 800fe44:	08015078 	.word	0x08015078

0800fe48 <rmw_validate_namespace>:
 800fe48:	b168      	cbz	r0, 800fe66 <rmw_validate_namespace+0x1e>
 800fe4a:	b570      	push	{r4, r5, r6, lr}
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	4616      	mov	r6, r2
 800fe50:	4604      	mov	r4, r0
 800fe52:	f7f0 f9cf 	bl	80001f4 <strlen>
 800fe56:	4633      	mov	r3, r6
 800fe58:	4601      	mov	r1, r0
 800fe5a:	462a      	mov	r2, r5
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe62:	f7ff bfa3 	b.w	800fdac <rmw_validate_namespace_with_size>
 800fe66:	200b      	movs	r0, #11
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop

0800fe6c <rmw_namespace_validation_result_string>:
 800fe6c:	2807      	cmp	r0, #7
 800fe6e:	bf9a      	itte	ls
 800fe70:	4b02      	ldrls	r3, [pc, #8]	@ (800fe7c <rmw_namespace_validation_result_string+0x10>)
 800fe72:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800fe76:	4802      	ldrhi	r0, [pc, #8]	@ (800fe80 <rmw_namespace_validation_result_string+0x14>)
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	08015270 	.word	0x08015270
 800fe80:	080150c8 	.word	0x080150c8

0800fe84 <rmw_validate_node_name>:
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d03b      	beq.n	800ff00 <rmw_validate_node_name+0x7c>
 800fe88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	2900      	cmp	r1, #0
 800fe90:	d038      	beq.n	800ff04 <rmw_validate_node_name+0x80>
 800fe92:	4616      	mov	r6, r2
 800fe94:	4604      	mov	r4, r0
 800fe96:	f7f0 f9ad 	bl	80001f4 <strlen>
 800fe9a:	b1e0      	cbz	r0, 800fed6 <rmw_validate_node_name+0x52>
 800fe9c:	1e63      	subs	r3, r4, #1
 800fe9e:	eb03 0800 	add.w	r8, r3, r0
 800fea2:	f1c4 0101 	rsb	r1, r4, #1
 800fea6:	18cf      	adds	r7, r1, r3
 800fea8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800feac:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800feb0:	f02e 0c20 	bic.w	ip, lr, #32
 800feb4:	2a09      	cmp	r2, #9
 800feb6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800feba:	d914      	bls.n	800fee6 <rmw_validate_node_name+0x62>
 800febc:	f1bc 0f19 	cmp.w	ip, #25
 800fec0:	d911      	bls.n	800fee6 <rmw_validate_node_name+0x62>
 800fec2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800fec6:	d00e      	beq.n	800fee6 <rmw_validate_node_name+0x62>
 800fec8:	2302      	movs	r3, #2
 800feca:	602b      	str	r3, [r5, #0]
 800fecc:	b106      	cbz	r6, 800fed0 <rmw_validate_node_name+0x4c>
 800fece:	6037      	str	r7, [r6, #0]
 800fed0:	2000      	movs	r0, #0
 800fed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed6:	2301      	movs	r3, #1
 800fed8:	602b      	str	r3, [r5, #0]
 800feda:	2e00      	cmp	r6, #0
 800fedc:	d0f8      	beq.n	800fed0 <rmw_validate_node_name+0x4c>
 800fede:	2000      	movs	r0, #0
 800fee0:	6030      	str	r0, [r6, #0]
 800fee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee6:	4543      	cmp	r3, r8
 800fee8:	d1dd      	bne.n	800fea6 <rmw_validate_node_name+0x22>
 800feea:	7822      	ldrb	r2, [r4, #0]
 800feec:	4b0d      	ldr	r3, [pc, #52]	@ (800ff24 <rmw_validate_node_name+0xa0>)
 800feee:	5cd3      	ldrb	r3, [r2, r3]
 800fef0:	f013 0304 	ands.w	r3, r3, #4
 800fef4:	d110      	bne.n	800ff18 <rmw_validate_node_name+0x94>
 800fef6:	28ff      	cmp	r0, #255	@ 0xff
 800fef8:	d806      	bhi.n	800ff08 <rmw_validate_node_name+0x84>
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	4618      	mov	r0, r3
 800fefe:	e7e8      	b.n	800fed2 <rmw_validate_node_name+0x4e>
 800ff00:	200b      	movs	r0, #11
 800ff02:	4770      	bx	lr
 800ff04:	200b      	movs	r0, #11
 800ff06:	e7e4      	b.n	800fed2 <rmw_validate_node_name+0x4e>
 800ff08:	2204      	movs	r2, #4
 800ff0a:	602a      	str	r2, [r5, #0]
 800ff0c:	2e00      	cmp	r6, #0
 800ff0e:	d0df      	beq.n	800fed0 <rmw_validate_node_name+0x4c>
 800ff10:	22fe      	movs	r2, #254	@ 0xfe
 800ff12:	6032      	str	r2, [r6, #0]
 800ff14:	4618      	mov	r0, r3
 800ff16:	e7dc      	b.n	800fed2 <rmw_validate_node_name+0x4e>
 800ff18:	2303      	movs	r3, #3
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	2e00      	cmp	r6, #0
 800ff1e:	d1de      	bne.n	800fede <rmw_validate_node_name+0x5a>
 800ff20:	e7d6      	b.n	800fed0 <rmw_validate_node_name+0x4c>
 800ff22:	bf00      	nop
 800ff24:	08015670 	.word	0x08015670

0800ff28 <rmw_node_name_validation_result_string>:
 800ff28:	2804      	cmp	r0, #4
 800ff2a:	bf9a      	itte	ls
 800ff2c:	4b02      	ldrls	r3, [pc, #8]	@ (800ff38 <rmw_node_name_validation_result_string+0x10>)
 800ff2e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ff32:	4802      	ldrhi	r0, [pc, #8]	@ (800ff3c <rmw_node_name_validation_result_string+0x14>)
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	0801537c 	.word	0x0801537c
 800ff3c:	08015290 	.word	0x08015290

0800ff40 <get_memory>:
 800ff40:	4603      	mov	r3, r0
 800ff42:	6840      	ldr	r0, [r0, #4]
 800ff44:	b158      	cbz	r0, 800ff5e <get_memory+0x1e>
 800ff46:	6842      	ldr	r2, [r0, #4]
 800ff48:	605a      	str	r2, [r3, #4]
 800ff4a:	b10a      	cbz	r2, 800ff50 <get_memory+0x10>
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	6011      	str	r1, [r2, #0]
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	6042      	str	r2, [r0, #4]
 800ff54:	b102      	cbz	r2, 800ff58 <get_memory+0x18>
 800ff56:	6010      	str	r0, [r2, #0]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	6002      	str	r2, [r0, #0]
 800ff5c:	6018      	str	r0, [r3, #0]
 800ff5e:	4770      	bx	lr

0800ff60 <put_memory>:
 800ff60:	680b      	ldr	r3, [r1, #0]
 800ff62:	b10b      	cbz	r3, 800ff68 <put_memory+0x8>
 800ff64:	684a      	ldr	r2, [r1, #4]
 800ff66:	605a      	str	r2, [r3, #4]
 800ff68:	684a      	ldr	r2, [r1, #4]
 800ff6a:	b102      	cbz	r2, 800ff6e <put_memory+0xe>
 800ff6c:	6013      	str	r3, [r2, #0]
 800ff6e:	6803      	ldr	r3, [r0, #0]
 800ff70:	428b      	cmp	r3, r1
 800ff72:	6843      	ldr	r3, [r0, #4]
 800ff74:	bf08      	it	eq
 800ff76:	6002      	streq	r2, [r0, #0]
 800ff78:	604b      	str	r3, [r1, #4]
 800ff7a:	b103      	cbz	r3, 800ff7e <put_memory+0x1e>
 800ff7c:	6019      	str	r1, [r3, #0]
 800ff7e:	2300      	movs	r3, #0
 800ff80:	600b      	str	r3, [r1, #0]
 800ff82:	6041      	str	r1, [r0, #4]
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop

0800ff88 <rmw_destroy_client>:
 800ff88:	b570      	push	{r4, r5, r6, lr}
 800ff8a:	b128      	cbz	r0, 800ff98 <rmw_destroy_client+0x10>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	6800      	ldr	r0, [r0, #0]
 800ff90:	460d      	mov	r5, r1
 800ff92:	f7f9 f837 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 800ff96:	b910      	cbnz	r0, 800ff9e <rmw_destroy_client+0x16>
 800ff98:	2401      	movs	r4, #1
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d0f9      	beq.n	800ff98 <rmw_destroy_client+0x10>
 800ffa4:	2d00      	cmp	r5, #0
 800ffa6:	d0f7      	beq.n	800ff98 <rmw_destroy_client+0x10>
 800ffa8:	6828      	ldr	r0, [r5, #0]
 800ffaa:	f7f9 f82b 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0f2      	beq.n	800ff98 <rmw_destroy_client+0x10>
 800ffb2:	686e      	ldr	r6, [r5, #4]
 800ffb4:	2e00      	cmp	r6, #0
 800ffb6:	d0ef      	beq.n	800ff98 <rmw_destroy_client+0x10>
 800ffb8:	6864      	ldr	r4, [r4, #4]
 800ffba:	6932      	ldr	r2, [r6, #16]
 800ffbc:	6920      	ldr	r0, [r4, #16]
 800ffbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ffc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ffc6:	6819      	ldr	r1, [r3, #0]
 800ffc8:	f001 ffee 	bl	8011fa8 <uxr_buffer_cancel_data>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	6920      	ldr	r0, [r4, #16]
 800ffd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ffd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ffd8:	f7f8 ff94 	bl	8008f04 <run_xrce_session>
 800ffdc:	6920      	ldr	r0, [r4, #16]
 800ffde:	6932      	ldr	r2, [r6, #16]
 800ffe0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ffe4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ffe8:	6819      	ldr	r1, [r3, #0]
 800ffea:	f7fa f8c7 	bl	800a17c <uxr_buffer_delete_entity>
 800ffee:	4602      	mov	r2, r0
 800fff0:	6920      	ldr	r0, [r4, #16]
 800fff2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fff6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fffa:	f7f8 ff83 	bl	8008f04 <run_xrce_session>
 800fffe:	2800      	cmp	r0, #0
 8010000:	4628      	mov	r0, r5
 8010002:	bf14      	ite	ne
 8010004:	2400      	movne	r4, #0
 8010006:	2402      	moveq	r4, #2
 8010008:	f7f8 fe64 	bl	8008cd4 <rmw_uxrce_fini_client_memory>
 801000c:	e7c5      	b.n	800ff9a <rmw_destroy_client+0x12>
 801000e:	bf00      	nop

08010010 <rmw_get_implementation_identifier>:
 8010010:	4b01      	ldr	r3, [pc, #4]	@ (8010018 <rmw_get_implementation_identifier+0x8>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	080153a8 	.word	0x080153a8

0801001c <rmw_init_options_init>:
 801001c:	b084      	sub	sp, #16
 801001e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010020:	b083      	sub	sp, #12
 8010022:	ad09      	add	r5, sp, #36	@ 0x24
 8010024:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010028:	b130      	cbz	r0, 8010038 <rmw_init_options_init+0x1c>
 801002a:	4604      	mov	r4, r0
 801002c:	4628      	mov	r0, r5
 801002e:	f7f8 fa43 	bl	80084b8 <rcutils_allocator_is_valid>
 8010032:	b108      	cbz	r0, 8010038 <rmw_init_options_init+0x1c>
 8010034:	68a6      	ldr	r6, [r4, #8]
 8010036:	b12e      	cbz	r6, 8010044 <rmw_init_options_init+0x28>
 8010038:	200b      	movs	r0, #11
 801003a:	b003      	add	sp, #12
 801003c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010040:	b004      	add	sp, #16
 8010042:	4770      	bx	lr
 8010044:	2200      	movs	r2, #0
 8010046:	2300      	movs	r3, #0
 8010048:	e9c4 2300 	strd	r2, r3, [r4]
 801004c:	4b22      	ldr	r3, [pc, #136]	@ (80100d8 <rmw_init_options_init+0xbc>)
 801004e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80100e8 <rmw_init_options_init+0xcc>
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	60a3      	str	r3, [r4, #8]
 8010056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010058:	f104 0c20 	add.w	ip, r4, #32
 801005c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010060:	466f      	mov	r7, sp
 8010062:	682b      	ldr	r3, [r5, #0]
 8010064:	f8cc 3000 	str.w	r3, [ip]
 8010068:	4638      	mov	r0, r7
 801006a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801006e:	60e6      	str	r6, [r4, #12]
 8010070:	f7ff fd96 	bl	800fba0 <rmw_get_default_security_options>
 8010074:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010078:	f104 0310 	add.w	r3, r4, #16
 801007c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010080:	2203      	movs	r2, #3
 8010082:	4816      	ldr	r0, [pc, #88]	@ (80100dc <rmw_init_options_init+0xc0>)
 8010084:	4916      	ldr	r1, [pc, #88]	@ (80100e0 <rmw_init_options_init+0xc4>)
 8010086:	7626      	strb	r6, [r4, #24]
 8010088:	f7f8 fd64 	bl	8008b54 <rmw_uxrce_init_init_options_impl_memory>
 801008c:	4813      	ldr	r0, [pc, #76]	@ (80100dc <rmw_init_options_init+0xc0>)
 801008e:	f7ff ff57 	bl	800ff40 <get_memory>
 8010092:	b1f0      	cbz	r0, 80100d2 <rmw_init_options_init+0xb6>
 8010094:	4a13      	ldr	r2, [pc, #76]	@ (80100e4 <rmw_init_options_init+0xc8>)
 8010096:	6883      	ldr	r3, [r0, #8]
 8010098:	6851      	ldr	r1, [r2, #4]
 801009a:	7810      	ldrb	r0, [r2, #0]
 801009c:	6363      	str	r3, [r4, #52]	@ 0x34
 801009e:	7418      	strb	r0, [r3, #16]
 80100a0:	6159      	str	r1, [r3, #20]
 80100a2:	68d1      	ldr	r1, [r2, #12]
 80100a4:	61d9      	str	r1, [r3, #28]
 80100a6:	6911      	ldr	r1, [r2, #16]
 80100a8:	6219      	str	r1, [r3, #32]
 80100aa:	6951      	ldr	r1, [r2, #20]
 80100ac:	6892      	ldr	r2, [r2, #8]
 80100ae:	619a      	str	r2, [r3, #24]
 80100b0:	6259      	str	r1, [r3, #36]	@ 0x24
 80100b2:	f7fb fc19 	bl	800b8e8 <uxr_nanos>
 80100b6:	f003 fa6d 	bl	8013594 <srand>
 80100ba:	f003 fa99 	bl	80135f0 <rand>
 80100be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100c0:	6298      	str	r0, [r3, #40]	@ 0x28
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d0f9      	beq.n	80100ba <rmw_init_options_init+0x9e>
 80100c6:	2000      	movs	r0, #0
 80100c8:	b003      	add	sp, #12
 80100ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100ce:	b004      	add	sp, #16
 80100d0:	4770      	bx	lr
 80100d2:	2001      	movs	r0, #1
 80100d4:	e7b1      	b.n	801003a <rmw_init_options_init+0x1e>
 80100d6:	bf00      	nop
 80100d8:	080153a8 	.word	0x080153a8
 80100dc:	2000d96c 	.word	0x2000d96c
 80100e0:	20009208 	.word	0x20009208
 80100e4:	20009094 	.word	0x20009094
 80100e8:	08014e64 	.word	0x08014e64

080100ec <rmw_init_options_copy>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	b158      	cbz	r0, 8010108 <rmw_init_options_copy+0x1c>
 80100f0:	460d      	mov	r5, r1
 80100f2:	b149      	cbz	r1, 8010108 <rmw_init_options_copy+0x1c>
 80100f4:	4604      	mov	r4, r0
 80100f6:	6880      	ldr	r0, [r0, #8]
 80100f8:	b120      	cbz	r0, 8010104 <rmw_init_options_copy+0x18>
 80100fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010174 <rmw_init_options_copy+0x88>)
 80100fc:	6819      	ldr	r1, [r3, #0]
 80100fe:	f7f0 f86f 	bl	80001e0 <strcmp>
 8010102:	bb90      	cbnz	r0, 801016a <rmw_init_options_copy+0x7e>
 8010104:	68ab      	ldr	r3, [r5, #8]
 8010106:	b113      	cbz	r3, 801010e <rmw_init_options_copy+0x22>
 8010108:	250b      	movs	r5, #11
 801010a:	4628      	mov	r0, r5
 801010c:	bd70      	pop	{r4, r5, r6, pc}
 801010e:	4623      	mov	r3, r4
 8010110:	462a      	mov	r2, r5
 8010112:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010116:	f8d3 c000 	ldr.w	ip, [r3]
 801011a:	6858      	ldr	r0, [r3, #4]
 801011c:	6899      	ldr	r1, [r3, #8]
 801011e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010122:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010126:	3310      	adds	r3, #16
 8010128:	42b3      	cmp	r3, r6
 801012a:	f8c2 c000 	str.w	ip, [r2]
 801012e:	6050      	str	r0, [r2, #4]
 8010130:	6091      	str	r1, [r2, #8]
 8010132:	f102 0210 	add.w	r2, r2, #16
 8010136:	d1ee      	bne.n	8010116 <rmw_init_options_copy+0x2a>
 8010138:	6819      	ldr	r1, [r3, #0]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	480e      	ldr	r0, [pc, #56]	@ (8010178 <rmw_init_options_copy+0x8c>)
 801013e:	6053      	str	r3, [r2, #4]
 8010140:	6011      	str	r1, [r2, #0]
 8010142:	f7ff fefd 	bl	800ff40 <get_memory>
 8010146:	b198      	cbz	r0, 8010170 <rmw_init_options_copy+0x84>
 8010148:	6883      	ldr	r3, [r0, #8]
 801014a:	636b      	str	r3, [r5, #52]	@ 0x34
 801014c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801014e:	f102 0c10 	add.w	ip, r2, #16
 8010152:	f103 0410 	add.w	r4, r3, #16
 8010156:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801015a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801015c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010160:	2500      	movs	r5, #0
 8010162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010166:	4628      	mov	r0, r5
 8010168:	bd70      	pop	{r4, r5, r6, pc}
 801016a:	250c      	movs	r5, #12
 801016c:	4628      	mov	r0, r5
 801016e:	bd70      	pop	{r4, r5, r6, pc}
 8010170:	2501      	movs	r5, #1
 8010172:	e7ca      	b.n	801010a <rmw_init_options_copy+0x1e>
 8010174:	080153a8 	.word	0x080153a8
 8010178:	2000d96c 	.word	0x2000d96c

0801017c <rmw_init_options_fini>:
 801017c:	2800      	cmp	r0, #0
 801017e:	d03d      	beq.n	80101fc <rmw_init_options_fini+0x80>
 8010180:	b510      	push	{r4, lr}
 8010182:	4604      	mov	r4, r0
 8010184:	b08e      	sub	sp, #56	@ 0x38
 8010186:	3020      	adds	r0, #32
 8010188:	f7f8 f996 	bl	80084b8 <rcutils_allocator_is_valid>
 801018c:	b360      	cbz	r0, 80101e8 <rmw_init_options_fini+0x6c>
 801018e:	68a0      	ldr	r0, [r4, #8]
 8010190:	b120      	cbz	r0, 801019c <rmw_init_options_fini+0x20>
 8010192:	4b1c      	ldr	r3, [pc, #112]	@ (8010204 <rmw_init_options_fini+0x88>)
 8010194:	6819      	ldr	r1, [r3, #0]
 8010196:	f7f0 f823 	bl	80001e0 <strcmp>
 801019a:	bb68      	cbnz	r0, 80101f8 <rmw_init_options_fini+0x7c>
 801019c:	4b1a      	ldr	r3, [pc, #104]	@ (8010208 <rmw_init_options_fini+0x8c>)
 801019e:	6819      	ldr	r1, [r3, #0]
 80101a0:	b331      	cbz	r1, 80101f0 <rmw_init_options_fini+0x74>
 80101a2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80101a4:	e001      	b.n	80101aa <rmw_init_options_fini+0x2e>
 80101a6:	6849      	ldr	r1, [r1, #4]
 80101a8:	b311      	cbz	r1, 80101f0 <rmw_init_options_fini+0x74>
 80101aa:	688b      	ldr	r3, [r1, #8]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d1fa      	bne.n	80101a6 <rmw_init_options_fini+0x2a>
 80101b0:	4815      	ldr	r0, [pc, #84]	@ (8010208 <rmw_init_options_fini+0x8c>)
 80101b2:	f7ff fed5 	bl	800ff60 <put_memory>
 80101b6:	4668      	mov	r0, sp
 80101b8:	f7ff fce2 	bl	800fb80 <rmw_get_zero_initialized_init_options>
 80101bc:	46ee      	mov	lr, sp
 80101be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101c2:	46a4      	mov	ip, r4
 80101c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80101dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80101e0:	2300      	movs	r3, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	b00e      	add	sp, #56	@ 0x38
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	230b      	movs	r3, #11
 80101ea:	4618      	mov	r0, r3
 80101ec:	b00e      	add	sp, #56	@ 0x38
 80101ee:	bd10      	pop	{r4, pc}
 80101f0:	2301      	movs	r3, #1
 80101f2:	4618      	mov	r0, r3
 80101f4:	b00e      	add	sp, #56	@ 0x38
 80101f6:	bd10      	pop	{r4, pc}
 80101f8:	230c      	movs	r3, #12
 80101fa:	e7f2      	b.n	80101e2 <rmw_init_options_fini+0x66>
 80101fc:	230b      	movs	r3, #11
 80101fe:	4618      	mov	r0, r3
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	080153a8 	.word	0x080153a8
 8010208:	2000d96c 	.word	0x2000d96c

0801020c <rmw_init>:
 801020c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010210:	b083      	sub	sp, #12
 8010212:	2800      	cmp	r0, #0
 8010214:	f000 80d3 	beq.w	80103be <rmw_init+0x1b2>
 8010218:	460e      	mov	r6, r1
 801021a:	2900      	cmp	r1, #0
 801021c:	f000 80cf 	beq.w	80103be <rmw_init+0x1b2>
 8010220:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010222:	4605      	mov	r5, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 80ca 	beq.w	80103be <rmw_init+0x1b2>
 801022a:	4b78      	ldr	r3, [pc, #480]	@ (801040c <rmw_init+0x200>)
 801022c:	6880      	ldr	r0, [r0, #8]
 801022e:	681f      	ldr	r7, [r3, #0]
 8010230:	b128      	cbz	r0, 801023e <rmw_init+0x32>
 8010232:	4639      	mov	r1, r7
 8010234:	f7ef ffd4 	bl	80001e0 <strcmp>
 8010238:	2800      	cmp	r0, #0
 801023a:	f040 80ca 	bne.w	80103d2 <rmw_init+0x1c6>
 801023e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010242:	4c73      	ldr	r4, [pc, #460]	@ (8010410 <rmw_init+0x204>)
 8010244:	4973      	ldr	r1, [pc, #460]	@ (8010414 <rmw_init+0x208>)
 8010246:	4874      	ldr	r0, [pc, #464]	@ (8010418 <rmw_init+0x20c>)
 8010248:	60b7      	str	r7, [r6, #8]
 801024a:	e9c6 2300 	strd	r2, r3, [r6]
 801024e:	68eb      	ldr	r3, [r5, #12]
 8010250:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010252:	2201      	movs	r2, #1
 8010254:	f7f8 fc1e 	bl	8008a94 <rmw_uxrce_init_session_memory>
 8010258:	4620      	mov	r0, r4
 801025a:	4970      	ldr	r1, [pc, #448]	@ (801041c <rmw_init+0x210>)
 801025c:	2204      	movs	r2, #4
 801025e:	f7f8 fc59 	bl	8008b14 <rmw_uxrce_init_static_input_buffer_memory>
 8010262:	f04f 0800 	mov.w	r8, #0
 8010266:	486c      	ldr	r0, [pc, #432]	@ (8010418 <rmw_init+0x20c>)
 8010268:	f884 800d 	strb.w	r8, [r4, #13]
 801026c:	f7ff fe68 	bl	800ff40 <get_memory>
 8010270:	2800      	cmp	r0, #0
 8010272:	f000 80a9 	beq.w	80103c8 <rmw_init+0x1bc>
 8010276:	6884      	ldr	r4, [r0, #8]
 8010278:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801027a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801027c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010280:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010284:	9101      	str	r1, [sp, #4]
 8010286:	6a00      	ldr	r0, [r0, #32]
 8010288:	9000      	str	r0, [sp, #0]
 801028a:	f104 0910 	add.w	r9, r4, #16
 801028e:	4661      	mov	r1, ip
 8010290:	4648      	mov	r0, r9
 8010292:	f001 f8fb 	bl	801148c <uxr_set_custom_transport_callbacks>
 8010296:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801029a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801029e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80102a2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80102a6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80102aa:	495d      	ldr	r1, [pc, #372]	@ (8010420 <rmw_init+0x214>)
 80102ac:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80102b0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80102b4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80102b8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80102bc:	4859      	ldr	r0, [pc, #356]	@ (8010424 <rmw_init+0x218>)
 80102be:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80102c2:	2201      	movs	r2, #1
 80102c4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80102c6:	f7f8 fbc5 	bl	8008a54 <rmw_uxrce_init_node_memory>
 80102ca:	4957      	ldr	r1, [pc, #348]	@ (8010428 <rmw_init+0x21c>)
 80102cc:	4857      	ldr	r0, [pc, #348]	@ (801042c <rmw_init+0x220>)
 80102ce:	2205      	movs	r2, #5
 80102d0:	f7f8 fba0 	bl	8008a14 <rmw_uxrce_init_subscription_memory>
 80102d4:	4956      	ldr	r1, [pc, #344]	@ (8010430 <rmw_init+0x224>)
 80102d6:	4857      	ldr	r0, [pc, #348]	@ (8010434 <rmw_init+0x228>)
 80102d8:	220a      	movs	r2, #10
 80102da:	f7f8 fb7b 	bl	80089d4 <rmw_uxrce_init_publisher_memory>
 80102de:	4956      	ldr	r1, [pc, #344]	@ (8010438 <rmw_init+0x22c>)
 80102e0:	4856      	ldr	r0, [pc, #344]	@ (801043c <rmw_init+0x230>)
 80102e2:	2201      	movs	r2, #1
 80102e4:	f7f8 fb36 	bl	8008954 <rmw_uxrce_init_service_memory>
 80102e8:	4955      	ldr	r1, [pc, #340]	@ (8010440 <rmw_init+0x234>)
 80102ea:	4856      	ldr	r0, [pc, #344]	@ (8010444 <rmw_init+0x238>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	f7f8 fb51 	bl	8008994 <rmw_uxrce_init_client_memory>
 80102f2:	4955      	ldr	r1, [pc, #340]	@ (8010448 <rmw_init+0x23c>)
 80102f4:	4855      	ldr	r0, [pc, #340]	@ (801044c <rmw_init+0x240>)
 80102f6:	220f      	movs	r2, #15
 80102f8:	f7f8 fbec 	bl	8008ad4 <rmw_uxrce_init_topic_memory>
 80102fc:	4954      	ldr	r1, [pc, #336]	@ (8010450 <rmw_init+0x244>)
 80102fe:	4855      	ldr	r0, [pc, #340]	@ (8010454 <rmw_init+0x248>)
 8010300:	2203      	movs	r2, #3
 8010302:	f7f8 fc27 	bl	8008b54 <rmw_uxrce_init_init_options_impl_memory>
 8010306:	4954      	ldr	r1, [pc, #336]	@ (8010458 <rmw_init+0x24c>)
 8010308:	4854      	ldr	r0, [pc, #336]	@ (801045c <rmw_init+0x250>)
 801030a:	2204      	movs	r2, #4
 801030c:	f7f8 fc42 	bl	8008b94 <rmw_uxrce_init_wait_set_memory>
 8010310:	4953      	ldr	r1, [pc, #332]	@ (8010460 <rmw_init+0x254>)
 8010312:	4854      	ldr	r0, [pc, #336]	@ (8010464 <rmw_init+0x258>)
 8010314:	2204      	movs	r2, #4
 8010316:	f7f8 fc5d 	bl	8008bd4 <rmw_uxrce_init_guard_condition_memory>
 801031a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801031c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801031e:	4642      	mov	r2, r8
 8010320:	f000 fcac 	bl	8010c7c <rmw_uxrce_transport_init>
 8010324:	4607      	mov	r7, r0
 8010326:	2800      	cmp	r0, #0
 8010328:	d158      	bne.n	80103dc <rmw_init+0x1d0>
 801032a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801032c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010332:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010336:	4628      	mov	r0, r5
 8010338:	f7fa f93a 	bl	800a5b0 <uxr_init_session>
 801033c:	494a      	ldr	r1, [pc, #296]	@ (8010468 <rmw_init+0x25c>)
 801033e:	4622      	mov	r2, r4
 8010340:	4628      	mov	r0, r5
 8010342:	f7fa f959 	bl	800a5f8 <uxr_set_topic_callback>
 8010346:	4949      	ldr	r1, [pc, #292]	@ (801046c <rmw_init+0x260>)
 8010348:	463a      	mov	r2, r7
 801034a:	4628      	mov	r0, r5
 801034c:	f7fa f950 	bl	800a5f0 <uxr_set_status_callback>
 8010350:	4947      	ldr	r1, [pc, #284]	@ (8010470 <rmw_init+0x264>)
 8010352:	463a      	mov	r2, r7
 8010354:	4628      	mov	r0, r5
 8010356:	f7fa f953 	bl	800a600 <uxr_set_request_callback>
 801035a:	4946      	ldr	r1, [pc, #280]	@ (8010474 <rmw_init+0x268>)
 801035c:	463a      	mov	r2, r7
 801035e:	4628      	mov	r0, r5
 8010360:	f7fa f952 	bl	800a608 <uxr_set_reply_callback>
 8010364:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010368:	2304      	movs	r3, #4
 801036a:	0092      	lsls	r2, r2, #2
 801036c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010370:	4628      	mov	r0, r5
 8010372:	f7fa f987 	bl	800a684 <uxr_create_input_reliable_stream>
 8010376:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801037a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801037e:	0092      	lsls	r2, r2, #2
 8010380:	2304      	movs	r3, #4
 8010382:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010386:	4628      	mov	r0, r5
 8010388:	f7fa f954 	bl	800a634 <uxr_create_output_reliable_stream>
 801038c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010390:	4628      	mov	r0, r5
 8010392:	f7fa f971 	bl	800a678 <uxr_create_input_best_effort_stream>
 8010396:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801039a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801039e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80103a2:	3114      	adds	r1, #20
 80103a4:	4628      	mov	r0, r5
 80103a6:	f7fa f933 	bl	800a610 <uxr_create_output_best_effort_stream>
 80103aa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80103ae:	4628      	mov	r0, r5
 80103b0:	f7fa febe 	bl	800b130 <uxr_create_session>
 80103b4:	b1f8      	cbz	r0, 80103f6 <rmw_init+0x1ea>
 80103b6:	4638      	mov	r0, r7
 80103b8:	b003      	add	sp, #12
 80103ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103be:	270b      	movs	r7, #11
 80103c0:	4638      	mov	r0, r7
 80103c2:	b003      	add	sp, #12
 80103c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c8:	2701      	movs	r7, #1
 80103ca:	4638      	mov	r0, r7
 80103cc:	b003      	add	sp, #12
 80103ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d2:	270c      	movs	r7, #12
 80103d4:	4638      	mov	r0, r7
 80103d6:	b003      	add	sp, #12
 80103d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103dc:	4648      	mov	r0, r9
 80103de:	f001 f897 	bl	8011510 <uxr_close_custom_transport>
 80103e2:	480d      	ldr	r0, [pc, #52]	@ (8010418 <rmw_init+0x20c>)
 80103e4:	4621      	mov	r1, r4
 80103e6:	f7ff fdbb 	bl	800ff60 <put_memory>
 80103ea:	4638      	mov	r0, r7
 80103ec:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80103f0:	b003      	add	sp, #12
 80103f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103f6:	4648      	mov	r0, r9
 80103f8:	f001 f88a 	bl	8011510 <uxr_close_custom_transport>
 80103fc:	4806      	ldr	r0, [pc, #24]	@ (8010418 <rmw_init+0x20c>)
 80103fe:	4621      	mov	r1, r4
 8010400:	f7ff fdae 	bl	800ff60 <put_memory>
 8010404:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010406:	2701      	movs	r7, #1
 8010408:	e7d5      	b.n	80103b6 <rmw_init+0x1aa>
 801040a:	bf00      	nop
 801040c:	080153a8 	.word	0x080153a8
 8010410:	2000d9bc 	.word	0x2000d9bc
 8010414:	20009c68 	.word	0x20009c68
 8010418:	2000d9ac 	.word	0x2000d9ac
 801041c:	2000b210 	.word	0x2000b210
 8010420:	2000928c 	.word	0x2000928c
 8010424:	2000d97c 	.word	0x2000d97c
 8010428:	2000d310 	.word	0x2000d310
 801042c:	2000d9cc 	.word	0x2000d9cc
 8010430:	20009330 	.word	0x20009330
 8010434:	2000d98c 	.word	0x2000d98c
 8010438:	20009ba0 	.word	0x20009ba0
 801043c:	2000d99c 	.word	0x2000d99c
 8010440:	200090c0 	.word	0x200090c0
 8010444:	200090b0 	.word	0x200090b0
 8010448:	2000d748 	.word	0x2000d748
 801044c:	2000d9dc 	.word	0x2000d9dc
 8010450:	20009208 	.word	0x20009208
 8010454:	2000d96c 	.word	0x2000d96c
 8010458:	2000d8ec 	.word	0x2000d8ec
 801045c:	2000d9ec 	.word	0x2000d9ec
 8010460:	20009188 	.word	0x20009188
 8010464:	2000d95c 	.word	0x2000d95c
 8010468:	08013139 	.word	0x08013139
 801046c:	08013131 	.word	0x08013131
 8010470:	080131d1 	.word	0x080131d1
 8010474:	0801326d 	.word	0x0801326d

08010478 <rmw_context_fini>:
 8010478:	4b17      	ldr	r3, [pc, #92]	@ (80104d8 <rmw_context_fini+0x60>)
 801047a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	681c      	ldr	r4, [r3, #0]
 8010480:	4605      	mov	r5, r0
 8010482:	b334      	cbz	r4, 80104d2 <rmw_context_fini+0x5a>
 8010484:	2600      	movs	r6, #0
 8010486:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801048a:	6902      	ldr	r2, [r0, #16]
 801048c:	428a      	cmp	r2, r1
 801048e:	d018      	beq.n	80104c2 <rmw_context_fini+0x4a>
 8010490:	2c00      	cmp	r4, #0
 8010492:	d1f8      	bne.n	8010486 <rmw_context_fini+0xe>
 8010494:	b189      	cbz	r1, 80104ba <rmw_context_fini+0x42>
 8010496:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801049a:	789b      	ldrb	r3, [r3, #2]
 801049c:	2b01      	cmp	r3, #1
 801049e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80104a2:	bf14      	ite	ne
 80104a4:	210a      	movne	r1, #10
 80104a6:	2100      	moveq	r1, #0
 80104a8:	f7fa fe1a 	bl	800b0e0 <uxr_delete_session_retries>
 80104ac:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80104ae:	f7f8 fbb1 	bl	8008c14 <rmw_uxrce_fini_session_memory>
 80104b2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80104b4:	3010      	adds	r0, #16
 80104b6:	f001 f82b 	bl	8011510 <uxr_close_custom_transport>
 80104ba:	2300      	movs	r3, #0
 80104bc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80104be:	4630      	mov	r0, r6
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
 80104c2:	3018      	adds	r0, #24
 80104c4:	f000 f90e 	bl	80106e4 <rmw_destroy_node>
 80104c8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80104ca:	4606      	mov	r6, r0
 80104cc:	2c00      	cmp	r4, #0
 80104ce:	d1da      	bne.n	8010486 <rmw_context_fini+0xe>
 80104d0:	e7e0      	b.n	8010494 <rmw_context_fini+0x1c>
 80104d2:	4626      	mov	r6, r4
 80104d4:	e7de      	b.n	8010494 <rmw_context_fini+0x1c>
 80104d6:	bf00      	nop
 80104d8:	2000d97c 	.word	0x2000d97c

080104dc <create_topic>:
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	4605      	mov	r5, r0
 80104e2:	b084      	sub	sp, #16
 80104e4:	4822      	ldr	r0, [pc, #136]	@ (8010570 <create_topic+0x94>)
 80104e6:	460f      	mov	r7, r1
 80104e8:	4616      	mov	r6, r2
 80104ea:	f7ff fd29 	bl	800ff40 <get_memory>
 80104ee:	4604      	mov	r4, r0
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d039      	beq.n	8010568 <create_topic+0x8c>
 80104f4:	692b      	ldr	r3, [r5, #16]
 80104f6:	6884      	ldr	r4, [r0, #8]
 80104f8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8010578 <create_topic+0x9c>
 80104fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010500:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8010504:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010508:	1c42      	adds	r2, r0, #1
 801050a:	2102      	movs	r1, #2
 801050c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8010510:	f7f9 ff8e 	bl	800a430 <uxr_object_id>
 8010514:	223c      	movs	r2, #60	@ 0x3c
 8010516:	6120      	str	r0, [r4, #16]
 8010518:	4641      	mov	r1, r8
 801051a:	4638      	mov	r0, r7
 801051c:	f7f8 fd58 	bl	8008fd0 <generate_topic_name>
 8010520:	b1f0      	cbz	r0, 8010560 <create_topic+0x84>
 8010522:	4f14      	ldr	r7, [pc, #80]	@ (8010574 <create_topic+0x98>)
 8010524:	4630      	mov	r0, r6
 8010526:	2264      	movs	r2, #100	@ 0x64
 8010528:	4639      	mov	r1, r7
 801052a:	f7f8 fd21 	bl	8008f70 <generate_type_name>
 801052e:	b1b8      	cbz	r0, 8010560 <create_topic+0x84>
 8010530:	6928      	ldr	r0, [r5, #16]
 8010532:	2306      	movs	r3, #6
 8010534:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010538:	f8cd 8000 	str.w	r8, [sp]
 801053c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010540:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010544:	6811      	ldr	r1, [r2, #0]
 8010546:	696b      	ldr	r3, [r5, #20]
 8010548:	6922      	ldr	r2, [r4, #16]
 801054a:	f7f9 fe95 	bl	800a278 <uxr_buffer_create_topic_bin>
 801054e:	4602      	mov	r2, r0
 8010550:	6928      	ldr	r0, [r5, #16]
 8010552:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010556:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801055a:	f7f8 fcd3 	bl	8008f04 <run_xrce_session>
 801055e:	b918      	cbnz	r0, 8010568 <create_topic+0x8c>
 8010560:	4620      	mov	r0, r4
 8010562:	f7f8 fbcd 	bl	8008d00 <rmw_uxrce_fini_topic_memory>
 8010566:	2400      	movs	r4, #0
 8010568:	4620      	mov	r0, r4
 801056a:	b004      	add	sp, #16
 801056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010570:	2000d9dc 	.word	0x2000d9dc
 8010574:	2000da58 	.word	0x2000da58
 8010578:	2000da1c 	.word	0x2000da1c

0801057c <destroy_topic>:
 801057c:	b538      	push	{r3, r4, r5, lr}
 801057e:	6985      	ldr	r5, [r0, #24]
 8010580:	b1d5      	cbz	r5, 80105b8 <destroy_topic+0x3c>
 8010582:	4604      	mov	r4, r0
 8010584:	6928      	ldr	r0, [r5, #16]
 8010586:	6922      	ldr	r2, [r4, #16]
 8010588:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801058c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010590:	6819      	ldr	r1, [r3, #0]
 8010592:	f7f9 fdf3 	bl	800a17c <uxr_buffer_delete_entity>
 8010596:	4602      	mov	r2, r0
 8010598:	6928      	ldr	r0, [r5, #16]
 801059a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801059e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105a2:	f7f8 fcaf 	bl	8008f04 <run_xrce_session>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	4620      	mov	r0, r4
 80105aa:	bf14      	ite	ne
 80105ac:	2400      	movne	r4, #0
 80105ae:	2402      	moveq	r4, #2
 80105b0:	f7f8 fba6 	bl	8008d00 <rmw_uxrce_fini_topic_memory>
 80105b4:	4620      	mov	r0, r4
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	2401      	movs	r4, #1
 80105ba:	4620      	mov	r0, r4
 80105bc:	bd38      	pop	{r3, r4, r5, pc}
 80105be:	bf00      	nop

080105c0 <create_node>:
 80105c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105c4:	b083      	sub	sp, #12
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d05f      	beq.n	801068a <create_node+0xca>
 80105ca:	4606      	mov	r6, r0
 80105cc:	4835      	ldr	r0, [pc, #212]	@ (80106a4 <create_node+0xe4>)
 80105ce:	460f      	mov	r7, r1
 80105d0:	4690      	mov	r8, r2
 80105d2:	461d      	mov	r5, r3
 80105d4:	f7ff fcb4 	bl	800ff40 <get_memory>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d056      	beq.n	801068a <create_node+0xca>
 80105dc:	6884      	ldr	r4, [r0, #8]
 80105de:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80105e0:	6123      	str	r3, [r4, #16]
 80105e2:	f7ff fd15 	bl	8010010 <rmw_get_implementation_identifier>
 80105e6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80105ea:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80105ee:	f8c4 9020 	str.w	r9, [r4, #32]
 80105f2:	4630      	mov	r0, r6
 80105f4:	f7ef fdfe 	bl	80001f4 <strlen>
 80105f8:	1c42      	adds	r2, r0, #1
 80105fa:	2a3c      	cmp	r2, #60	@ 0x3c
 80105fc:	f104 0518 	add.w	r5, r4, #24
 8010600:	d840      	bhi.n	8010684 <create_node+0xc4>
 8010602:	4648      	mov	r0, r9
 8010604:	4631      	mov	r1, r6
 8010606:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801060a:	f003 fb54 	bl	8013cb6 <memcpy>
 801060e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010612:	4638      	mov	r0, r7
 8010614:	f7ef fdee 	bl	80001f4 <strlen>
 8010618:	1c42      	adds	r2, r0, #1
 801061a:	2a3c      	cmp	r2, #60	@ 0x3c
 801061c:	d832      	bhi.n	8010684 <create_node+0xc4>
 801061e:	4639      	mov	r1, r7
 8010620:	4648      	mov	r0, r9
 8010622:	f003 fb48 	bl	8013cb6 <memcpy>
 8010626:	6923      	ldr	r3, [r4, #16]
 8010628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801062c:	2101      	movs	r1, #1
 801062e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010632:	1842      	adds	r2, r0, r1
 8010634:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010638:	f7f9 fefa 	bl	800a430 <uxr_object_id>
 801063c:	6160      	str	r0, [r4, #20]
 801063e:	783b      	ldrb	r3, [r7, #0]
 8010640:	2b2f      	cmp	r3, #47	@ 0x2f
 8010642:	d127      	bne.n	8010694 <create_node+0xd4>
 8010644:	787b      	ldrb	r3, [r7, #1]
 8010646:	bb2b      	cbnz	r3, 8010694 <create_node+0xd4>
 8010648:	4a17      	ldr	r2, [pc, #92]	@ (80106a8 <create_node+0xe8>)
 801064a:	4818      	ldr	r0, [pc, #96]	@ (80106ac <create_node+0xec>)
 801064c:	4633      	mov	r3, r6
 801064e:	213c      	movs	r1, #60	@ 0x3c
 8010650:	f003 f98e 	bl	8013970 <sniprintf>
 8010654:	6920      	ldr	r0, [r4, #16]
 8010656:	4915      	ldr	r1, [pc, #84]	@ (80106ac <create_node+0xec>)
 8010658:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801065c:	9100      	str	r1, [sp, #0]
 801065e:	2106      	movs	r1, #6
 8010660:	9101      	str	r1, [sp, #4]
 8010662:	6811      	ldr	r1, [r2, #0]
 8010664:	6962      	ldr	r2, [r4, #20]
 8010666:	fa1f f388 	uxth.w	r3, r8
 801066a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801066e:	f7f9 fdd1 	bl	800a214 <uxr_buffer_create_participant_bin>
 8010672:	4602      	mov	r2, r0
 8010674:	6920      	ldr	r0, [r4, #16]
 8010676:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801067a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801067e:	f7f8 fc41 	bl	8008f04 <run_xrce_session>
 8010682:	b918      	cbnz	r0, 801068c <create_node+0xcc>
 8010684:	4628      	mov	r0, r5
 8010686:	f7f8 facb 	bl	8008c20 <rmw_uxrce_fini_node_memory>
 801068a:	2500      	movs	r5, #0
 801068c:	4628      	mov	r0, r5
 801068e:	b003      	add	sp, #12
 8010690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010694:	4a06      	ldr	r2, [pc, #24]	@ (80106b0 <create_node+0xf0>)
 8010696:	9600      	str	r6, [sp, #0]
 8010698:	463b      	mov	r3, r7
 801069a:	213c      	movs	r1, #60	@ 0x3c
 801069c:	4803      	ldr	r0, [pc, #12]	@ (80106ac <create_node+0xec>)
 801069e:	f003 f967 	bl	8013970 <sniprintf>
 80106a2:	e7d7      	b.n	8010654 <create_node+0x94>
 80106a4:	2000d97c 	.word	0x2000d97c
 80106a8:	08014cdc 	.word	0x08014cdc
 80106ac:	2000dabc 	.word	0x2000dabc
 80106b0:	08014e6c 	.word	0x08014e6c

080106b4 <rmw_create_node>:
 80106b4:	b199      	cbz	r1, 80106de <rmw_create_node+0x2a>
 80106b6:	780b      	ldrb	r3, [r1, #0]
 80106b8:	468c      	mov	ip, r1
 80106ba:	b183      	cbz	r3, 80106de <rmw_create_node+0x2a>
 80106bc:	b410      	push	{r4}
 80106be:	4614      	mov	r4, r2
 80106c0:	b14a      	cbz	r2, 80106d6 <rmw_create_node+0x22>
 80106c2:	7813      	ldrb	r3, [r2, #0]
 80106c4:	b13b      	cbz	r3, 80106d6 <rmw_create_node+0x22>
 80106c6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80106c8:	4603      	mov	r3, r0
 80106ca:	4621      	mov	r1, r4
 80106cc:	4660      	mov	r0, ip
 80106ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106d2:	f7ff bf75 	b.w	80105c0 <create_node>
 80106d6:	2000      	movs	r0, #0
 80106d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106dc:	4770      	bx	lr
 80106de:	2000      	movs	r0, #0
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop

080106e4 <rmw_destroy_node>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	b328      	cbz	r0, 8010734 <rmw_destroy_node+0x50>
 80106e8:	4607      	mov	r7, r0
 80106ea:	6800      	ldr	r0, [r0, #0]
 80106ec:	b120      	cbz	r0, 80106f8 <rmw_destroy_node+0x14>
 80106ee:	4b36      	ldr	r3, [pc, #216]	@ (80107c8 <rmw_destroy_node+0xe4>)
 80106f0:	6819      	ldr	r1, [r3, #0]
 80106f2:	f7ef fd75 	bl	80001e0 <strcmp>
 80106f6:	b9e8      	cbnz	r0, 8010734 <rmw_destroy_node+0x50>
 80106f8:	687d      	ldr	r5, [r7, #4]
 80106fa:	b1dd      	cbz	r5, 8010734 <rmw_destroy_node+0x50>
 80106fc:	4b33      	ldr	r3, [pc, #204]	@ (80107cc <rmw_destroy_node+0xe8>)
 80106fe:	681c      	ldr	r4, [r3, #0]
 8010700:	2c00      	cmp	r4, #0
 8010702:	d05f      	beq.n	80107c4 <rmw_destroy_node+0xe0>
 8010704:	2600      	movs	r6, #0
 8010706:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801070a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801070e:	429d      	cmp	r5, r3
 8010710:	d013      	beq.n	801073a <rmw_destroy_node+0x56>
 8010712:	2c00      	cmp	r4, #0
 8010714:	d1f7      	bne.n	8010706 <rmw_destroy_node+0x22>
 8010716:	4b2e      	ldr	r3, [pc, #184]	@ (80107d0 <rmw_destroy_node+0xec>)
 8010718:	681c      	ldr	r4, [r3, #0]
 801071a:	b1c4      	cbz	r4, 801074e <rmw_destroy_node+0x6a>
 801071c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010720:	6a0b      	ldr	r3, [r1, #32]
 8010722:	429d      	cmp	r5, r3
 8010724:	d1f9      	bne.n	801071a <rmw_destroy_node+0x36>
 8010726:	317c      	adds	r1, #124	@ 0x7c
 8010728:	4638      	mov	r0, r7
 801072a:	f000 f9f3 	bl	8010b14 <rmw_destroy_subscription>
 801072e:	2801      	cmp	r0, #1
 8010730:	4606      	mov	r6, r0
 8010732:	d1f2      	bne.n	801071a <rmw_destroy_node+0x36>
 8010734:	2601      	movs	r6, #1
 8010736:	4630      	mov	r0, r6
 8010738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801073a:	3184      	adds	r1, #132	@ 0x84
 801073c:	4638      	mov	r0, r7
 801073e:	f7f8 f8b7 	bl	80088b0 <rmw_destroy_publisher>
 8010742:	2801      	cmp	r0, #1
 8010744:	4606      	mov	r6, r0
 8010746:	d0f5      	beq.n	8010734 <rmw_destroy_node+0x50>
 8010748:	2c00      	cmp	r4, #0
 801074a:	d1dc      	bne.n	8010706 <rmw_destroy_node+0x22>
 801074c:	e7e3      	b.n	8010716 <rmw_destroy_node+0x32>
 801074e:	4b21      	ldr	r3, [pc, #132]	@ (80107d4 <rmw_destroy_node+0xf0>)
 8010750:	681c      	ldr	r4, [r3, #0]
 8010752:	b16c      	cbz	r4, 8010770 <rmw_destroy_node+0x8c>
 8010754:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010758:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801075a:	429d      	cmp	r5, r3
 801075c:	d1f9      	bne.n	8010752 <rmw_destroy_node+0x6e>
 801075e:	317c      	adds	r1, #124	@ 0x7c
 8010760:	4638      	mov	r0, r7
 8010762:	f000 f993 	bl	8010a8c <rmw_destroy_service>
 8010766:	2801      	cmp	r0, #1
 8010768:	4606      	mov	r6, r0
 801076a:	d0e3      	beq.n	8010734 <rmw_destroy_node+0x50>
 801076c:	2c00      	cmp	r4, #0
 801076e:	d1f1      	bne.n	8010754 <rmw_destroy_node+0x70>
 8010770:	4b19      	ldr	r3, [pc, #100]	@ (80107d8 <rmw_destroy_node+0xf4>)
 8010772:	681c      	ldr	r4, [r3, #0]
 8010774:	b16c      	cbz	r4, 8010792 <rmw_destroy_node+0xae>
 8010776:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801077a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801077c:	429d      	cmp	r5, r3
 801077e:	d1f9      	bne.n	8010774 <rmw_destroy_node+0x90>
 8010780:	317c      	adds	r1, #124	@ 0x7c
 8010782:	4638      	mov	r0, r7
 8010784:	f7ff fc00 	bl	800ff88 <rmw_destroy_client>
 8010788:	2801      	cmp	r0, #1
 801078a:	4606      	mov	r6, r0
 801078c:	d0d2      	beq.n	8010734 <rmw_destroy_node+0x50>
 801078e:	2c00      	cmp	r4, #0
 8010790:	d1f1      	bne.n	8010776 <rmw_destroy_node+0x92>
 8010792:	6928      	ldr	r0, [r5, #16]
 8010794:	696a      	ldr	r2, [r5, #20]
 8010796:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801079a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801079e:	6819      	ldr	r1, [r3, #0]
 80107a0:	f7f9 fcec 	bl	800a17c <uxr_buffer_delete_entity>
 80107a4:	4602      	mov	r2, r0
 80107a6:	6928      	ldr	r0, [r5, #16]
 80107a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80107ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80107b0:	f7f8 fba8 	bl	8008f04 <run_xrce_session>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	bf08      	it	eq
 80107b8:	2602      	moveq	r6, #2
 80107ba:	4638      	mov	r0, r7
 80107bc:	f7f8 fa30 	bl	8008c20 <rmw_uxrce_fini_node_memory>
 80107c0:	4630      	mov	r0, r6
 80107c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c4:	4626      	mov	r6, r4
 80107c6:	e7a6      	b.n	8010716 <rmw_destroy_node+0x32>
 80107c8:	080153a8 	.word	0x080153a8
 80107cc:	2000d98c 	.word	0x2000d98c
 80107d0:	2000d9cc 	.word	0x2000d9cc
 80107d4:	2000d99c 	.word	0x2000d99c
 80107d8:	200090b0 	.word	0x200090b0

080107dc <rmw_node_get_graph_guard_condition>:
 80107dc:	6843      	ldr	r3, [r0, #4]
 80107de:	6918      	ldr	r0, [r3, #16]
 80107e0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop

080107e8 <rmw_send_request>:
 80107e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107ec:	4604      	mov	r4, r0
 80107ee:	6800      	ldr	r0, [r0, #0]
 80107f0:	b08b      	sub	sp, #44	@ 0x2c
 80107f2:	460e      	mov	r6, r1
 80107f4:	4615      	mov	r5, r2
 80107f6:	b128      	cbz	r0, 8010804 <rmw_send_request+0x1c>
 80107f8:	4b21      	ldr	r3, [pc, #132]	@ (8010880 <rmw_send_request+0x98>)
 80107fa:	6819      	ldr	r1, [r3, #0]
 80107fc:	f7ef fcf0 	bl	80001e0 <strcmp>
 8010800:	2800      	cmp	r0, #0
 8010802:	d139      	bne.n	8010878 <rmw_send_request+0x90>
 8010804:	6864      	ldr	r4, [r4, #4]
 8010806:	6963      	ldr	r3, [r4, #20]
 8010808:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	4798      	blx	r3
 8010810:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010814:	4630      	mov	r0, r6
 8010816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801081a:	4798      	blx	r3
 801081c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010820:	9000      	str	r0, [sp, #0]
 8010822:	6922      	ldr	r2, [r4, #16]
 8010824:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8010826:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801082a:	ab02      	add	r3, sp, #8
 801082c:	f7fb f8fc 	bl	800ba28 <uxr_prepare_output_stream>
 8010830:	2700      	movs	r7, #0
 8010832:	6028      	str	r0, [r5, #0]
 8010834:	606f      	str	r7, [r5, #4]
 8010836:	b198      	cbz	r0, 8010860 <rmw_send_request+0x78>
 8010838:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801083c:	a902      	add	r1, sp, #8
 801083e:	4630      	mov	r0, r6
 8010840:	4798      	blx	r3
 8010842:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8010846:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d00c      	beq.n	8010868 <rmw_send_request+0x80>
 801084e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010850:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010854:	f7fa fafc 	bl	800ae50 <uxr_run_session_until_confirm_delivery>
 8010858:	4638      	mov	r0, r7
 801085a:	b00b      	add	sp, #44	@ 0x2c
 801085c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010860:	2001      	movs	r0, #1
 8010862:	b00b      	add	sp, #44	@ 0x2c
 8010864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010868:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801086c:	f7f9 ff30 	bl	800a6d0 <uxr_flash_output_streams>
 8010870:	4638      	mov	r0, r7
 8010872:	b00b      	add	sp, #44	@ 0x2c
 8010874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010878:	200c      	movs	r0, #12
 801087a:	b00b      	add	sp, #44	@ 0x2c
 801087c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010880:	080153a8 	.word	0x080153a8

08010884 <rmw_take_request>:
 8010884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010888:	4605      	mov	r5, r0
 801088a:	6800      	ldr	r0, [r0, #0]
 801088c:	b089      	sub	sp, #36	@ 0x24
 801088e:	460c      	mov	r4, r1
 8010890:	4690      	mov	r8, r2
 8010892:	461e      	mov	r6, r3
 8010894:	b128      	cbz	r0, 80108a2 <rmw_take_request+0x1e>
 8010896:	4b28      	ldr	r3, [pc, #160]	@ (8010938 <rmw_take_request+0xb4>)
 8010898:	6819      	ldr	r1, [r3, #0]
 801089a:	f7ef fca1 	bl	80001e0 <strcmp>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d146      	bne.n	8010930 <rmw_take_request+0xac>
 80108a2:	b10e      	cbz	r6, 80108a8 <rmw_take_request+0x24>
 80108a4:	2300      	movs	r3, #0
 80108a6:	7033      	strb	r3, [r6, #0]
 80108a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80108ac:	f7f8 faac 	bl	8008e08 <rmw_uxrce_clean_expired_static_input_buffer>
 80108b0:	4648      	mov	r0, r9
 80108b2:	f7f8 fa81 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80108b6:	4607      	mov	r7, r0
 80108b8:	b3b0      	cbz	r0, 8010928 <rmw_take_request+0xa4>
 80108ba:	6885      	ldr	r5, [r0, #8]
 80108bc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80108c0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80108c4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80108c8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80108cc:	7423      	strb	r3, [r4, #16]
 80108ce:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80108d2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80108d6:	74e2      	strb	r2, [r4, #19]
 80108d8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80108dc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80108e0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80108e4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80108e8:	61e1      	str	r1, [r4, #28]
 80108ea:	6162      	str	r2, [r4, #20]
 80108ec:	61a3      	str	r3, [r4, #24]
 80108ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	4798      	blx	r3
 80108f6:	6844      	ldr	r4, [r0, #4]
 80108f8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80108fc:	f105 0110 	add.w	r1, r5, #16
 8010900:	4668      	mov	r0, sp
 8010902:	f7f9 fbcb 	bl	800a09c <ucdr_init_buffer>
 8010906:	68e3      	ldr	r3, [r4, #12]
 8010908:	4641      	mov	r1, r8
 801090a:	4668      	mov	r0, sp
 801090c:	4798      	blx	r3
 801090e:	4639      	mov	r1, r7
 8010910:	4604      	mov	r4, r0
 8010912:	480a      	ldr	r0, [pc, #40]	@ (801093c <rmw_take_request+0xb8>)
 8010914:	f7ff fb24 	bl	800ff60 <put_memory>
 8010918:	b106      	cbz	r6, 801091c <rmw_take_request+0x98>
 801091a:	7034      	strb	r4, [r6, #0]
 801091c:	f084 0001 	eor.w	r0, r4, #1
 8010920:	b2c0      	uxtb	r0, r0
 8010922:	b009      	add	sp, #36	@ 0x24
 8010924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010928:	2001      	movs	r0, #1
 801092a:	b009      	add	sp, #36	@ 0x24
 801092c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010930:	200c      	movs	r0, #12
 8010932:	b009      	add	sp, #36	@ 0x24
 8010934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010938:	080153a8 	.word	0x080153a8
 801093c:	2000d9bc 	.word	0x2000d9bc

08010940 <rmw_send_response>:
 8010940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010942:	4605      	mov	r5, r0
 8010944:	6800      	ldr	r0, [r0, #0]
 8010946:	b091      	sub	sp, #68	@ 0x44
 8010948:	460c      	mov	r4, r1
 801094a:	4616      	mov	r6, r2
 801094c:	b128      	cbz	r0, 801095a <rmw_send_response+0x1a>
 801094e:	4b29      	ldr	r3, [pc, #164]	@ (80109f4 <rmw_send_response+0xb4>)
 8010950:	6819      	ldr	r1, [r3, #0]
 8010952:	f7ef fc45 	bl	80001e0 <strcmp>
 8010956:	2800      	cmp	r0, #0
 8010958:	d141      	bne.n	80109de <rmw_send_response+0x9e>
 801095a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801095e:	9306      	str	r3, [sp, #24]
 8010960:	4623      	mov	r3, r4
 8010962:	9207      	str	r2, [sp, #28]
 8010964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010968:	686d      	ldr	r5, [r5, #4]
 801096a:	789b      	ldrb	r3, [r3, #2]
 801096c:	68a1      	ldr	r1, [r4, #8]
 801096e:	f88d 2017 	strb.w	r2, [sp, #23]
 8010972:	f88d 3016 	strb.w	r3, [sp, #22]
 8010976:	68e2      	ldr	r2, [r4, #12]
 8010978:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801097c:	6860      	ldr	r0, [r4, #4]
 801097e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010982:	ab02      	add	r3, sp, #8
 8010984:	c307      	stmia	r3!, {r0, r1, r2}
 8010986:	696b      	ldr	r3, [r5, #20]
 8010988:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	4798      	blx	r3
 801098e:	6844      	ldr	r4, [r0, #4]
 8010990:	4630      	mov	r0, r6
 8010992:	6923      	ldr	r3, [r4, #16]
 8010994:	4798      	blx	r3
 8010996:	f100 0318 	add.w	r3, r0, #24
 801099a:	6938      	ldr	r0, [r7, #16]
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	692a      	ldr	r2, [r5, #16]
 80109a0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80109a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109a6:	ab08      	add	r3, sp, #32
 80109a8:	f7fb f83e 	bl	800ba28 <uxr_prepare_output_stream>
 80109ac:	b910      	cbnz	r0, 80109b4 <rmw_send_response+0x74>
 80109ae:	2001      	movs	r0, #1
 80109b0:	b011      	add	sp, #68	@ 0x44
 80109b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109b4:	a902      	add	r1, sp, #8
 80109b6:	a808      	add	r0, sp, #32
 80109b8:	f7fc f882 	bl	800cac0 <uxr_serialize_SampleIdentity>
 80109bc:	68a3      	ldr	r3, [r4, #8]
 80109be:	a908      	add	r1, sp, #32
 80109c0:	4630      	mov	r0, r6
 80109c2:	4798      	blx	r3
 80109c4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80109c8:	6938      	ldr	r0, [r7, #16]
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d00a      	beq.n	80109e4 <rmw_send_response+0xa4>
 80109ce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80109d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109d4:	f7fa fa3c 	bl	800ae50 <uxr_run_session_until_confirm_delivery>
 80109d8:	2000      	movs	r0, #0
 80109da:	b011      	add	sp, #68	@ 0x44
 80109dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109de:	200c      	movs	r0, #12
 80109e0:	b011      	add	sp, #68	@ 0x44
 80109e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109e8:	f7f9 fe72 	bl	800a6d0 <uxr_flash_output_streams>
 80109ec:	2000      	movs	r0, #0
 80109ee:	b011      	add	sp, #68	@ 0x44
 80109f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109f2:	bf00      	nop
 80109f4:	080153a8 	.word	0x080153a8

080109f8 <rmw_take_response>:
 80109f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109fc:	4604      	mov	r4, r0
 80109fe:	6800      	ldr	r0, [r0, #0]
 8010a00:	b088      	sub	sp, #32
 8010a02:	4688      	mov	r8, r1
 8010a04:	4617      	mov	r7, r2
 8010a06:	461d      	mov	r5, r3
 8010a08:	b120      	cbz	r0, 8010a14 <rmw_take_response+0x1c>
 8010a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8010a84 <rmw_take_response+0x8c>)
 8010a0c:	6819      	ldr	r1, [r3, #0]
 8010a0e:	f7ef fbe7 	bl	80001e0 <strcmp>
 8010a12:	bb78      	cbnz	r0, 8010a74 <rmw_take_response+0x7c>
 8010a14:	b10d      	cbz	r5, 8010a1a <rmw_take_response+0x22>
 8010a16:	2300      	movs	r3, #0
 8010a18:	702b      	strb	r3, [r5, #0]
 8010a1a:	6864      	ldr	r4, [r4, #4]
 8010a1c:	f7f8 f9f4 	bl	8008e08 <rmw_uxrce_clean_expired_static_input_buffer>
 8010a20:	4620      	mov	r0, r4
 8010a22:	f7f8 f9c9 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010a26:	4606      	mov	r6, r0
 8010a28:	b340      	cbz	r0, 8010a7c <rmw_take_response+0x84>
 8010a2a:	6963      	ldr	r3, [r4, #20]
 8010a2c:	6884      	ldr	r4, [r0, #8]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8010a34:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8010a38:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8010a3c:	4798      	blx	r3
 8010a3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010a42:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8010a46:	f104 0110 	add.w	r1, r4, #16
 8010a4a:	4668      	mov	r0, sp
 8010a4c:	f7f9 fb26 	bl	800a09c <ucdr_init_buffer>
 8010a50:	4639      	mov	r1, r7
 8010a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a56:	4668      	mov	r0, sp
 8010a58:	4798      	blx	r3
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	480a      	ldr	r0, [pc, #40]	@ (8010a88 <rmw_take_response+0x90>)
 8010a60:	f7ff fa7e 	bl	800ff60 <put_memory>
 8010a64:	b105      	cbz	r5, 8010a68 <rmw_take_response+0x70>
 8010a66:	702c      	strb	r4, [r5, #0]
 8010a68:	f084 0001 	eor.w	r0, r4, #1
 8010a6c:	b2c0      	uxtb	r0, r0
 8010a6e:	b008      	add	sp, #32
 8010a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a74:	200c      	movs	r0, #12
 8010a76:	b008      	add	sp, #32
 8010a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7c:	2001      	movs	r0, #1
 8010a7e:	b008      	add	sp, #32
 8010a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a84:	080153a8 	.word	0x080153a8
 8010a88:	2000d9bc 	.word	0x2000d9bc

08010a8c <rmw_destroy_service>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	b128      	cbz	r0, 8010a9c <rmw_destroy_service+0x10>
 8010a90:	4604      	mov	r4, r0
 8010a92:	6800      	ldr	r0, [r0, #0]
 8010a94:	460d      	mov	r5, r1
 8010a96:	f7f8 fab5 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 8010a9a:	b910      	cbnz	r0, 8010aa2 <rmw_destroy_service+0x16>
 8010a9c:	2401      	movs	r4, #1
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	bd70      	pop	{r4, r5, r6, pc}
 8010aa2:	6863      	ldr	r3, [r4, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d0f9      	beq.n	8010a9c <rmw_destroy_service+0x10>
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	d0f7      	beq.n	8010a9c <rmw_destroy_service+0x10>
 8010aac:	6828      	ldr	r0, [r5, #0]
 8010aae:	f7f8 faa9 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d0f2      	beq.n	8010a9c <rmw_destroy_service+0x10>
 8010ab6:	686e      	ldr	r6, [r5, #4]
 8010ab8:	2e00      	cmp	r6, #0
 8010aba:	d0ef      	beq.n	8010a9c <rmw_destroy_service+0x10>
 8010abc:	6864      	ldr	r4, [r4, #4]
 8010abe:	6932      	ldr	r2, [r6, #16]
 8010ac0:	6920      	ldr	r0, [r4, #16]
 8010ac2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010ac6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010aca:	6819      	ldr	r1, [r3, #0]
 8010acc:	f001 fa6c 	bl	8011fa8 <uxr_buffer_cancel_data>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	6920      	ldr	r0, [r4, #16]
 8010ad4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010ad8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010adc:	f7f8 fa12 	bl	8008f04 <run_xrce_session>
 8010ae0:	6920      	ldr	r0, [r4, #16]
 8010ae2:	6932      	ldr	r2, [r6, #16]
 8010ae4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010ae8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010aec:	6819      	ldr	r1, [r3, #0]
 8010aee:	f7f9 fb45 	bl	800a17c <uxr_buffer_delete_entity>
 8010af2:	4602      	mov	r2, r0
 8010af4:	6920      	ldr	r0, [r4, #16]
 8010af6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010afa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010afe:	f7f8 fa01 	bl	8008f04 <run_xrce_session>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	4628      	mov	r0, r5
 8010b06:	bf14      	ite	ne
 8010b08:	2400      	movne	r4, #0
 8010b0a:	2402      	moveq	r4, #2
 8010b0c:	f7f8 f8cc 	bl	8008ca8 <rmw_uxrce_fini_service_memory>
 8010b10:	e7c5      	b.n	8010a9e <rmw_destroy_service+0x12>
 8010b12:	bf00      	nop

08010b14 <rmw_destroy_subscription>:
 8010b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b16:	b128      	cbz	r0, 8010b24 <rmw_destroy_subscription+0x10>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	6800      	ldr	r0, [r0, #0]
 8010b1c:	460d      	mov	r5, r1
 8010b1e:	f7f8 fa71 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 8010b22:	b910      	cbnz	r0, 8010b2a <rmw_destroy_subscription+0x16>
 8010b24:	2401      	movs	r4, #1
 8010b26:	4620      	mov	r0, r4
 8010b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2a:	6863      	ldr	r3, [r4, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d0f9      	beq.n	8010b24 <rmw_destroy_subscription+0x10>
 8010b30:	2d00      	cmp	r5, #0
 8010b32:	d0f7      	beq.n	8010b24 <rmw_destroy_subscription+0x10>
 8010b34:	6828      	ldr	r0, [r5, #0]
 8010b36:	f7f8 fa65 	bl	8009004 <is_uxrce_rmw_identifier_valid>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0f2      	beq.n	8010b24 <rmw_destroy_subscription+0x10>
 8010b3e:	686c      	ldr	r4, [r5, #4]
 8010b40:	2c00      	cmp	r4, #0
 8010b42:	d0ef      	beq.n	8010b24 <rmw_destroy_subscription+0x10>
 8010b44:	6a26      	ldr	r6, [r4, #32]
 8010b46:	6962      	ldr	r2, [r4, #20]
 8010b48:	6930      	ldr	r0, [r6, #16]
 8010b4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010b4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b52:	6819      	ldr	r1, [r3, #0]
 8010b54:	f001 fa28 	bl	8011fa8 <uxr_buffer_cancel_data>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	6930      	ldr	r0, [r6, #16]
 8010b5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010b60:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010b64:	f7f8 f9ce 	bl	8008f04 <run_xrce_session>
 8010b68:	69e0      	ldr	r0, [r4, #28]
 8010b6a:	f7ff fd07 	bl	801057c <destroy_topic>
 8010b6e:	6a23      	ldr	r3, [r4, #32]
 8010b70:	6962      	ldr	r2, [r4, #20]
 8010b72:	6918      	ldr	r0, [r3, #16]
 8010b74:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010b78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b7c:	6819      	ldr	r1, [r3, #0]
 8010b7e:	f7f9 fafd 	bl	800a17c <uxr_buffer_delete_entity>
 8010b82:	6a23      	ldr	r3, [r4, #32]
 8010b84:	6922      	ldr	r2, [r4, #16]
 8010b86:	691b      	ldr	r3, [r3, #16]
 8010b88:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	6809      	ldr	r1, [r1, #0]
 8010b90:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010b94:	f7f9 faf2 	bl	800a17c <uxr_buffer_delete_entity>
 8010b98:	6937      	ldr	r7, [r6, #16]
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010ba0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	4638      	mov	r0, r7
 8010ba8:	f7f8 f9ac 	bl	8008f04 <run_xrce_session>
 8010bac:	6936      	ldr	r6, [r6, #16]
 8010bae:	4622      	mov	r2, r4
 8010bb0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010bb4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010bb8:	4604      	mov	r4, r0
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f7f8 f9a2 	bl	8008f04 <run_xrce_session>
 8010bc0:	b12c      	cbz	r4, 8010bce <rmw_destroy_subscription+0xba>
 8010bc2:	b120      	cbz	r0, 8010bce <rmw_destroy_subscription+0xba>
 8010bc4:	2400      	movs	r4, #0
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f7f8 f858 	bl	8008c7c <rmw_uxrce_fini_subscription_memory>
 8010bcc:	e7ab      	b.n	8010b26 <rmw_destroy_subscription+0x12>
 8010bce:	2402      	movs	r4, #2
 8010bd0:	e7f9      	b.n	8010bc6 <rmw_destroy_subscription+0xb2>
 8010bd2:	bf00      	nop

08010bd4 <rmw_take_with_info>:
 8010bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	6800      	ldr	r0, [r0, #0]
 8010bda:	b089      	sub	sp, #36	@ 0x24
 8010bdc:	460f      	mov	r7, r1
 8010bde:	4615      	mov	r5, r2
 8010be0:	b128      	cbz	r0, 8010bee <rmw_take_with_info+0x1a>
 8010be2:	4b24      	ldr	r3, [pc, #144]	@ (8010c74 <rmw_take_with_info+0xa0>)
 8010be4:	6819      	ldr	r1, [r3, #0]
 8010be6:	f7ef fafb 	bl	80001e0 <strcmp>
 8010bea:	2800      	cmp	r0, #0
 8010bec:	d13e      	bne.n	8010c6c <rmw_take_with_info+0x98>
 8010bee:	b305      	cbz	r5, 8010c32 <rmw_take_with_info+0x5e>
 8010bf0:	6864      	ldr	r4, [r4, #4]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	702b      	strb	r3, [r5, #0]
 8010bf6:	f7f8 f907 	bl	8008e08 <rmw_uxrce_clean_expired_static_input_buffer>
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f7f8 f8dc 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010c00:	4606      	mov	r6, r0
 8010c02:	b1f0      	cbz	r0, 8010c42 <rmw_take_with_info+0x6e>
 8010c04:	6881      	ldr	r1, [r0, #8]
 8010c06:	4668      	mov	r0, sp
 8010c08:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8010c0c:	3110      	adds	r1, #16
 8010c0e:	f7f9 fa45 	bl	800a09c <ucdr_init_buffer>
 8010c12:	69a3      	ldr	r3, [r4, #24]
 8010c14:	4639      	mov	r1, r7
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	4668      	mov	r0, sp
 8010c1a:	4798      	blx	r3
 8010c1c:	4631      	mov	r1, r6
 8010c1e:	4604      	mov	r4, r0
 8010c20:	4815      	ldr	r0, [pc, #84]	@ (8010c78 <rmw_take_with_info+0xa4>)
 8010c22:	f7ff f99d 	bl	800ff60 <put_memory>
 8010c26:	702c      	strb	r4, [r5, #0]
 8010c28:	f084 0001 	eor.w	r0, r4, #1
 8010c2c:	b2c0      	uxtb	r0, r0
 8010c2e:	b009      	add	sp, #36	@ 0x24
 8010c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c32:	6864      	ldr	r4, [r4, #4]
 8010c34:	f7f8 f8e8 	bl	8008e08 <rmw_uxrce_clean_expired_static_input_buffer>
 8010c38:	4620      	mov	r0, r4
 8010c3a:	f7f8 f8bd 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010c3e:	4605      	mov	r5, r0
 8010c40:	b910      	cbnz	r0, 8010c48 <rmw_take_with_info+0x74>
 8010c42:	2001      	movs	r0, #1
 8010c44:	b009      	add	sp, #36	@ 0x24
 8010c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c48:	68a9      	ldr	r1, [r5, #8]
 8010c4a:	4668      	mov	r0, sp
 8010c4c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8010c50:	3110      	adds	r1, #16
 8010c52:	f7f9 fa23 	bl	800a09c <ucdr_init_buffer>
 8010c56:	69a3      	ldr	r3, [r4, #24]
 8010c58:	4639      	mov	r1, r7
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	4668      	mov	r0, sp
 8010c5e:	4798      	blx	r3
 8010c60:	4629      	mov	r1, r5
 8010c62:	4604      	mov	r4, r0
 8010c64:	4804      	ldr	r0, [pc, #16]	@ (8010c78 <rmw_take_with_info+0xa4>)
 8010c66:	f7ff f97b 	bl	800ff60 <put_memory>
 8010c6a:	e7dd      	b.n	8010c28 <rmw_take_with_info+0x54>
 8010c6c:	200c      	movs	r0, #12
 8010c6e:	b009      	add	sp, #36	@ 0x24
 8010c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c72:	bf00      	nop
 8010c74:	080153a8 	.word	0x080153a8
 8010c78:	2000d9bc 	.word	0x2000d9bc

08010c7c <rmw_uxrce_transport_init>:
 8010c7c:	b508      	push	{r3, lr}
 8010c7e:	b108      	cbz	r0, 8010c84 <rmw_uxrce_transport_init+0x8>
 8010c80:	f100 0210 	add.w	r2, r0, #16
 8010c84:	b139      	cbz	r1, 8010c96 <rmw_uxrce_transport_init+0x1a>
 8010c86:	6949      	ldr	r1, [r1, #20]
 8010c88:	4610      	mov	r0, r2
 8010c8a:	f000 fc0d 	bl	80114a8 <uxr_init_custom_transport>
 8010c8e:	f080 0001 	eor.w	r0, r0, #1
 8010c92:	b2c0      	uxtb	r0, r0
 8010c94:	bd08      	pop	{r3, pc}
 8010c96:	4b04      	ldr	r3, [pc, #16]	@ (8010ca8 <rmw_uxrce_transport_init+0x2c>)
 8010c98:	4610      	mov	r0, r2
 8010c9a:	6859      	ldr	r1, [r3, #4]
 8010c9c:	f000 fc04 	bl	80114a8 <uxr_init_custom_transport>
 8010ca0:	f080 0001 	eor.w	r0, r0, #1
 8010ca4:	b2c0      	uxtb	r0, r0
 8010ca6:	bd08      	pop	{r3, pc}
 8010ca8:	20009094 	.word	0x20009094

08010cac <rmw_wait>:
 8010cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cb0:	b089      	sub	sp, #36	@ 0x24
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8010cb6:	460e      	mov	r6, r1
 8010cb8:	4698      	mov	r8, r3
 8010cba:	4691      	mov	r9, r2
 8010cbc:	2a00      	cmp	r2, #0
 8010cbe:	f000 810a 	beq.w	8010ed6 <rmw_wait+0x22a>
 8010cc2:	b16c      	cbz	r4, 8010ce0 <rmw_wait+0x34>
 8010cc4:	4bae      	ldr	r3, [pc, #696]	@ (8010f80 <rmw_wait+0x2d4>)
 8010cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cc8:	af04      	add	r7, sp, #16
 8010cca:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8010cce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010cd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010cd6:	f7fe ff67 	bl	800fba8 <rmw_time_equal>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	f000 8127 	beq.w	8010f2e <rmw_wait+0x282>
 8010ce0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ce4:	f7f8 f890 	bl	8008e08 <rmw_uxrce_clean_expired_static_input_buffer>
 8010ce8:	4ba6      	ldr	r3, [pc, #664]	@ (8010f84 <rmw_wait+0x2d8>)
 8010cea:	681c      	ldr	r4, [r3, #0]
 8010cec:	b14c      	cbz	r4, 8010d02 <rmw_wait+0x56>
 8010cee:	4623      	mov	r3, r4
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8010cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8010cfa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1f7      	bne.n	8010cf2 <rmw_wait+0x46>
 8010d02:	f1b9 0f00 	cmp.w	r9, #0
 8010d06:	d011      	beq.n	8010d2c <rmw_wait+0x80>
 8010d08:	f8d9 1000 	ldr.w	r1, [r9]
 8010d0c:	b171      	cbz	r1, 8010d2c <rmw_wait+0x80>
 8010d0e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8010d12:	2300      	movs	r3, #0
 8010d14:	2001      	movs	r0, #1
 8010d16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8010d1a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8010d1c:	6912      	ldr	r2, [r2, #16]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8010d24:	4299      	cmp	r1, r3
 8010d26:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8010d2a:	d1f4      	bne.n	8010d16 <rmw_wait+0x6a>
 8010d2c:	f1b8 0f00 	cmp.w	r8, #0
 8010d30:	d011      	beq.n	8010d56 <rmw_wait+0xaa>
 8010d32:	f8d8 1000 	ldr.w	r1, [r8]
 8010d36:	b171      	cbz	r1, 8010d56 <rmw_wait+0xaa>
 8010d38:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	2001      	movs	r0, #1
 8010d40:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8010d44:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8010d46:	6912      	ldr	r2, [r2, #16]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8010d4e:	4299      	cmp	r1, r3
 8010d50:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8010d54:	d1f4      	bne.n	8010d40 <rmw_wait+0x94>
 8010d56:	b185      	cbz	r5, 8010d7a <rmw_wait+0xce>
 8010d58:	6829      	ldr	r1, [r5, #0]
 8010d5a:	b171      	cbz	r1, 8010d7a <rmw_wait+0xce>
 8010d5c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8010d60:	2300      	movs	r3, #0
 8010d62:	2001      	movs	r0, #1
 8010d64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8010d68:	6a12      	ldr	r2, [r2, #32]
 8010d6a:	6912      	ldr	r2, [r2, #16]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8010d72:	4299      	cmp	r1, r3
 8010d74:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8010d78:	d1f4      	bne.n	8010d64 <rmw_wait+0xb8>
 8010d7a:	b34c      	cbz	r4, 8010dd0 <rmw_wait+0x124>
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8010d84:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8010d88:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8010d8c:	440b      	add	r3, r1
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	2a00      	cmp	r2, #0
 8010d92:	d1f5      	bne.n	8010d80 <rmw_wait+0xd4>
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f000 8084 	beq.w	8010ea2 <rmw_wait+0x1f6>
 8010d9a:	1c7a      	adds	r2, r7, #1
 8010d9c:	d00d      	beq.n	8010dba <rmw_wait+0x10e>
 8010d9e:	ee07 7a90 	vmov	s15, r7
 8010da2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010da6:	ee07 3a90 	vmov	s15, r3
 8010daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010db2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8010db6:	ee17 7a90 	vmov	r7, s15
 8010dba:	68a0      	ldr	r0, [r4, #8]
 8010dbc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8010dc0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f040 8090 	bne.w	8010eea <rmw_wait+0x23e>
 8010dca:	6864      	ldr	r4, [r4, #4]
 8010dcc:	2c00      	cmp	r4, #0
 8010dce:	d1f4      	bne.n	8010dba <rmw_wait+0x10e>
 8010dd0:	f1b9 0f00 	cmp.w	r9, #0
 8010dd4:	f000 80bc 	beq.w	8010f50 <rmw_wait+0x2a4>
 8010dd8:	f8d9 7000 	ldr.w	r7, [r9]
 8010ddc:	2f00      	cmp	r7, #0
 8010dde:	f000 808e 	beq.w	8010efe <rmw_wait+0x252>
 8010de2:	2400      	movs	r4, #0
 8010de4:	4627      	mov	r7, r4
 8010de6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010dea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010dee:	f7f7 ffe3 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d05f      	beq.n	8010eb6 <rmw_wait+0x20a>
 8010df6:	f8d9 3000 	ldr.w	r3, [r9]
 8010dfa:	3401      	adds	r4, #1
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	f04f 0701 	mov.w	r7, #1
 8010e02:	d8f0      	bhi.n	8010de6 <rmw_wait+0x13a>
 8010e04:	f1b8 0f00 	cmp.w	r8, #0
 8010e08:	d012      	beq.n	8010e30 <rmw_wait+0x184>
 8010e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e0e:	b17b      	cbz	r3, 8010e30 <rmw_wait+0x184>
 8010e10:	2400      	movs	r4, #0
 8010e12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e1a:	f7f7 ffcd 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d051      	beq.n	8010ec6 <rmw_wait+0x21a>
 8010e22:	f8d8 3000 	ldr.w	r3, [r8]
 8010e26:	3401      	adds	r4, #1
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	f04f 0701 	mov.w	r7, #1
 8010e2e:	d8f0      	bhi.n	8010e12 <rmw_wait+0x166>
 8010e30:	b1dd      	cbz	r5, 8010e6a <rmw_wait+0x1be>
 8010e32:	682b      	ldr	r3, [r5, #0]
 8010e34:	b1cb      	cbz	r3, 8010e6a <rmw_wait+0x1be>
 8010e36:	2400      	movs	r4, #0
 8010e38:	686b      	ldr	r3, [r5, #4]
 8010e3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e3e:	f7f7 ffbb 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010e42:	b158      	cbz	r0, 8010e5c <rmw_wait+0x1b0>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	3401      	adds	r4, #1
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	d969      	bls.n	8010f20 <rmw_wait+0x274>
 8010e4c:	686b      	ldr	r3, [r5, #4]
 8010e4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e52:	2701      	movs	r7, #1
 8010e54:	f7f7 ffb0 	bl	8008db8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d1f3      	bne.n	8010e44 <rmw_wait+0x198>
 8010e5c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8010e60:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8010e64:	3401      	adds	r4, #1
 8010e66:	42a3      	cmp	r3, r4
 8010e68:	d8e6      	bhi.n	8010e38 <rmw_wait+0x18c>
 8010e6a:	b1a6      	cbz	r6, 8010e96 <rmw_wait+0x1ea>
 8010e6c:	6834      	ldr	r4, [r6, #0]
 8010e6e:	b194      	cbz	r4, 8010e96 <rmw_wait+0x1ea>
 8010e70:	2300      	movs	r3, #0
 8010e72:	461d      	mov	r5, r3
 8010e74:	e004      	b.n	8010e80 <rmw_wait+0x1d4>
 8010e76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	42a3      	cmp	r3, r4
 8010e7e:	d00a      	beq.n	8010e96 <rmw_wait+0x1ea>
 8010e80:	6870      	ldr	r0, [r6, #4]
 8010e82:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8010e86:	7c0a      	ldrb	r2, [r1, #16]
 8010e88:	2a00      	cmp	r2, #0
 8010e8a:	d0f4      	beq.n	8010e76 <rmw_wait+0x1ca>
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	42a3      	cmp	r3, r4
 8010e90:	740d      	strb	r5, [r1, #16]
 8010e92:	4617      	mov	r7, r2
 8010e94:	d1f4      	bne.n	8010e80 <rmw_wait+0x1d4>
 8010e96:	2f00      	cmp	r7, #0
 8010e98:	d03e      	beq.n	8010f18 <rmw_wait+0x26c>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	b009      	add	sp, #36	@ 0x24
 8010e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	68a0      	ldr	r0, [r4, #8]
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010eaa:	f7f9 ff97 	bl	800addc <uxr_run_session_timeout>
 8010eae:	6864      	ldr	r4, [r4, #4]
 8010eb0:	2c00      	cmp	r4, #0
 8010eb2:	d1f6      	bne.n	8010ea2 <rmw_wait+0x1f6>
 8010eb4:	e78c      	b.n	8010dd0 <rmw_wait+0x124>
 8010eb6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8010eba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8010ebe:	3401      	adds	r4, #1
 8010ec0:	42a3      	cmp	r3, r4
 8010ec2:	d890      	bhi.n	8010de6 <rmw_wait+0x13a>
 8010ec4:	e79e      	b.n	8010e04 <rmw_wait+0x158>
 8010ec6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8010eca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8010ece:	3401      	adds	r4, #1
 8010ed0:	429c      	cmp	r4, r3
 8010ed2:	d39e      	bcc.n	8010e12 <rmw_wait+0x166>
 8010ed4:	e7ac      	b.n	8010e30 <rmw_wait+0x184>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f47f aef3 	bne.w	8010cc2 <rmw_wait+0x16>
 8010edc:	2800      	cmp	r0, #0
 8010ede:	f47f aef0 	bne.w	8010cc2 <rmw_wait+0x16>
 8010ee2:	2900      	cmp	r1, #0
 8010ee4:	f47f aeed 	bne.w	8010cc2 <rmw_wait+0x16>
 8010ee8:	e7d7      	b.n	8010e9a <rmw_wait+0x1ee>
 8010eea:	4639      	mov	r1, r7
 8010eec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ef0:	f7f9 ff8e 	bl	800ae10 <uxr_run_session_until_data>
 8010ef4:	6864      	ldr	r4, [r4, #4]
 8010ef6:	2c00      	cmp	r4, #0
 8010ef8:	f47f af5f 	bne.w	8010dba <rmw_wait+0x10e>
 8010efc:	e768      	b.n	8010dd0 <rmw_wait+0x124>
 8010efe:	f1b8 0f00 	cmp.w	r8, #0
 8010f02:	d032      	beq.n	8010f6a <rmw_wait+0x2be>
 8010f04:	f8d8 3000 	ldr.w	r3, [r8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d181      	bne.n	8010e10 <rmw_wait+0x164>
 8010f0c:	461f      	mov	r7, r3
 8010f0e:	2d00      	cmp	r5, #0
 8010f10:	d18f      	bne.n	8010e32 <rmw_wait+0x186>
 8010f12:	462f      	mov	r7, r5
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	d1a9      	bne.n	8010e6c <rmw_wait+0x1c0>
 8010f18:	2002      	movs	r0, #2
 8010f1a:	b009      	add	sp, #36	@ 0x24
 8010f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f20:	2e00      	cmp	r6, #0
 8010f22:	d0ba      	beq.n	8010e9a <rmw_wait+0x1ee>
 8010f24:	6834      	ldr	r4, [r6, #0]
 8010f26:	2701      	movs	r7, #1
 8010f28:	2c00      	cmp	r4, #0
 8010f2a:	d1a1      	bne.n	8010e70 <rmw_wait+0x1c4>
 8010f2c:	e7b5      	b.n	8010e9a <rmw_wait+0x1ee>
 8010f2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010f32:	f7fe fe8d 	bl	800fc50 <rmw_time_total_nsec>
 8010f36:	2300      	movs	r3, #0
 8010f38:	4a13      	ldr	r2, [pc, #76]	@ (8010f88 <rmw_wait+0x2dc>)
 8010f3a:	f7ef fa09 	bl	8000350 <__aeabi_uldivmod>
 8010f3e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8010f42:	f171 0300 	sbcs.w	r3, r1, #0
 8010f46:	4607      	mov	r7, r0
 8010f48:	bfa8      	it	ge
 8010f4a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8010f4e:	e6c9      	b.n	8010ce4 <rmw_wait+0x38>
 8010f50:	f1b8 0f00 	cmp.w	r8, #0
 8010f54:	d009      	beq.n	8010f6a <rmw_wait+0x2be>
 8010f56:	f8d8 3000 	ldr.w	r3, [r8]
 8010f5a:	464f      	mov	r7, r9
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f47f af57 	bne.w	8010e10 <rmw_wait+0x164>
 8010f62:	2d00      	cmp	r5, #0
 8010f64:	f47f af65 	bne.w	8010e32 <rmw_wait+0x186>
 8010f68:	e7d3      	b.n	8010f12 <rmw_wait+0x266>
 8010f6a:	b17d      	cbz	r5, 8010f8c <rmw_wait+0x2e0>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	4647      	mov	r7, r8
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f47f af60 	bne.w	8010e36 <rmw_wait+0x18a>
 8010f76:	2e00      	cmp	r6, #0
 8010f78:	f47f af78 	bne.w	8010e6c <rmw_wait+0x1c0>
 8010f7c:	e7cc      	b.n	8010f18 <rmw_wait+0x26c>
 8010f7e:	bf00      	nop
 8010f80:	08014b10 	.word	0x08014b10
 8010f84:	2000d9ac 	.word	0x2000d9ac
 8010f88:	000f4240 	.word	0x000f4240
 8010f8c:	2e00      	cmp	r6, #0
 8010f8e:	d0c3      	beq.n	8010f18 <rmw_wait+0x26c>
 8010f90:	6834      	ldr	r4, [r6, #0]
 8010f92:	462f      	mov	r7, r5
 8010f94:	2c00      	cmp	r4, #0
 8010f96:	f47f af6b 	bne.w	8010e70 <rmw_wait+0x1c4>
 8010f9a:	e7bd      	b.n	8010f18 <rmw_wait+0x26c>

08010f9c <rmw_create_wait_set>:
 8010f9c:	b508      	push	{r3, lr}
 8010f9e:	4803      	ldr	r0, [pc, #12]	@ (8010fac <rmw_create_wait_set+0x10>)
 8010fa0:	f7fe ffce 	bl	800ff40 <get_memory>
 8010fa4:	b108      	cbz	r0, 8010faa <rmw_create_wait_set+0xe>
 8010fa6:	6880      	ldr	r0, [r0, #8]
 8010fa8:	3010      	adds	r0, #16
 8010faa:	bd08      	pop	{r3, pc}
 8010fac:	2000d9ec 	.word	0x2000d9ec

08010fb0 <rmw_destroy_wait_set>:
 8010fb0:	b508      	push	{r3, lr}
 8010fb2:	4b08      	ldr	r3, [pc, #32]	@ (8010fd4 <rmw_destroy_wait_set+0x24>)
 8010fb4:	6819      	ldr	r1, [r3, #0]
 8010fb6:	b911      	cbnz	r1, 8010fbe <rmw_destroy_wait_set+0xe>
 8010fb8:	e00a      	b.n	8010fd0 <rmw_destroy_wait_set+0x20>
 8010fba:	6849      	ldr	r1, [r1, #4]
 8010fbc:	b141      	cbz	r1, 8010fd0 <rmw_destroy_wait_set+0x20>
 8010fbe:	688b      	ldr	r3, [r1, #8]
 8010fc0:	3310      	adds	r3, #16
 8010fc2:	4298      	cmp	r0, r3
 8010fc4:	d1f9      	bne.n	8010fba <rmw_destroy_wait_set+0xa>
 8010fc6:	4803      	ldr	r0, [pc, #12]	@ (8010fd4 <rmw_destroy_wait_set+0x24>)
 8010fc8:	f7fe ffca 	bl	800ff60 <put_memory>
 8010fcc:	2000      	movs	r0, #0
 8010fce:	bd08      	pop	{r3, pc}
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	bd08      	pop	{r3, pc}
 8010fd4:	2000d9ec 	.word	0x2000d9ec

08010fd8 <rmw_uros_epoch_nanos>:
 8010fd8:	4b05      	ldr	r3, [pc, #20]	@ (8010ff0 <rmw_uros_epoch_nanos+0x18>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	b123      	cbz	r3, 8010fe8 <rmw_uros_epoch_nanos+0x10>
 8010fde:	6898      	ldr	r0, [r3, #8]
 8010fe0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010fe4:	f7f9 bb6a 	b.w	800a6bc <uxr_epoch_nanos>
 8010fe8:	2000      	movs	r0, #0
 8010fea:	2100      	movs	r1, #0
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	2000d9ac 	.word	0x2000d9ac

08010ff4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff8:	6805      	ldr	r5, [r0, #0]
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	460e      	mov	r6, r1
 8011000:	f7ef f8ee 	bl	80001e0 <strcmp>
 8011004:	b1c8      	cbz	r0, 801103a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011006:	4b11      	ldr	r3, [pc, #68]	@ (801104c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	429d      	cmp	r5, r3
 801100c:	d112      	bne.n	8011034 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801100e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011012:	f8d8 4000 	ldr.w	r4, [r8]
 8011016:	b16c      	cbz	r4, 8011034 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011018:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801101c:	2700      	movs	r7, #0
 801101e:	3d04      	subs	r5, #4
 8011020:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011024:	4631      	mov	r1, r6
 8011026:	f7ef f8db 	bl	80001e0 <strcmp>
 801102a:	00bb      	lsls	r3, r7, #2
 801102c:	b140      	cbz	r0, 8011040 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801102e:	3701      	adds	r7, #1
 8011030:	42bc      	cmp	r4, r7
 8011032:	d1f5      	bne.n	8011020 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011034:	2000      	movs	r0, #0
 8011036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801103a:	4620      	mov	r0, r4
 801103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011040:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011048:	58d3      	ldr	r3, [r2, r3]
 801104a:	4718      	bx	r3
 801104c:	200000ac 	.word	0x200000ac

08011050 <std_msgs__msg__Int32__init>:
 8011050:	3800      	subs	r0, #0
 8011052:	bf18      	it	ne
 8011054:	2001      	movne	r0, #1
 8011056:	4770      	bx	lr

08011058 <std_msgs__msg__Int32__fini>:
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop

0801105c <ucdr_serialize_endian_array_char>:
 801105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011060:	4619      	mov	r1, r3
 8011062:	461f      	mov	r7, r3
 8011064:	4605      	mov	r5, r0
 8011066:	4690      	mov	r8, r2
 8011068:	f7f8 ffc4 	bl	8009ff4 <ucdr_check_buffer_available_for>
 801106c:	b9e0      	cbnz	r0, 80110a8 <ucdr_serialize_endian_array_char+0x4c>
 801106e:	463e      	mov	r6, r7
 8011070:	e009      	b.n	8011086 <ucdr_serialize_endian_array_char+0x2a>
 8011072:	68a8      	ldr	r0, [r5, #8]
 8011074:	f002 fe1f 	bl	8013cb6 <memcpy>
 8011078:	68ab      	ldr	r3, [r5, #8]
 801107a:	6928      	ldr	r0, [r5, #16]
 801107c:	4423      	add	r3, r4
 801107e:	4420      	add	r0, r4
 8011080:	1b36      	subs	r6, r6, r4
 8011082:	60ab      	str	r3, [r5, #8]
 8011084:	6128      	str	r0, [r5, #16]
 8011086:	4631      	mov	r1, r6
 8011088:	2201      	movs	r2, #1
 801108a:	4628      	mov	r0, r5
 801108c:	f7f9 f83a 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 8011090:	1bb9      	subs	r1, r7, r6
 8011092:	4441      	add	r1, r8
 8011094:	4604      	mov	r4, r0
 8011096:	4602      	mov	r2, r0
 8011098:	2800      	cmp	r0, #0
 801109a:	d1ea      	bne.n	8011072 <ucdr_serialize_endian_array_char+0x16>
 801109c:	2301      	movs	r3, #1
 801109e:	7da8      	ldrb	r0, [r5, #22]
 80110a0:	756b      	strb	r3, [r5, #21]
 80110a2:	4058      	eors	r0, r3
 80110a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a8:	463a      	mov	r2, r7
 80110aa:	68a8      	ldr	r0, [r5, #8]
 80110ac:	4641      	mov	r1, r8
 80110ae:	f002 fe02 	bl	8013cb6 <memcpy>
 80110b2:	68aa      	ldr	r2, [r5, #8]
 80110b4:	692b      	ldr	r3, [r5, #16]
 80110b6:	443a      	add	r2, r7
 80110b8:	443b      	add	r3, r7
 80110ba:	60aa      	str	r2, [r5, #8]
 80110bc:	612b      	str	r3, [r5, #16]
 80110be:	e7ed      	b.n	801109c <ucdr_serialize_endian_array_char+0x40>

080110c0 <ucdr_deserialize_endian_array_char>:
 80110c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c4:	4619      	mov	r1, r3
 80110c6:	461f      	mov	r7, r3
 80110c8:	4605      	mov	r5, r0
 80110ca:	4690      	mov	r8, r2
 80110cc:	f7f8 ff92 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80110d0:	b9e0      	cbnz	r0, 801110c <ucdr_deserialize_endian_array_char+0x4c>
 80110d2:	463e      	mov	r6, r7
 80110d4:	e009      	b.n	80110ea <ucdr_deserialize_endian_array_char+0x2a>
 80110d6:	68a9      	ldr	r1, [r5, #8]
 80110d8:	f002 fded 	bl	8013cb6 <memcpy>
 80110dc:	68ab      	ldr	r3, [r5, #8]
 80110de:	6928      	ldr	r0, [r5, #16]
 80110e0:	4423      	add	r3, r4
 80110e2:	4420      	add	r0, r4
 80110e4:	1b36      	subs	r6, r6, r4
 80110e6:	60ab      	str	r3, [r5, #8]
 80110e8:	6128      	str	r0, [r5, #16]
 80110ea:	2201      	movs	r2, #1
 80110ec:	4631      	mov	r1, r6
 80110ee:	4628      	mov	r0, r5
 80110f0:	f7f9 f808 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 80110f4:	4604      	mov	r4, r0
 80110f6:	1bb8      	subs	r0, r7, r6
 80110f8:	4440      	add	r0, r8
 80110fa:	4622      	mov	r2, r4
 80110fc:	2c00      	cmp	r4, #0
 80110fe:	d1ea      	bne.n	80110d6 <ucdr_deserialize_endian_array_char+0x16>
 8011100:	2301      	movs	r3, #1
 8011102:	7da8      	ldrb	r0, [r5, #22]
 8011104:	756b      	strb	r3, [r5, #21]
 8011106:	4058      	eors	r0, r3
 8011108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801110c:	463a      	mov	r2, r7
 801110e:	68a9      	ldr	r1, [r5, #8]
 8011110:	4640      	mov	r0, r8
 8011112:	f002 fdd0 	bl	8013cb6 <memcpy>
 8011116:	68aa      	ldr	r2, [r5, #8]
 8011118:	692b      	ldr	r3, [r5, #16]
 801111a:	443a      	add	r2, r7
 801111c:	443b      	add	r3, r7
 801111e:	60aa      	str	r2, [r5, #8]
 8011120:	612b      	str	r3, [r5, #16]
 8011122:	e7ed      	b.n	8011100 <ucdr_deserialize_endian_array_char+0x40>

08011124 <ucdr_serialize_array_uint8_t>:
 8011124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011128:	4688      	mov	r8, r1
 801112a:	4611      	mov	r1, r2
 801112c:	4617      	mov	r7, r2
 801112e:	4605      	mov	r5, r0
 8011130:	f7f8 ff60 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8011134:	b9e0      	cbnz	r0, 8011170 <ucdr_serialize_array_uint8_t+0x4c>
 8011136:	463e      	mov	r6, r7
 8011138:	e009      	b.n	801114e <ucdr_serialize_array_uint8_t+0x2a>
 801113a:	68a8      	ldr	r0, [r5, #8]
 801113c:	f002 fdbb 	bl	8013cb6 <memcpy>
 8011140:	68aa      	ldr	r2, [r5, #8]
 8011142:	692b      	ldr	r3, [r5, #16]
 8011144:	4422      	add	r2, r4
 8011146:	4423      	add	r3, r4
 8011148:	1b36      	subs	r6, r6, r4
 801114a:	60aa      	str	r2, [r5, #8]
 801114c:	612b      	str	r3, [r5, #16]
 801114e:	4631      	mov	r1, r6
 8011150:	2201      	movs	r2, #1
 8011152:	4628      	mov	r0, r5
 8011154:	f7f8 ffd6 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 8011158:	1bb9      	subs	r1, r7, r6
 801115a:	4441      	add	r1, r8
 801115c:	4604      	mov	r4, r0
 801115e:	4602      	mov	r2, r0
 8011160:	2800      	cmp	r0, #0
 8011162:	d1ea      	bne.n	801113a <ucdr_serialize_array_uint8_t+0x16>
 8011164:	2301      	movs	r3, #1
 8011166:	7da8      	ldrb	r0, [r5, #22]
 8011168:	756b      	strb	r3, [r5, #21]
 801116a:	4058      	eors	r0, r3
 801116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011170:	463a      	mov	r2, r7
 8011172:	68a8      	ldr	r0, [r5, #8]
 8011174:	4641      	mov	r1, r8
 8011176:	f002 fd9e 	bl	8013cb6 <memcpy>
 801117a:	68aa      	ldr	r2, [r5, #8]
 801117c:	692b      	ldr	r3, [r5, #16]
 801117e:	443a      	add	r2, r7
 8011180:	443b      	add	r3, r7
 8011182:	60aa      	str	r2, [r5, #8]
 8011184:	612b      	str	r3, [r5, #16]
 8011186:	e7ed      	b.n	8011164 <ucdr_serialize_array_uint8_t+0x40>

08011188 <ucdr_serialize_endian_array_uint8_t>:
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	4619      	mov	r1, r3
 801118e:	461f      	mov	r7, r3
 8011190:	4605      	mov	r5, r0
 8011192:	4690      	mov	r8, r2
 8011194:	f7f8 ff2e 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8011198:	b9e0      	cbnz	r0, 80111d4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801119a:	463e      	mov	r6, r7
 801119c:	e009      	b.n	80111b2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801119e:	68a8      	ldr	r0, [r5, #8]
 80111a0:	f002 fd89 	bl	8013cb6 <memcpy>
 80111a4:	68ab      	ldr	r3, [r5, #8]
 80111a6:	6928      	ldr	r0, [r5, #16]
 80111a8:	4423      	add	r3, r4
 80111aa:	4420      	add	r0, r4
 80111ac:	1b36      	subs	r6, r6, r4
 80111ae:	60ab      	str	r3, [r5, #8]
 80111b0:	6128      	str	r0, [r5, #16]
 80111b2:	4631      	mov	r1, r6
 80111b4:	2201      	movs	r2, #1
 80111b6:	4628      	mov	r0, r5
 80111b8:	f7f8 ffa4 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 80111bc:	1bb9      	subs	r1, r7, r6
 80111be:	4441      	add	r1, r8
 80111c0:	4604      	mov	r4, r0
 80111c2:	4602      	mov	r2, r0
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d1ea      	bne.n	801119e <ucdr_serialize_endian_array_uint8_t+0x16>
 80111c8:	2301      	movs	r3, #1
 80111ca:	7da8      	ldrb	r0, [r5, #22]
 80111cc:	756b      	strb	r3, [r5, #21]
 80111ce:	4058      	eors	r0, r3
 80111d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d4:	463a      	mov	r2, r7
 80111d6:	68a8      	ldr	r0, [r5, #8]
 80111d8:	4641      	mov	r1, r8
 80111da:	f002 fd6c 	bl	8013cb6 <memcpy>
 80111de:	68aa      	ldr	r2, [r5, #8]
 80111e0:	692b      	ldr	r3, [r5, #16]
 80111e2:	443a      	add	r2, r7
 80111e4:	443b      	add	r3, r7
 80111e6:	60aa      	str	r2, [r5, #8]
 80111e8:	612b      	str	r3, [r5, #16]
 80111ea:	e7ed      	b.n	80111c8 <ucdr_serialize_endian_array_uint8_t+0x40>

080111ec <ucdr_deserialize_array_uint8_t>:
 80111ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f0:	4688      	mov	r8, r1
 80111f2:	4611      	mov	r1, r2
 80111f4:	4617      	mov	r7, r2
 80111f6:	4605      	mov	r5, r0
 80111f8:	f7f8 fefc 	bl	8009ff4 <ucdr_check_buffer_available_for>
 80111fc:	b9e0      	cbnz	r0, 8011238 <ucdr_deserialize_array_uint8_t+0x4c>
 80111fe:	463e      	mov	r6, r7
 8011200:	e009      	b.n	8011216 <ucdr_deserialize_array_uint8_t+0x2a>
 8011202:	68a9      	ldr	r1, [r5, #8]
 8011204:	f002 fd57 	bl	8013cb6 <memcpy>
 8011208:	68aa      	ldr	r2, [r5, #8]
 801120a:	692b      	ldr	r3, [r5, #16]
 801120c:	4422      	add	r2, r4
 801120e:	4423      	add	r3, r4
 8011210:	1b36      	subs	r6, r6, r4
 8011212:	60aa      	str	r2, [r5, #8]
 8011214:	612b      	str	r3, [r5, #16]
 8011216:	2201      	movs	r2, #1
 8011218:	4631      	mov	r1, r6
 801121a:	4628      	mov	r0, r5
 801121c:	f7f8 ff72 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 8011220:	4604      	mov	r4, r0
 8011222:	1bb8      	subs	r0, r7, r6
 8011224:	4440      	add	r0, r8
 8011226:	4622      	mov	r2, r4
 8011228:	2c00      	cmp	r4, #0
 801122a:	d1ea      	bne.n	8011202 <ucdr_deserialize_array_uint8_t+0x16>
 801122c:	2301      	movs	r3, #1
 801122e:	7da8      	ldrb	r0, [r5, #22]
 8011230:	756b      	strb	r3, [r5, #21]
 8011232:	4058      	eors	r0, r3
 8011234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011238:	463a      	mov	r2, r7
 801123a:	68a9      	ldr	r1, [r5, #8]
 801123c:	4640      	mov	r0, r8
 801123e:	f002 fd3a 	bl	8013cb6 <memcpy>
 8011242:	68aa      	ldr	r2, [r5, #8]
 8011244:	692b      	ldr	r3, [r5, #16]
 8011246:	443a      	add	r2, r7
 8011248:	443b      	add	r3, r7
 801124a:	60aa      	str	r2, [r5, #8]
 801124c:	612b      	str	r3, [r5, #16]
 801124e:	e7ed      	b.n	801122c <ucdr_deserialize_array_uint8_t+0x40>

08011250 <ucdr_deserialize_endian_array_uint8_t>:
 8011250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011254:	4619      	mov	r1, r3
 8011256:	461f      	mov	r7, r3
 8011258:	4605      	mov	r5, r0
 801125a:	4690      	mov	r8, r2
 801125c:	f7f8 feca 	bl	8009ff4 <ucdr_check_buffer_available_for>
 8011260:	b9e0      	cbnz	r0, 801129c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011262:	463e      	mov	r6, r7
 8011264:	e009      	b.n	801127a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8011266:	68a9      	ldr	r1, [r5, #8]
 8011268:	f002 fd25 	bl	8013cb6 <memcpy>
 801126c:	68ab      	ldr	r3, [r5, #8]
 801126e:	6928      	ldr	r0, [r5, #16]
 8011270:	4423      	add	r3, r4
 8011272:	4420      	add	r0, r4
 8011274:	1b36      	subs	r6, r6, r4
 8011276:	60ab      	str	r3, [r5, #8]
 8011278:	6128      	str	r0, [r5, #16]
 801127a:	2201      	movs	r2, #1
 801127c:	4631      	mov	r1, r6
 801127e:	4628      	mov	r0, r5
 8011280:	f7f8 ff40 	bl	800a104 <ucdr_check_final_buffer_behavior_array>
 8011284:	4604      	mov	r4, r0
 8011286:	1bb8      	subs	r0, r7, r6
 8011288:	4440      	add	r0, r8
 801128a:	4622      	mov	r2, r4
 801128c:	2c00      	cmp	r4, #0
 801128e:	d1ea      	bne.n	8011266 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011290:	2301      	movs	r3, #1
 8011292:	7da8      	ldrb	r0, [r5, #22]
 8011294:	756b      	strb	r3, [r5, #21]
 8011296:	4058      	eors	r0, r3
 8011298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129c:	463a      	mov	r2, r7
 801129e:	68a9      	ldr	r1, [r5, #8]
 80112a0:	4640      	mov	r0, r8
 80112a2:	f002 fd08 	bl	8013cb6 <memcpy>
 80112a6:	68aa      	ldr	r2, [r5, #8]
 80112a8:	692b      	ldr	r3, [r5, #16]
 80112aa:	443a      	add	r2, r7
 80112ac:	443b      	add	r3, r7
 80112ae:	60aa      	str	r2, [r5, #8]
 80112b0:	612b      	str	r3, [r5, #16]
 80112b2:	e7ed      	b.n	8011290 <ucdr_deserialize_endian_array_uint8_t+0x40>

080112b4 <ucdr_serialize_sequence_char>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4615      	mov	r5, r2
 80112b8:	460e      	mov	r6, r1
 80112ba:	7d01      	ldrb	r1, [r0, #20]
 80112bc:	4604      	mov	r4, r0
 80112be:	f7f8 f9ef 	bl	80096a0 <ucdr_serialize_endian_uint32_t>
 80112c2:	b90d      	cbnz	r5, 80112c8 <ucdr_serialize_sequence_char+0x14>
 80112c4:	2001      	movs	r0, #1
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	7d21      	ldrb	r1, [r4, #20]
 80112ca:	462b      	mov	r3, r5
 80112cc:	4632      	mov	r2, r6
 80112ce:	4620      	mov	r0, r4
 80112d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112d4:	f7ff bec2 	b.w	801105c <ucdr_serialize_endian_array_char>

080112d8 <ucdr_deserialize_sequence_char>:
 80112d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112dc:	461d      	mov	r5, r3
 80112de:	4616      	mov	r6, r2
 80112e0:	460f      	mov	r7, r1
 80112e2:	461a      	mov	r2, r3
 80112e4:	7d01      	ldrb	r1, [r0, #20]
 80112e6:	4604      	mov	r4, r0
 80112e8:	f7f8 fb02 	bl	80098f0 <ucdr_deserialize_endian_uint32_t>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	429e      	cmp	r6, r3
 80112f0:	bf3c      	itt	cc
 80112f2:	2201      	movcc	r2, #1
 80112f4:	75a2      	strbcc	r2, [r4, #22]
 80112f6:	b913      	cbnz	r3, 80112fe <ucdr_deserialize_sequence_char+0x26>
 80112f8:	2001      	movs	r0, #1
 80112fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fe:	7d21      	ldrb	r1, [r4, #20]
 8011300:	463a      	mov	r2, r7
 8011302:	4620      	mov	r0, r4
 8011304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011308:	f7ff beda 	b.w	80110c0 <ucdr_deserialize_endian_array_char>

0801130c <ucdr_serialize_sequence_uint8_t>:
 801130c:	b570      	push	{r4, r5, r6, lr}
 801130e:	4615      	mov	r5, r2
 8011310:	460e      	mov	r6, r1
 8011312:	7d01      	ldrb	r1, [r0, #20]
 8011314:	4604      	mov	r4, r0
 8011316:	f7f8 f9c3 	bl	80096a0 <ucdr_serialize_endian_uint32_t>
 801131a:	b90d      	cbnz	r5, 8011320 <ucdr_serialize_sequence_uint8_t+0x14>
 801131c:	2001      	movs	r0, #1
 801131e:	bd70      	pop	{r4, r5, r6, pc}
 8011320:	7d21      	ldrb	r1, [r4, #20]
 8011322:	462b      	mov	r3, r5
 8011324:	4632      	mov	r2, r6
 8011326:	4620      	mov	r0, r4
 8011328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801132c:	f7ff bf2c 	b.w	8011188 <ucdr_serialize_endian_array_uint8_t>

08011330 <ucdr_deserialize_sequence_uint8_t>:
 8011330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011334:	461d      	mov	r5, r3
 8011336:	4616      	mov	r6, r2
 8011338:	460f      	mov	r7, r1
 801133a:	461a      	mov	r2, r3
 801133c:	7d01      	ldrb	r1, [r0, #20]
 801133e:	4604      	mov	r4, r0
 8011340:	f7f8 fad6 	bl	80098f0 <ucdr_deserialize_endian_uint32_t>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	429e      	cmp	r6, r3
 8011348:	bf3c      	itt	cc
 801134a:	2201      	movcc	r2, #1
 801134c:	75a2      	strbcc	r2, [r4, #22]
 801134e:	b913      	cbnz	r3, 8011356 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011350:	2001      	movs	r0, #1
 8011352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011356:	7d21      	ldrb	r1, [r4, #20]
 8011358:	463a      	mov	r2, r7
 801135a:	4620      	mov	r0, r4
 801135c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011360:	f7ff bf76 	b.w	8011250 <ucdr_deserialize_endian_array_uint8_t>

08011364 <ucdr_serialize_string>:
 8011364:	b510      	push	{r4, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	4604      	mov	r4, r0
 801136a:	4608      	mov	r0, r1
 801136c:	9101      	str	r1, [sp, #4]
 801136e:	f7ee ff41 	bl	80001f4 <strlen>
 8011372:	9901      	ldr	r1, [sp, #4]
 8011374:	1c42      	adds	r2, r0, #1
 8011376:	4620      	mov	r0, r4
 8011378:	b002      	add	sp, #8
 801137a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801137e:	f7ff bf99 	b.w	80112b4 <ucdr_serialize_sequence_char>
 8011382:	bf00      	nop

08011384 <ucdr_deserialize_string>:
 8011384:	b500      	push	{lr}
 8011386:	b083      	sub	sp, #12
 8011388:	ab01      	add	r3, sp, #4
 801138a:	f7ff ffa5 	bl	80112d8 <ucdr_deserialize_sequence_char>
 801138e:	b003      	add	sp, #12
 8011390:	f85d fb04 	ldr.w	pc, [sp], #4

08011394 <get_custom_error>:
 8011394:	4b01      	ldr	r3, [pc, #4]	@ (801139c <get_custom_error+0x8>)
 8011396:	7818      	ldrb	r0, [r3, #0]
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop
 801139c:	2000daf8 	.word	0x2000daf8

080113a0 <recv_custom_msg>:
 80113a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	4693      	mov	fp, r2
 80113a6:	b089      	sub	sp, #36	@ 0x24
 80113a8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80113ac:	9305      	str	r3, [sp, #20]
 80113ae:	468a      	mov	sl, r1
 80113b0:	2100      	movs	r1, #0
 80113b2:	4604      	mov	r4, r0
 80113b4:	f88d 101e 	strb.w	r1, [sp, #30]
 80113b8:	b322      	cbz	r2, 8011404 <recv_custom_msg+0x64>
 80113ba:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80113be:	f10d 081f 	add.w	r8, sp, #31
 80113c2:	af05      	add	r7, sp, #20
 80113c4:	f10d 061e 	add.w	r6, sp, #30
 80113c8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80113cc:	e002      	b.n	80113d4 <recv_custom_msg+0x34>
 80113ce:	9b05      	ldr	r3, [sp, #20]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	dd0f      	ble.n	80113f4 <recv_custom_msg+0x54>
 80113d4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80113d8:	4623      	mov	r3, r4
 80113da:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80113de:	e9cd 5600 	strd	r5, r6, [sp]
 80113e2:	4622      	mov	r2, r4
 80113e4:	4648      	mov	r0, r9
 80113e6:	f001 f8f3 	bl	80125d0 <uxr_read_framed_msg>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	d0ef      	beq.n	80113ce <recv_custom_msg+0x2e>
 80113ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80113f2:	b1b3      	cbz	r3, 8011422 <recv_custom_msg+0x82>
 80113f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011434 <recv_custom_msg+0x94>)
 80113f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80113fa:	701a      	strb	r2, [r3, #0]
 80113fc:	2000      	movs	r0, #0
 80113fe:	b009      	add	sp, #36	@ 0x24
 8011400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011404:	f10d 021f 	add.w	r2, sp, #31
 8011408:	9200      	str	r2, [sp, #0]
 801140a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801140e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011412:	4601      	mov	r1, r0
 8011414:	47a8      	blx	r5
 8011416:	2800      	cmp	r0, #0
 8011418:	d0ec      	beq.n	80113f4 <recv_custom_msg+0x54>
 801141a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1e8      	bne.n	80113f4 <recv_custom_msg+0x54>
 8011422:	f8cb 0000 	str.w	r0, [fp]
 8011426:	2001      	movs	r0, #1
 8011428:	f8ca 4000 	str.w	r4, [sl]
 801142c:	b009      	add	sp, #36	@ 0x24
 801142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011432:	bf00      	nop
 8011434:	2000daf8 	.word	0x2000daf8

08011438 <send_custom_msg>:
 8011438:	b530      	push	{r4, r5, lr}
 801143a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801143e:	b087      	sub	sp, #28
 8011440:	4615      	mov	r5, r2
 8011442:	b974      	cbnz	r4, 8011462 <send_custom_msg+0x2a>
 8011444:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011448:	f10d 0317 	add.w	r3, sp, #23
 801144c:	47a0      	blx	r4
 801144e:	b108      	cbz	r0, 8011454 <send_custom_msg+0x1c>
 8011450:	42a8      	cmp	r0, r5
 8011452:	d015      	beq.n	8011480 <send_custom_msg+0x48>
 8011454:	4b0c      	ldr	r3, [pc, #48]	@ (8011488 <send_custom_msg+0x50>)
 8011456:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801145a:	701a      	strb	r2, [r3, #0]
 801145c:	2000      	movs	r0, #0
 801145e:	b007      	add	sp, #28
 8011460:	bd30      	pop	{r4, r5, pc}
 8011462:	460b      	mov	r3, r1
 8011464:	2200      	movs	r2, #0
 8011466:	f10d 0117 	add.w	r1, sp, #23
 801146a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801146e:	4602      	mov	r2, r0
 8011470:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011474:	9500      	str	r5, [sp, #0]
 8011476:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801147a:	f000 feb1 	bl	80121e0 <uxr_write_framed_msg>
 801147e:	e7e6      	b.n	801144e <send_custom_msg+0x16>
 8011480:	2001      	movs	r0, #1
 8011482:	b007      	add	sp, #28
 8011484:	bd30      	pop	{r4, r5, pc}
 8011486:	bf00      	nop
 8011488:	2000daf8 	.word	0x2000daf8

0801148c <uxr_set_custom_transport_callbacks>:
 801148c:	b410      	push	{r4}
 801148e:	9c01      	ldr	r4, [sp, #4]
 8011490:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011494:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011498:	9b02      	ldr	r3, [sp, #8]
 801149a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801149e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114a2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80114a6:	4770      	bx	lr

080114a8 <uxr_init_custom_transport>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80114ae:	b303      	cbz	r3, 80114f2 <uxr_init_custom_transport+0x4a>
 80114b0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80114b4:	4604      	mov	r4, r0
 80114b6:	b1e2      	cbz	r2, 80114f2 <uxr_init_custom_transport+0x4a>
 80114b8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80114bc:	b1ca      	cbz	r2, 80114f2 <uxr_init_custom_transport+0x4a>
 80114be:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80114c2:	b1b2      	cbz	r2, 80114f2 <uxr_init_custom_transport+0x4a>
 80114c4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80114c8:	4798      	blx	r3
 80114ca:	4605      	mov	r5, r0
 80114cc:	b188      	cbz	r0, 80114f2 <uxr_init_custom_transport+0x4a>
 80114ce:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80114d2:	b98b      	cbnz	r3, 80114f8 <uxr_init_custom_transport+0x50>
 80114d4:	490b      	ldr	r1, [pc, #44]	@ (8011504 <uxr_init_custom_transport+0x5c>)
 80114d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011508 <uxr_init_custom_transport+0x60>)
 80114d8:	4a0c      	ldr	r2, [pc, #48]	@ (801150c <uxr_init_custom_transport+0x64>)
 80114da:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80114de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80114e2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80114e6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80114ea:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80114ee:	4628      	mov	r0, r5
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
 80114f2:	2500      	movs	r5, #0
 80114f4:	4628      	mov	r0, r5
 80114f6:	bd38      	pop	{r3, r4, r5, pc}
 80114f8:	2100      	movs	r1, #0
 80114fa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80114fe:	f000 fe69 	bl	80121d4 <uxr_init_framing_io>
 8011502:	e7e7      	b.n	80114d4 <uxr_init_custom_transport+0x2c>
 8011504:	08011439 	.word	0x08011439
 8011508:	080113a1 	.word	0x080113a1
 801150c:	08011395 	.word	0x08011395

08011510 <uxr_close_custom_transport>:
 8011510:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011514:	4718      	bx	r3
 8011516:	bf00      	nop

08011518 <uxr_init_input_best_effort_stream>:
 8011518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801151c:	8003      	strh	r3, [r0, #0]
 801151e:	4770      	bx	lr

08011520 <uxr_reset_input_best_effort_stream>:
 8011520:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011524:	8003      	strh	r3, [r0, #0]
 8011526:	4770      	bx	lr

08011528 <uxr_receive_best_effort_message>:
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	4604      	mov	r4, r0
 801152c:	8800      	ldrh	r0, [r0, #0]
 801152e:	460d      	mov	r5, r1
 8011530:	f000 fe38 	bl	80121a4 <uxr_seq_num_cmp>
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801153c:	bfb8      	it	lt
 801153e:	8025      	strhlt	r5, [r4, #0]
 8011540:	bd38      	pop	{r3, r4, r5, pc}
 8011542:	bf00      	nop

08011544 <on_full_input_buffer>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	4605      	mov	r5, r0
 8011548:	460c      	mov	r4, r1
 801154a:	682b      	ldr	r3, [r5, #0]
 801154c:	6809      	ldr	r1, [r1, #0]
 801154e:	8920      	ldrh	r0, [r4, #8]
 8011550:	6862      	ldr	r2, [r4, #4]
 8011552:	fbb2 f2f0 	udiv	r2, r2, r0
 8011556:	eba3 0c01 	sub.w	ip, r3, r1
 801155a:	fbbc fcf2 	udiv	ip, ip, r2
 801155e:	f10c 0c01 	add.w	ip, ip, #1
 8011562:	fa1f f38c 	uxth.w	r3, ip
 8011566:	fbb3 f6f0 	udiv	r6, r3, r0
 801156a:	fb00 3316 	mls	r3, r0, r6, r3
 801156e:	b29b      	uxth	r3, r3
 8011570:	fb02 f303 	mul.w	r3, r2, r3
 8011574:	1d18      	adds	r0, r3, #4
 8011576:	4408      	add	r0, r1
 8011578:	7d26      	ldrb	r6, [r4, #20]
 801157a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801157e:	b116      	cbz	r6, 8011586 <on_full_input_buffer+0x42>
 8011580:	2600      	movs	r6, #0
 8011582:	f840 6c04 	str.w	r6, [r0, #-4]
 8011586:	2a03      	cmp	r2, #3
 8011588:	d801      	bhi.n	801158e <on_full_input_buffer+0x4a>
 801158a:	2001      	movs	r0, #1
 801158c:	bd70      	pop	{r4, r5, r6, pc}
 801158e:	3308      	adds	r3, #8
 8011590:	4419      	add	r1, r3
 8011592:	4628      	mov	r0, r5
 8011594:	692b      	ldr	r3, [r5, #16]
 8011596:	3a04      	subs	r2, #4
 8011598:	f7f8 fd78 	bl	800a08c <ucdr_init_buffer_origin>
 801159c:	4628      	mov	r0, r5
 801159e:	4903      	ldr	r1, [pc, #12]	@ (80115ac <on_full_input_buffer+0x68>)
 80115a0:	4622      	mov	r2, r4
 80115a2:	f7f8 fd4f 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 80115a6:	2000      	movs	r0, #0
 80115a8:	bd70      	pop	{r4, r5, r6, pc}
 80115aa:	bf00      	nop
 80115ac:	08011545 	.word	0x08011545

080115b0 <uxr_init_input_reliable_stream>:
 80115b0:	b500      	push	{lr}
 80115b2:	e9c0 1200 	strd	r1, r2, [r0]
 80115b6:	f04f 0e00 	mov.w	lr, #0
 80115ba:	9a01      	ldr	r2, [sp, #4]
 80115bc:	8103      	strh	r3, [r0, #8]
 80115be:	6102      	str	r2, [r0, #16]
 80115c0:	f880 e014 	strb.w	lr, [r0, #20]
 80115c4:	b1d3      	cbz	r3, 80115fc <uxr_init_input_reliable_stream+0x4c>
 80115c6:	f8c1 e000 	str.w	lr, [r1]
 80115ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80115ce:	f1bc 0f01 	cmp.w	ip, #1
 80115d2:	d913      	bls.n	80115fc <uxr_init_input_reliable_stream+0x4c>
 80115d4:	2301      	movs	r3, #1
 80115d6:	fbb3 f1fc 	udiv	r1, r3, ip
 80115da:	fb0c 3111 	mls	r1, ip, r1, r3
 80115de:	b289      	uxth	r1, r1
 80115e0:	6842      	ldr	r2, [r0, #4]
 80115e2:	fbb2 f2fc 	udiv	r2, r2, ip
 80115e6:	fb01 f202 	mul.w	r2, r1, r2
 80115ea:	6801      	ldr	r1, [r0, #0]
 80115ec:	f841 e002 	str.w	lr, [r1, r2]
 80115f0:	3301      	adds	r3, #1
 80115f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	459c      	cmp	ip, r3
 80115fa:	d8ec      	bhi.n	80115d6 <uxr_init_input_reliable_stream+0x26>
 80115fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011600:	60c3      	str	r3, [r0, #12]
 8011602:	f85d fb04 	ldr.w	pc, [sp], #4
 8011606:	bf00      	nop

08011608 <uxr_reset_input_reliable_stream>:
 8011608:	8901      	ldrh	r1, [r0, #8]
 801160a:	b1e9      	cbz	r1, 8011648 <uxr_reset_input_reliable_stream+0x40>
 801160c:	f04f 0c00 	mov.w	ip, #0
 8011610:	b500      	push	{lr}
 8011612:	4663      	mov	r3, ip
 8011614:	46e6      	mov	lr, ip
 8011616:	fbb3 f2f1 	udiv	r2, r3, r1
 801161a:	fb01 3312 	mls	r3, r1, r2, r3
 801161e:	b29b      	uxth	r3, r3
 8011620:	6842      	ldr	r2, [r0, #4]
 8011622:	fbb2 f2f1 	udiv	r2, r2, r1
 8011626:	fb02 f303 	mul.w	r3, r2, r3
 801162a:	6802      	ldr	r2, [r0, #0]
 801162c:	f842 e003 	str.w	lr, [r2, r3]
 8011630:	f10c 0c01 	add.w	ip, ip, #1
 8011634:	8901      	ldrh	r1, [r0, #8]
 8011636:	fa1f f38c 	uxth.w	r3, ip
 801163a:	4299      	cmp	r1, r3
 801163c:	d8eb      	bhi.n	8011616 <uxr_reset_input_reliable_stream+0xe>
 801163e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011642:	60c3      	str	r3, [r0, #12]
 8011644:	f85d fb04 	ldr.w	pc, [sp], #4
 8011648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801164c:	60c3      	str	r3, [r0, #12]
 801164e:	4770      	bx	lr

08011650 <uxr_receive_reliable_message>:
 8011650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011654:	4604      	mov	r4, r0
 8011656:	460d      	mov	r5, r1
 8011658:	8901      	ldrh	r1, [r0, #8]
 801165a:	8980      	ldrh	r0, [r0, #12]
 801165c:	4690      	mov	r8, r2
 801165e:	461f      	mov	r7, r3
 8011660:	f000 fd98 	bl	8012194 <uxr_seq_num_add>
 8011664:	4629      	mov	r1, r5
 8011666:	4606      	mov	r6, r0
 8011668:	89a0      	ldrh	r0, [r4, #12]
 801166a:	f000 fd9b 	bl	80121a4 <uxr_seq_num_cmp>
 801166e:	2800      	cmp	r0, #0
 8011670:	db0a      	blt.n	8011688 <uxr_receive_reliable_message+0x38>
 8011672:	2600      	movs	r6, #0
 8011674:	89e0      	ldrh	r0, [r4, #14]
 8011676:	4629      	mov	r1, r5
 8011678:	f000 fd94 	bl	80121a4 <uxr_seq_num_cmp>
 801167c:	2800      	cmp	r0, #0
 801167e:	da00      	bge.n	8011682 <uxr_receive_reliable_message+0x32>
 8011680:	81e5      	strh	r5, [r4, #14]
 8011682:	4630      	mov	r0, r6
 8011684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011688:	4630      	mov	r0, r6
 801168a:	4629      	mov	r1, r5
 801168c:	f000 fd8a 	bl	80121a4 <uxr_seq_num_cmp>
 8011690:	2800      	cmp	r0, #0
 8011692:	dbee      	blt.n	8011672 <uxr_receive_reliable_message+0x22>
 8011694:	6923      	ldr	r3, [r4, #16]
 8011696:	4640      	mov	r0, r8
 8011698:	4798      	blx	r3
 801169a:	2101      	movs	r1, #1
 801169c:	4681      	mov	r9, r0
 801169e:	89a0      	ldrh	r0, [r4, #12]
 80116a0:	f000 fd78 	bl	8012194 <uxr_seq_num_add>
 80116a4:	f1b9 0f00 	cmp.w	r9, #0
 80116a8:	d101      	bne.n	80116ae <uxr_receive_reliable_message+0x5e>
 80116aa:	4285      	cmp	r5, r0
 80116ac:	d047      	beq.n	801173e <uxr_receive_reliable_message+0xee>
 80116ae:	8922      	ldrh	r2, [r4, #8]
 80116b0:	fbb5 f0f2 	udiv	r0, r5, r2
 80116b4:	fb02 5010 	mls	r0, r2, r0, r5
 80116b8:	b280      	uxth	r0, r0
 80116ba:	6863      	ldr	r3, [r4, #4]
 80116bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80116c0:	fb00 f303 	mul.w	r3, r0, r3
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	3304      	adds	r3, #4
 80116c8:	4418      	add	r0, r3
 80116ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1cf      	bne.n	8011672 <uxr_receive_reliable_message+0x22>
 80116d2:	4641      	mov	r1, r8
 80116d4:	463a      	mov	r2, r7
 80116d6:	f002 faee 	bl	8013cb6 <memcpy>
 80116da:	8921      	ldrh	r1, [r4, #8]
 80116dc:	fbb5 f2f1 	udiv	r2, r5, r1
 80116e0:	fb01 5212 	mls	r2, r1, r2, r5
 80116e4:	b292      	uxth	r2, r2
 80116e6:	6863      	ldr	r3, [r4, #4]
 80116e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80116ec:	fb02 f303 	mul.w	r3, r2, r3
 80116f0:	6822      	ldr	r2, [r4, #0]
 80116f2:	50d7      	str	r7, [r2, r3]
 80116f4:	9a08      	ldr	r2, [sp, #32]
 80116f6:	2301      	movs	r3, #1
 80116f8:	7013      	strb	r3, [r2, #0]
 80116fa:	f1b9 0f00 	cmp.w	r9, #0
 80116fe:	d0b8      	beq.n	8011672 <uxr_receive_reliable_message+0x22>
 8011700:	89a6      	ldrh	r6, [r4, #12]
 8011702:	4630      	mov	r0, r6
 8011704:	2101      	movs	r1, #1
 8011706:	f000 fd45 	bl	8012194 <uxr_seq_num_add>
 801170a:	8922      	ldrh	r2, [r4, #8]
 801170c:	6863      	ldr	r3, [r4, #4]
 801170e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011712:	4606      	mov	r6, r0
 8011714:	fbb0 f0f2 	udiv	r0, r0, r2
 8011718:	fb02 6010 	mls	r0, r2, r0, r6
 801171c:	b280      	uxth	r0, r0
 801171e:	fb00 f303 	mul.w	r3, r0, r3
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	3304      	adds	r3, #4
 8011726:	4418      	add	r0, r3
 8011728:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d0a0      	beq.n	8011672 <uxr_receive_reliable_message+0x22>
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	4798      	blx	r3
 8011734:	2802      	cmp	r0, #2
 8011736:	d008      	beq.n	801174a <uxr_receive_reliable_message+0xfa>
 8011738:	2801      	cmp	r0, #1
 801173a:	d0e2      	beq.n	8011702 <uxr_receive_reliable_message+0xb2>
 801173c:	e799      	b.n	8011672 <uxr_receive_reliable_message+0x22>
 801173e:	9b08      	ldr	r3, [sp, #32]
 8011740:	81a5      	strh	r5, [r4, #12]
 8011742:	2601      	movs	r6, #1
 8011744:	f883 9000 	strb.w	r9, [r3]
 8011748:	e794      	b.n	8011674 <uxr_receive_reliable_message+0x24>
 801174a:	2601      	movs	r6, #1
 801174c:	e792      	b.n	8011674 <uxr_receive_reliable_message+0x24>
 801174e:	bf00      	nop

08011750 <uxr_next_input_reliable_buffer_available>:
 8011750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011754:	4604      	mov	r4, r0
 8011756:	460f      	mov	r7, r1
 8011758:	8980      	ldrh	r0, [r0, #12]
 801175a:	2101      	movs	r1, #1
 801175c:	4690      	mov	r8, r2
 801175e:	f000 fd19 	bl	8012194 <uxr_seq_num_add>
 8011762:	8922      	ldrh	r2, [r4, #8]
 8011764:	fbb0 f6f2 	udiv	r6, r0, r2
 8011768:	fb02 0616 	mls	r6, r2, r6, r0
 801176c:	b2b6      	uxth	r6, r6
 801176e:	6863      	ldr	r3, [r4, #4]
 8011770:	fbb3 f3f2 	udiv	r3, r3, r2
 8011774:	fb06 f303 	mul.w	r3, r6, r3
 8011778:	6826      	ldr	r6, [r4, #0]
 801177a:	3304      	adds	r3, #4
 801177c:	441e      	add	r6, r3
 801177e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8011782:	f1b9 0f00 	cmp.w	r9, #0
 8011786:	d023      	beq.n	80117d0 <uxr_next_input_reliable_buffer_available+0x80>
 8011788:	6923      	ldr	r3, [r4, #16]
 801178a:	4605      	mov	r5, r0
 801178c:	4630      	mov	r0, r6
 801178e:	4798      	blx	r3
 8011790:	4682      	mov	sl, r0
 8011792:	b300      	cbz	r0, 80117d6 <uxr_next_input_reliable_buffer_available+0x86>
 8011794:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011798:	2101      	movs	r1, #1
 801179a:	4650      	mov	r0, sl
 801179c:	f000 fcfa 	bl	8012194 <uxr_seq_num_add>
 80117a0:	8921      	ldrh	r1, [r4, #8]
 80117a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80117a6:	4682      	mov	sl, r0
 80117a8:	fb01 0212 	mls	r2, r1, r2, r0
 80117ac:	e9d4 0300 	ldrd	r0, r3, [r4]
 80117b0:	b292      	uxth	r2, r2
 80117b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80117b6:	fb02 f303 	mul.w	r3, r2, r3
 80117ba:	3304      	adds	r3, #4
 80117bc:	4418      	add	r0, r3
 80117be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80117c2:	b12b      	cbz	r3, 80117d0 <uxr_next_input_reliable_buffer_available+0x80>
 80117c4:	6923      	ldr	r3, [r4, #16]
 80117c6:	4798      	blx	r3
 80117c8:	2802      	cmp	r0, #2
 80117ca:	d01b      	beq.n	8011804 <uxr_next_input_reliable_buffer_available+0xb4>
 80117cc:	2801      	cmp	r0, #1
 80117ce:	d0e3      	beq.n	8011798 <uxr_next_input_reliable_buffer_available+0x48>
 80117d0:	2000      	movs	r0, #0
 80117d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117d6:	464a      	mov	r2, r9
 80117d8:	4631      	mov	r1, r6
 80117da:	4638      	mov	r0, r7
 80117dc:	f7f8 fc5e 	bl	800a09c <ucdr_init_buffer>
 80117e0:	8921      	ldrh	r1, [r4, #8]
 80117e2:	fbb5 f2f1 	udiv	r2, r5, r1
 80117e6:	fb01 5212 	mls	r2, r1, r2, r5
 80117ea:	b292      	uxth	r2, r2
 80117ec:	6863      	ldr	r3, [r4, #4]
 80117ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f2:	fb02 f303 	mul.w	r3, r2, r3
 80117f6:	6822      	ldr	r2, [r4, #0]
 80117f8:	f842 a003 	str.w	sl, [r2, r3]
 80117fc:	2001      	movs	r0, #1
 80117fe:	81a5      	strh	r5, [r4, #12]
 8011800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011804:	8920      	ldrh	r0, [r4, #8]
 8011806:	fbb5 f3f0 	udiv	r3, r5, r0
 801180a:	fb00 5513 	mls	r5, r0, r3, r5
 801180e:	b2ad      	uxth	r5, r5
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	fbb3 f3f0 	udiv	r3, r3, r0
 8011816:	fb03 f505 	mul.w	r5, r3, r5
 801181a:	6823      	ldr	r3, [r4, #0]
 801181c:	2000      	movs	r0, #0
 801181e:	5158      	str	r0, [r3, r5]
 8011820:	eb06 0108 	add.w	r1, r6, r8
 8011824:	eba9 0208 	sub.w	r2, r9, r8
 8011828:	4638      	mov	r0, r7
 801182a:	f7f8 fc37 	bl	800a09c <ucdr_init_buffer>
 801182e:	4638      	mov	r0, r7
 8011830:	4903      	ldr	r1, [pc, #12]	@ (8011840 <uxr_next_input_reliable_buffer_available+0xf0>)
 8011832:	4622      	mov	r2, r4
 8011834:	f7f8 fc06 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 8011838:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801183c:	2001      	movs	r0, #1
 801183e:	e7c8      	b.n	80117d2 <uxr_next_input_reliable_buffer_available+0x82>
 8011840:	08011545 	.word	0x08011545

08011844 <uxr_process_heartbeat>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	4611      	mov	r1, r2
 8011848:	4604      	mov	r4, r0
 801184a:	89c0      	ldrh	r0, [r0, #14]
 801184c:	4615      	mov	r5, r2
 801184e:	f000 fca9 	bl	80121a4 <uxr_seq_num_cmp>
 8011852:	2800      	cmp	r0, #0
 8011854:	bfb8      	it	lt
 8011856:	81e5      	strhlt	r5, [r4, #14]
 8011858:	bd38      	pop	{r3, r4, r5, pc}
 801185a:	bf00      	nop

0801185c <uxr_compute_acknack>:
 801185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011860:	8903      	ldrh	r3, [r0, #8]
 8011862:	8985      	ldrh	r5, [r0, #12]
 8011864:	4604      	mov	r4, r0
 8011866:	460e      	mov	r6, r1
 8011868:	b1d3      	cbz	r3, 80118a0 <uxr_compute_acknack+0x44>
 801186a:	4628      	mov	r0, r5
 801186c:	2701      	movs	r7, #1
 801186e:	e003      	b.n	8011878 <uxr_compute_acknack+0x1c>
 8011870:	4567      	cmp	r7, ip
 8011872:	d215      	bcs.n	80118a0 <uxr_compute_acknack+0x44>
 8011874:	89a0      	ldrh	r0, [r4, #12]
 8011876:	3701      	adds	r7, #1
 8011878:	b2b9      	uxth	r1, r7
 801187a:	f000 fc8b 	bl	8012194 <uxr_seq_num_add>
 801187e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011882:	fbb0 f3fc 	udiv	r3, r0, ip
 8011886:	fb0c 0313 	mls	r3, ip, r3, r0
 801188a:	b29a      	uxth	r2, r3
 801188c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011890:	fbb3 f3fc 	udiv	r3, r3, ip
 8011894:	fb02 f303 	mul.w	r3, r2, r3
 8011898:	58cb      	ldr	r3, [r1, r3]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d1e8      	bne.n	8011870 <uxr_compute_acknack+0x14>
 801189e:	4605      	mov	r5, r0
 80118a0:	8035      	strh	r5, [r6, #0]
 80118a2:	2101      	movs	r1, #1
 80118a4:	4628      	mov	r0, r5
 80118a6:	89e7      	ldrh	r7, [r4, #14]
 80118a8:	f000 fc78 	bl	801219c <uxr_seq_num_sub>
 80118ac:	4601      	mov	r1, r0
 80118ae:	4638      	mov	r0, r7
 80118b0:	f000 fc74 	bl	801219c <uxr_seq_num_sub>
 80118b4:	4605      	mov	r5, r0
 80118b6:	b318      	cbz	r0, 8011900 <uxr_compute_acknack+0xa4>
 80118b8:	f04f 0900 	mov.w	r9, #0
 80118bc:	464f      	mov	r7, r9
 80118be:	f04f 0801 	mov.w	r8, #1
 80118c2:	fa1f f189 	uxth.w	r1, r9
 80118c6:	8830      	ldrh	r0, [r6, #0]
 80118c8:	f000 fc64 	bl	8012194 <uxr_seq_num_add>
 80118cc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80118d0:	fbb0 f3fc 	udiv	r3, r0, ip
 80118d4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80118d8:	fb03 001c 	mls	r0, r3, ip, r0
 80118dc:	b283      	uxth	r3, r0
 80118de:	fbb2 f2fc 	udiv	r2, r2, ip
 80118e2:	fb02 f303 	mul.w	r3, r2, r3
 80118e6:	fa08 f209 	lsl.w	r2, r8, r9
 80118ea:	58cb      	ldr	r3, [r1, r3]
 80118ec:	f109 0901 	add.w	r9, r9, #1
 80118f0:	b90b      	cbnz	r3, 80118f6 <uxr_compute_acknack+0x9a>
 80118f2:	4317      	orrs	r7, r2
 80118f4:	b2bf      	uxth	r7, r7
 80118f6:	454d      	cmp	r5, r9
 80118f8:	d1e3      	bne.n	80118c2 <uxr_compute_acknack+0x66>
 80118fa:	4638      	mov	r0, r7
 80118fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011900:	4607      	mov	r7, r0
 8011902:	4638      	mov	r0, r7
 8011904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011908 <uxr_init_output_best_effort_stream>:
 8011908:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801190c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8011910:	6001      	str	r1, [r0, #0]
 8011912:	7303      	strb	r3, [r0, #12]
 8011914:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop

0801191c <uxr_reset_output_best_effort_stream>:
 801191c:	7b02      	ldrb	r2, [r0, #12]
 801191e:	6042      	str	r2, [r0, #4]
 8011920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011924:	81c3      	strh	r3, [r0, #14]
 8011926:	4770      	bx	lr

08011928 <uxr_prepare_best_effort_buffer_to_write>:
 8011928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801192a:	4604      	mov	r4, r0
 801192c:	b083      	sub	sp, #12
 801192e:	6840      	ldr	r0, [r0, #4]
 8011930:	460d      	mov	r5, r1
 8011932:	4616      	mov	r6, r2
 8011934:	f7f9 ffb8 	bl	800b8a8 <uxr_submessage_padding>
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	4418      	add	r0, r3
 801193c:	68a3      	ldr	r3, [r4, #8]
 801193e:	1942      	adds	r2, r0, r5
 8011940:	4293      	cmp	r3, r2
 8011942:	bf2c      	ite	cs
 8011944:	2701      	movcs	r7, #1
 8011946:	2700      	movcc	r7, #0
 8011948:	d202      	bcs.n	8011950 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801194a:	4638      	mov	r0, r7
 801194c:	b003      	add	sp, #12
 801194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011950:	9000      	str	r0, [sp, #0]
 8011952:	6821      	ldr	r1, [r4, #0]
 8011954:	4630      	mov	r0, r6
 8011956:	2300      	movs	r3, #0
 8011958:	f7f8 fb8e 	bl	800a078 <ucdr_init_buffer_origin_offset>
 801195c:	6861      	ldr	r1, [r4, #4]
 801195e:	4638      	mov	r0, r7
 8011960:	4429      	add	r1, r5
 8011962:	6061      	str	r1, [r4, #4]
 8011964:	b003      	add	sp, #12
 8011966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011968 <uxr_prepare_best_effort_buffer_to_send>:
 8011968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196c:	4604      	mov	r4, r0
 801196e:	461d      	mov	r5, r3
 8011970:	6840      	ldr	r0, [r0, #4]
 8011972:	7b23      	ldrb	r3, [r4, #12]
 8011974:	4298      	cmp	r0, r3
 8011976:	bf8c      	ite	hi
 8011978:	2601      	movhi	r6, #1
 801197a:	2600      	movls	r6, #0
 801197c:	d802      	bhi.n	8011984 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801197e:	4630      	mov	r0, r6
 8011980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011984:	4688      	mov	r8, r1
 8011986:	89e0      	ldrh	r0, [r4, #14]
 8011988:	2101      	movs	r1, #1
 801198a:	4617      	mov	r7, r2
 801198c:	f000 fc02 	bl	8012194 <uxr_seq_num_add>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	81e0      	strh	r0, [r4, #14]
 8011994:	8028      	strh	r0, [r5, #0]
 8011996:	f8c8 3000 	str.w	r3, [r8]
 801199a:	6863      	ldr	r3, [r4, #4]
 801199c:	603b      	str	r3, [r7, #0]
 801199e:	7b23      	ldrb	r3, [r4, #12]
 80119a0:	6063      	str	r3, [r4, #4]
 80119a2:	4630      	mov	r0, r6
 80119a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119a8 <on_full_output_buffer>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	6802      	ldr	r2, [r0, #0]
 80119ac:	460c      	mov	r4, r1
 80119ae:	6809      	ldr	r1, [r1, #0]
 80119b0:	8923      	ldrh	r3, [r4, #8]
 80119b2:	eba2 0c01 	sub.w	ip, r2, r1
 80119b6:	6862      	ldr	r2, [r4, #4]
 80119b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80119bc:	fbbc fcf2 	udiv	ip, ip, r2
 80119c0:	f10c 0c01 	add.w	ip, ip, #1
 80119c4:	fa1f fc8c 	uxth.w	ip, ip
 80119c8:	fbbc fef3 	udiv	lr, ip, r3
 80119cc:	fb03 c31e 	mls	r3, r3, lr, ip
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	fb02 f303 	mul.w	r3, r2, r3
 80119d6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80119da:	58ca      	ldr	r2, [r1, r3]
 80119dc:	4463      	add	r3, ip
 80119de:	eba2 020c 	sub.w	r2, r2, ip
 80119e2:	3308      	adds	r3, #8
 80119e4:	4605      	mov	r5, r0
 80119e6:	4419      	add	r1, r3
 80119e8:	3a04      	subs	r2, #4
 80119ea:	6903      	ldr	r3, [r0, #16]
 80119ec:	f7f8 fb4e 	bl	800a08c <ucdr_init_buffer_origin>
 80119f0:	4628      	mov	r0, r5
 80119f2:	4903      	ldr	r1, [pc, #12]	@ (8011a00 <on_full_output_buffer+0x58>)
 80119f4:	4622      	mov	r2, r4
 80119f6:	f7f8 fb25 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 80119fa:	2000      	movs	r0, #0
 80119fc:	bd38      	pop	{r3, r4, r5, pc}
 80119fe:	bf00      	nop
 8011a00:	080119a9 	.word	0x080119a9

08011a04 <uxr_init_output_reliable_stream>:
 8011a04:	b410      	push	{r4}
 8011a06:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011a0a:	8103      	strh	r3, [r0, #8]
 8011a0c:	e9c0 1200 	strd	r1, r2, [r0]
 8011a10:	f880 c00c 	strb.w	ip, [r0, #12]
 8011a14:	b1d3      	cbz	r3, 8011a4c <uxr_init_output_reliable_stream+0x48>
 8011a16:	f8c1 c000 	str.w	ip, [r1]
 8011a1a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011a1e:	f1bc 0f01 	cmp.w	ip, #1
 8011a22:	d913      	bls.n	8011a4c <uxr_init_output_reliable_stream+0x48>
 8011a24:	2301      	movs	r3, #1
 8011a26:	fbb3 f1fc 	udiv	r1, r3, ip
 8011a2a:	fb0c 3111 	mls	r1, ip, r1, r3
 8011a2e:	b289      	uxth	r1, r1
 8011a30:	6842      	ldr	r2, [r0, #4]
 8011a32:	6804      	ldr	r4, [r0, #0]
 8011a34:	fbb2 f2fc 	udiv	r2, r2, ip
 8011a38:	fb01 f202 	mul.w	r2, r1, r2
 8011a3c:	7b01      	ldrb	r1, [r0, #12]
 8011a3e:	50a1      	str	r1, [r4, r2]
 8011a40:	3301      	adds	r3, #1
 8011a42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	459c      	cmp	ip, r3
 8011a4a:	d8ec      	bhi.n	8011a26 <uxr_init_output_reliable_stream+0x22>
 8011a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a50:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011a54:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011a58:	4905      	ldr	r1, [pc, #20]	@ (8011a70 <uxr_init_output_reliable_stream+0x6c>)
 8011a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a5e:	f8c0 100e 	str.w	r1, [r0, #14]
 8011a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a66:	2300      	movs	r3, #0
 8011a68:	8242      	strh	r2, [r0, #18]
 8011a6a:	8403      	strh	r3, [r0, #32]
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	ffff0000 	.word	0xffff0000

08011a74 <uxr_reset_output_reliable_stream>:
 8011a74:	8901      	ldrh	r1, [r0, #8]
 8011a76:	b1b1      	cbz	r1, 8011aa6 <uxr_reset_output_reliable_stream+0x32>
 8011a78:	f04f 0c00 	mov.w	ip, #0
 8011a7c:	4663      	mov	r3, ip
 8011a7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011a82:	fb01 3312 	mls	r3, r1, r2, r3
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	6842      	ldr	r2, [r0, #4]
 8011a8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8011a8e:	6801      	ldr	r1, [r0, #0]
 8011a90:	fb02 f303 	mul.w	r3, r2, r3
 8011a94:	7b02      	ldrb	r2, [r0, #12]
 8011a96:	50ca      	str	r2, [r1, r3]
 8011a98:	f10c 0c01 	add.w	ip, ip, #1
 8011a9c:	8901      	ldrh	r1, [r0, #8]
 8011a9e:	fa1f f38c 	uxth.w	r3, ip
 8011aa2:	4299      	cmp	r1, r3
 8011aa4:	d8eb      	bhi.n	8011a7e <uxr_reset_output_reliable_stream+0xa>
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011aaa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011aae:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011ab2:	4904      	ldr	r1, [pc, #16]	@ (8011ac4 <uxr_reset_output_reliable_stream+0x50>)
 8011ab4:	f8c0 100e 	str.w	r1, [r0, #14]
 8011ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011abc:	2300      	movs	r3, #0
 8011abe:	8242      	strh	r2, [r0, #18]
 8011ac0:	8403      	strh	r3, [r0, #32]
 8011ac2:	4770      	bx	lr
 8011ac4:	ffff0000 	.word	0xffff0000

08011ac8 <uxr_prepare_reliable_buffer_to_write>:
 8011ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011acc:	4604      	mov	r4, r0
 8011ace:	b091      	sub	sp, #68	@ 0x44
 8011ad0:	8900      	ldrh	r0, [r0, #8]
 8011ad2:	89e6      	ldrh	r6, [r4, #14]
 8011ad4:	6823      	ldr	r3, [r4, #0]
 8011ad6:	9204      	str	r2, [sp, #16]
 8011ad8:	fbb6 f2f0 	udiv	r2, r6, r0
 8011adc:	fb00 6212 	mls	r2, r0, r2, r6
 8011ae0:	b292      	uxth	r2, r2
 8011ae2:	6865      	ldr	r5, [r4, #4]
 8011ae4:	fbb5 f5f0 	udiv	r5, r5, r0
 8011ae8:	fb05 3202 	mla	r2, r5, r2, r3
 8011aec:	3204      	adds	r2, #4
 8011aee:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8011af2:	f894 900c 	ldrb.w	r9, [r4, #12]
 8011af6:	9203      	str	r2, [sp, #12]
 8011af8:	468b      	mov	fp, r1
 8011afa:	1f2f      	subs	r7, r5, #4
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f000 814c 	beq.w	8011d9a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8011b02:	f04f 0c00 	mov.w	ip, #0
 8011b06:	46e2      	mov	sl, ip
 8011b08:	4661      	mov	r1, ip
 8011b0a:	fbb1 f2f0 	udiv	r2, r1, r0
 8011b0e:	fb00 1212 	mls	r2, r0, r2, r1
 8011b12:	b292      	uxth	r2, r2
 8011b14:	fb05 f202 	mul.w	r2, r5, r2
 8011b18:	f10c 0c01 	add.w	ip, ip, #1
 8011b1c:	589a      	ldr	r2, [r3, r2]
 8011b1e:	454a      	cmp	r2, r9
 8011b20:	bf08      	it	eq
 8011b22:	f10a 0a01 	addeq.w	sl, sl, #1
 8011b26:	fa1f f18c 	uxth.w	r1, ip
 8011b2a:	bf08      	it	eq
 8011b2c:	fa1f fa8a 	uxtheq.w	sl, sl
 8011b30:	4281      	cmp	r1, r0
 8011b32:	d3ea      	bcc.n	8011b0a <uxr_prepare_reliable_buffer_to_write+0x42>
 8011b34:	4640      	mov	r0, r8
 8011b36:	2104      	movs	r1, #4
 8011b38:	f8cd a014 	str.w	sl, [sp, #20]
 8011b3c:	f7f8 fab2 	bl	800a0a4 <ucdr_alignment>
 8011b40:	4480      	add	r8, r0
 8011b42:	eb08 020b 	add.w	r2, r8, fp
 8011b46:	42ba      	cmp	r2, r7
 8011b48:	f240 80cd 	bls.w	8011ce6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8011b4c:	7b22      	ldrb	r2, [r4, #12]
 8011b4e:	445a      	add	r2, fp
 8011b50:	42ba      	cmp	r2, r7
 8011b52:	f240 80b5 	bls.w	8011cc0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8011b56:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8011b5a:	33fc      	adds	r3, #252	@ 0xfc
 8011b5c:	b2ba      	uxth	r2, r7
 8011b5e:	4413      	add	r3, r2
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	fb0a f903 	mul.w	r9, sl, r3
 8011b66:	45d9      	cmp	r9, fp
 8011b68:	9305      	str	r3, [sp, #20]
 8011b6a:	9306      	str	r3, [sp, #24]
 8011b6c:	f0c0 80b7 	bcc.w	8011cde <uxr_prepare_reliable_buffer_to_write+0x216>
 8011b70:	f108 0304 	add.w	r3, r8, #4
 8011b74:	42bb      	cmp	r3, r7
 8011b76:	f080 80db 	bcs.w	8011d30 <uxr_prepare_reliable_buffer_to_write+0x268>
 8011b7a:	f1a2 0904 	sub.w	r9, r2, #4
 8011b7e:	eba9 0908 	sub.w	r9, r9, r8
 8011b82:	9b05      	ldr	r3, [sp, #20]
 8011b84:	fa1f f989 	uxth.w	r9, r9
 8011b88:	ebab 0b09 	sub.w	fp, fp, r9
 8011b8c:	fbbb f2f3 	udiv	r2, fp, r3
 8011b90:	fb03 b312 	mls	r3, r3, r2, fp
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f000 80c8 	beq.w	8011d2a <uxr_prepare_reliable_buffer_to_write+0x262>
 8011b9a:	3201      	adds	r2, #1
 8011b9c:	b292      	uxth	r2, r2
 8011b9e:	9306      	str	r3, [sp, #24]
 8011ba0:	4552      	cmp	r2, sl
 8011ba2:	f200 809c 	bhi.w	8011cde <uxr_prepare_reliable_buffer_to_write+0x216>
 8011ba6:	f10d 0b20 	add.w	fp, sp, #32
 8011baa:	2a00      	cmp	r2, #0
 8011bac:	d042      	beq.n	8011c34 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8011bae:	f8cd 801c 	str.w	r8, [sp, #28]
 8011bb2:	f04f 0a00 	mov.w	sl, #0
 8011bb6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011bba:	9505      	str	r5, [sp, #20]
 8011bbc:	f10d 0b20 	add.w	fp, sp, #32
 8011bc0:	4615      	mov	r5, r2
 8011bc2:	e000      	b.n	8011bc6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8011bc4:	46c1      	mov	r9, r8
 8011bc6:	8920      	ldrh	r0, [r4, #8]
 8011bc8:	fbb6 f2f0 	udiv	r2, r6, r0
 8011bcc:	fb00 6112 	mls	r1, r0, r2, r6
 8011bd0:	b28a      	uxth	r2, r1
 8011bd2:	6863      	ldr	r3, [r4, #4]
 8011bd4:	fbb3 f1f0 	udiv	r1, r3, r0
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	fb02 f101 	mul.w	r1, r2, r1
 8011bde:	3104      	adds	r1, #4
 8011be0:	4419      	add	r1, r3
 8011be2:	4658      	mov	r0, fp
 8011be4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011be8:	9200      	str	r2, [sp, #0]
 8011bea:	2300      	movs	r3, #0
 8011bec:	463a      	mov	r2, r7
 8011bee:	f7f8 fa43 	bl	800a078 <ucdr_init_buffer_origin_offset>
 8011bf2:	464a      	mov	r2, r9
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	210d      	movs	r1, #13
 8011bf8:	4658      	mov	r0, fp
 8011bfa:	f7f9 fe15 	bl	800b828 <uxr_buffer_submessage_header>
 8011bfe:	8921      	ldrh	r1, [r4, #8]
 8011c00:	fbb6 f2f1 	udiv	r2, r6, r1
 8011c04:	fb01 6212 	mls	r2, r1, r2, r6
 8011c08:	b292      	uxth	r2, r2
 8011c0a:	6863      	ldr	r3, [r4, #4]
 8011c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c10:	fb02 f303 	mul.w	r3, r2, r3
 8011c14:	6822      	ldr	r2, [r4, #0]
 8011c16:	4630      	mov	r0, r6
 8011c18:	50d7      	str	r7, [r2, r3]
 8011c1a:	2101      	movs	r1, #1
 8011c1c:	f000 faba 	bl	8012194 <uxr_seq_num_add>
 8011c20:	f10a 0a01 	add.w	sl, sl, #1
 8011c24:	fa1f f38a 	uxth.w	r3, sl
 8011c28:	429d      	cmp	r5, r3
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	d8ca      	bhi.n	8011bc4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8011c2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8011c32:	9d05      	ldr	r5, [sp, #20]
 8011c34:	8920      	ldrh	r0, [r4, #8]
 8011c36:	fbb6 f3f0 	udiv	r3, r6, r0
 8011c3a:	fb00 6313 	mls	r3, r0, r3, r6
 8011c3e:	b299      	uxth	r1, r3
 8011c40:	6863      	ldr	r3, [r4, #4]
 8011c42:	fbb3 f3f0 	udiv	r3, r3, r0
 8011c46:	fb01 f303 	mul.w	r3, r1, r3
 8011c4a:	6821      	ldr	r1, [r4, #0]
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	4419      	add	r1, r3
 8011c50:	463a      	mov	r2, r7
 8011c52:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011c56:	9000      	str	r0, [sp, #0]
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4658      	mov	r0, fp
 8011c5c:	f7f8 fa0c 	bl	800a078 <ucdr_init_buffer_origin_offset>
 8011c60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8011c64:	4658      	mov	r0, fp
 8011c66:	fa1f f289 	uxth.w	r2, r9
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	210d      	movs	r1, #13
 8011c6e:	f7f9 fddb 	bl	800b828 <uxr_buffer_submessage_header>
 8011c72:	9b03      	ldr	r3, [sp, #12]
 8011c74:	8927      	ldrh	r7, [r4, #8]
 8011c76:	7b20      	ldrb	r0, [r4, #12]
 8011c78:	f108 0104 	add.w	r1, r8, #4
 8011c7c:	440b      	add	r3, r1
 8011c7e:	4619      	mov	r1, r3
 8011c80:	fbb6 f3f7 	udiv	r3, r6, r7
 8011c84:	fb07 6313 	mls	r3, r7, r3, r6
 8011c88:	f1a5 0208 	sub.w	r2, r5, #8
 8011c8c:	b29d      	uxth	r5, r3
 8011c8e:	3004      	adds	r0, #4
 8011c90:	6863      	ldr	r3, [r4, #4]
 8011c92:	fbb3 f3f7 	udiv	r3, r3, r7
 8011c96:	fb05 f303 	mul.w	r3, r5, r3
 8011c9a:	6825      	ldr	r5, [r4, #0]
 8011c9c:	4448      	add	r0, r9
 8011c9e:	50e8      	str	r0, [r5, r3]
 8011ca0:	9d04      	ldr	r5, [sp, #16]
 8011ca2:	eba2 0208 	sub.w	r2, r2, r8
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	f7f8 f9f8 	bl	800a09c <ucdr_init_buffer>
 8011cac:	4628      	mov	r0, r5
 8011cae:	493c      	ldr	r1, [pc, #240]	@ (8011da0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8011cb0:	4622      	mov	r2, r4
 8011cb2:	f7f8 f9c7 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 8011cb6:	2001      	movs	r0, #1
 8011cb8:	81e6      	strh	r6, [r4, #14]
 8011cba:	b011      	add	sp, #68	@ 0x44
 8011cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc0:	2101      	movs	r1, #1
 8011cc2:	89e0      	ldrh	r0, [r4, #14]
 8011cc4:	f000 fa66 	bl	8012194 <uxr_seq_num_add>
 8011cc8:	8921      	ldrh	r1, [r4, #8]
 8011cca:	4605      	mov	r5, r0
 8011ccc:	8a60      	ldrh	r0, [r4, #18]
 8011cce:	f000 fa61 	bl	8012194 <uxr_seq_num_add>
 8011cd2:	4601      	mov	r1, r0
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f000 fa65 	bl	80121a4 <uxr_seq_num_cmp>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	dd42      	ble.n	8011d64 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8011cde:	2000      	movs	r0, #0
 8011ce0:	b011      	add	sp, #68	@ 0x44
 8011ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce6:	8921      	ldrh	r1, [r4, #8]
 8011ce8:	8a60      	ldrh	r0, [r4, #18]
 8011cea:	9205      	str	r2, [sp, #20]
 8011cec:	f000 fa52 	bl	8012194 <uxr_seq_num_add>
 8011cf0:	4601      	mov	r1, r0
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f000 fa56 	bl	80121a4 <uxr_seq_num_cmp>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	9a05      	ldr	r2, [sp, #20]
 8011cfc:	dcef      	bgt.n	8011cde <uxr_prepare_reliable_buffer_to_write+0x216>
 8011cfe:	8927      	ldrh	r7, [r4, #8]
 8011d00:	fbb6 f3f7 	udiv	r3, r6, r7
 8011d04:	fb07 6313 	mls	r3, r7, r3, r6
 8011d08:	b29d      	uxth	r5, r3
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	6824      	ldr	r4, [r4, #0]
 8011d0e:	fbb3 f3f7 	udiv	r3, r3, r7
 8011d12:	fb05 f303 	mul.w	r3, r5, r3
 8011d16:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8011d1a:	50e2      	str	r2, [r4, r3]
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f8cd 8000 	str.w	r8, [sp]
 8011d22:	f7f8 f9a9 	bl	800a078 <ucdr_init_buffer_origin_offset>
 8011d26:	2001      	movs	r0, #1
 8011d28:	e7da      	b.n	8011ce0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8011d2a:	b293      	uxth	r3, r2
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	e737      	b.n	8011ba0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8011d30:	4630      	mov	r0, r6
 8011d32:	2101      	movs	r1, #1
 8011d34:	9207      	str	r2, [sp, #28]
 8011d36:	f000 fa2d 	bl	8012194 <uxr_seq_num_add>
 8011d3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011d3e:	fbb0 f1fc 	udiv	r1, r0, ip
 8011d42:	fb0c 0111 	mls	r1, ip, r1, r0
 8011d46:	4606      	mov	r6, r0
 8011d48:	b288      	uxth	r0, r1
 8011d4a:	6863      	ldr	r3, [r4, #4]
 8011d4c:	fbb3 f1fc 	udiv	r1, r3, ip
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	9a07      	ldr	r2, [sp, #28]
 8011d54:	fb00 f101 	mul.w	r1, r0, r1
 8011d58:	3104      	adds	r1, #4
 8011d5a:	440b      	add	r3, r1
 8011d5c:	9303      	str	r3, [sp, #12]
 8011d5e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8011d62:	e70a      	b.n	8011b7a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8011d64:	8921      	ldrh	r1, [r4, #8]
 8011d66:	fbb5 f3f1 	udiv	r3, r5, r1
 8011d6a:	fb01 5313 	mls	r3, r1, r3, r5
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	6863      	ldr	r3, [r4, #4]
 8011d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d76:	6821      	ldr	r1, [r4, #0]
 8011d78:	9804      	ldr	r0, [sp, #16]
 8011d7a:	fb02 f303 	mul.w	r3, r2, r3
 8011d7e:	3304      	adds	r3, #4
 8011d80:	7b22      	ldrb	r2, [r4, #12]
 8011d82:	4419      	add	r1, r3
 8011d84:	445a      	add	r2, fp
 8011d86:	f841 2c04 	str.w	r2, [r1, #-4]
 8011d8a:	7b23      	ldrb	r3, [r4, #12]
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f7f8 f972 	bl	800a078 <ucdr_init_buffer_origin_offset>
 8011d94:	81e5      	strh	r5, [r4, #14]
 8011d96:	2001      	movs	r0, #1
 8011d98:	e7a2      	b.n	8011ce0 <uxr_prepare_reliable_buffer_to_write+0x218>
 8011d9a:	4682      	mov	sl, r0
 8011d9c:	e6ca      	b.n	8011b34 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8011d9e:	bf00      	nop
 8011da0:	080119a9 	.word	0x080119a9

08011da4 <uxr_prepare_next_reliable_buffer_to_send>:
 8011da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da6:	4604      	mov	r4, r0
 8011da8:	460f      	mov	r7, r1
 8011daa:	8a00      	ldrh	r0, [r0, #16]
 8011dac:	2101      	movs	r1, #1
 8011dae:	4616      	mov	r6, r2
 8011db0:	461d      	mov	r5, r3
 8011db2:	f000 f9ef 	bl	8012194 <uxr_seq_num_add>
 8011db6:	8028      	strh	r0, [r5, #0]
 8011db8:	8922      	ldrh	r2, [r4, #8]
 8011dba:	fbb0 f3f2 	udiv	r3, r0, r2
 8011dbe:	fb02 0c13 	mls	ip, r2, r3, r0
 8011dc2:	fa1f fc8c 	uxth.w	ip, ip
 8011dc6:	6863      	ldr	r3, [r4, #4]
 8011dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011dcc:	fb0c fc03 	mul.w	ip, ip, r3
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	89e1      	ldrh	r1, [r4, #14]
 8011dd4:	f10c 0c04 	add.w	ip, ip, #4
 8011dd8:	4463      	add	r3, ip
 8011dda:	603b      	str	r3, [r7, #0]
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	449c      	add	ip, r3
 8011de0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8011de4:	6033      	str	r3, [r6, #0]
 8011de6:	f000 f9dd 	bl	80121a4 <uxr_seq_num_cmp>
 8011dea:	2800      	cmp	r0, #0
 8011dec:	dd01      	ble.n	8011df2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8011dee:	2000      	movs	r0, #0
 8011df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011df2:	7b23      	ldrb	r3, [r4, #12]
 8011df4:	6832      	ldr	r2, [r6, #0]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d9f9      	bls.n	8011dee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011dfa:	8a61      	ldrh	r1, [r4, #18]
 8011dfc:	8a20      	ldrh	r0, [r4, #16]
 8011dfe:	f000 f9cd 	bl	801219c <uxr_seq_num_sub>
 8011e02:	8923      	ldrh	r3, [r4, #8]
 8011e04:	4283      	cmp	r3, r0
 8011e06:	d0f2      	beq.n	8011dee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011e08:	8828      	ldrh	r0, [r5, #0]
 8011e0a:	89e3      	ldrh	r3, [r4, #14]
 8011e0c:	8220      	strh	r0, [r4, #16]
 8011e0e:	4298      	cmp	r0, r3
 8011e10:	d001      	beq.n	8011e16 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8011e12:	2001      	movs	r0, #1
 8011e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e16:	2101      	movs	r1, #1
 8011e18:	f000 f9bc 	bl	8012194 <uxr_seq_num_add>
 8011e1c:	81e0      	strh	r0, [r4, #14]
 8011e1e:	2001      	movs	r0, #1
 8011e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e22:	bf00      	nop

08011e24 <uxr_update_output_stream_heartbeat_timestamp>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	8a01      	ldrh	r1, [r0, #16]
 8011e28:	4604      	mov	r4, r0
 8011e2a:	8a40      	ldrh	r0, [r0, #18]
 8011e2c:	4615      	mov	r5, r2
 8011e2e:	461e      	mov	r6, r3
 8011e30:	f000 f9b8 	bl	80121a4 <uxr_seq_num_cmp>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	db07      	blt.n	8011e48 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8011e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011e3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011e40:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8011e44:	2000      	movs	r0, #0
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	f894 0020 	ldrb.w	r0, [r4, #32]
 8011e4c:	b940      	cbnz	r0, 8011e60 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	f884 3020 	strb.w	r3, [r4, #32]
 8011e54:	3564      	adds	r5, #100	@ 0x64
 8011e56:	f146 0600 	adc.w	r6, r6, #0
 8011e5a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}
 8011e60:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011e64:	4295      	cmp	r5, r2
 8011e66:	eb76 0303 	sbcs.w	r3, r6, r3
 8011e6a:	bfa5      	ittet	ge
 8011e6c:	3001      	addge	r0, #1
 8011e6e:	f884 0020 	strbge.w	r0, [r4, #32]
 8011e72:	2000      	movlt	r0, #0
 8011e74:	2001      	movge	r0, #1
 8011e76:	e7ed      	b.n	8011e54 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08011e78 <uxr_begin_output_nack_buffer_it>:
 8011e78:	8a40      	ldrh	r0, [r0, #18]
 8011e7a:	4770      	bx	lr

08011e7c <uxr_next_reliable_nack_buffer_to_send>:
 8011e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e80:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8011e84:	b082      	sub	sp, #8
 8011e86:	f1b8 0f00 	cmp.w	r8, #0
 8011e8a:	d011      	beq.n	8011eb0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	8818      	ldrh	r0, [r3, #0]
 8011e90:	460e      	mov	r6, r1
 8011e92:	4617      	mov	r7, r2
 8011e94:	461d      	mov	r5, r3
 8011e96:	2101      	movs	r1, #1
 8011e98:	f000 f97c 	bl	8012194 <uxr_seq_num_add>
 8011e9c:	8028      	strh	r0, [r5, #0]
 8011e9e:	8a21      	ldrh	r1, [r4, #16]
 8011ea0:	f000 f980 	bl	80121a4 <uxr_seq_num_cmp>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	dd07      	ble.n	8011eb8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8011ea8:	f04f 0800 	mov.w	r8, #0
 8011eac:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8011eb0:	4640      	mov	r0, r8
 8011eb2:	b002      	add	sp, #8
 8011eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb8:	8921      	ldrh	r1, [r4, #8]
 8011eba:	8828      	ldrh	r0, [r5, #0]
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	fbb0 f2f1 	udiv	r2, r0, r1
 8011ec2:	fb01 0c12 	mls	ip, r1, r2, r0
 8011ec6:	fa1f f28c 	uxth.w	r2, ip
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	6863      	ldr	r3, [r4, #4]
 8011ece:	fbb3 fcf1 	udiv	ip, r3, r1
 8011ed2:	9b01      	ldr	r3, [sp, #4]
 8011ed4:	fb02 fc0c 	mul.w	ip, r2, ip
 8011ed8:	f10c 0c04 	add.w	ip, ip, #4
 8011edc:	4463      	add	r3, ip
 8011ede:	6033      	str	r3, [r6, #0]
 8011ee0:	6823      	ldr	r3, [r4, #0]
 8011ee2:	4463      	add	r3, ip
 8011ee4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011ee8:	603b      	str	r3, [r7, #0]
 8011eea:	7b22      	ldrb	r2, [r4, #12]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d0d2      	beq.n	8011e96 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8011ef0:	4640      	mov	r0, r8
 8011ef2:	b002      	add	sp, #8
 8011ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ef8 <uxr_process_acknack>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	4604      	mov	r4, r0
 8011efc:	460e      	mov	r6, r1
 8011efe:	4610      	mov	r0, r2
 8011f00:	2101      	movs	r1, #1
 8011f02:	f000 f94b 	bl	801219c <uxr_seq_num_sub>
 8011f06:	8a61      	ldrh	r1, [r4, #18]
 8011f08:	f000 f948 	bl	801219c <uxr_seq_num_sub>
 8011f0c:	b1c0      	cbz	r0, 8011f40 <uxr_process_acknack+0x48>
 8011f0e:	4605      	mov	r5, r0
 8011f10:	2700      	movs	r7, #0
 8011f12:	2101      	movs	r1, #1
 8011f14:	8a60      	ldrh	r0, [r4, #18]
 8011f16:	f000 f93d 	bl	8012194 <uxr_seq_num_add>
 8011f1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011f1e:	fbb0 f1fc 	udiv	r1, r0, ip
 8011f22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011f26:	fb0c 0111 	mls	r1, ip, r1, r0
 8011f2a:	b289      	uxth	r1, r1
 8011f2c:	3701      	adds	r7, #1
 8011f2e:	fbb3 f3fc 	udiv	r3, r3, ip
 8011f32:	fb01 f303 	mul.w	r3, r1, r3
 8011f36:	42bd      	cmp	r5, r7
 8011f38:	7b21      	ldrb	r1, [r4, #12]
 8011f3a:	8260      	strh	r0, [r4, #18]
 8011f3c:	50d1      	str	r1, [r2, r3]
 8011f3e:	d1e8      	bne.n	8011f12 <uxr_process_acknack+0x1a>
 8011f40:	3e00      	subs	r6, #0
 8011f42:	f04f 0300 	mov.w	r3, #0
 8011f46:	bf18      	it	ne
 8011f48:	2601      	movne	r6, #1
 8011f4a:	f884 3020 	strb.w	r3, [r4, #32]
 8011f4e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8011f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f54 <uxr_is_output_up_to_date>:
 8011f54:	8a01      	ldrh	r1, [r0, #16]
 8011f56:	8a40      	ldrh	r0, [r0, #18]
 8011f58:	b508      	push	{r3, lr}
 8011f5a:	f000 f923 	bl	80121a4 <uxr_seq_num_cmp>
 8011f5e:	fab0 f080 	clz	r0, r0
 8011f62:	0940      	lsrs	r0, r0, #5
 8011f64:	bd08      	pop	{r3, pc}
 8011f66:	bf00      	nop

08011f68 <get_available_free_slots>:
 8011f68:	8902      	ldrh	r2, [r0, #8]
 8011f6a:	b1da      	cbz	r2, 8011fa4 <get_available_free_slots+0x3c>
 8011f6c:	b530      	push	{r4, r5, lr}
 8011f6e:	2100      	movs	r1, #0
 8011f70:	6843      	ldr	r3, [r0, #4]
 8011f72:	6805      	ldr	r5, [r0, #0]
 8011f74:	7b04      	ldrb	r4, [r0, #12]
 8011f76:	fbb3 fef2 	udiv	lr, r3, r2
 8011f7a:	4608      	mov	r0, r1
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	fbb3 fcf2 	udiv	ip, r3, r2
 8011f82:	fb02 331c 	mls	r3, r2, ip, r3
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	fb0e f303 	mul.w	r3, lr, r3
 8011f8c:	3101      	adds	r1, #1
 8011f8e:	f855 c003 	ldr.w	ip, [r5, r3]
 8011f92:	4564      	cmp	r4, ip
 8011f94:	bf08      	it	eq
 8011f96:	3001      	addeq	r0, #1
 8011f98:	b28b      	uxth	r3, r1
 8011f9a:	bf08      	it	eq
 8011f9c:	b280      	uxtheq	r0, r0
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d3ed      	bcc.n	8011f7e <get_available_free_slots+0x16>
 8011fa2:	bd30      	pop	{r4, r5, pc}
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	4770      	bx	lr

08011fa8 <uxr_buffer_cancel_data>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	b094      	sub	sp, #80	@ 0x50
 8011fac:	2300      	movs	r3, #0
 8011fae:	9202      	str	r2, [sp, #8]
 8011fb0:	9205      	str	r2, [sp, #20]
 8011fb2:	9301      	str	r3, [sp, #4]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011fba:	f88d 301e 	strb.w	r3, [sp, #30]
 8011fbe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011fc2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011fc6:	2308      	movs	r3, #8
 8011fc8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011fcc:	9300      	str	r3, [sp, #0]
 8011fce:	2210      	movs	r2, #16
 8011fd0:	ab0c      	add	r3, sp, #48	@ 0x30
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	9103      	str	r1, [sp, #12]
 8011fd6:	f7f9 f989 	bl	800b2ec <uxr_prepare_stream_to_write_submessage>
 8011fda:	b918      	cbnz	r0, 8011fe4 <uxr_buffer_cancel_data+0x3c>
 8011fdc:	4604      	mov	r4, r0
 8011fde:	4620      	mov	r0, r4
 8011fe0:	b014      	add	sp, #80	@ 0x50
 8011fe2:	bd10      	pop	{r4, pc}
 8011fe4:	9905      	ldr	r1, [sp, #20]
 8011fe6:	aa06      	add	r2, sp, #24
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f7f9 fab5 	bl	800b558 <uxr_init_base_object_request>
 8011fee:	a906      	add	r1, sp, #24
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	a80c      	add	r0, sp, #48	@ 0x30
 8011ff4:	f7fa fcc4 	bl	800c980 <uxr_serialize_READ_DATA_Payload>
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	b014      	add	sp, #80	@ 0x50
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	bf00      	nop

08012000 <read_submessage_format>:
 8012000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012004:	b095      	sub	sp, #84	@ 0x54
 8012006:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801200a:	b113      	cbz	r3, 8012012 <read_submessage_format+0x12>
 801200c:	b015      	add	sp, #84	@ 0x54
 801200e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012012:	460c      	mov	r4, r1
 8012014:	4615      	mov	r5, r2
 8012016:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801201a:	4607      	mov	r7, r0
 801201c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801201e:	9004      	str	r0, [sp, #16]
 8012020:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012022:	9005      	str	r0, [sp, #20]
 8012024:	1a52      	subs	r2, r2, r1
 8012026:	a80c      	add	r0, sp, #48	@ 0x30
 8012028:	4699      	mov	r9, r3
 801202a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801202e:	f7f8 f835 	bl	800a09c <ucdr_init_buffer>
 8012032:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012036:	a80c      	add	r0, sp, #48	@ 0x30
 8012038:	f7f8 f804 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 801203c:	69e2      	ldr	r2, [r4, #28]
 801203e:	b19a      	cbz	r2, 8012068 <read_submessage_format+0x68>
 8012040:	f1b8 0f07 	cmp.w	r8, #7
 8012044:	f882 9014 	strb.w	r9, [r2, #20]
 8012048:	d040      	beq.n	80120cc <read_submessage_format+0xcc>
 801204a:	f1b8 0f08 	cmp.w	r8, #8
 801204e:	d02e      	beq.n	80120ae <read_submessage_format+0xae>
 8012050:	f1b8 0f06 	cmp.w	r8, #6
 8012054:	d011      	beq.n	801207a <read_submessage_format+0x7a>
 8012056:	2301      	movs	r3, #1
 8012058:	7513      	strb	r3, [r2, #20]
 801205a:	4629      	mov	r1, r5
 801205c:	4620      	mov	r0, r4
 801205e:	f7f8 f86d 	bl	800a13c <ucdr_advance_buffer>
 8012062:	b015      	add	sp, #84	@ 0x54
 8012064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012068:	f1b8 0f07 	cmp.w	r8, #7
 801206c:	d02e      	beq.n	80120cc <read_submessage_format+0xcc>
 801206e:	f1b8 0f08 	cmp.w	r8, #8
 8012072:	d01c      	beq.n	80120ae <read_submessage_format+0xae>
 8012074:	f1b8 0f06 	cmp.w	r8, #6
 8012078:	d1ef      	bne.n	801205a <read_submessage_format+0x5a>
 801207a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801207e:	f1b8 0f00 	cmp.w	r8, #0
 8012082:	d011      	beq.n	80120a8 <read_submessage_format+0xa8>
 8012084:	ab0c      	add	r3, sp, #48	@ 0x30
 8012086:	e9cd 3500 	strd	r3, r5, [sp]
 801208a:	2306      	movs	r3, #6
 801208c:	f88d 3016 	strb.w	r3, [sp, #22]
 8012090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012094:	9302      	str	r3, [sp, #8]
 8012096:	4632      	mov	r2, r6
 8012098:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801209c:	4638      	mov	r0, r7
 801209e:	47c0      	blx	r8
 80120a0:	2301      	movs	r3, #1
 80120a2:	69e2      	ldr	r2, [r4, #28]
 80120a4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	d1d4      	bne.n	8012056 <read_submessage_format+0x56>
 80120ac:	e7d5      	b.n	801205a <read_submessage_format+0x5a>
 80120ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d0f8      	beq.n	80120a8 <read_submessage_format+0xa8>
 80120b6:	a906      	add	r1, sp, #24
 80120b8:	a80c      	add	r0, sp, #48	@ 0x30
 80120ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80120be:	f7fa fd25 	bl	800cb0c <uxr_deserialize_SampleIdentity>
 80120c2:	b9a0      	cbnz	r0, 80120ee <read_submessage_format+0xee>
 80120c4:	69e2      	ldr	r2, [r4, #28]
 80120c6:	2a00      	cmp	r2, #0
 80120c8:	d1c5      	bne.n	8012056 <read_submessage_format+0x56>
 80120ca:	e7c6      	b.n	801205a <read_submessage_format+0x5a>
 80120cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d0:	b13b      	cbz	r3, 80120e2 <read_submessage_format+0xe2>
 80120d2:	a906      	add	r1, sp, #24
 80120d4:	a80c      	add	r0, sp, #48	@ 0x30
 80120d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80120da:	f7fa f9eb 	bl	800c4b4 <uxr_deserialize_BaseObjectRequest>
 80120de:	bb60      	cbnz	r0, 801213a <read_submessage_format+0x13a>
 80120e0:	69e2      	ldr	r2, [r4, #28]
 80120e2:	68a3      	ldr	r3, [r4, #8]
 80120e4:	442b      	add	r3, r5
 80120e6:	60a3      	str	r3, [r4, #8]
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d1b4      	bne.n	8012056 <read_submessage_format+0x56>
 80120ec:	e7b5      	b.n	801205a <read_submessage_format+0x5a>
 80120ee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80120f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80120f4:	1a52      	subs	r2, r2, r1
 80120f6:	eba8 0803 	sub.w	r8, r8, r3
 80120fa:	a80c      	add	r0, sp, #48	@ 0x30
 80120fc:	f7f7 ffce 	bl	800a09c <ucdr_init_buffer>
 8012100:	44a8      	add	r8, r5
 8012102:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012106:	a80c      	add	r0, sp, #48	@ 0x30
 8012108:	f7f7 ff9c 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 801210c:	fa1f f888 	uxth.w	r8, r8
 8012110:	ab0c      	add	r3, sp, #48	@ 0x30
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	f8cd 8004 	str.w	r8, [sp, #4]
 8012118:	2108      	movs	r1, #8
 801211a:	f88d 1016 	strb.w	r1, [sp, #22]
 801211e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012122:	9102      	str	r1, [sp, #8]
 8012124:	ab06      	add	r3, sp, #24
 8012126:	4632      	mov	r2, r6
 8012128:	9905      	ldr	r1, [sp, #20]
 801212a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801212e:	4638      	mov	r0, r7
 8012130:	47b0      	blx	r6
 8012132:	2301      	movs	r3, #1
 8012134:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012138:	e7c4      	b.n	80120c4 <read_submessage_format+0xc4>
 801213a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801213e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012140:	1a52      	subs	r2, r2, r1
 8012142:	a80c      	add	r0, sp, #48	@ 0x30
 8012144:	eba8 0803 	sub.w	r8, r8, r3
 8012148:	f7f7 ffa8 	bl	800a09c <ucdr_init_buffer>
 801214c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012150:	a80c      	add	r0, sp, #48	@ 0x30
 8012152:	f7f7 ff77 	bl	800a044 <ucdr_set_on_full_buffer_callback>
 8012156:	ab0c      	add	r3, sp, #48	@ 0x30
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801215e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012162:	44a8      	add	r8, r5
 8012164:	fa1f f888 	uxth.w	r8, r8
 8012168:	f8cd 8004 	str.w	r8, [sp, #4]
 801216c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012170:	2107      	movs	r1, #7
 8012172:	f88d 1016 	strb.w	r1, [sp, #22]
 8012176:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801217a:	9102      	str	r1, [sp, #8]
 801217c:	4632      	mov	r2, r6
 801217e:	b29b      	uxth	r3, r3
 8012180:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8012184:	9905      	ldr	r1, [sp, #20]
 8012186:	4638      	mov	r0, r7
 8012188:	47b0      	blx	r6
 801218a:	2301      	movs	r3, #1
 801218c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012190:	e7a6      	b.n	80120e0 <read_submessage_format+0xe0>
 8012192:	bf00      	nop

08012194 <uxr_seq_num_add>:
 8012194:	4408      	add	r0, r1
 8012196:	b280      	uxth	r0, r0
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop

0801219c <uxr_seq_num_sub>:
 801219c:	1a40      	subs	r0, r0, r1
 801219e:	b280      	uxth	r0, r0
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop

080121a4 <uxr_seq_num_cmp>:
 80121a4:	4288      	cmp	r0, r1
 80121a6:	d011      	beq.n	80121cc <uxr_seq_num_cmp+0x28>
 80121a8:	d309      	bcc.n	80121be <uxr_seq_num_cmp+0x1a>
 80121aa:	4288      	cmp	r0, r1
 80121ac:	d910      	bls.n	80121d0 <uxr_seq_num_cmp+0x2c>
 80121ae:	1a40      	subs	r0, r0, r1
 80121b0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80121b4:	bfd4      	ite	le
 80121b6:	2001      	movle	r0, #1
 80121b8:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80121bc:	4770      	bx	lr
 80121be:	1a0b      	subs	r3, r1, r0
 80121c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121c4:	daf1      	bge.n	80121aa <uxr_seq_num_cmp+0x6>
 80121c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121ca:	4770      	bx	lr
 80121cc:	2000      	movs	r0, #0
 80121ce:	4770      	bx	lr
 80121d0:	2001      	movs	r0, #1
 80121d2:	4770      	bx	lr

080121d4 <uxr_init_framing_io>:
 80121d4:	2300      	movs	r3, #0
 80121d6:	7041      	strb	r1, [r0, #1]
 80121d8:	7003      	strb	r3, [r0, #0]
 80121da:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <uxr_write_framed_msg>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	4617      	mov	r7, r2
 80121e6:	7842      	ldrb	r2, [r0, #1]
 80121e8:	b083      	sub	sp, #12
 80121ea:	460e      	mov	r6, r1
 80121ec:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80121f0:	469a      	mov	sl, r3
 80121f2:	2901      	cmp	r1, #1
 80121f4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80121f8:	4604      	mov	r4, r0
 80121fa:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80121fe:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012202:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012206:	f240 8137 	bls.w	8012478 <uxr_write_framed_msg+0x298>
 801220a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801220e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012212:	2901      	cmp	r1, #1
 8012214:	f04f 0202 	mov.w	r2, #2
 8012218:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801221c:	f240 808f 	bls.w	801233e <uxr_write_framed_msg+0x15e>
 8012220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012222:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8012226:	b2dd      	uxtb	r5, r3
 8012228:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801222c:	2203      	movs	r2, #3
 801222e:	2901      	cmp	r1, #1
 8012230:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012234:	f240 809a 	bls.w	801236c <uxr_write_framed_msg+0x18c>
 8012238:	18a1      	adds	r1, r4, r2
 801223a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801223c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012240:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012244:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012248:	3201      	adds	r2, #1
 801224a:	2801      	cmp	r0, #1
 801224c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012250:	f240 80a0 	bls.w	8012394 <uxr_write_framed_msg+0x1b4>
 8012254:	18a0      	adds	r0, r4, r2
 8012256:	3201      	adds	r2, #1
 8012258:	b2d2      	uxtb	r2, r2
 801225a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801225e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012262:	2b00      	cmp	r3, #0
 8012264:	f000 80a9 	beq.w	80123ba <uxr_write_framed_msg+0x1da>
 8012268:	f04f 0900 	mov.w	r9, #0
 801226c:	46c8      	mov	r8, r9
 801226e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012272:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012276:	2901      	cmp	r1, #1
 8012278:	f240 80c3 	bls.w	8012402 <uxr_write_framed_msg+0x222>
 801227c:	2a29      	cmp	r2, #41	@ 0x29
 801227e:	f200 809f 	bhi.w	80123c0 <uxr_write_framed_msg+0x1e0>
 8012282:	18a1      	adds	r1, r4, r2
 8012284:	3201      	adds	r2, #1
 8012286:	b2d2      	uxtb	r2, r2
 8012288:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801228c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012290:	ea89 0303 	eor.w	r3, r9, r3
 8012294:	498c      	ldr	r1, [pc, #560]	@ (80124c8 <uxr_write_framed_msg+0x2e8>)
 8012296:	b2db      	uxtb	r3, r3
 8012298:	f108 0801 	add.w	r8, r8, #1
 801229c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80122a0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80122a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122a6:	4543      	cmp	r3, r8
 80122a8:	d8e1      	bhi.n	801226e <uxr_write_framed_msg+0x8e>
 80122aa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80122ae:	fa5f f889 	uxtb.w	r8, r9
 80122b2:	9301      	str	r3, [sp, #4]
 80122b4:	f04f 0900 	mov.w	r9, #0
 80122b8:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80122bc:	fa5f f18a 	uxtb.w	r1, sl
 80122c0:	2901      	cmp	r1, #1
 80122c2:	d921      	bls.n	8012308 <uxr_write_framed_msg+0x128>
 80122c4:	2a29      	cmp	r2, #41	@ 0x29
 80122c6:	f240 80af 	bls.w	8012428 <uxr_write_framed_msg+0x248>
 80122ca:	2500      	movs	r5, #0
 80122cc:	e000      	b.n	80122d0 <uxr_write_framed_msg+0xf0>
 80122ce:	b160      	cbz	r0, 80122ea <uxr_write_framed_msg+0x10a>
 80122d0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80122d4:	1b52      	subs	r2, r2, r5
 80122d6:	465b      	mov	r3, fp
 80122d8:	4421      	add	r1, r4
 80122da:	4638      	mov	r0, r7
 80122dc:	47b0      	blx	r6
 80122de:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80122e2:	4405      	add	r5, r0
 80122e4:	4295      	cmp	r5, r2
 80122e6:	d3f2      	bcc.n	80122ce <uxr_write_framed_msg+0xee>
 80122e8:	d003      	beq.n	80122f2 <uxr_write_framed_msg+0x112>
 80122ea:	2000      	movs	r0, #0
 80122ec:	b003      	add	sp, #12
 80122ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f2:	fa5f f18a 	uxtb.w	r1, sl
 80122f6:	f04f 0300 	mov.w	r3, #0
 80122fa:	2901      	cmp	r1, #1
 80122fc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012300:	f04f 0200 	mov.w	r2, #0
 8012304:	f200 8090 	bhi.w	8012428 <uxr_write_framed_msg+0x248>
 8012308:	1c51      	adds	r1, r2, #1
 801230a:	b2c9      	uxtb	r1, r1
 801230c:	2929      	cmp	r1, #41	@ 0x29
 801230e:	d8dc      	bhi.n	80122ca <uxr_write_framed_msg+0xea>
 8012310:	18a5      	adds	r5, r4, r2
 8012312:	4421      	add	r1, r4
 8012314:	3202      	adds	r2, #2
 8012316:	f088 0820 	eor.w	r8, r8, #32
 801231a:	4648      	mov	r0, r9
 801231c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8012320:	b2d2      	uxtb	r2, r2
 8012322:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8012326:	f04f 0901 	mov.w	r9, #1
 801232a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801232e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012332:	2800      	cmp	r0, #0
 8012334:	f040 8085 	bne.w	8012442 <uxr_write_framed_msg+0x262>
 8012338:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801233c:	e7bc      	b.n	80122b8 <uxr_write_framed_msg+0xd8>
 801233e:	4611      	mov	r1, r2
 8012340:	f04f 0c03 	mov.w	ip, #3
 8012344:	2204      	movs	r2, #4
 8012346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012348:	4421      	add	r1, r4
 801234a:	b2dd      	uxtb	r5, r3
 801234c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8012350:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012354:	44a4      	add	ip, r4
 8012356:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801235a:	f080 0020 	eor.w	r0, r0, #32
 801235e:	2901      	cmp	r1, #1
 8012360:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012364:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012368:	f63f af66 	bhi.w	8012238 <uxr_write_framed_msg+0x58>
 801236c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801236e:	18a0      	adds	r0, r4, r2
 8012370:	f085 0520 	eor.w	r5, r5, #32
 8012374:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012378:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801237c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012380:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012384:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012388:	3202      	adds	r2, #2
 801238a:	2801      	cmp	r0, #1
 801238c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012390:	f63f af60 	bhi.w	8012254 <uxr_write_framed_msg+0x74>
 8012394:	1c50      	adds	r0, r2, #1
 8012396:	18a5      	adds	r5, r4, r2
 8012398:	fa54 f080 	uxtab	r0, r4, r0
 801239c:	3202      	adds	r2, #2
 801239e:	f081 0120 	eor.w	r1, r1, #32
 80123a2:	b2d2      	uxtb	r2, r2
 80123a4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80123a8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80123ac:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80123b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f47f af57 	bne.w	8012268 <uxr_write_framed_msg+0x88>
 80123ba:	9301      	str	r3, [sp, #4]
 80123bc:	4698      	mov	r8, r3
 80123be:	e779      	b.n	80122b4 <uxr_write_framed_msg+0xd4>
 80123c0:	2500      	movs	r5, #0
 80123c2:	e001      	b.n	80123c8 <uxr_write_framed_msg+0x1e8>
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d090      	beq.n	80122ea <uxr_write_framed_msg+0x10a>
 80123c8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80123cc:	1b52      	subs	r2, r2, r5
 80123ce:	465b      	mov	r3, fp
 80123d0:	4421      	add	r1, r4
 80123d2:	4638      	mov	r0, r7
 80123d4:	47b0      	blx	r6
 80123d6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80123da:	4405      	add	r5, r0
 80123dc:	4295      	cmp	r5, r2
 80123de:	d3f1      	bcc.n	80123c4 <uxr_write_framed_msg+0x1e4>
 80123e0:	d183      	bne.n	80122ea <uxr_write_framed_msg+0x10a>
 80123e2:	f04f 0300 	mov.w	r3, #0
 80123e6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80123ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123ec:	4543      	cmp	r3, r8
 80123ee:	d964      	bls.n	80124ba <uxr_write_framed_msg+0x2da>
 80123f0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80123f4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80123f8:	2901      	cmp	r1, #1
 80123fa:	f04f 0200 	mov.w	r2, #0
 80123fe:	f63f af3d 	bhi.w	801227c <uxr_write_framed_msg+0x9c>
 8012402:	1c51      	adds	r1, r2, #1
 8012404:	b2c9      	uxtb	r1, r1
 8012406:	2929      	cmp	r1, #41	@ 0x29
 8012408:	d8da      	bhi.n	80123c0 <uxr_write_framed_msg+0x1e0>
 801240a:	18a0      	adds	r0, r4, r2
 801240c:	4421      	add	r1, r4
 801240e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012412:	3202      	adds	r2, #2
 8012414:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012418:	b2d2      	uxtb	r2, r2
 801241a:	f083 0020 	eor.w	r0, r3, #32
 801241e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012422:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012426:	e733      	b.n	8012290 <uxr_write_framed_msg+0xb0>
 8012428:	18a1      	adds	r1, r4, r2
 801242a:	3201      	adds	r2, #1
 801242c:	4648      	mov	r0, r9
 801242e:	b2d2      	uxtb	r2, r2
 8012430:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012434:	f04f 0901 	mov.w	r9, #1
 8012438:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801243c:	2800      	cmp	r0, #0
 801243e:	f43f af7b 	beq.w	8012338 <uxr_write_framed_msg+0x158>
 8012442:	2500      	movs	r5, #0
 8012444:	e002      	b.n	801244c <uxr_write_framed_msg+0x26c>
 8012446:	2800      	cmp	r0, #0
 8012448:	f43f af4f 	beq.w	80122ea <uxr_write_framed_msg+0x10a>
 801244c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012450:	1b52      	subs	r2, r2, r5
 8012452:	465b      	mov	r3, fp
 8012454:	4421      	add	r1, r4
 8012456:	4638      	mov	r0, r7
 8012458:	47b0      	blx	r6
 801245a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801245e:	4405      	add	r5, r0
 8012460:	4295      	cmp	r5, r2
 8012462:	d3f0      	bcc.n	8012446 <uxr_write_framed_msg+0x266>
 8012464:	f47f af41 	bne.w	80122ea <uxr_write_framed_msg+0x10a>
 8012468:	2300      	movs	r3, #0
 801246a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801246e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012470:	b298      	uxth	r0, r3
 8012472:	b003      	add	sp, #12
 8012474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012478:	217d      	movs	r1, #125	@ 0x7d
 801247a:	f082 0220 	eor.w	r2, r2, #32
 801247e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012482:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012486:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801248a:	2901      	cmp	r1, #1
 801248c:	f04f 0203 	mov.w	r2, #3
 8012490:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012494:	d804      	bhi.n	80124a0 <uxr_write_framed_msg+0x2c0>
 8012496:	4611      	mov	r1, r2
 8012498:	f04f 0c04 	mov.w	ip, #4
 801249c:	2205      	movs	r2, #5
 801249e:	e752      	b.n	8012346 <uxr_write_framed_msg+0x166>
 80124a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124a2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80124a6:	b2dd      	uxtb	r5, r3
 80124a8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80124ac:	2204      	movs	r2, #4
 80124ae:	2901      	cmp	r1, #1
 80124b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80124b4:	f63f aec0 	bhi.w	8012238 <uxr_write_framed_msg+0x58>
 80124b8:	e758      	b.n	801236c <uxr_write_framed_msg+0x18c>
 80124ba:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80124be:	fa5f f889 	uxtb.w	r8, r9
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	e6f5      	b.n	80122b4 <uxr_write_framed_msg+0xd4>
 80124c8:	080153c4 	.word	0x080153c4

080124cc <uxr_framing_read_transport>:
 80124cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d0:	4604      	mov	r4, r0
 80124d2:	b083      	sub	sp, #12
 80124d4:	461f      	mov	r7, r3
 80124d6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80124da:	4689      	mov	r9, r1
 80124dc:	4692      	mov	sl, r2
 80124de:	f7f9 f9e9 	bl	800b8b4 <uxr_millis>
 80124e2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80124e6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80124ea:	42b3      	cmp	r3, r6
 80124ec:	4680      	mov	r8, r0
 80124ee:	d061      	beq.n	80125b4 <uxr_framing_read_transport+0xe8>
 80124f0:	d81c      	bhi.n	801252c <uxr_framing_read_transport+0x60>
 80124f2:	1e75      	subs	r5, r6, #1
 80124f4:	1aed      	subs	r5, r5, r3
 80124f6:	b2ed      	uxtb	r5, r5
 80124f8:	2600      	movs	r6, #0
 80124fa:	455d      	cmp	r5, fp
 80124fc:	d81f      	bhi.n	801253e <uxr_framing_read_transport+0x72>
 80124fe:	19ab      	adds	r3, r5, r6
 8012500:	455b      	cmp	r3, fp
 8012502:	bf84      	itt	hi
 8012504:	ebab 0605 	subhi.w	r6, fp, r5
 8012508:	b2f6      	uxtbhi	r6, r6
 801250a:	b9ed      	cbnz	r5, 8012548 <uxr_framing_read_transport+0x7c>
 801250c:	f04f 0b00 	mov.w	fp, #0
 8012510:	f7f9 f9d0 	bl	800b8b4 <uxr_millis>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	eba0 0808 	sub.w	r8, r0, r8
 801251a:	eba3 0308 	sub.w	r3, r3, r8
 801251e:	4658      	mov	r0, fp
 8012520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012524:	603b      	str	r3, [r7, #0]
 8012526:	b003      	add	sp, #12
 8012528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252c:	2e00      	cmp	r6, #0
 801252e:	d049      	beq.n	80125c4 <uxr_framing_read_transport+0xf8>
 8012530:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012534:	b2ed      	uxtb	r5, r5
 8012536:	3e01      	subs	r6, #1
 8012538:	455d      	cmp	r5, fp
 801253a:	b2f6      	uxtb	r6, r6
 801253c:	d9df      	bls.n	80124fe <uxr_framing_read_transport+0x32>
 801253e:	fa5f f58b 	uxtb.w	r5, fp
 8012542:	2600      	movs	r6, #0
 8012544:	2d00      	cmp	r5, #0
 8012546:	d0e1      	beq.n	801250c <uxr_framing_read_transport+0x40>
 8012548:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801254c:	3102      	adds	r1, #2
 801254e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	4421      	add	r1, r4
 8012556:	462a      	mov	r2, r5
 8012558:	4650      	mov	r0, sl
 801255a:	47c8      	blx	r9
 801255c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012560:	4a1a      	ldr	r2, [pc, #104]	@ (80125cc <uxr_framing_read_transport+0x100>)
 8012562:	4403      	add	r3, r0
 8012564:	0859      	lsrs	r1, r3, #1
 8012566:	fba2 2101 	umull	r2, r1, r2, r1
 801256a:	0889      	lsrs	r1, r1, #2
 801256c:	222a      	movs	r2, #42	@ 0x2a
 801256e:	fb02 3111 	mls	r1, r2, r1, r3
 8012572:	4683      	mov	fp, r0
 8012574:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012578:	2800      	cmp	r0, #0
 801257a:	d0c7      	beq.n	801250c <uxr_framing_read_transport+0x40>
 801257c:	42a8      	cmp	r0, r5
 801257e:	d1c7      	bne.n	8012510 <uxr_framing_read_transport+0x44>
 8012580:	2e00      	cmp	r6, #0
 8012582:	d0c5      	beq.n	8012510 <uxr_framing_read_transport+0x44>
 8012584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	3102      	adds	r1, #2
 801258a:	4632      	mov	r2, r6
 801258c:	4421      	add	r1, r4
 801258e:	2300      	movs	r3, #0
 8012590:	4650      	mov	r0, sl
 8012592:	47c8      	blx	r9
 8012594:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012598:	4a0c      	ldr	r2, [pc, #48]	@ (80125cc <uxr_framing_read_transport+0x100>)
 801259a:	180b      	adds	r3, r1, r0
 801259c:	0859      	lsrs	r1, r3, #1
 801259e:	fba2 1201 	umull	r1, r2, r2, r1
 80125a2:	0892      	lsrs	r2, r2, #2
 80125a4:	212a      	movs	r1, #42	@ 0x2a
 80125a6:	fb01 3312 	mls	r3, r1, r2, r3
 80125aa:	eb00 0b05 	add.w	fp, r0, r5
 80125ae:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80125b2:	e7ad      	b.n	8012510 <uxr_framing_read_transport+0x44>
 80125b4:	2600      	movs	r6, #0
 80125b6:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80125ba:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80125bc:	d9bf      	bls.n	801253e <uxr_framing_read_transport+0x72>
 80125be:	2102      	movs	r1, #2
 80125c0:	2529      	movs	r5, #41	@ 0x29
 80125c2:	e7c4      	b.n	801254e <uxr_framing_read_transport+0x82>
 80125c4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80125c8:	b2ed      	uxtb	r5, r5
 80125ca:	e796      	b.n	80124fa <uxr_framing_read_transport+0x2e>
 80125cc:	30c30c31 	.word	0x30c30c31

080125d0 <uxr_read_framed_msg>:
 80125d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	461e      	mov	r6, r3
 80125d6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80125da:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80125de:	429d      	cmp	r5, r3
 80125e0:	b083      	sub	sp, #12
 80125e2:	4604      	mov	r4, r0
 80125e4:	4688      	mov	r8, r1
 80125e6:	4691      	mov	r9, r2
 80125e8:	f000 8188 	beq.w	80128fc <uxr_read_framed_msg+0x32c>
 80125ec:	7823      	ldrb	r3, [r4, #0]
 80125ee:	4dc1      	ldr	r5, [pc, #772]	@ (80128f4 <uxr_read_framed_msg+0x324>)
 80125f0:	4fc1      	ldr	r7, [pc, #772]	@ (80128f8 <uxr_read_framed_msg+0x328>)
 80125f2:	2b07      	cmp	r3, #7
 80125f4:	d8fd      	bhi.n	80125f2 <uxr_read_framed_msg+0x22>
 80125f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80125fa:	0115      	.short	0x0115
 80125fc:	00d600f6 	.word	0x00d600f6
 8012600:	009000b9 	.word	0x009000b9
 8012604:	0030004d 	.word	0x0030004d
 8012608:	0008      	.short	0x0008
 801260a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801260e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012612:	4299      	cmp	r1, r3
 8012614:	f000 814a 	beq.w	80128ac <uxr_read_framed_msg+0x2dc>
 8012618:	18e2      	adds	r2, r4, r3
 801261a:	7892      	ldrb	r2, [r2, #2]
 801261c:	2a7d      	cmp	r2, #125	@ 0x7d
 801261e:	f000 8199 	beq.w	8012954 <uxr_read_framed_msg+0x384>
 8012622:	3301      	adds	r3, #1
 8012624:	0858      	lsrs	r0, r3, #1
 8012626:	fba5 1000 	umull	r1, r0, r5, r0
 801262a:	0880      	lsrs	r0, r0, #2
 801262c:	212a      	movs	r1, #42	@ 0x2a
 801262e:	fb01 3310 	mls	r3, r1, r0, r3
 8012632:	2a7e      	cmp	r2, #126	@ 0x7e
 8012634:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012638:	f000 8252 	beq.w	8012ae0 <uxr_read_framed_msg+0x510>
 801263c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801263e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012640:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012644:	b29b      	uxth	r3, r3
 8012646:	2200      	movs	r2, #0
 8012648:	4299      	cmp	r1, r3
 801264a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801264c:	7022      	strb	r2, [r4, #0]
 801264e:	f000 8179 	beq.w	8012944 <uxr_read_framed_msg+0x374>
 8012652:	2000      	movs	r0, #0
 8012654:	b003      	add	sp, #12
 8012656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801265a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801265e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012662:	4299      	cmp	r1, r3
 8012664:	f000 8131 	beq.w	80128ca <uxr_read_framed_msg+0x2fa>
 8012668:	18e2      	adds	r2, r4, r3
 801266a:	7890      	ldrb	r0, [r2, #2]
 801266c:	287d      	cmp	r0, #125	@ 0x7d
 801266e:	f000 8190 	beq.w	8012992 <uxr_read_framed_msg+0x3c2>
 8012672:	3301      	adds	r3, #1
 8012674:	085a      	lsrs	r2, r3, #1
 8012676:	fba5 1202 	umull	r1, r2, r5, r2
 801267a:	0892      	lsrs	r2, r2, #2
 801267c:	212a      	movs	r1, #42	@ 0x2a
 801267e:	fb01 3312 	mls	r3, r1, r2, r3
 8012682:	287e      	cmp	r0, #126	@ 0x7e
 8012684:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012688:	f000 821a 	beq.w	8012ac0 <uxr_read_framed_msg+0x4f0>
 801268c:	2307      	movs	r3, #7
 801268e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012690:	7023      	strb	r3, [r4, #0]
 8012692:	e7ae      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 8012694:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012696:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801269a:	459e      	cmp	lr, r3
 801269c:	d938      	bls.n	8012710 <uxr_read_framed_msg+0x140>
 801269e:	ee07 8a90 	vmov	s15, r8
 80126a2:	212a      	movs	r1, #42	@ 0x2a
 80126a4:	e020      	b.n	80126e8 <uxr_read_framed_msg+0x118>
 80126a6:	f89b c002 	ldrb.w	ip, [fp, #2]
 80126aa:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80126ae:	f000 80d4 	beq.w	801285a <uxr_read_framed_msg+0x28a>
 80126b2:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80126b6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80126ba:	f000 8219 	beq.w	8012af0 <uxr_read_framed_msg+0x520>
 80126be:	f806 c003 	strb.w	ip, [r6, r3]
 80126c2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80126c6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80126c8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80126cc:	ea8a 000c 	eor.w	r0, sl, ip
 80126d0:	b2c0      	uxtb	r0, r0
 80126d2:	3301      	adds	r3, #1
 80126d4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80126d8:	b29b      	uxth	r3, r3
 80126da:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80126de:	4573      	cmp	r3, lr
 80126e0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80126e2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80126e4:	f080 8120 	bcs.w	8012928 <uxr_read_framed_msg+0x358>
 80126e8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80126ec:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80126f0:	f100 0c01 	add.w	ip, r0, #1
 80126f4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80126f8:	fba5 8202 	umull	r8, r2, r5, r2
 80126fc:	0892      	lsrs	r2, r2, #2
 80126fe:	4582      	cmp	sl, r0
 8012700:	eb04 0b00 	add.w	fp, r4, r0
 8012704:	fb01 c212 	mls	r2, r1, r2, ip
 8012708:	d1cd      	bne.n	80126a6 <uxr_read_framed_msg+0xd6>
 801270a:	ee17 8a90 	vmov	r8, s15
 801270e:	459e      	cmp	lr, r3
 8012710:	f040 8111 	bne.w	8012936 <uxr_read_framed_msg+0x366>
 8012714:	2306      	movs	r3, #6
 8012716:	7023      	strb	r3, [r4, #0]
 8012718:	e76b      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 801271a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801271e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012722:	4298      	cmp	r0, r3
 8012724:	f000 80c2 	beq.w	80128ac <uxr_read_framed_msg+0x2dc>
 8012728:	18e2      	adds	r2, r4, r3
 801272a:	7891      	ldrb	r1, [r2, #2]
 801272c:	297d      	cmp	r1, #125	@ 0x7d
 801272e:	f000 814c 	beq.w	80129ca <uxr_read_framed_msg+0x3fa>
 8012732:	3301      	adds	r3, #1
 8012734:	085a      	lsrs	r2, r3, #1
 8012736:	fba5 0202 	umull	r0, r2, r5, r2
 801273a:	0892      	lsrs	r2, r2, #2
 801273c:	202a      	movs	r0, #42	@ 0x2a
 801273e:	fb00 3312 	mls	r3, r0, r2, r3
 8012742:	297e      	cmp	r1, #126	@ 0x7e
 8012744:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012748:	f000 81ca 	beq.w	8012ae0 <uxr_read_framed_msg+0x510>
 801274c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801274e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012752:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012754:	b29b      	uxth	r3, r3
 8012756:	2000      	movs	r0, #0
 8012758:	428b      	cmp	r3, r1
 801275a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801275c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801275e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012760:	f240 80df 	bls.w	8012922 <uxr_read_framed_msg+0x352>
 8012764:	7020      	strb	r0, [r4, #0]
 8012766:	b003      	add	sp, #12
 8012768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012770:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012774:	4299      	cmp	r1, r3
 8012776:	f000 80a8 	beq.w	80128ca <uxr_read_framed_msg+0x2fa>
 801277a:	18e2      	adds	r2, r4, r3
 801277c:	7890      	ldrb	r0, [r2, #2]
 801277e:	287d      	cmp	r0, #125	@ 0x7d
 8012780:	f000 8164 	beq.w	8012a4c <uxr_read_framed_msg+0x47c>
 8012784:	3301      	adds	r3, #1
 8012786:	085a      	lsrs	r2, r3, #1
 8012788:	fba5 1202 	umull	r1, r2, r5, r2
 801278c:	0892      	lsrs	r2, r2, #2
 801278e:	212a      	movs	r1, #42	@ 0x2a
 8012790:	fb01 3312 	mls	r3, r1, r2, r3
 8012794:	287e      	cmp	r0, #126	@ 0x7e
 8012796:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801279a:	f000 8191 	beq.w	8012ac0 <uxr_read_framed_msg+0x4f0>
 801279e:	2304      	movs	r3, #4
 80127a0:	8620      	strh	r0, [r4, #48]	@ 0x30
 80127a2:	7023      	strb	r3, [r4, #0]
 80127a4:	e725      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 80127a6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80127aa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80127ae:	4290      	cmp	r0, r2
 80127b0:	f000 80b3 	beq.w	801291a <uxr_read_framed_msg+0x34a>
 80127b4:	18a3      	adds	r3, r4, r2
 80127b6:	7899      	ldrb	r1, [r3, #2]
 80127b8:	297d      	cmp	r1, #125	@ 0x7d
 80127ba:	f000 8164 	beq.w	8012a86 <uxr_read_framed_msg+0x4b6>
 80127be:	3201      	adds	r2, #1
 80127c0:	0850      	lsrs	r0, r2, #1
 80127c2:	fba5 3000 	umull	r3, r0, r5, r0
 80127c6:	0880      	lsrs	r0, r0, #2
 80127c8:	232a      	movs	r3, #42	@ 0x2a
 80127ca:	fb03 2210 	mls	r2, r3, r0, r2
 80127ce:	297e      	cmp	r1, #126	@ 0x7e
 80127d0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80127d4:	f000 8188 	beq.w	8012ae8 <uxr_read_framed_msg+0x518>
 80127d8:	7863      	ldrb	r3, [r4, #1]
 80127da:	428b      	cmp	r3, r1
 80127dc:	bf0c      	ite	eq
 80127de:	2303      	moveq	r3, #3
 80127e0:	2300      	movne	r3, #0
 80127e2:	7023      	strb	r3, [r4, #0]
 80127e4:	e705      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 80127e6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80127ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80127ee:	2200      	movs	r2, #0
 80127f0:	4299      	cmp	r1, r3
 80127f2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80127f6:	d06c      	beq.n	80128d2 <uxr_read_framed_msg+0x302>
 80127f8:	18e2      	adds	r2, r4, r3
 80127fa:	7890      	ldrb	r0, [r2, #2]
 80127fc:	287d      	cmp	r0, #125	@ 0x7d
 80127fe:	f000 8101 	beq.w	8012a04 <uxr_read_framed_msg+0x434>
 8012802:	3301      	adds	r3, #1
 8012804:	085a      	lsrs	r2, r3, #1
 8012806:	fba5 1202 	umull	r1, r2, r5, r2
 801280a:	0892      	lsrs	r2, r2, #2
 801280c:	212a      	movs	r1, #42	@ 0x2a
 801280e:	fb01 3312 	mls	r3, r1, r2, r3
 8012812:	287e      	cmp	r0, #126	@ 0x7e
 8012814:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012818:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801281c:	d059      	beq.n	80128d2 <uxr_read_framed_msg+0x302>
 801281e:	2302      	movs	r3, #2
 8012820:	7023      	strb	r3, [r4, #0]
 8012822:	e6e6      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 8012824:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012828:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801282c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012830:	1c51      	adds	r1, r2, #1
 8012832:	084b      	lsrs	r3, r1, #1
 8012834:	fba5 c303 	umull	ip, r3, r5, r3
 8012838:	089b      	lsrs	r3, r3, #2
 801283a:	fb0e 1313 	mls	r3, lr, r3, r1
 801283e:	4592      	cmp	sl, r2
 8012840:	eb04 0002 	add.w	r0, r4, r2
 8012844:	b2da      	uxtb	r2, r3
 8012846:	f43f af04 	beq.w	8012652 <uxr_read_framed_msg+0x82>
 801284a:	7883      	ldrb	r3, [r0, #2]
 801284c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012850:	2b7e      	cmp	r3, #126	@ 0x7e
 8012852:	d1ed      	bne.n	8012830 <uxr_read_framed_msg+0x260>
 8012854:	2301      	movs	r3, #1
 8012856:	7023      	strb	r3, [r4, #0]
 8012858:	e6cb      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 801285a:	f100 0c01 	add.w	ip, r0, #1
 801285e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012862:	fba5 8202 	umull	r8, r2, r5, r2
 8012866:	0892      	lsrs	r2, r2, #2
 8012868:	fb01 c212 	mls	r2, r1, r2, ip
 801286c:	eb04 0c02 	add.w	ip, r4, r2
 8012870:	b2d2      	uxtb	r2, r2
 8012872:	4592      	cmp	sl, r2
 8012874:	f100 0002 	add.w	r0, r0, #2
 8012878:	f43f af47 	beq.w	801270a <uxr_read_framed_msg+0x13a>
 801287c:	0842      	lsrs	r2, r0, #1
 801287e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012882:	fba5 8202 	umull	r8, r2, r5, r2
 8012886:	0892      	lsrs	r2, r2, #2
 8012888:	fb01 0012 	mls	r0, r1, r2, r0
 801288c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012890:	f08a 0c20 	eor.w	ip, sl, #32
 8012894:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012898:	f47f af11 	bne.w	80126be <uxr_read_framed_msg+0xee>
 801289c:	459e      	cmp	lr, r3
 801289e:	ee17 8a90 	vmov	r8, s15
 80128a2:	f43f af37 	beq.w	8012714 <uxr_read_framed_msg+0x144>
 80128a6:	2301      	movs	r3, #1
 80128a8:	7023      	strb	r3, [r4, #0]
 80128aa:	e6a2      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 80128ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	2301      	movs	r3, #1
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128b6:	464a      	mov	r2, r9
 80128b8:	4641      	mov	r1, r8
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7ff fe06 	bl	80124cc <uxr_framing_read_transport>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	f43f aec6 	beq.w	8012652 <uxr_read_framed_msg+0x82>
 80128c6:	7823      	ldrb	r3, [r4, #0]
 80128c8:	e693      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 80128ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	2302      	movs	r3, #2
 80128d0:	e7ef      	b.n	80128b2 <uxr_read_framed_msg+0x2e2>
 80128d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128d4:	9300      	str	r3, [sp, #0]
 80128d6:	2304      	movs	r3, #4
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	464a      	mov	r2, r9
 80128dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128de:	4641      	mov	r1, r8
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7ff fdf3 	bl	80124cc <uxr_framing_read_transport>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d1ed      	bne.n	80128c6 <uxr_read_framed_msg+0x2f6>
 80128ea:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80128ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80128f0:	d0e9      	beq.n	80128c6 <uxr_read_framed_msg+0x2f6>
 80128f2:	e6ae      	b.n	8012652 <uxr_read_framed_msg+0x82>
 80128f4:	30c30c31 	.word	0x30c30c31
 80128f8:	080153c4 	.word	0x080153c4
 80128fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	2305      	movs	r3, #5
 8012902:	9301      	str	r3, [sp, #4]
 8012904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012906:	f7ff fde1 	bl	80124cc <uxr_framing_read_transport>
 801290a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801290e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012912:	429a      	cmp	r2, r3
 8012914:	f43f ae9d 	beq.w	8012652 <uxr_read_framed_msg+0x82>
 8012918:	e668      	b.n	80125ec <uxr_read_framed_msg+0x1c>
 801291a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	2303      	movs	r3, #3
 8012920:	e7c7      	b.n	80128b2 <uxr_read_framed_msg+0x2e2>
 8012922:	2305      	movs	r3, #5
 8012924:	7023      	strb	r3, [r4, #0]
 8012926:	e664      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 8012928:	ee17 8a90 	vmov	r8, s15
 801292c:	f43f aef2 	beq.w	8012714 <uxr_read_framed_msg+0x144>
 8012930:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012934:	d08e      	beq.n	8012854 <uxr_read_framed_msg+0x284>
 8012936:	ebae 0303 	sub.w	r3, lr, r3
 801293a:	3302      	adds	r3, #2
 801293c:	9301      	str	r3, [sp, #4]
 801293e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	e7b7      	b.n	80128b4 <uxr_read_framed_msg+0x2e4>
 8012944:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012946:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801294a:	7013      	strb	r3, [r2, #0]
 801294c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801294e:	b003      	add	sp, #12
 8012950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012954:	f103 0c01 	add.w	ip, r3, #1
 8012958:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801295c:	fba5 0202 	umull	r0, r2, r5, r2
 8012960:	0892      	lsrs	r2, r2, #2
 8012962:	202a      	movs	r0, #42	@ 0x2a
 8012964:	fb00 c212 	mls	r2, r0, r2, ip
 8012968:	fa5f fc82 	uxtb.w	ip, r2
 801296c:	4561      	cmp	r1, ip
 801296e:	d09d      	beq.n	80128ac <uxr_read_framed_msg+0x2dc>
 8012970:	3302      	adds	r3, #2
 8012972:	4422      	add	r2, r4
 8012974:	0859      	lsrs	r1, r3, #1
 8012976:	7892      	ldrb	r2, [r2, #2]
 8012978:	fba5 c101 	umull	ip, r1, r5, r1
 801297c:	0889      	lsrs	r1, r1, #2
 801297e:	fb00 3311 	mls	r3, r0, r1, r3
 8012982:	2a7e      	cmp	r2, #126	@ 0x7e
 8012984:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012988:	f000 80aa 	beq.w	8012ae0 <uxr_read_framed_msg+0x510>
 801298c:	f082 0220 	eor.w	r2, r2, #32
 8012990:	e654      	b.n	801263c <uxr_read_framed_msg+0x6c>
 8012992:	1c58      	adds	r0, r3, #1
 8012994:	0842      	lsrs	r2, r0, #1
 8012996:	fba5 c202 	umull	ip, r2, r5, r2
 801299a:	0892      	lsrs	r2, r2, #2
 801299c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80129a0:	fb0c 0212 	mls	r2, ip, r2, r0
 80129a4:	b2d0      	uxtb	r0, r2
 80129a6:	4281      	cmp	r1, r0
 80129a8:	d08f      	beq.n	80128ca <uxr_read_framed_msg+0x2fa>
 80129aa:	4422      	add	r2, r4
 80129ac:	3302      	adds	r3, #2
 80129ae:	7890      	ldrb	r0, [r2, #2]
 80129b0:	085a      	lsrs	r2, r3, #1
 80129b2:	fba5 1202 	umull	r1, r2, r5, r2
 80129b6:	0892      	lsrs	r2, r2, #2
 80129b8:	fb0c 3312 	mls	r3, ip, r2, r3
 80129bc:	287e      	cmp	r0, #126	@ 0x7e
 80129be:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129c2:	d07d      	beq.n	8012ac0 <uxr_read_framed_msg+0x4f0>
 80129c4:	f080 0020 	eor.w	r0, r0, #32
 80129c8:	e660      	b.n	801268c <uxr_read_framed_msg+0xbc>
 80129ca:	1c59      	adds	r1, r3, #1
 80129cc:	084a      	lsrs	r2, r1, #1
 80129ce:	fba5 c202 	umull	ip, r2, r5, r2
 80129d2:	0892      	lsrs	r2, r2, #2
 80129d4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80129d8:	fb0c 1212 	mls	r2, ip, r2, r1
 80129dc:	b2d1      	uxtb	r1, r2
 80129de:	4288      	cmp	r0, r1
 80129e0:	f43f af64 	beq.w	80128ac <uxr_read_framed_msg+0x2dc>
 80129e4:	4422      	add	r2, r4
 80129e6:	3302      	adds	r3, #2
 80129e8:	7891      	ldrb	r1, [r2, #2]
 80129ea:	085a      	lsrs	r2, r3, #1
 80129ec:	fba5 0202 	umull	r0, r2, r5, r2
 80129f0:	0892      	lsrs	r2, r2, #2
 80129f2:	fb0c 3312 	mls	r3, ip, r2, r3
 80129f6:	297e      	cmp	r1, #126	@ 0x7e
 80129f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129fc:	d070      	beq.n	8012ae0 <uxr_read_framed_msg+0x510>
 80129fe:	f081 0120 	eor.w	r1, r1, #32
 8012a02:	e6a3      	b.n	801274c <uxr_read_framed_msg+0x17c>
 8012a04:	f103 0c01 	add.w	ip, r3, #1
 8012a08:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012a0c:	fba5 0202 	umull	r0, r2, r5, r2
 8012a10:	0892      	lsrs	r2, r2, #2
 8012a12:	202a      	movs	r0, #42	@ 0x2a
 8012a14:	fb00 c212 	mls	r2, r0, r2, ip
 8012a18:	fa5f fc82 	uxtb.w	ip, r2
 8012a1c:	4561      	cmp	r1, ip
 8012a1e:	f43f af58 	beq.w	80128d2 <uxr_read_framed_msg+0x302>
 8012a22:	4422      	add	r2, r4
 8012a24:	3302      	adds	r3, #2
 8012a26:	7891      	ldrb	r1, [r2, #2]
 8012a28:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012a2c:	085a      	lsrs	r2, r3, #1
 8012a2e:	fba5 c202 	umull	ip, r2, r5, r2
 8012a32:	0892      	lsrs	r2, r2, #2
 8012a34:	fb00 3312 	mls	r3, r0, r2, r3
 8012a38:	297e      	cmp	r1, #126	@ 0x7e
 8012a3a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012a3e:	f43f af48 	beq.w	80128d2 <uxr_read_framed_msg+0x302>
 8012a42:	f081 0120 	eor.w	r1, r1, #32
 8012a46:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012a4a:	e6e8      	b.n	801281e <uxr_read_framed_msg+0x24e>
 8012a4c:	1c58      	adds	r0, r3, #1
 8012a4e:	0842      	lsrs	r2, r0, #1
 8012a50:	fba5 c202 	umull	ip, r2, r5, r2
 8012a54:	0892      	lsrs	r2, r2, #2
 8012a56:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012a5a:	fb0c 0212 	mls	r2, ip, r2, r0
 8012a5e:	b2d0      	uxtb	r0, r2
 8012a60:	4281      	cmp	r1, r0
 8012a62:	f43f af32 	beq.w	80128ca <uxr_read_framed_msg+0x2fa>
 8012a66:	4422      	add	r2, r4
 8012a68:	3302      	adds	r3, #2
 8012a6a:	7890      	ldrb	r0, [r2, #2]
 8012a6c:	085a      	lsrs	r2, r3, #1
 8012a6e:	fba5 1202 	umull	r1, r2, r5, r2
 8012a72:	0892      	lsrs	r2, r2, #2
 8012a74:	fb0c 3312 	mls	r3, ip, r2, r3
 8012a78:	287e      	cmp	r0, #126	@ 0x7e
 8012a7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012a7e:	d01f      	beq.n	8012ac0 <uxr_read_framed_msg+0x4f0>
 8012a80:	f080 0020 	eor.w	r0, r0, #32
 8012a84:	e68b      	b.n	801279e <uxr_read_framed_msg+0x1ce>
 8012a86:	1c51      	adds	r1, r2, #1
 8012a88:	084b      	lsrs	r3, r1, #1
 8012a8a:	fba5 c303 	umull	ip, r3, r5, r3
 8012a8e:	089b      	lsrs	r3, r3, #2
 8012a90:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012a94:	fb0c 1313 	mls	r3, ip, r3, r1
 8012a98:	b2d9      	uxtb	r1, r3
 8012a9a:	4288      	cmp	r0, r1
 8012a9c:	f43f af3d 	beq.w	801291a <uxr_read_framed_msg+0x34a>
 8012aa0:	3202      	adds	r2, #2
 8012aa2:	4423      	add	r3, r4
 8012aa4:	0850      	lsrs	r0, r2, #1
 8012aa6:	789b      	ldrb	r3, [r3, #2]
 8012aa8:	fba5 1000 	umull	r1, r0, r5, r0
 8012aac:	0880      	lsrs	r0, r0, #2
 8012aae:	fb0c 2210 	mls	r2, ip, r0, r2
 8012ab2:	2b7e      	cmp	r3, #126	@ 0x7e
 8012ab4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012ab8:	d016      	beq.n	8012ae8 <uxr_read_framed_msg+0x518>
 8012aba:	f083 0120 	eor.w	r1, r3, #32
 8012abe:	e68b      	b.n	80127d8 <uxr_read_framed_msg+0x208>
 8012ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	9301      	str	r3, [sp, #4]
 8012ac8:	464a      	mov	r2, r9
 8012aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012acc:	4641      	mov	r1, r8
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ff fcfc 	bl	80124cc <uxr_framing_read_transport>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f47f aef6 	bne.w	80128c6 <uxr_read_framed_msg+0x2f6>
 8012ada:	2301      	movs	r3, #1
 8012adc:	7023      	strb	r3, [r4, #0]
 8012ade:	e588      	b.n	80125f2 <uxr_read_framed_msg+0x22>
 8012ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ae2:	9300      	str	r3, [sp, #0]
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e7ee      	b.n	8012ac6 <uxr_read_framed_msg+0x4f6>
 8012ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	2303      	movs	r3, #3
 8012aee:	e7ea      	b.n	8012ac6 <uxr_read_framed_msg+0x4f6>
 8012af0:	ee17 8a90 	vmov	r8, s15
 8012af4:	e6ae      	b.n	8012854 <uxr_read_framed_msg+0x284>
 8012af6:	bf00      	nop

08012af8 <rcl_get_default_domain_id>:
 8012af8:	b530      	push	{r4, r5, lr}
 8012afa:	b083      	sub	sp, #12
 8012afc:	2300      	movs	r3, #0
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	b1d0      	cbz	r0, 8012b38 <rcl_get_default_domain_id+0x40>
 8012b02:	4604      	mov	r4, r0
 8012b04:	4669      	mov	r1, sp
 8012b06:	4815      	ldr	r0, [pc, #84]	@ (8012b5c <rcl_get_default_domain_id+0x64>)
 8012b08:	f7fc fd7e 	bl	800f608 <rcutils_get_env>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	b110      	cbz	r0, 8012b16 <rcl_get_default_domain_id+0x1e>
 8012b10:	2001      	movs	r0, #1
 8012b12:	b003      	add	sp, #12
 8012b14:	bd30      	pop	{r4, r5, pc}
 8012b16:	9b00      	ldr	r3, [sp, #0]
 8012b18:	b18b      	cbz	r3, 8012b3e <rcl_get_default_domain_id+0x46>
 8012b1a:	7818      	ldrb	r0, [r3, #0]
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	d0f8      	beq.n	8012b12 <rcl_get_default_domain_id+0x1a>
 8012b20:	a901      	add	r1, sp, #4
 8012b22:	4618      	mov	r0, r3
 8012b24:	9201      	str	r2, [sp, #4]
 8012b26:	f000 fe45 	bl	80137b4 <strtoul>
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	b150      	cbz	r0, 8012b44 <rcl_get_default_domain_id+0x4c>
 8012b2e:	1c43      	adds	r3, r0, #1
 8012b30:	d00d      	beq.n	8012b4e <rcl_get_default_domain_id+0x56>
 8012b32:	6025      	str	r5, [r4, #0]
 8012b34:	2000      	movs	r0, #0
 8012b36:	e7ec      	b.n	8012b12 <rcl_get_default_domain_id+0x1a>
 8012b38:	200b      	movs	r0, #11
 8012b3a:	b003      	add	sp, #12
 8012b3c:	bd30      	pop	{r4, r5, pc}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	b003      	add	sp, #12
 8012b42:	bd30      	pop	{r4, r5, pc}
 8012b44:	9b01      	ldr	r3, [sp, #4]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d0f2      	beq.n	8012b32 <rcl_get_default_domain_id+0x3a>
 8012b4c:	e7e0      	b.n	8012b10 <rcl_get_default_domain_id+0x18>
 8012b4e:	f001 f87d 	bl	8013c4c <__errno>
 8012b52:	6803      	ldr	r3, [r0, #0]
 8012b54:	2b22      	cmp	r3, #34	@ 0x22
 8012b56:	d1ec      	bne.n	8012b32 <rcl_get_default_domain_id+0x3a>
 8012b58:	e7da      	b.n	8012b10 <rcl_get_default_domain_id+0x18>
 8012b5a:	bf00      	nop
 8012b5c:	080155c4 	.word	0x080155c4

08012b60 <rcl_expand_topic_name>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	b08b      	sub	sp, #44	@ 0x2c
 8012b66:	9306      	str	r3, [sp, #24]
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	f000 80ad 	beq.w	8012cc8 <rcl_expand_topic_name+0x168>
 8012b6e:	460e      	mov	r6, r1
 8012b70:	2900      	cmp	r1, #0
 8012b72:	f000 80a9 	beq.w	8012cc8 <rcl_expand_topic_name+0x168>
 8012b76:	4617      	mov	r7, r2
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	f000 80a5 	beq.w	8012cc8 <rcl_expand_topic_name+0x168>
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f000 80a2 	beq.w	8012cc8 <rcl_expand_topic_name+0x168>
 8012b84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f000 809e 	beq.w	8012cc8 <rcl_expand_topic_name+0x168>
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	a909      	add	r1, sp, #36	@ 0x24
 8012b90:	4680      	mov	r8, r0
 8012b92:	f000 f9fb 	bl	8012f8c <rcl_validate_topic_name>
 8012b96:	4604      	mov	r4, r0
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	f040 8096 	bne.w	8012cca <rcl_expand_topic_name+0x16a>
 8012b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	f040 809a 	bne.w	8012cda <rcl_expand_topic_name+0x17a>
 8012ba6:	4602      	mov	r2, r0
 8012ba8:	a909      	add	r1, sp, #36	@ 0x24
 8012baa:	4630      	mov	r0, r6
 8012bac:	f7fd f96a 	bl	800fe84 <rmw_validate_node_name>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	f040 808e 	bne.w	8012cd2 <rcl_expand_topic_name+0x172>
 8012bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bb8:	2a00      	cmp	r2, #0
 8012bba:	f040 8093 	bne.w	8012ce4 <rcl_expand_topic_name+0x184>
 8012bbe:	a909      	add	r1, sp, #36	@ 0x24
 8012bc0:	4638      	mov	r0, r7
 8012bc2:	f7fd f941 	bl	800fe48 <rmw_validate_namespace>
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	f040 8083 	bne.w	8012cd2 <rcl_expand_topic_name+0x172>
 8012bcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012bce:	2c00      	cmp	r4, #0
 8012bd0:	f040 80ed 	bne.w	8012dae <rcl_expand_topic_name+0x24e>
 8012bd4:	217b      	movs	r1, #123	@ 0x7b
 8012bd6:	4640      	mov	r0, r8
 8012bd8:	f000 ffac 	bl	8013b34 <strchr>
 8012bdc:	f898 3000 	ldrb.w	r3, [r8]
 8012be0:	2b2f      	cmp	r3, #47	@ 0x2f
 8012be2:	4605      	mov	r5, r0
 8012be4:	f000 809e 	beq.w	8012d24 <rcl_expand_topic_name+0x1c4>
 8012be8:	2b7e      	cmp	r3, #126	@ 0x7e
 8012bea:	f040 80a2 	bne.w	8012d32 <rcl_expand_topic_name+0x1d2>
 8012bee:	4638      	mov	r0, r7
 8012bf0:	f7ed fb00 	bl	80001f4 <strlen>
 8012bf4:	4a82      	ldr	r2, [pc, #520]	@ (8012e00 <rcl_expand_topic_name+0x2a0>)
 8012bf6:	4b83      	ldr	r3, [pc, #524]	@ (8012e04 <rcl_expand_topic_name+0x2a4>)
 8012bf8:	2801      	cmp	r0, #1
 8012bfa:	bf18      	it	ne
 8012bfc:	4613      	movne	r3, r2
 8012bfe:	9302      	str	r3, [sp, #8]
 8012c00:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8012c08:	f108 0301 	add.w	r3, r8, #1
 8012c0c:	9305      	str	r3, [sp, #20]
 8012c0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	ab14      	add	r3, sp, #80	@ 0x50
 8012c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c18:	f7fc fd1e 	bl	800f658 <rcutils_format_string_limit>
 8012c1c:	4682      	mov	sl, r0
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	f000 80c7 	beq.w	8012db2 <rcl_expand_topic_name+0x252>
 8012c24:	2d00      	cmp	r5, #0
 8012c26:	f000 80a2 	beq.w	8012d6e <rcl_expand_topic_name+0x20e>
 8012c2a:	217b      	movs	r1, #123	@ 0x7b
 8012c2c:	f000 ff82 	bl	8013b34 <strchr>
 8012c30:	46d1      	mov	r9, sl
 8012c32:	4605      	mov	r5, r0
 8012c34:	9407      	str	r4, [sp, #28]
 8012c36:	46d3      	mov	fp, sl
 8012c38:	464c      	mov	r4, r9
 8012c3a:	2d00      	cmp	r5, #0
 8012c3c:	f000 80be 	beq.w	8012dbc <rcl_expand_topic_name+0x25c>
 8012c40:	217d      	movs	r1, #125	@ 0x7d
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 ff76 	bl	8013b34 <strchr>
 8012c48:	eba0 0905 	sub.w	r9, r0, r5
 8012c4c:	f109 0a01 	add.w	sl, r9, #1
 8012c50:	486d      	ldr	r0, [pc, #436]	@ (8012e08 <rcl_expand_topic_name+0x2a8>)
 8012c52:	4652      	mov	r2, sl
 8012c54:	4629      	mov	r1, r5
 8012c56:	f000 ff7a 	bl	8013b4e <strncmp>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d067      	beq.n	8012d2e <rcl_expand_topic_name+0x1ce>
 8012c5e:	486b      	ldr	r0, [pc, #428]	@ (8012e0c <rcl_expand_topic_name+0x2ac>)
 8012c60:	4652      	mov	r2, sl
 8012c62:	4629      	mov	r1, r5
 8012c64:	f000 ff73 	bl	8013b4e <strncmp>
 8012c68:	b130      	cbz	r0, 8012c78 <rcl_expand_topic_name+0x118>
 8012c6a:	4869      	ldr	r0, [pc, #420]	@ (8012e10 <rcl_expand_topic_name+0x2b0>)
 8012c6c:	4652      	mov	r2, sl
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f000 ff6d 	bl	8013b4e <strncmp>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d137      	bne.n	8012ce8 <rcl_expand_topic_name+0x188>
 8012c78:	46b9      	mov	r9, r7
 8012c7a:	ab16      	add	r3, sp, #88	@ 0x58
 8012c7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c84:	ab14      	add	r3, sp, #80	@ 0x50
 8012c86:	4628      	mov	r0, r5
 8012c88:	cb0c      	ldmia	r3, {r2, r3}
 8012c8a:	4651      	mov	r1, sl
 8012c8c:	f7fc fe20 	bl	800f8d0 <rcutils_strndup>
 8012c90:	4605      	mov	r5, r0
 8012c92:	2800      	cmp	r0, #0
 8012c94:	f000 809c 	beq.w	8012dd0 <rcl_expand_topic_name+0x270>
 8012c98:	464a      	mov	r2, r9
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	ab14      	add	r3, sp, #80	@ 0x50
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	f7fc fd14 	bl	800f6cc <rcutils_repl_str>
 8012ca4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012ca6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012ca8:	4604      	mov	r4, r0
 8012caa:	4628      	mov	r0, r5
 8012cac:	4798      	blx	r3
 8012cae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012cb0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012cb2:	4658      	mov	r0, fp
 8012cb4:	4798      	blx	r3
 8012cb6:	2c00      	cmp	r4, #0
 8012cb8:	d07b      	beq.n	8012db2 <rcl_expand_topic_name+0x252>
 8012cba:	217b      	movs	r1, #123	@ 0x7b
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f000 ff39 	bl	8013b34 <strchr>
 8012cc2:	46a3      	mov	fp, r4
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	e7b8      	b.n	8012c3a <rcl_expand_topic_name+0xda>
 8012cc8:	240b      	movs	r4, #11
 8012cca:	4620      	mov	r0, r4
 8012ccc:	b00b      	add	sp, #44	@ 0x2c
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	f7f9 ffd3 	bl	800cc7c <rcl_convert_rmw_ret_to_rcl_ret>
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	e7f7      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012cda:	2467      	movs	r4, #103	@ 0x67
 8012cdc:	4620      	mov	r0, r4
 8012cde:	b00b      	add	sp, #44	@ 0x2c
 8012ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce4:	24c9      	movs	r4, #201	@ 0xc9
 8012ce6:	e7f0      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012ce8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8012cec:	9806      	ldr	r0, [sp, #24]
 8012cee:	1c69      	adds	r1, r5, #1
 8012cf0:	f7fc ff08 	bl	800fb04 <rcutils_string_map_getn>
 8012cf4:	4681      	mov	r9, r0
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d1bf      	bne.n	8012c7a <rcl_expand_topic_name+0x11a>
 8012cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012cfc:	aa16      	add	r2, sp, #88	@ 0x58
 8012cfe:	6018      	str	r0, [r3, #0]
 8012d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d06:	ab14      	add	r3, sp, #80	@ 0x50
 8012d08:	cb0c      	ldmia	r3, {r2, r3}
 8012d0a:	4651      	mov	r1, sl
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	f7fc fddf 	bl	800f8d0 <rcutils_strndup>
 8012d12:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012d14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012d16:	4798      	blx	r3
 8012d18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012d1a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012d1c:	4658      	mov	r0, fp
 8012d1e:	2469      	movs	r4, #105	@ 0x69
 8012d20:	4798      	blx	r3
 8012d22:	e7d2      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012d24:	2800      	cmp	r0, #0
 8012d26:	d05b      	beq.n	8012de0 <rcl_expand_topic_name+0x280>
 8012d28:	46c1      	mov	r9, r8
 8012d2a:	46a2      	mov	sl, r4
 8012d2c:	e782      	b.n	8012c34 <rcl_expand_topic_name+0xd4>
 8012d2e:	46b1      	mov	r9, r6
 8012d30:	e7a3      	b.n	8012c7a <rcl_expand_topic_name+0x11a>
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d1f8      	bne.n	8012d28 <rcl_expand_topic_name+0x1c8>
 8012d36:	4638      	mov	r0, r7
 8012d38:	f7ed fa5c 	bl	80001f4 <strlen>
 8012d3c:	4a35      	ldr	r2, [pc, #212]	@ (8012e14 <rcl_expand_topic_name+0x2b4>)
 8012d3e:	4b36      	ldr	r3, [pc, #216]	@ (8012e18 <rcl_expand_topic_name+0x2b8>)
 8012d40:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d44:	2801      	cmp	r0, #1
 8012d46:	bf18      	it	ne
 8012d48:	4613      	movne	r3, r2
 8012d4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012d4e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012d52:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012d54:	9703      	str	r7, [sp, #12]
 8012d56:	9200      	str	r2, [sp, #0]
 8012d58:	ab14      	add	r3, sp, #80	@ 0x50
 8012d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d5c:	f7fc fc7c 	bl	800f658 <rcutils_format_string_limit>
 8012d60:	4682      	mov	sl, r0
 8012d62:	4653      	mov	r3, sl
 8012d64:	b32b      	cbz	r3, 8012db2 <rcl_expand_topic_name+0x252>
 8012d66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d68:	f8c3 a000 	str.w	sl, [r3]
 8012d6c:	e7ad      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d72:	2b2f      	cmp	r3, #47	@ 0x2f
 8012d74:	d0f7      	beq.n	8012d66 <rcl_expand_topic_name+0x206>
 8012d76:	4638      	mov	r0, r7
 8012d78:	f7ed fa3c 	bl	80001f4 <strlen>
 8012d7c:	4a25      	ldr	r2, [pc, #148]	@ (8012e14 <rcl_expand_topic_name+0x2b4>)
 8012d7e:	4b26      	ldr	r3, [pc, #152]	@ (8012e18 <rcl_expand_topic_name+0x2b8>)
 8012d80:	f8cd a010 	str.w	sl, [sp, #16]
 8012d84:	2801      	cmp	r0, #1
 8012d86:	bf18      	it	ne
 8012d88:	4613      	movne	r3, r2
 8012d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012d8e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012d92:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012d94:	9703      	str	r7, [sp, #12]
 8012d96:	9200      	str	r2, [sp, #0]
 8012d98:	ab14      	add	r3, sp, #80	@ 0x50
 8012d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d9c:	f7fc fc5c 	bl	800f658 <rcutils_format_string_limit>
 8012da0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012da2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012da4:	4605      	mov	r5, r0
 8012da6:	4650      	mov	r0, sl
 8012da8:	4798      	blx	r3
 8012daa:	46aa      	mov	sl, r5
 8012dac:	e7d9      	b.n	8012d62 <rcl_expand_topic_name+0x202>
 8012dae:	24ca      	movs	r4, #202	@ 0xca
 8012db0:	e78b      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012db2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012db4:	2300      	movs	r3, #0
 8012db6:	6013      	str	r3, [r2, #0]
 8012db8:	240a      	movs	r4, #10
 8012dba:	e786      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012dbc:	465b      	mov	r3, fp
 8012dbe:	9c07      	ldr	r4, [sp, #28]
 8012dc0:	46da      	mov	sl, fp
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1d3      	bne.n	8012d6e <rcl_expand_topic_name+0x20e>
 8012dc6:	f898 3000 	ldrb.w	r3, [r8]
 8012dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8012dcc:	d0cb      	beq.n	8012d66 <rcl_expand_topic_name+0x206>
 8012dce:	e7b2      	b.n	8012d36 <rcl_expand_topic_name+0x1d6>
 8012dd0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8012dd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012dd6:	6015      	str	r5, [r2, #0]
 8012dd8:	4658      	mov	r0, fp
 8012dda:	4798      	blx	r3
 8012ddc:	240a      	movs	r4, #10
 8012dde:	e774      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012de0:	ab17      	add	r3, sp, #92	@ 0x5c
 8012de2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012de6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012dea:	ab14      	add	r3, sp, #80	@ 0x50
 8012dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012dee:	4640      	mov	r0, r8
 8012df0:	f7fc fd4c 	bl	800f88c <rcutils_strdup>
 8012df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012df6:	2800      	cmp	r0, #0
 8012df8:	6018      	str	r0, [r3, #0]
 8012dfa:	bf08      	it	eq
 8012dfc:	240a      	moveq	r4, #10
 8012dfe:	e764      	b.n	8012cca <rcl_expand_topic_name+0x16a>
 8012e00:	080155d4 	.word	0x080155d4
 8012e04:	08014cd8 	.word	0x08014cd8
 8012e08:	080155dc 	.word	0x080155dc
 8012e0c:	080155e4 	.word	0x080155e4
 8012e10:	080155ec 	.word	0x080155ec
 8012e14:	08014e6c 	.word	0x08014e6c
 8012e18:	08014ce8 	.word	0x08014ce8

08012e1c <rcl_get_default_topic_name_substitutions>:
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	bf0c      	ite	eq
 8012e20:	200b      	moveq	r0, #11
 8012e22:	2000      	movne	r0, #0
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop

08012e28 <rcl_get_zero_initialized_guard_condition>:
 8012e28:	4a03      	ldr	r2, [pc, #12]	@ (8012e38 <rcl_get_zero_initialized_guard_condition+0x10>)
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e30:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e34:	4618      	mov	r0, r3
 8012e36:	4770      	bx	lr
 8012e38:	080155f8 	.word	0x080155f8

08012e3c <rcl_guard_condition_init_from_rmw>:
 8012e3c:	b082      	sub	sp, #8
 8012e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012e48:	4604      	mov	r4, r0
 8012e4a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8012e4e:	460e      	mov	r6, r1
 8012e50:	4617      	mov	r7, r2
 8012e52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e56:	f10d 0e04 	add.w	lr, sp, #4
 8012e5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e62:	f8ce 3000 	str.w	r3, [lr]
 8012e66:	a801      	add	r0, sp, #4
 8012e68:	f7f5 fb26 	bl	80084b8 <rcutils_allocator_is_valid>
 8012e6c:	b350      	cbz	r0, 8012ec4 <rcl_guard_condition_init_from_rmw+0x88>
 8012e6e:	b34c      	cbz	r4, 8012ec4 <rcl_guard_condition_init_from_rmw+0x88>
 8012e70:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012e74:	f1b8 0f00 	cmp.w	r8, #0
 8012e78:	d11e      	bne.n	8012eb8 <rcl_guard_condition_init_from_rmw+0x7c>
 8012e7a:	b31f      	cbz	r7, 8012ec4 <rcl_guard_condition_init_from_rmw+0x88>
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7f9 ff1b 	bl	800ccb8 <rcl_context_is_valid>
 8012e82:	b328      	cbz	r0, 8012ed0 <rcl_guard_condition_init_from_rmw+0x94>
 8012e84:	9b01      	ldr	r3, [sp, #4]
 8012e86:	9905      	ldr	r1, [sp, #20]
 8012e88:	201c      	movs	r0, #28
 8012e8a:	4798      	blx	r3
 8012e8c:	4605      	mov	r5, r0
 8012e8e:	6060      	str	r0, [r4, #4]
 8012e90:	b358      	cbz	r0, 8012eea <rcl_guard_condition_init_from_rmw+0xae>
 8012e92:	b1fe      	cbz	r6, 8012ed4 <rcl_guard_condition_init_from_rmw+0x98>
 8012e94:	6006      	str	r6, [r0, #0]
 8012e96:	f880 8004 	strb.w	r8, [r0, #4]
 8012e9a:	ac01      	add	r4, sp, #4
 8012e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e9e:	f105 0c08 	add.w	ip, r5, #8
 8012ea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	f8cc 3000 	str.w	r3, [ip]
 8012eac:	2000      	movs	r0, #0
 8012eae:	b006      	add	sp, #24
 8012eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	b002      	add	sp, #8
 8012eb6:	4770      	bx	lr
 8012eb8:	2064      	movs	r0, #100	@ 0x64
 8012eba:	b006      	add	sp, #24
 8012ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec0:	b002      	add	sp, #8
 8012ec2:	4770      	bx	lr
 8012ec4:	200b      	movs	r0, #11
 8012ec6:	b006      	add	sp, #24
 8012ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ecc:	b002      	add	sp, #8
 8012ece:	4770      	bx	lr
 8012ed0:	2065      	movs	r0, #101	@ 0x65
 8012ed2:	e7f2      	b.n	8012eba <rcl_guard_condition_init_from_rmw+0x7e>
 8012ed4:	6838      	ldr	r0, [r7, #0]
 8012ed6:	3028      	adds	r0, #40	@ 0x28
 8012ed8:	f000 fa12 	bl	8013300 <rmw_create_guard_condition>
 8012edc:	6028      	str	r0, [r5, #0]
 8012ede:	6865      	ldr	r5, [r4, #4]
 8012ee0:	682e      	ldr	r6, [r5, #0]
 8012ee2:	b126      	cbz	r6, 8012eee <rcl_guard_condition_init_from_rmw+0xb2>
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	712b      	strb	r3, [r5, #4]
 8012ee8:	e7d7      	b.n	8012e9a <rcl_guard_condition_init_from_rmw+0x5e>
 8012eea:	200a      	movs	r0, #10
 8012eec:	e7e5      	b.n	8012eba <rcl_guard_condition_init_from_rmw+0x7e>
 8012eee:	4628      	mov	r0, r5
 8012ef0:	9b02      	ldr	r3, [sp, #8]
 8012ef2:	9905      	ldr	r1, [sp, #20]
 8012ef4:	4798      	blx	r3
 8012ef6:	6066      	str	r6, [r4, #4]
 8012ef8:	2001      	movs	r0, #1
 8012efa:	e7de      	b.n	8012eba <rcl_guard_condition_init_from_rmw+0x7e>

08012efc <rcl_guard_condition_fini>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	b1f0      	cbz	r0, 8012f40 <rcl_guard_condition_fini+0x44>
 8012f02:	6843      	ldr	r3, [r0, #4]
 8012f04:	4604      	mov	r4, r0
 8012f06:	b163      	cbz	r3, 8012f22 <rcl_guard_condition_fini+0x26>
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	68de      	ldr	r6, [r3, #12]
 8012f0c:	6999      	ldr	r1, [r3, #24]
 8012f0e:	b160      	cbz	r0, 8012f2a <rcl_guard_condition_fini+0x2e>
 8012f10:	791d      	ldrb	r5, [r3, #4]
 8012f12:	b965      	cbnz	r5, 8012f2e <rcl_guard_condition_fini+0x32>
 8012f14:	4618      	mov	r0, r3
 8012f16:	47b0      	blx	r6
 8012f18:	2300      	movs	r3, #0
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	6063      	str	r3, [r4, #4]
 8012f1e:	b002      	add	sp, #8
 8012f20:	bd70      	pop	{r4, r5, r6, pc}
 8012f22:	461d      	mov	r5, r3
 8012f24:	4628      	mov	r0, r5
 8012f26:	b002      	add	sp, #8
 8012f28:	bd70      	pop	{r4, r5, r6, pc}
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	e7f2      	b.n	8012f14 <rcl_guard_condition_fini+0x18>
 8012f2e:	9101      	str	r1, [sp, #4]
 8012f30:	f000 f9fa 	bl	8013328 <rmw_destroy_guard_condition>
 8012f34:	1e05      	subs	r5, r0, #0
 8012f36:	6863      	ldr	r3, [r4, #4]
 8012f38:	9901      	ldr	r1, [sp, #4]
 8012f3a:	bf18      	it	ne
 8012f3c:	2501      	movne	r5, #1
 8012f3e:	e7e9      	b.n	8012f14 <rcl_guard_condition_fini+0x18>
 8012f40:	250b      	movs	r5, #11
 8012f42:	4628      	mov	r0, r5
 8012f44:	b002      	add	sp, #8
 8012f46:	bd70      	pop	{r4, r5, r6, pc}

08012f48 <rcl_guard_condition_get_default_options>:
 8012f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f4a:	b087      	sub	sp, #28
 8012f4c:	4606      	mov	r6, r0
 8012f4e:	4668      	mov	r0, sp
 8012f50:	f7f5 faa4 	bl	800849c <rcutils_get_default_allocator>
 8012f54:	4b09      	ldr	r3, [pc, #36]	@ (8012f7c <rcl_guard_condition_get_default_options+0x34>)
 8012f56:	46ee      	mov	lr, sp
 8012f58:	469c      	mov	ip, r3
 8012f5a:	461d      	mov	r5, r3
 8012f5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f66:	4634      	mov	r4, r6
 8012f68:	f8de 7000 	ldr.w	r7, [lr]
 8012f6c:	f8cc 7000 	str.w	r7, [ip]
 8012f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f72:	4630      	mov	r0, r6
 8012f74:	6027      	str	r7, [r4, #0]
 8012f76:	b007      	add	sp, #28
 8012f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2000dafc 	.word	0x2000dafc

08012f80 <rcl_guard_condition_get_rmw_handle>:
 8012f80:	b110      	cbz	r0, 8012f88 <rcl_guard_condition_get_rmw_handle+0x8>
 8012f82:	6840      	ldr	r0, [r0, #4]
 8012f84:	b100      	cbz	r0, 8012f88 <rcl_guard_condition_get_rmw_handle+0x8>
 8012f86:	6800      	ldr	r0, [r0, #0]
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop

08012f8c <rcl_validate_topic_name>:
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d07a      	beq.n	8013086 <rcl_validate_topic_name+0xfa>
 8012f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f94:	460e      	mov	r6, r1
 8012f96:	2900      	cmp	r1, #0
 8012f98:	d07c      	beq.n	8013094 <rcl_validate_topic_name+0x108>
 8012f9a:	4617      	mov	r7, r2
 8012f9c:	4605      	mov	r5, r0
 8012f9e:	f7ed f929 	bl	80001f4 <strlen>
 8012fa2:	b1b0      	cbz	r0, 8012fd2 <rcl_validate_topic_name+0x46>
 8012fa4:	f895 9000 	ldrb.w	r9, [r5]
 8012fa8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801312c <rcl_validate_topic_name+0x1a0>
 8012fac:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8012fb0:	f013 0304 	ands.w	r3, r3, #4
 8012fb4:	d169      	bne.n	801308a <rcl_validate_topic_name+0xfe>
 8012fb6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8012fba:	f815 2008 	ldrb.w	r2, [r5, r8]
 8012fbe:	2a2f      	cmp	r2, #47	@ 0x2f
 8012fc0:	d10e      	bne.n	8012fe0 <rcl_validate_topic_name+0x54>
 8012fc2:	2202      	movs	r2, #2
 8012fc4:	6032      	str	r2, [r6, #0]
 8012fc6:	b36f      	cbz	r7, 8013024 <rcl_validate_topic_name+0x98>
 8012fc8:	f8c7 8000 	str.w	r8, [r7]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	6033      	str	r3, [r6, #0]
 8012fd6:	b32f      	cbz	r7, 8013024 <rcl_validate_topic_name+0x98>
 8012fd8:	2000      	movs	r0, #0
 8012fda:	6038      	str	r0, [r7, #0]
 8012fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8012fe4:	461c      	mov	r4, r3
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8012fec:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012ff0:	f1be 0f09 	cmp.w	lr, #9
 8012ff4:	d919      	bls.n	801302a <rcl_validate_topic_name+0x9e>
 8012ff6:	f022 0e20 	bic.w	lr, r2, #32
 8012ffa:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8012ffe:	f1be 0f19 	cmp.w	lr, #25
 8013002:	d912      	bls.n	801302a <rcl_validate_topic_name+0x9e>
 8013004:	2a5f      	cmp	r2, #95	@ 0x5f
 8013006:	d019      	beq.n	801303c <rcl_validate_topic_name+0xb0>
 8013008:	2a2f      	cmp	r2, #47	@ 0x2f
 801300a:	d051      	beq.n	80130b0 <rcl_validate_topic_name+0x124>
 801300c:	2a7e      	cmp	r2, #126	@ 0x7e
 801300e:	d048      	beq.n	80130a2 <rcl_validate_topic_name+0x116>
 8013010:	2a7b      	cmp	r2, #123	@ 0x7b
 8013012:	d054      	beq.n	80130be <rcl_validate_topic_name+0x132>
 8013014:	2a7d      	cmp	r2, #125	@ 0x7d
 8013016:	d161      	bne.n	80130dc <rcl_validate_topic_name+0x150>
 8013018:	2c00      	cmp	r4, #0
 801301a:	d155      	bne.n	80130c8 <rcl_validate_topic_name+0x13c>
 801301c:	2305      	movs	r3, #5
 801301e:	6033      	str	r3, [r6, #0]
 8013020:	b107      	cbz	r7, 8013024 <rcl_validate_topic_name+0x98>
 8013022:	6039      	str	r1, [r7, #0]
 8013024:	2000      	movs	r0, #0
 8013026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801302e:	0752      	lsls	r2, r2, #29
 8013030:	d504      	bpl.n	801303c <rcl_validate_topic_name+0xb0>
 8013032:	b11c      	cbz	r4, 801303c <rcl_validate_topic_name+0xb0>
 8013034:	b111      	cbz	r1, 801303c <rcl_validate_topic_name+0xb0>
 8013036:	1e4a      	subs	r2, r1, #1
 8013038:	429a      	cmp	r2, r3
 801303a:	d02d      	beq.n	8013098 <rcl_validate_topic_name+0x10c>
 801303c:	3101      	adds	r1, #1
 801303e:	4288      	cmp	r0, r1
 8013040:	d1d2      	bne.n	8012fe8 <rcl_validate_topic_name+0x5c>
 8013042:	2c00      	cmp	r4, #0
 8013044:	d145      	bne.n	80130d2 <rcl_validate_topic_name+0x146>
 8013046:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801304a:	d04f      	beq.n	80130ec <rcl_validate_topic_name+0x160>
 801304c:	4620      	mov	r0, r4
 801304e:	2301      	movs	r3, #1
 8013050:	e006      	b.n	8013060 <rcl_validate_topic_name+0xd4>
 8013052:	428b      	cmp	r3, r1
 8013054:	f105 0501 	add.w	r5, r5, #1
 8013058:	f103 0201 	add.w	r2, r3, #1
 801305c:	d236      	bcs.n	80130cc <rcl_validate_topic_name+0x140>
 801305e:	4613      	mov	r3, r2
 8013060:	4580      	cmp	r8, r0
 8013062:	f100 0001 	add.w	r0, r0, #1
 8013066:	d0f4      	beq.n	8013052 <rcl_validate_topic_name+0xc6>
 8013068:	782a      	ldrb	r2, [r5, #0]
 801306a:	2a2f      	cmp	r2, #47	@ 0x2f
 801306c:	d1f1      	bne.n	8013052 <rcl_validate_topic_name+0xc6>
 801306e:	786a      	ldrb	r2, [r5, #1]
 8013070:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013074:	0754      	lsls	r4, r2, #29
 8013076:	d5ec      	bpl.n	8013052 <rcl_validate_topic_name+0xc6>
 8013078:	2204      	movs	r2, #4
 801307a:	6032      	str	r2, [r6, #0]
 801307c:	2f00      	cmp	r7, #0
 801307e:	d0d1      	beq.n	8013024 <rcl_validate_topic_name+0x98>
 8013080:	603b      	str	r3, [r7, #0]
 8013082:	2000      	movs	r0, #0
 8013084:	e7aa      	b.n	8012fdc <rcl_validate_topic_name+0x50>
 8013086:	200b      	movs	r0, #11
 8013088:	4770      	bx	lr
 801308a:	2304      	movs	r3, #4
 801308c:	6033      	str	r3, [r6, #0]
 801308e:	2f00      	cmp	r7, #0
 8013090:	d1a2      	bne.n	8012fd8 <rcl_validate_topic_name+0x4c>
 8013092:	e7c7      	b.n	8013024 <rcl_validate_topic_name+0x98>
 8013094:	200b      	movs	r0, #11
 8013096:	e7a1      	b.n	8012fdc <rcl_validate_topic_name+0x50>
 8013098:	2309      	movs	r3, #9
 801309a:	6033      	str	r3, [r6, #0]
 801309c:	2f00      	cmp	r7, #0
 801309e:	d1c0      	bne.n	8013022 <rcl_validate_topic_name+0x96>
 80130a0:	e7c0      	b.n	8013024 <rcl_validate_topic_name+0x98>
 80130a2:	2900      	cmp	r1, #0
 80130a4:	d0ca      	beq.n	801303c <rcl_validate_topic_name+0xb0>
 80130a6:	2306      	movs	r3, #6
 80130a8:	6033      	str	r3, [r6, #0]
 80130aa:	2f00      	cmp	r7, #0
 80130ac:	d1b9      	bne.n	8013022 <rcl_validate_topic_name+0x96>
 80130ae:	e7b9      	b.n	8013024 <rcl_validate_topic_name+0x98>
 80130b0:	2c00      	cmp	r4, #0
 80130b2:	d0c3      	beq.n	801303c <rcl_validate_topic_name+0xb0>
 80130b4:	2308      	movs	r3, #8
 80130b6:	6033      	str	r3, [r6, #0]
 80130b8:	2f00      	cmp	r7, #0
 80130ba:	d1b2      	bne.n	8013022 <rcl_validate_topic_name+0x96>
 80130bc:	e7b2      	b.n	8013024 <rcl_validate_topic_name+0x98>
 80130be:	2c00      	cmp	r4, #0
 80130c0:	d1f8      	bne.n	80130b4 <rcl_validate_topic_name+0x128>
 80130c2:	460b      	mov	r3, r1
 80130c4:	2401      	movs	r4, #1
 80130c6:	e7b9      	b.n	801303c <rcl_validate_topic_name+0xb0>
 80130c8:	2400      	movs	r4, #0
 80130ca:	e7b7      	b.n	801303c <rcl_validate_topic_name+0xb0>
 80130cc:	2000      	movs	r0, #0
 80130ce:	6030      	str	r0, [r6, #0]
 80130d0:	e784      	b.n	8012fdc <rcl_validate_topic_name+0x50>
 80130d2:	2205      	movs	r2, #5
 80130d4:	6032      	str	r2, [r6, #0]
 80130d6:	2f00      	cmp	r7, #0
 80130d8:	d1d2      	bne.n	8013080 <rcl_validate_topic_name+0xf4>
 80130da:	e7a3      	b.n	8013024 <rcl_validate_topic_name+0x98>
 80130dc:	2c00      	cmp	r4, #0
 80130de:	bf14      	ite	ne
 80130e0:	2308      	movne	r3, #8
 80130e2:	2303      	moveq	r3, #3
 80130e4:	6033      	str	r3, [r6, #0]
 80130e6:	2f00      	cmp	r7, #0
 80130e8:	d19b      	bne.n	8013022 <rcl_validate_topic_name+0x96>
 80130ea:	e79b      	b.n	8013024 <rcl_validate_topic_name+0x98>
 80130ec:	2301      	movs	r3, #1
 80130ee:	e00a      	b.n	8013106 <rcl_validate_topic_name+0x17a>
 80130f0:	2c01      	cmp	r4, #1
 80130f2:	d013      	beq.n	801311c <rcl_validate_topic_name+0x190>
 80130f4:	4299      	cmp	r1, r3
 80130f6:	f104 0401 	add.w	r4, r4, #1
 80130fa:	f105 0501 	add.w	r5, r5, #1
 80130fe:	f103 0201 	add.w	r2, r3, #1
 8013102:	d9e3      	bls.n	80130cc <rcl_validate_topic_name+0x140>
 8013104:	4613      	mov	r3, r2
 8013106:	45a0      	cmp	r8, r4
 8013108:	d0f4      	beq.n	80130f4 <rcl_validate_topic_name+0x168>
 801310a:	782a      	ldrb	r2, [r5, #0]
 801310c:	2a2f      	cmp	r2, #47	@ 0x2f
 801310e:	d1ef      	bne.n	80130f0 <rcl_validate_topic_name+0x164>
 8013110:	786a      	ldrb	r2, [r5, #1]
 8013112:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013116:	0752      	lsls	r2, r2, #29
 8013118:	d5ec      	bpl.n	80130f4 <rcl_validate_topic_name+0x168>
 801311a:	e7ad      	b.n	8013078 <rcl_validate_topic_name+0xec>
 801311c:	2307      	movs	r3, #7
 801311e:	6033      	str	r3, [r6, #0]
 8013120:	2f00      	cmp	r7, #0
 8013122:	f43f af7f 	beq.w	8013024 <rcl_validate_topic_name+0x98>
 8013126:	603c      	str	r4, [r7, #0]
 8013128:	2000      	movs	r0, #0
 801312a:	e757      	b.n	8012fdc <rcl_validate_topic_name+0x50>
 801312c:	08015670 	.word	0x08015670

08013130 <on_status>:
 8013130:	b082      	sub	sp, #8
 8013132:	b002      	add	sp, #8
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop

08013138 <on_topic>:
 8013138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801313c:	4a22      	ldr	r2, [pc, #136]	@ (80131c8 <on_topic+0x90>)
 801313e:	b094      	sub	sp, #80	@ 0x50
 8013140:	6812      	ldr	r2, [r2, #0]
 8013142:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8013144:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013148:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801314c:	b3c2      	cbz	r2, 80131c0 <on_topic+0x88>
 801314e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8013152:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8013156:	e001      	b.n	801315c <on_topic+0x24>
 8013158:	6852      	ldr	r2, [r2, #4]
 801315a:	b38a      	cbz	r2, 80131c0 <on_topic+0x88>
 801315c:	6894      	ldr	r4, [r2, #8]
 801315e:	8aa3      	ldrh	r3, [r4, #20]
 8013160:	428b      	cmp	r3, r1
 8013162:	d1f9      	bne.n	8013158 <on_topic+0x20>
 8013164:	7da3      	ldrb	r3, [r4, #22]
 8013166:	4283      	cmp	r3, r0
 8013168:	d1f6      	bne.n	8013158 <on_topic+0x20>
 801316a:	2248      	movs	r2, #72	@ 0x48
 801316c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013170:	4668      	mov	r0, sp
 8013172:	f000 fda0 	bl	8013cb6 <memcpy>
 8013176:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801317a:	cb0c      	ldmia	r3, {r2, r3}
 801317c:	4620      	mov	r0, r4
 801317e:	f7f5 fdcb 	bl	8008d18 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013182:	4607      	mov	r7, r0
 8013184:	b1e0      	cbz	r0, 80131c0 <on_topic+0x88>
 8013186:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801318a:	4632      	mov	r2, r6
 801318c:	4628      	mov	r0, r5
 801318e:	f108 0110 	add.w	r1, r8, #16
 8013192:	f7fe f82b 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 8013196:	b930      	cbnz	r0, 80131a6 <on_topic+0x6e>
 8013198:	480c      	ldr	r0, [pc, #48]	@ (80131cc <on_topic+0x94>)
 801319a:	4639      	mov	r1, r7
 801319c:	b014      	add	sp, #80	@ 0x50
 801319e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131a2:	f7fc bedd 	b.w	800ff60 <put_memory>
 80131a6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80131aa:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80131ae:	f7fd ff13 	bl	8010fd8 <rmw_uros_epoch_nanos>
 80131b2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80131b6:	2305      	movs	r3, #5
 80131b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80131bc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80131c0:	b014      	add	sp, #80	@ 0x50
 80131c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131c6:	bf00      	nop
 80131c8:	2000d9cc 	.word	0x2000d9cc
 80131cc:	2000d9bc 	.word	0x2000d9bc

080131d0 <on_request>:
 80131d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4823      	ldr	r0, [pc, #140]	@ (8013264 <on_request+0x94>)
 80131d6:	b094      	sub	sp, #80	@ 0x50
 80131d8:	6800      	ldr	r0, [r0, #0]
 80131da:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80131dc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80131e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d03b      	beq.n	801325e <on_request+0x8e>
 80131e6:	461d      	mov	r5, r3
 80131e8:	e001      	b.n	80131ee <on_request+0x1e>
 80131ea:	6840      	ldr	r0, [r0, #4]
 80131ec:	b3b8      	cbz	r0, 801325e <on_request+0x8e>
 80131ee:	6884      	ldr	r4, [r0, #8]
 80131f0:	8b21      	ldrh	r1, [r4, #24]
 80131f2:	4291      	cmp	r1, r2
 80131f4:	d1f9      	bne.n	80131ea <on_request+0x1a>
 80131f6:	2248      	movs	r2, #72	@ 0x48
 80131f8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80131fc:	4668      	mov	r0, sp
 80131fe:	f000 fd5a 	bl	8013cb6 <memcpy>
 8013202:	f104 0320 	add.w	r3, r4, #32
 8013206:	cb0c      	ldmia	r3, {r2, r3}
 8013208:	4620      	mov	r0, r4
 801320a:	f7f5 fd85 	bl	8008d18 <rmw_uxrce_get_static_input_buffer_for_entity>
 801320e:	4680      	mov	r8, r0
 8013210:	b328      	cbz	r0, 801325e <on_request+0x8e>
 8013212:	4638      	mov	r0, r7
 8013214:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013218:	4632      	mov	r2, r6
 801321a:	f107 0110 	add.w	r1, r7, #16
 801321e:	f7fd ffe5 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 8013222:	b930      	cbnz	r0, 8013232 <on_request+0x62>
 8013224:	4810      	ldr	r0, [pc, #64]	@ (8013268 <on_request+0x98>)
 8013226:	4641      	mov	r1, r8
 8013228:	b014      	add	sp, #80	@ 0x50
 801322a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801322e:	f7fc be97 	b.w	800ff60 <put_memory>
 8013232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013234:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013238:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801323c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013244:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013248:	e88c 0003 	stmia.w	ip, {r0, r1}
 801324c:	f7fd fec4 	bl	8010fd8 <rmw_uros_epoch_nanos>
 8013250:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013254:	2303      	movs	r3, #3
 8013256:	e942 0102 	strd	r0, r1, [r2, #-8]
 801325a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801325e:	b014      	add	sp, #80	@ 0x50
 8013260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013264:	2000d99c 	.word	0x2000d99c
 8013268:	2000d9bc 	.word	0x2000d9bc

0801326c <on_reply>:
 801326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013270:	4821      	ldr	r0, [pc, #132]	@ (80132f8 <on_reply+0x8c>)
 8013272:	b094      	sub	sp, #80	@ 0x50
 8013274:	6800      	ldr	r0, [r0, #0]
 8013276:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013278:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801327c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801327e:	b3b8      	cbz	r0, 80132f0 <on_reply+0x84>
 8013280:	461d      	mov	r5, r3
 8013282:	e001      	b.n	8013288 <on_reply+0x1c>
 8013284:	6840      	ldr	r0, [r0, #4]
 8013286:	b398      	cbz	r0, 80132f0 <on_reply+0x84>
 8013288:	6884      	ldr	r4, [r0, #8]
 801328a:	8b21      	ldrh	r1, [r4, #24]
 801328c:	4291      	cmp	r1, r2
 801328e:	d1f9      	bne.n	8013284 <on_reply+0x18>
 8013290:	2248      	movs	r2, #72	@ 0x48
 8013292:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013296:	4668      	mov	r0, sp
 8013298:	f000 fd0d 	bl	8013cb6 <memcpy>
 801329c:	f104 0320 	add.w	r3, r4, #32
 80132a0:	cb0c      	ldmia	r3, {r2, r3}
 80132a2:	4620      	mov	r0, r4
 80132a4:	f7f5 fd38 	bl	8008d18 <rmw_uxrce_get_static_input_buffer_for_entity>
 80132a8:	4680      	mov	r8, r0
 80132aa:	b308      	cbz	r0, 80132f0 <on_reply+0x84>
 80132ac:	4638      	mov	r0, r7
 80132ae:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80132b2:	4632      	mov	r2, r6
 80132b4:	f107 0110 	add.w	r1, r7, #16
 80132b8:	f7fd ff98 	bl	80111ec <ucdr_deserialize_array_uint8_t>
 80132bc:	b930      	cbnz	r0, 80132cc <on_reply+0x60>
 80132be:	480f      	ldr	r0, [pc, #60]	@ (80132fc <on_reply+0x90>)
 80132c0:	4641      	mov	r1, r8
 80132c2:	b014      	add	sp, #80	@ 0x50
 80132c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132c8:	f7fc be4a 	b.w	800ff60 <put_memory>
 80132cc:	2200      	movs	r2, #0
 80132ce:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80132d2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80132d6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80132da:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80132de:	f7fd fe7b 	bl	8010fd8 <rmw_uros_epoch_nanos>
 80132e2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80132e6:	2304      	movs	r3, #4
 80132e8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80132ec:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80132f0:	b014      	add	sp, #80	@ 0x50
 80132f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f6:	bf00      	nop
 80132f8:	200090b0 	.word	0x200090b0
 80132fc:	2000d9bc 	.word	0x2000d9bc

08013300 <rmw_create_guard_condition>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4605      	mov	r5, r0
 8013304:	4807      	ldr	r0, [pc, #28]	@ (8013324 <rmw_create_guard_condition+0x24>)
 8013306:	f7fc fe1b 	bl	800ff40 <get_memory>
 801330a:	b148      	cbz	r0, 8013320 <rmw_create_guard_condition+0x20>
 801330c:	6884      	ldr	r4, [r0, #8]
 801330e:	2300      	movs	r3, #0
 8013310:	7423      	strb	r3, [r4, #16]
 8013312:	61e5      	str	r5, [r4, #28]
 8013314:	f7fc fe7c 	bl	8010010 <rmw_get_implementation_identifier>
 8013318:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801331c:	f104 0014 	add.w	r0, r4, #20
 8013320:	bd38      	pop	{r3, r4, r5, pc}
 8013322:	bf00      	nop
 8013324:	2000d95c 	.word	0x2000d95c

08013328 <rmw_destroy_guard_condition>:
 8013328:	b508      	push	{r3, lr}
 801332a:	4b08      	ldr	r3, [pc, #32]	@ (801334c <rmw_destroy_guard_condition+0x24>)
 801332c:	6819      	ldr	r1, [r3, #0]
 801332e:	b911      	cbnz	r1, 8013336 <rmw_destroy_guard_condition+0xe>
 8013330:	e00a      	b.n	8013348 <rmw_destroy_guard_condition+0x20>
 8013332:	6849      	ldr	r1, [r1, #4]
 8013334:	b141      	cbz	r1, 8013348 <rmw_destroy_guard_condition+0x20>
 8013336:	688b      	ldr	r3, [r1, #8]
 8013338:	3314      	adds	r3, #20
 801333a:	4298      	cmp	r0, r3
 801333c:	d1f9      	bne.n	8013332 <rmw_destroy_guard_condition+0xa>
 801333e:	4803      	ldr	r0, [pc, #12]	@ (801334c <rmw_destroy_guard_condition+0x24>)
 8013340:	f7fc fe0e 	bl	800ff60 <put_memory>
 8013344:	2000      	movs	r0, #0
 8013346:	bd08      	pop	{r3, pc}
 8013348:	2001      	movs	r0, #1
 801334a:	bd08      	pop	{r3, pc}
 801334c:	2000d95c 	.word	0x2000d95c

08013350 <calloc>:
 8013350:	4b02      	ldr	r3, [pc, #8]	@ (801335c <calloc+0xc>)
 8013352:	460a      	mov	r2, r1
 8013354:	4601      	mov	r1, r0
 8013356:	6818      	ldr	r0, [r3, #0]
 8013358:	f000 b802 	b.w	8013360 <_calloc_r>
 801335c:	200000c0 	.word	0x200000c0

08013360 <_calloc_r>:
 8013360:	b570      	push	{r4, r5, r6, lr}
 8013362:	fba1 5402 	umull	r5, r4, r1, r2
 8013366:	b93c      	cbnz	r4, 8013378 <_calloc_r+0x18>
 8013368:	4629      	mov	r1, r5
 801336a:	f000 f887 	bl	801347c <_malloc_r>
 801336e:	4606      	mov	r6, r0
 8013370:	b928      	cbnz	r0, 801337e <_calloc_r+0x1e>
 8013372:	2600      	movs	r6, #0
 8013374:	4630      	mov	r0, r6
 8013376:	bd70      	pop	{r4, r5, r6, pc}
 8013378:	220c      	movs	r2, #12
 801337a:	6002      	str	r2, [r0, #0]
 801337c:	e7f9      	b.n	8013372 <_calloc_r+0x12>
 801337e:	462a      	mov	r2, r5
 8013380:	4621      	mov	r1, r4
 8013382:	f000 fbcf 	bl	8013b24 <memset>
 8013386:	e7f5      	b.n	8013374 <_calloc_r+0x14>

08013388 <getenv>:
 8013388:	b507      	push	{r0, r1, r2, lr}
 801338a:	4b04      	ldr	r3, [pc, #16]	@ (801339c <getenv+0x14>)
 801338c:	4601      	mov	r1, r0
 801338e:	aa01      	add	r2, sp, #4
 8013390:	6818      	ldr	r0, [r3, #0]
 8013392:	f000 f805 	bl	80133a0 <_findenv_r>
 8013396:	b003      	add	sp, #12
 8013398:	f85d fb04 	ldr.w	pc, [sp], #4
 801339c:	200000c0 	.word	0x200000c0

080133a0 <_findenv_r>:
 80133a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8013414 <_findenv_r+0x74>
 80133a8:	4606      	mov	r6, r0
 80133aa:	4689      	mov	r9, r1
 80133ac:	4617      	mov	r7, r2
 80133ae:	f000 fcaf 	bl	8013d10 <__env_lock>
 80133b2:	f8da 4000 	ldr.w	r4, [sl]
 80133b6:	b134      	cbz	r4, 80133c6 <_findenv_r+0x26>
 80133b8:	464b      	mov	r3, r9
 80133ba:	4698      	mov	r8, r3
 80133bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133c0:	b13a      	cbz	r2, 80133d2 <_findenv_r+0x32>
 80133c2:	2a3d      	cmp	r2, #61	@ 0x3d
 80133c4:	d1f9      	bne.n	80133ba <_findenv_r+0x1a>
 80133c6:	4630      	mov	r0, r6
 80133c8:	f000 fca8 	bl	8013d1c <__env_unlock>
 80133cc:	2000      	movs	r0, #0
 80133ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d2:	eba8 0809 	sub.w	r8, r8, r9
 80133d6:	46a3      	mov	fp, r4
 80133d8:	f854 0b04 	ldr.w	r0, [r4], #4
 80133dc:	2800      	cmp	r0, #0
 80133de:	d0f2      	beq.n	80133c6 <_findenv_r+0x26>
 80133e0:	4642      	mov	r2, r8
 80133e2:	4649      	mov	r1, r9
 80133e4:	f000 fbb3 	bl	8013b4e <strncmp>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d1f4      	bne.n	80133d6 <_findenv_r+0x36>
 80133ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80133f0:	eb03 0508 	add.w	r5, r3, r8
 80133f4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80133f8:	2b3d      	cmp	r3, #61	@ 0x3d
 80133fa:	d1ec      	bne.n	80133d6 <_findenv_r+0x36>
 80133fc:	f8da 3000 	ldr.w	r3, [sl]
 8013400:	ebab 0303 	sub.w	r3, fp, r3
 8013404:	109b      	asrs	r3, r3, #2
 8013406:	4630      	mov	r0, r6
 8013408:	603b      	str	r3, [r7, #0]
 801340a:	f000 fc87 	bl	8013d1c <__env_unlock>
 801340e:	1c68      	adds	r0, r5, #1
 8013410:	e7dd      	b.n	80133ce <_findenv_r+0x2e>
 8013412:	bf00      	nop
 8013414:	20000000 	.word	0x20000000

08013418 <malloc>:
 8013418:	4b02      	ldr	r3, [pc, #8]	@ (8013424 <malloc+0xc>)
 801341a:	4601      	mov	r1, r0
 801341c:	6818      	ldr	r0, [r3, #0]
 801341e:	f000 b82d 	b.w	801347c <_malloc_r>
 8013422:	bf00      	nop
 8013424:	200000c0 	.word	0x200000c0

08013428 <free>:
 8013428:	4b02      	ldr	r3, [pc, #8]	@ (8013434 <free+0xc>)
 801342a:	4601      	mov	r1, r0
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	f000 bc7b 	b.w	8013d28 <_free_r>
 8013432:	bf00      	nop
 8013434:	200000c0 	.word	0x200000c0

08013438 <sbrk_aligned>:
 8013438:	b570      	push	{r4, r5, r6, lr}
 801343a:	4e0f      	ldr	r6, [pc, #60]	@ (8013478 <sbrk_aligned+0x40>)
 801343c:	460c      	mov	r4, r1
 801343e:	6831      	ldr	r1, [r6, #0]
 8013440:	4605      	mov	r5, r0
 8013442:	b911      	cbnz	r1, 801344a <sbrk_aligned+0x12>
 8013444:	f000 fbe0 	bl	8013c08 <_sbrk_r>
 8013448:	6030      	str	r0, [r6, #0]
 801344a:	4621      	mov	r1, r4
 801344c:	4628      	mov	r0, r5
 801344e:	f000 fbdb 	bl	8013c08 <_sbrk_r>
 8013452:	1c43      	adds	r3, r0, #1
 8013454:	d103      	bne.n	801345e <sbrk_aligned+0x26>
 8013456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801345a:	4620      	mov	r0, r4
 801345c:	bd70      	pop	{r4, r5, r6, pc}
 801345e:	1cc4      	adds	r4, r0, #3
 8013460:	f024 0403 	bic.w	r4, r4, #3
 8013464:	42a0      	cmp	r0, r4
 8013466:	d0f8      	beq.n	801345a <sbrk_aligned+0x22>
 8013468:	1a21      	subs	r1, r4, r0
 801346a:	4628      	mov	r0, r5
 801346c:	f000 fbcc 	bl	8013c08 <_sbrk_r>
 8013470:	3001      	adds	r0, #1
 8013472:	d1f2      	bne.n	801345a <sbrk_aligned+0x22>
 8013474:	e7ef      	b.n	8013456 <sbrk_aligned+0x1e>
 8013476:	bf00      	nop
 8013478:	2000db10 	.word	0x2000db10

0801347c <_malloc_r>:
 801347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013480:	1ccd      	adds	r5, r1, #3
 8013482:	f025 0503 	bic.w	r5, r5, #3
 8013486:	3508      	adds	r5, #8
 8013488:	2d0c      	cmp	r5, #12
 801348a:	bf38      	it	cc
 801348c:	250c      	movcc	r5, #12
 801348e:	2d00      	cmp	r5, #0
 8013490:	4606      	mov	r6, r0
 8013492:	db01      	blt.n	8013498 <_malloc_r+0x1c>
 8013494:	42a9      	cmp	r1, r5
 8013496:	d904      	bls.n	80134a2 <_malloc_r+0x26>
 8013498:	230c      	movs	r3, #12
 801349a:	6033      	str	r3, [r6, #0]
 801349c:	2000      	movs	r0, #0
 801349e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013578 <_malloc_r+0xfc>
 80134a6:	f000 f869 	bl	801357c <__malloc_lock>
 80134aa:	f8d8 3000 	ldr.w	r3, [r8]
 80134ae:	461c      	mov	r4, r3
 80134b0:	bb44      	cbnz	r4, 8013504 <_malloc_r+0x88>
 80134b2:	4629      	mov	r1, r5
 80134b4:	4630      	mov	r0, r6
 80134b6:	f7ff ffbf 	bl	8013438 <sbrk_aligned>
 80134ba:	1c43      	adds	r3, r0, #1
 80134bc:	4604      	mov	r4, r0
 80134be:	d158      	bne.n	8013572 <_malloc_r+0xf6>
 80134c0:	f8d8 4000 	ldr.w	r4, [r8]
 80134c4:	4627      	mov	r7, r4
 80134c6:	2f00      	cmp	r7, #0
 80134c8:	d143      	bne.n	8013552 <_malloc_r+0xd6>
 80134ca:	2c00      	cmp	r4, #0
 80134cc:	d04b      	beq.n	8013566 <_malloc_r+0xea>
 80134ce:	6823      	ldr	r3, [r4, #0]
 80134d0:	4639      	mov	r1, r7
 80134d2:	4630      	mov	r0, r6
 80134d4:	eb04 0903 	add.w	r9, r4, r3
 80134d8:	f000 fb96 	bl	8013c08 <_sbrk_r>
 80134dc:	4581      	cmp	r9, r0
 80134de:	d142      	bne.n	8013566 <_malloc_r+0xea>
 80134e0:	6821      	ldr	r1, [r4, #0]
 80134e2:	1a6d      	subs	r5, r5, r1
 80134e4:	4629      	mov	r1, r5
 80134e6:	4630      	mov	r0, r6
 80134e8:	f7ff ffa6 	bl	8013438 <sbrk_aligned>
 80134ec:	3001      	adds	r0, #1
 80134ee:	d03a      	beq.n	8013566 <_malloc_r+0xea>
 80134f0:	6823      	ldr	r3, [r4, #0]
 80134f2:	442b      	add	r3, r5
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	f8d8 3000 	ldr.w	r3, [r8]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	bb62      	cbnz	r2, 8013558 <_malloc_r+0xdc>
 80134fe:	f8c8 7000 	str.w	r7, [r8]
 8013502:	e00f      	b.n	8013524 <_malloc_r+0xa8>
 8013504:	6822      	ldr	r2, [r4, #0]
 8013506:	1b52      	subs	r2, r2, r5
 8013508:	d420      	bmi.n	801354c <_malloc_r+0xd0>
 801350a:	2a0b      	cmp	r2, #11
 801350c:	d917      	bls.n	801353e <_malloc_r+0xc2>
 801350e:	1961      	adds	r1, r4, r5
 8013510:	42a3      	cmp	r3, r4
 8013512:	6025      	str	r5, [r4, #0]
 8013514:	bf18      	it	ne
 8013516:	6059      	strne	r1, [r3, #4]
 8013518:	6863      	ldr	r3, [r4, #4]
 801351a:	bf08      	it	eq
 801351c:	f8c8 1000 	streq.w	r1, [r8]
 8013520:	5162      	str	r2, [r4, r5]
 8013522:	604b      	str	r3, [r1, #4]
 8013524:	4630      	mov	r0, r6
 8013526:	f000 f82f 	bl	8013588 <__malloc_unlock>
 801352a:	f104 000b 	add.w	r0, r4, #11
 801352e:	1d23      	adds	r3, r4, #4
 8013530:	f020 0007 	bic.w	r0, r0, #7
 8013534:	1ac2      	subs	r2, r0, r3
 8013536:	bf1c      	itt	ne
 8013538:	1a1b      	subne	r3, r3, r0
 801353a:	50a3      	strne	r3, [r4, r2]
 801353c:	e7af      	b.n	801349e <_malloc_r+0x22>
 801353e:	6862      	ldr	r2, [r4, #4]
 8013540:	42a3      	cmp	r3, r4
 8013542:	bf0c      	ite	eq
 8013544:	f8c8 2000 	streq.w	r2, [r8]
 8013548:	605a      	strne	r2, [r3, #4]
 801354a:	e7eb      	b.n	8013524 <_malloc_r+0xa8>
 801354c:	4623      	mov	r3, r4
 801354e:	6864      	ldr	r4, [r4, #4]
 8013550:	e7ae      	b.n	80134b0 <_malloc_r+0x34>
 8013552:	463c      	mov	r4, r7
 8013554:	687f      	ldr	r7, [r7, #4]
 8013556:	e7b6      	b.n	80134c6 <_malloc_r+0x4a>
 8013558:	461a      	mov	r2, r3
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	42a3      	cmp	r3, r4
 801355e:	d1fb      	bne.n	8013558 <_malloc_r+0xdc>
 8013560:	2300      	movs	r3, #0
 8013562:	6053      	str	r3, [r2, #4]
 8013564:	e7de      	b.n	8013524 <_malloc_r+0xa8>
 8013566:	230c      	movs	r3, #12
 8013568:	6033      	str	r3, [r6, #0]
 801356a:	4630      	mov	r0, r6
 801356c:	f000 f80c 	bl	8013588 <__malloc_unlock>
 8013570:	e794      	b.n	801349c <_malloc_r+0x20>
 8013572:	6005      	str	r5, [r0, #0]
 8013574:	e7d6      	b.n	8013524 <_malloc_r+0xa8>
 8013576:	bf00      	nop
 8013578:	2000db14 	.word	0x2000db14

0801357c <__malloc_lock>:
 801357c:	4801      	ldr	r0, [pc, #4]	@ (8013584 <__malloc_lock+0x8>)
 801357e:	f000 bb90 	b.w	8013ca2 <__retarget_lock_acquire_recursive>
 8013582:	bf00      	nop
 8013584:	2000dc59 	.word	0x2000dc59

08013588 <__malloc_unlock>:
 8013588:	4801      	ldr	r0, [pc, #4]	@ (8013590 <__malloc_unlock+0x8>)
 801358a:	f000 bb8b 	b.w	8013ca4 <__retarget_lock_release_recursive>
 801358e:	bf00      	nop
 8013590:	2000dc59 	.word	0x2000dc59

08013594 <srand>:
 8013594:	b538      	push	{r3, r4, r5, lr}
 8013596:	4b10      	ldr	r3, [pc, #64]	@ (80135d8 <srand+0x44>)
 8013598:	681d      	ldr	r5, [r3, #0]
 801359a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801359c:	4604      	mov	r4, r0
 801359e:	b9b3      	cbnz	r3, 80135ce <srand+0x3a>
 80135a0:	2018      	movs	r0, #24
 80135a2:	f7ff ff39 	bl	8013418 <malloc>
 80135a6:	4602      	mov	r2, r0
 80135a8:	6328      	str	r0, [r5, #48]	@ 0x30
 80135aa:	b920      	cbnz	r0, 80135b6 <srand+0x22>
 80135ac:	4b0b      	ldr	r3, [pc, #44]	@ (80135dc <srand+0x48>)
 80135ae:	480c      	ldr	r0, [pc, #48]	@ (80135e0 <srand+0x4c>)
 80135b0:	2146      	movs	r1, #70	@ 0x46
 80135b2:	f000 fb8f 	bl	8013cd4 <__assert_func>
 80135b6:	490b      	ldr	r1, [pc, #44]	@ (80135e4 <srand+0x50>)
 80135b8:	4b0b      	ldr	r3, [pc, #44]	@ (80135e8 <srand+0x54>)
 80135ba:	e9c0 1300 	strd	r1, r3, [r0]
 80135be:	4b0b      	ldr	r3, [pc, #44]	@ (80135ec <srand+0x58>)
 80135c0:	6083      	str	r3, [r0, #8]
 80135c2:	230b      	movs	r3, #11
 80135c4:	8183      	strh	r3, [r0, #12]
 80135c6:	2100      	movs	r1, #0
 80135c8:	2001      	movs	r0, #1
 80135ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80135ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135d0:	2200      	movs	r2, #0
 80135d2:	611c      	str	r4, [r3, #16]
 80135d4:	615a      	str	r2, [r3, #20]
 80135d6:	bd38      	pop	{r3, r4, r5, pc}
 80135d8:	200000c0 	.word	0x200000c0
 80135dc:	08015600 	.word	0x08015600
 80135e0:	08015617 	.word	0x08015617
 80135e4:	abcd330e 	.word	0xabcd330e
 80135e8:	e66d1234 	.word	0xe66d1234
 80135ec:	0005deec 	.word	0x0005deec

080135f0 <rand>:
 80135f0:	4b16      	ldr	r3, [pc, #88]	@ (801364c <rand+0x5c>)
 80135f2:	b510      	push	{r4, lr}
 80135f4:	681c      	ldr	r4, [r3, #0]
 80135f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135f8:	b9b3      	cbnz	r3, 8013628 <rand+0x38>
 80135fa:	2018      	movs	r0, #24
 80135fc:	f7ff ff0c 	bl	8013418 <malloc>
 8013600:	4602      	mov	r2, r0
 8013602:	6320      	str	r0, [r4, #48]	@ 0x30
 8013604:	b920      	cbnz	r0, 8013610 <rand+0x20>
 8013606:	4b12      	ldr	r3, [pc, #72]	@ (8013650 <rand+0x60>)
 8013608:	4812      	ldr	r0, [pc, #72]	@ (8013654 <rand+0x64>)
 801360a:	2152      	movs	r1, #82	@ 0x52
 801360c:	f000 fb62 	bl	8013cd4 <__assert_func>
 8013610:	4911      	ldr	r1, [pc, #68]	@ (8013658 <rand+0x68>)
 8013612:	4b12      	ldr	r3, [pc, #72]	@ (801365c <rand+0x6c>)
 8013614:	e9c0 1300 	strd	r1, r3, [r0]
 8013618:	4b11      	ldr	r3, [pc, #68]	@ (8013660 <rand+0x70>)
 801361a:	6083      	str	r3, [r0, #8]
 801361c:	230b      	movs	r3, #11
 801361e:	8183      	strh	r3, [r0, #12]
 8013620:	2100      	movs	r1, #0
 8013622:	2001      	movs	r0, #1
 8013624:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013628:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801362a:	480e      	ldr	r0, [pc, #56]	@ (8013664 <rand+0x74>)
 801362c:	690b      	ldr	r3, [r1, #16]
 801362e:	694c      	ldr	r4, [r1, #20]
 8013630:	4a0d      	ldr	r2, [pc, #52]	@ (8013668 <rand+0x78>)
 8013632:	4358      	muls	r0, r3
 8013634:	fb02 0004 	mla	r0, r2, r4, r0
 8013638:	fba3 3202 	umull	r3, r2, r3, r2
 801363c:	3301      	adds	r3, #1
 801363e:	eb40 0002 	adc.w	r0, r0, r2
 8013642:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013646:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801364a:	bd10      	pop	{r4, pc}
 801364c:	200000c0 	.word	0x200000c0
 8013650:	08015600 	.word	0x08015600
 8013654:	08015617 	.word	0x08015617
 8013658:	abcd330e 	.word	0xabcd330e
 801365c:	e66d1234 	.word	0xe66d1234
 8013660:	0005deec 	.word	0x0005deec
 8013664:	5851f42d 	.word	0x5851f42d
 8013668:	4c957f2d 	.word	0x4c957f2d

0801366c <realloc>:
 801366c:	4b02      	ldr	r3, [pc, #8]	@ (8013678 <realloc+0xc>)
 801366e:	460a      	mov	r2, r1
 8013670:	4601      	mov	r1, r0
 8013672:	6818      	ldr	r0, [r3, #0]
 8013674:	f000 b802 	b.w	801367c <_realloc_r>
 8013678:	200000c0 	.word	0x200000c0

0801367c <_realloc_r>:
 801367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013680:	4680      	mov	r8, r0
 8013682:	4615      	mov	r5, r2
 8013684:	460c      	mov	r4, r1
 8013686:	b921      	cbnz	r1, 8013692 <_realloc_r+0x16>
 8013688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801368c:	4611      	mov	r1, r2
 801368e:	f7ff bef5 	b.w	801347c <_malloc_r>
 8013692:	b92a      	cbnz	r2, 80136a0 <_realloc_r+0x24>
 8013694:	f000 fb48 	bl	8013d28 <_free_r>
 8013698:	2400      	movs	r4, #0
 801369a:	4620      	mov	r0, r4
 801369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a0:	f000 fb8c 	bl	8013dbc <_malloc_usable_size_r>
 80136a4:	4285      	cmp	r5, r0
 80136a6:	4606      	mov	r6, r0
 80136a8:	d802      	bhi.n	80136b0 <_realloc_r+0x34>
 80136aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136ae:	d8f4      	bhi.n	801369a <_realloc_r+0x1e>
 80136b0:	4629      	mov	r1, r5
 80136b2:	4640      	mov	r0, r8
 80136b4:	f7ff fee2 	bl	801347c <_malloc_r>
 80136b8:	4607      	mov	r7, r0
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d0ec      	beq.n	8013698 <_realloc_r+0x1c>
 80136be:	42b5      	cmp	r5, r6
 80136c0:	462a      	mov	r2, r5
 80136c2:	4621      	mov	r1, r4
 80136c4:	bf28      	it	cs
 80136c6:	4632      	movcs	r2, r6
 80136c8:	f000 faf5 	bl	8013cb6 <memcpy>
 80136cc:	4621      	mov	r1, r4
 80136ce:	4640      	mov	r0, r8
 80136d0:	f000 fb2a 	bl	8013d28 <_free_r>
 80136d4:	463c      	mov	r4, r7
 80136d6:	e7e0      	b.n	801369a <_realloc_r+0x1e>

080136d8 <_strtoul_l.constprop.0>:
 80136d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136dc:	4e34      	ldr	r6, [pc, #208]	@ (80137b0 <_strtoul_l.constprop.0+0xd8>)
 80136de:	4686      	mov	lr, r0
 80136e0:	460d      	mov	r5, r1
 80136e2:	4628      	mov	r0, r5
 80136e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136e8:	5d37      	ldrb	r7, [r6, r4]
 80136ea:	f017 0708 	ands.w	r7, r7, #8
 80136ee:	d1f8      	bne.n	80136e2 <_strtoul_l.constprop.0+0xa>
 80136f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80136f2:	d12f      	bne.n	8013754 <_strtoul_l.constprop.0+0x7c>
 80136f4:	782c      	ldrb	r4, [r5, #0]
 80136f6:	2701      	movs	r7, #1
 80136f8:	1c85      	adds	r5, r0, #2
 80136fa:	f033 0010 	bics.w	r0, r3, #16
 80136fe:	d109      	bne.n	8013714 <_strtoul_l.constprop.0+0x3c>
 8013700:	2c30      	cmp	r4, #48	@ 0x30
 8013702:	d12c      	bne.n	801375e <_strtoul_l.constprop.0+0x86>
 8013704:	7828      	ldrb	r0, [r5, #0]
 8013706:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801370a:	2858      	cmp	r0, #88	@ 0x58
 801370c:	d127      	bne.n	801375e <_strtoul_l.constprop.0+0x86>
 801370e:	786c      	ldrb	r4, [r5, #1]
 8013710:	2310      	movs	r3, #16
 8013712:	3502      	adds	r5, #2
 8013714:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013718:	2600      	movs	r6, #0
 801371a:	fbb8 f8f3 	udiv	r8, r8, r3
 801371e:	fb03 f908 	mul.w	r9, r3, r8
 8013722:	ea6f 0909 	mvn.w	r9, r9
 8013726:	4630      	mov	r0, r6
 8013728:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801372c:	f1bc 0f09 	cmp.w	ip, #9
 8013730:	d81c      	bhi.n	801376c <_strtoul_l.constprop.0+0x94>
 8013732:	4664      	mov	r4, ip
 8013734:	42a3      	cmp	r3, r4
 8013736:	dd2a      	ble.n	801378e <_strtoul_l.constprop.0+0xb6>
 8013738:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801373c:	d007      	beq.n	801374e <_strtoul_l.constprop.0+0x76>
 801373e:	4580      	cmp	r8, r0
 8013740:	d322      	bcc.n	8013788 <_strtoul_l.constprop.0+0xb0>
 8013742:	d101      	bne.n	8013748 <_strtoul_l.constprop.0+0x70>
 8013744:	45a1      	cmp	r9, r4
 8013746:	db1f      	blt.n	8013788 <_strtoul_l.constprop.0+0xb0>
 8013748:	fb00 4003 	mla	r0, r0, r3, r4
 801374c:	2601      	movs	r6, #1
 801374e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013752:	e7e9      	b.n	8013728 <_strtoul_l.constprop.0+0x50>
 8013754:	2c2b      	cmp	r4, #43	@ 0x2b
 8013756:	bf04      	itt	eq
 8013758:	782c      	ldrbeq	r4, [r5, #0]
 801375a:	1c85      	addeq	r5, r0, #2
 801375c:	e7cd      	b.n	80136fa <_strtoul_l.constprop.0+0x22>
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1d8      	bne.n	8013714 <_strtoul_l.constprop.0+0x3c>
 8013762:	2c30      	cmp	r4, #48	@ 0x30
 8013764:	bf0c      	ite	eq
 8013766:	2308      	moveq	r3, #8
 8013768:	230a      	movne	r3, #10
 801376a:	e7d3      	b.n	8013714 <_strtoul_l.constprop.0+0x3c>
 801376c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013770:	f1bc 0f19 	cmp.w	ip, #25
 8013774:	d801      	bhi.n	801377a <_strtoul_l.constprop.0+0xa2>
 8013776:	3c37      	subs	r4, #55	@ 0x37
 8013778:	e7dc      	b.n	8013734 <_strtoul_l.constprop.0+0x5c>
 801377a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801377e:	f1bc 0f19 	cmp.w	ip, #25
 8013782:	d804      	bhi.n	801378e <_strtoul_l.constprop.0+0xb6>
 8013784:	3c57      	subs	r4, #87	@ 0x57
 8013786:	e7d5      	b.n	8013734 <_strtoul_l.constprop.0+0x5c>
 8013788:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801378c:	e7df      	b.n	801374e <_strtoul_l.constprop.0+0x76>
 801378e:	1c73      	adds	r3, r6, #1
 8013790:	d106      	bne.n	80137a0 <_strtoul_l.constprop.0+0xc8>
 8013792:	2322      	movs	r3, #34	@ 0x22
 8013794:	f8ce 3000 	str.w	r3, [lr]
 8013798:	4630      	mov	r0, r6
 801379a:	b932      	cbnz	r2, 80137aa <_strtoul_l.constprop.0+0xd2>
 801379c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137a0:	b107      	cbz	r7, 80137a4 <_strtoul_l.constprop.0+0xcc>
 80137a2:	4240      	negs	r0, r0
 80137a4:	2a00      	cmp	r2, #0
 80137a6:	d0f9      	beq.n	801379c <_strtoul_l.constprop.0+0xc4>
 80137a8:	b106      	cbz	r6, 80137ac <_strtoul_l.constprop.0+0xd4>
 80137aa:	1e69      	subs	r1, r5, #1
 80137ac:	6011      	str	r1, [r2, #0]
 80137ae:	e7f5      	b.n	801379c <_strtoul_l.constprop.0+0xc4>
 80137b0:	08015670 	.word	0x08015670

080137b4 <strtoul>:
 80137b4:	4613      	mov	r3, r2
 80137b6:	460a      	mov	r2, r1
 80137b8:	4601      	mov	r1, r0
 80137ba:	4802      	ldr	r0, [pc, #8]	@ (80137c4 <strtoul+0x10>)
 80137bc:	6800      	ldr	r0, [r0, #0]
 80137be:	f7ff bf8b 	b.w	80136d8 <_strtoul_l.constprop.0>
 80137c2:	bf00      	nop
 80137c4:	200000c0 	.word	0x200000c0

080137c8 <std>:
 80137c8:	2300      	movs	r3, #0
 80137ca:	b510      	push	{r4, lr}
 80137cc:	4604      	mov	r4, r0
 80137ce:	e9c0 3300 	strd	r3, r3, [r0]
 80137d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137d6:	6083      	str	r3, [r0, #8]
 80137d8:	8181      	strh	r1, [r0, #12]
 80137da:	6643      	str	r3, [r0, #100]	@ 0x64
 80137dc:	81c2      	strh	r2, [r0, #14]
 80137de:	6183      	str	r3, [r0, #24]
 80137e0:	4619      	mov	r1, r3
 80137e2:	2208      	movs	r2, #8
 80137e4:	305c      	adds	r0, #92	@ 0x5c
 80137e6:	f000 f99d 	bl	8013b24 <memset>
 80137ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013820 <std+0x58>)
 80137ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80137ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013824 <std+0x5c>)
 80137f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80137f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013828 <std+0x60>)
 80137f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80137f6:	4b0d      	ldr	r3, [pc, #52]	@ (801382c <std+0x64>)
 80137f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80137fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013830 <std+0x68>)
 80137fc:	6224      	str	r4, [r4, #32]
 80137fe:	429c      	cmp	r4, r3
 8013800:	d006      	beq.n	8013810 <std+0x48>
 8013802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013806:	4294      	cmp	r4, r2
 8013808:	d002      	beq.n	8013810 <std+0x48>
 801380a:	33d0      	adds	r3, #208	@ 0xd0
 801380c:	429c      	cmp	r4, r3
 801380e:	d105      	bne.n	801381c <std+0x54>
 8013810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013818:	f000 ba42 	b.w	8013ca0 <__retarget_lock_init_recursive>
 801381c:	bd10      	pop	{r4, pc}
 801381e:	bf00      	nop
 8013820:	080139d9 	.word	0x080139d9
 8013824:	080139fb 	.word	0x080139fb
 8013828:	08013a33 	.word	0x08013a33
 801382c:	08013a57 	.word	0x08013a57
 8013830:	2000db18 	.word	0x2000db18

08013834 <stdio_exit_handler>:
 8013834:	4a02      	ldr	r2, [pc, #8]	@ (8013840 <stdio_exit_handler+0xc>)
 8013836:	4903      	ldr	r1, [pc, #12]	@ (8013844 <stdio_exit_handler+0x10>)
 8013838:	4803      	ldr	r0, [pc, #12]	@ (8013848 <stdio_exit_handler+0x14>)
 801383a:	f000 b869 	b.w	8013910 <_fwalk_sglue>
 801383e:	bf00      	nop
 8013840:	200000b4 	.word	0x200000b4
 8013844:	08014725 	.word	0x08014725
 8013848:	200000c4 	.word	0x200000c4

0801384c <cleanup_stdio>:
 801384c:	6841      	ldr	r1, [r0, #4]
 801384e:	4b0c      	ldr	r3, [pc, #48]	@ (8013880 <cleanup_stdio+0x34>)
 8013850:	4299      	cmp	r1, r3
 8013852:	b510      	push	{r4, lr}
 8013854:	4604      	mov	r4, r0
 8013856:	d001      	beq.n	801385c <cleanup_stdio+0x10>
 8013858:	f000 ff64 	bl	8014724 <_fflush_r>
 801385c:	68a1      	ldr	r1, [r4, #8]
 801385e:	4b09      	ldr	r3, [pc, #36]	@ (8013884 <cleanup_stdio+0x38>)
 8013860:	4299      	cmp	r1, r3
 8013862:	d002      	beq.n	801386a <cleanup_stdio+0x1e>
 8013864:	4620      	mov	r0, r4
 8013866:	f000 ff5d 	bl	8014724 <_fflush_r>
 801386a:	68e1      	ldr	r1, [r4, #12]
 801386c:	4b06      	ldr	r3, [pc, #24]	@ (8013888 <cleanup_stdio+0x3c>)
 801386e:	4299      	cmp	r1, r3
 8013870:	d004      	beq.n	801387c <cleanup_stdio+0x30>
 8013872:	4620      	mov	r0, r4
 8013874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013878:	f000 bf54 	b.w	8014724 <_fflush_r>
 801387c:	bd10      	pop	{r4, pc}
 801387e:	bf00      	nop
 8013880:	2000db18 	.word	0x2000db18
 8013884:	2000db80 	.word	0x2000db80
 8013888:	2000dbe8 	.word	0x2000dbe8

0801388c <global_stdio_init.part.0>:
 801388c:	b510      	push	{r4, lr}
 801388e:	4b0b      	ldr	r3, [pc, #44]	@ (80138bc <global_stdio_init.part.0+0x30>)
 8013890:	4c0b      	ldr	r4, [pc, #44]	@ (80138c0 <global_stdio_init.part.0+0x34>)
 8013892:	4a0c      	ldr	r2, [pc, #48]	@ (80138c4 <global_stdio_init.part.0+0x38>)
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	4620      	mov	r0, r4
 8013898:	2200      	movs	r2, #0
 801389a:	2104      	movs	r1, #4
 801389c:	f7ff ff94 	bl	80137c8 <std>
 80138a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80138a4:	2201      	movs	r2, #1
 80138a6:	2109      	movs	r1, #9
 80138a8:	f7ff ff8e 	bl	80137c8 <std>
 80138ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80138b0:	2202      	movs	r2, #2
 80138b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138b6:	2112      	movs	r1, #18
 80138b8:	f7ff bf86 	b.w	80137c8 <std>
 80138bc:	2000dc50 	.word	0x2000dc50
 80138c0:	2000db18 	.word	0x2000db18
 80138c4:	08013835 	.word	0x08013835

080138c8 <__sfp_lock_acquire>:
 80138c8:	4801      	ldr	r0, [pc, #4]	@ (80138d0 <__sfp_lock_acquire+0x8>)
 80138ca:	f000 b9ea 	b.w	8013ca2 <__retarget_lock_acquire_recursive>
 80138ce:	bf00      	nop
 80138d0:	2000dc5a 	.word	0x2000dc5a

080138d4 <__sfp_lock_release>:
 80138d4:	4801      	ldr	r0, [pc, #4]	@ (80138dc <__sfp_lock_release+0x8>)
 80138d6:	f000 b9e5 	b.w	8013ca4 <__retarget_lock_release_recursive>
 80138da:	bf00      	nop
 80138dc:	2000dc5a 	.word	0x2000dc5a

080138e0 <__sinit>:
 80138e0:	b510      	push	{r4, lr}
 80138e2:	4604      	mov	r4, r0
 80138e4:	f7ff fff0 	bl	80138c8 <__sfp_lock_acquire>
 80138e8:	6a23      	ldr	r3, [r4, #32]
 80138ea:	b11b      	cbz	r3, 80138f4 <__sinit+0x14>
 80138ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138f0:	f7ff bff0 	b.w	80138d4 <__sfp_lock_release>
 80138f4:	4b04      	ldr	r3, [pc, #16]	@ (8013908 <__sinit+0x28>)
 80138f6:	6223      	str	r3, [r4, #32]
 80138f8:	4b04      	ldr	r3, [pc, #16]	@ (801390c <__sinit+0x2c>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1f5      	bne.n	80138ec <__sinit+0xc>
 8013900:	f7ff ffc4 	bl	801388c <global_stdio_init.part.0>
 8013904:	e7f2      	b.n	80138ec <__sinit+0xc>
 8013906:	bf00      	nop
 8013908:	0801384d 	.word	0x0801384d
 801390c:	2000dc50 	.word	0x2000dc50

08013910 <_fwalk_sglue>:
 8013910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013914:	4607      	mov	r7, r0
 8013916:	4688      	mov	r8, r1
 8013918:	4614      	mov	r4, r2
 801391a:	2600      	movs	r6, #0
 801391c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013920:	f1b9 0901 	subs.w	r9, r9, #1
 8013924:	d505      	bpl.n	8013932 <_fwalk_sglue+0x22>
 8013926:	6824      	ldr	r4, [r4, #0]
 8013928:	2c00      	cmp	r4, #0
 801392a:	d1f7      	bne.n	801391c <_fwalk_sglue+0xc>
 801392c:	4630      	mov	r0, r6
 801392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013932:	89ab      	ldrh	r3, [r5, #12]
 8013934:	2b01      	cmp	r3, #1
 8013936:	d907      	bls.n	8013948 <_fwalk_sglue+0x38>
 8013938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801393c:	3301      	adds	r3, #1
 801393e:	d003      	beq.n	8013948 <_fwalk_sglue+0x38>
 8013940:	4629      	mov	r1, r5
 8013942:	4638      	mov	r0, r7
 8013944:	47c0      	blx	r8
 8013946:	4306      	orrs	r6, r0
 8013948:	3568      	adds	r5, #104	@ 0x68
 801394a:	e7e9      	b.n	8013920 <_fwalk_sglue+0x10>

0801394c <iprintf>:
 801394c:	b40f      	push	{r0, r1, r2, r3}
 801394e:	b507      	push	{r0, r1, r2, lr}
 8013950:	4906      	ldr	r1, [pc, #24]	@ (801396c <iprintf+0x20>)
 8013952:	ab04      	add	r3, sp, #16
 8013954:	6808      	ldr	r0, [r1, #0]
 8013956:	f853 2b04 	ldr.w	r2, [r3], #4
 801395a:	6881      	ldr	r1, [r0, #8]
 801395c:	9301      	str	r3, [sp, #4]
 801395e:	f000 fbb7 	bl	80140d0 <_vfiprintf_r>
 8013962:	b003      	add	sp, #12
 8013964:	f85d eb04 	ldr.w	lr, [sp], #4
 8013968:	b004      	add	sp, #16
 801396a:	4770      	bx	lr
 801396c:	200000c0 	.word	0x200000c0

08013970 <sniprintf>:
 8013970:	b40c      	push	{r2, r3}
 8013972:	b530      	push	{r4, r5, lr}
 8013974:	4b17      	ldr	r3, [pc, #92]	@ (80139d4 <sniprintf+0x64>)
 8013976:	1e0c      	subs	r4, r1, #0
 8013978:	681d      	ldr	r5, [r3, #0]
 801397a:	b09d      	sub	sp, #116	@ 0x74
 801397c:	da08      	bge.n	8013990 <sniprintf+0x20>
 801397e:	238b      	movs	r3, #139	@ 0x8b
 8013980:	602b      	str	r3, [r5, #0]
 8013982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013986:	b01d      	add	sp, #116	@ 0x74
 8013988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801398c:	b002      	add	sp, #8
 801398e:	4770      	bx	lr
 8013990:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013994:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013998:	bf14      	ite	ne
 801399a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801399e:	4623      	moveq	r3, r4
 80139a0:	9304      	str	r3, [sp, #16]
 80139a2:	9307      	str	r3, [sp, #28]
 80139a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139a8:	9002      	str	r0, [sp, #8]
 80139aa:	9006      	str	r0, [sp, #24]
 80139ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80139b2:	ab21      	add	r3, sp, #132	@ 0x84
 80139b4:	a902      	add	r1, sp, #8
 80139b6:	4628      	mov	r0, r5
 80139b8:	9301      	str	r3, [sp, #4]
 80139ba:	f000 fa63 	bl	8013e84 <_svfiprintf_r>
 80139be:	1c43      	adds	r3, r0, #1
 80139c0:	bfbc      	itt	lt
 80139c2:	238b      	movlt	r3, #139	@ 0x8b
 80139c4:	602b      	strlt	r3, [r5, #0]
 80139c6:	2c00      	cmp	r4, #0
 80139c8:	d0dd      	beq.n	8013986 <sniprintf+0x16>
 80139ca:	9b02      	ldr	r3, [sp, #8]
 80139cc:	2200      	movs	r2, #0
 80139ce:	701a      	strb	r2, [r3, #0]
 80139d0:	e7d9      	b.n	8013986 <sniprintf+0x16>
 80139d2:	bf00      	nop
 80139d4:	200000c0 	.word	0x200000c0

080139d8 <__sread>:
 80139d8:	b510      	push	{r4, lr}
 80139da:	460c      	mov	r4, r1
 80139dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139e0:	f000 f900 	bl	8013be4 <_read_r>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	bfab      	itete	ge
 80139e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80139ea:	89a3      	ldrhlt	r3, [r4, #12]
 80139ec:	181b      	addge	r3, r3, r0
 80139ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80139f2:	bfac      	ite	ge
 80139f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80139f6:	81a3      	strhlt	r3, [r4, #12]
 80139f8:	bd10      	pop	{r4, pc}

080139fa <__swrite>:
 80139fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fe:	461f      	mov	r7, r3
 8013a00:	898b      	ldrh	r3, [r1, #12]
 8013a02:	05db      	lsls	r3, r3, #23
 8013a04:	4605      	mov	r5, r0
 8013a06:	460c      	mov	r4, r1
 8013a08:	4616      	mov	r6, r2
 8013a0a:	d505      	bpl.n	8013a18 <__swrite+0x1e>
 8013a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a10:	2302      	movs	r3, #2
 8013a12:	2200      	movs	r2, #0
 8013a14:	f000 f8d4 	bl	8013bc0 <_lseek_r>
 8013a18:	89a3      	ldrh	r3, [r4, #12]
 8013a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013a22:	81a3      	strh	r3, [r4, #12]
 8013a24:	4632      	mov	r2, r6
 8013a26:	463b      	mov	r3, r7
 8013a28:	4628      	mov	r0, r5
 8013a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2e:	f000 b8fb 	b.w	8013c28 <_write_r>

08013a32 <__sseek>:
 8013a32:	b510      	push	{r4, lr}
 8013a34:	460c      	mov	r4, r1
 8013a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a3a:	f000 f8c1 	bl	8013bc0 <_lseek_r>
 8013a3e:	1c43      	adds	r3, r0, #1
 8013a40:	89a3      	ldrh	r3, [r4, #12]
 8013a42:	bf15      	itete	ne
 8013a44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013a46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013a4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013a4e:	81a3      	strheq	r3, [r4, #12]
 8013a50:	bf18      	it	ne
 8013a52:	81a3      	strhne	r3, [r4, #12]
 8013a54:	bd10      	pop	{r4, pc}

08013a56 <__sclose>:
 8013a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5a:	f000 b8a1 	b.w	8013ba0 <_close_r>

08013a5e <_vsniprintf_r>:
 8013a5e:	b530      	push	{r4, r5, lr}
 8013a60:	4614      	mov	r4, r2
 8013a62:	2c00      	cmp	r4, #0
 8013a64:	b09b      	sub	sp, #108	@ 0x6c
 8013a66:	4605      	mov	r5, r0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	da05      	bge.n	8013a78 <_vsniprintf_r+0x1a>
 8013a6c:	238b      	movs	r3, #139	@ 0x8b
 8013a6e:	6003      	str	r3, [r0, #0]
 8013a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a74:	b01b      	add	sp, #108	@ 0x6c
 8013a76:	bd30      	pop	{r4, r5, pc}
 8013a78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013a7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013a80:	bf14      	ite	ne
 8013a82:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8013a86:	4623      	moveq	r3, r4
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	9305      	str	r3, [sp, #20]
 8013a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013a90:	9100      	str	r1, [sp, #0]
 8013a92:	9104      	str	r1, [sp, #16]
 8013a94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a98:	4669      	mov	r1, sp
 8013a9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013a9c:	f000 f9f2 	bl	8013e84 <_svfiprintf_r>
 8013aa0:	1c43      	adds	r3, r0, #1
 8013aa2:	bfbc      	itt	lt
 8013aa4:	238b      	movlt	r3, #139	@ 0x8b
 8013aa6:	602b      	strlt	r3, [r5, #0]
 8013aa8:	2c00      	cmp	r4, #0
 8013aaa:	d0e3      	beq.n	8013a74 <_vsniprintf_r+0x16>
 8013aac:	9b00      	ldr	r3, [sp, #0]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	701a      	strb	r2, [r3, #0]
 8013ab2:	e7df      	b.n	8013a74 <_vsniprintf_r+0x16>

08013ab4 <vsniprintf>:
 8013ab4:	b507      	push	{r0, r1, r2, lr}
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	4613      	mov	r3, r2
 8013aba:	460a      	mov	r2, r1
 8013abc:	4601      	mov	r1, r0
 8013abe:	4803      	ldr	r0, [pc, #12]	@ (8013acc <vsniprintf+0x18>)
 8013ac0:	6800      	ldr	r0, [r0, #0]
 8013ac2:	f7ff ffcc 	bl	8013a5e <_vsniprintf_r>
 8013ac6:	b003      	add	sp, #12
 8013ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013acc:	200000c0 	.word	0x200000c0

08013ad0 <memcmp>:
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	3901      	subs	r1, #1
 8013ad4:	4402      	add	r2, r0
 8013ad6:	4290      	cmp	r0, r2
 8013ad8:	d101      	bne.n	8013ade <memcmp+0xe>
 8013ada:	2000      	movs	r0, #0
 8013adc:	e005      	b.n	8013aea <memcmp+0x1a>
 8013ade:	7803      	ldrb	r3, [r0, #0]
 8013ae0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013ae4:	42a3      	cmp	r3, r4
 8013ae6:	d001      	beq.n	8013aec <memcmp+0x1c>
 8013ae8:	1b18      	subs	r0, r3, r4
 8013aea:	bd10      	pop	{r4, pc}
 8013aec:	3001      	adds	r0, #1
 8013aee:	e7f2      	b.n	8013ad6 <memcmp+0x6>

08013af0 <memmove>:
 8013af0:	4288      	cmp	r0, r1
 8013af2:	b510      	push	{r4, lr}
 8013af4:	eb01 0402 	add.w	r4, r1, r2
 8013af8:	d902      	bls.n	8013b00 <memmove+0x10>
 8013afa:	4284      	cmp	r4, r0
 8013afc:	4623      	mov	r3, r4
 8013afe:	d807      	bhi.n	8013b10 <memmove+0x20>
 8013b00:	1e43      	subs	r3, r0, #1
 8013b02:	42a1      	cmp	r1, r4
 8013b04:	d008      	beq.n	8013b18 <memmove+0x28>
 8013b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b0e:	e7f8      	b.n	8013b02 <memmove+0x12>
 8013b10:	4402      	add	r2, r0
 8013b12:	4601      	mov	r1, r0
 8013b14:	428a      	cmp	r2, r1
 8013b16:	d100      	bne.n	8013b1a <memmove+0x2a>
 8013b18:	bd10      	pop	{r4, pc}
 8013b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b22:	e7f7      	b.n	8013b14 <memmove+0x24>

08013b24 <memset>:
 8013b24:	4402      	add	r2, r0
 8013b26:	4603      	mov	r3, r0
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d100      	bne.n	8013b2e <memset+0xa>
 8013b2c:	4770      	bx	lr
 8013b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8013b32:	e7f9      	b.n	8013b28 <memset+0x4>

08013b34 <strchr>:
 8013b34:	b2c9      	uxtb	r1, r1
 8013b36:	4603      	mov	r3, r0
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b3e:	b112      	cbz	r2, 8013b46 <strchr+0x12>
 8013b40:	428a      	cmp	r2, r1
 8013b42:	d1f9      	bne.n	8013b38 <strchr+0x4>
 8013b44:	4770      	bx	lr
 8013b46:	2900      	cmp	r1, #0
 8013b48:	bf18      	it	ne
 8013b4a:	2000      	movne	r0, #0
 8013b4c:	4770      	bx	lr

08013b4e <strncmp>:
 8013b4e:	b510      	push	{r4, lr}
 8013b50:	b16a      	cbz	r2, 8013b6e <strncmp+0x20>
 8013b52:	3901      	subs	r1, #1
 8013b54:	1884      	adds	r4, r0, r2
 8013b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d103      	bne.n	8013b6a <strncmp+0x1c>
 8013b62:	42a0      	cmp	r0, r4
 8013b64:	d001      	beq.n	8013b6a <strncmp+0x1c>
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	d1f5      	bne.n	8013b56 <strncmp+0x8>
 8013b6a:	1ad0      	subs	r0, r2, r3
 8013b6c:	bd10      	pop	{r4, pc}
 8013b6e:	4610      	mov	r0, r2
 8013b70:	e7fc      	b.n	8013b6c <strncmp+0x1e>

08013b72 <strstr>:
 8013b72:	780a      	ldrb	r2, [r1, #0]
 8013b74:	b570      	push	{r4, r5, r6, lr}
 8013b76:	b96a      	cbnz	r2, 8013b94 <strstr+0x22>
 8013b78:	bd70      	pop	{r4, r5, r6, pc}
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d109      	bne.n	8013b92 <strstr+0x20>
 8013b7e:	460c      	mov	r4, r1
 8013b80:	4605      	mov	r5, r0
 8013b82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d0f6      	beq.n	8013b78 <strstr+0x6>
 8013b8a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013b8e:	429e      	cmp	r6, r3
 8013b90:	d0f7      	beq.n	8013b82 <strstr+0x10>
 8013b92:	3001      	adds	r0, #1
 8013b94:	7803      	ldrb	r3, [r0, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1ef      	bne.n	8013b7a <strstr+0x8>
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	e7ec      	b.n	8013b78 <strstr+0x6>
	...

08013ba0 <_close_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d06      	ldr	r5, [pc, #24]	@ (8013bbc <_close_r+0x1c>)
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	4608      	mov	r0, r1
 8013baa:	602b      	str	r3, [r5, #0]
 8013bac:	f7ed fcfa 	bl	80015a4 <_close>
 8013bb0:	1c43      	adds	r3, r0, #1
 8013bb2:	d102      	bne.n	8013bba <_close_r+0x1a>
 8013bb4:	682b      	ldr	r3, [r5, #0]
 8013bb6:	b103      	cbz	r3, 8013bba <_close_r+0x1a>
 8013bb8:	6023      	str	r3, [r4, #0]
 8013bba:	bd38      	pop	{r3, r4, r5, pc}
 8013bbc:	2000dc54 	.word	0x2000dc54

08013bc0 <_lseek_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	@ (8013be0 <_lseek_r+0x20>)
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	4611      	mov	r1, r2
 8013bca:	2200      	movs	r2, #0
 8013bcc:	602a      	str	r2, [r5, #0]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f7ed fd0f 	bl	80015f2 <_lseek>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d102      	bne.n	8013bde <_lseek_r+0x1e>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	b103      	cbz	r3, 8013bde <_lseek_r+0x1e>
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	bd38      	pop	{r3, r4, r5, pc}
 8013be0:	2000dc54 	.word	0x2000dc54

08013be4 <_read_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4d07      	ldr	r5, [pc, #28]	@ (8013c04 <_read_r+0x20>)
 8013be8:	4604      	mov	r4, r0
 8013bea:	4608      	mov	r0, r1
 8013bec:	4611      	mov	r1, r2
 8013bee:	2200      	movs	r2, #0
 8013bf0:	602a      	str	r2, [r5, #0]
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	f7ed fc9d 	bl	8001532 <_read>
 8013bf8:	1c43      	adds	r3, r0, #1
 8013bfa:	d102      	bne.n	8013c02 <_read_r+0x1e>
 8013bfc:	682b      	ldr	r3, [r5, #0]
 8013bfe:	b103      	cbz	r3, 8013c02 <_read_r+0x1e>
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	bd38      	pop	{r3, r4, r5, pc}
 8013c04:	2000dc54 	.word	0x2000dc54

08013c08 <_sbrk_r>:
 8013c08:	b538      	push	{r3, r4, r5, lr}
 8013c0a:	4d06      	ldr	r5, [pc, #24]	@ (8013c24 <_sbrk_r+0x1c>)
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	4604      	mov	r4, r0
 8013c10:	4608      	mov	r0, r1
 8013c12:	602b      	str	r3, [r5, #0]
 8013c14:	f7ed fcfa 	bl	800160c <_sbrk>
 8013c18:	1c43      	adds	r3, r0, #1
 8013c1a:	d102      	bne.n	8013c22 <_sbrk_r+0x1a>
 8013c1c:	682b      	ldr	r3, [r5, #0]
 8013c1e:	b103      	cbz	r3, 8013c22 <_sbrk_r+0x1a>
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	bd38      	pop	{r3, r4, r5, pc}
 8013c24:	2000dc54 	.word	0x2000dc54

08013c28 <_write_r>:
 8013c28:	b538      	push	{r3, r4, r5, lr}
 8013c2a:	4d07      	ldr	r5, [pc, #28]	@ (8013c48 <_write_r+0x20>)
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	4608      	mov	r0, r1
 8013c30:	4611      	mov	r1, r2
 8013c32:	2200      	movs	r2, #0
 8013c34:	602a      	str	r2, [r5, #0]
 8013c36:	461a      	mov	r2, r3
 8013c38:	f7ed fc98 	bl	800156c <_write>
 8013c3c:	1c43      	adds	r3, r0, #1
 8013c3e:	d102      	bne.n	8013c46 <_write_r+0x1e>
 8013c40:	682b      	ldr	r3, [r5, #0]
 8013c42:	b103      	cbz	r3, 8013c46 <_write_r+0x1e>
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	bd38      	pop	{r3, r4, r5, pc}
 8013c48:	2000dc54 	.word	0x2000dc54

08013c4c <__errno>:
 8013c4c:	4b01      	ldr	r3, [pc, #4]	@ (8013c54 <__errno+0x8>)
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	4770      	bx	lr
 8013c52:	bf00      	nop
 8013c54:	200000c0 	.word	0x200000c0

08013c58 <__libc_init_array>:
 8013c58:	b570      	push	{r4, r5, r6, lr}
 8013c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8013c90 <__libc_init_array+0x38>)
 8013c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8013c94 <__libc_init_array+0x3c>)
 8013c5e:	1b64      	subs	r4, r4, r5
 8013c60:	10a4      	asrs	r4, r4, #2
 8013c62:	2600      	movs	r6, #0
 8013c64:	42a6      	cmp	r6, r4
 8013c66:	d109      	bne.n	8013c7c <__libc_init_array+0x24>
 8013c68:	4d0b      	ldr	r5, [pc, #44]	@ (8013c98 <__libc_init_array+0x40>)
 8013c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8013c9c <__libc_init_array+0x44>)
 8013c6c:	f000 fef8 	bl	8014a60 <_init>
 8013c70:	1b64      	subs	r4, r4, r5
 8013c72:	10a4      	asrs	r4, r4, #2
 8013c74:	2600      	movs	r6, #0
 8013c76:	42a6      	cmp	r6, r4
 8013c78:	d105      	bne.n	8013c86 <__libc_init_array+0x2e>
 8013c7a:	bd70      	pop	{r4, r5, r6, pc}
 8013c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c80:	4798      	blx	r3
 8013c82:	3601      	adds	r6, #1
 8013c84:	e7ee      	b.n	8013c64 <__libc_init_array+0xc>
 8013c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c8a:	4798      	blx	r3
 8013c8c:	3601      	adds	r6, #1
 8013c8e:	e7f2      	b.n	8013c76 <__libc_init_array+0x1e>
 8013c90:	080157e8 	.word	0x080157e8
 8013c94:	080157e8 	.word	0x080157e8
 8013c98:	080157e8 	.word	0x080157e8
 8013c9c:	080157f0 	.word	0x080157f0

08013ca0 <__retarget_lock_init_recursive>:
 8013ca0:	4770      	bx	lr

08013ca2 <__retarget_lock_acquire_recursive>:
 8013ca2:	4770      	bx	lr

08013ca4 <__retarget_lock_release_recursive>:
 8013ca4:	4770      	bx	lr

08013ca6 <strcpy>:
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013cac:	f803 2b01 	strb.w	r2, [r3], #1
 8013cb0:	2a00      	cmp	r2, #0
 8013cb2:	d1f9      	bne.n	8013ca8 <strcpy+0x2>
 8013cb4:	4770      	bx	lr

08013cb6 <memcpy>:
 8013cb6:	440a      	add	r2, r1
 8013cb8:	4291      	cmp	r1, r2
 8013cba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013cbe:	d100      	bne.n	8013cc2 <memcpy+0xc>
 8013cc0:	4770      	bx	lr
 8013cc2:	b510      	push	{r4, lr}
 8013cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ccc:	4291      	cmp	r1, r2
 8013cce:	d1f9      	bne.n	8013cc4 <memcpy+0xe>
 8013cd0:	bd10      	pop	{r4, pc}
	...

08013cd4 <__assert_func>:
 8013cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cd6:	4614      	mov	r4, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4b09      	ldr	r3, [pc, #36]	@ (8013d00 <__assert_func+0x2c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4605      	mov	r5, r0
 8013ce0:	68d8      	ldr	r0, [r3, #12]
 8013ce2:	b954      	cbnz	r4, 8013cfa <__assert_func+0x26>
 8013ce4:	4b07      	ldr	r3, [pc, #28]	@ (8013d04 <__assert_func+0x30>)
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cec:	9100      	str	r1, [sp, #0]
 8013cee:	462b      	mov	r3, r5
 8013cf0:	4905      	ldr	r1, [pc, #20]	@ (8013d08 <__assert_func+0x34>)
 8013cf2:	f000 fd3f 	bl	8014774 <fiprintf>
 8013cf6:	f000 fde3 	bl	80148c0 <abort>
 8013cfa:	4b04      	ldr	r3, [pc, #16]	@ (8013d0c <__assert_func+0x38>)
 8013cfc:	e7f4      	b.n	8013ce8 <__assert_func+0x14>
 8013cfe:	bf00      	nop
 8013d00:	200000c0 	.word	0x200000c0
 8013d04:	080157ab 	.word	0x080157ab
 8013d08:	0801577d 	.word	0x0801577d
 8013d0c:	08015770 	.word	0x08015770

08013d10 <__env_lock>:
 8013d10:	4801      	ldr	r0, [pc, #4]	@ (8013d18 <__env_lock+0x8>)
 8013d12:	f7ff bfc6 	b.w	8013ca2 <__retarget_lock_acquire_recursive>
 8013d16:	bf00      	nop
 8013d18:	2000dc58 	.word	0x2000dc58

08013d1c <__env_unlock>:
 8013d1c:	4801      	ldr	r0, [pc, #4]	@ (8013d24 <__env_unlock+0x8>)
 8013d1e:	f7ff bfc1 	b.w	8013ca4 <__retarget_lock_release_recursive>
 8013d22:	bf00      	nop
 8013d24:	2000dc58 	.word	0x2000dc58

08013d28 <_free_r>:
 8013d28:	b538      	push	{r3, r4, r5, lr}
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	2900      	cmp	r1, #0
 8013d2e:	d041      	beq.n	8013db4 <_free_r+0x8c>
 8013d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d34:	1f0c      	subs	r4, r1, #4
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	bfb8      	it	lt
 8013d3a:	18e4      	addlt	r4, r4, r3
 8013d3c:	f7ff fc1e 	bl	801357c <__malloc_lock>
 8013d40:	4a1d      	ldr	r2, [pc, #116]	@ (8013db8 <_free_r+0x90>)
 8013d42:	6813      	ldr	r3, [r2, #0]
 8013d44:	b933      	cbnz	r3, 8013d54 <_free_r+0x2c>
 8013d46:	6063      	str	r3, [r4, #4]
 8013d48:	6014      	str	r4, [r2, #0]
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d50:	f7ff bc1a 	b.w	8013588 <__malloc_unlock>
 8013d54:	42a3      	cmp	r3, r4
 8013d56:	d908      	bls.n	8013d6a <_free_r+0x42>
 8013d58:	6820      	ldr	r0, [r4, #0]
 8013d5a:	1821      	adds	r1, r4, r0
 8013d5c:	428b      	cmp	r3, r1
 8013d5e:	bf01      	itttt	eq
 8013d60:	6819      	ldreq	r1, [r3, #0]
 8013d62:	685b      	ldreq	r3, [r3, #4]
 8013d64:	1809      	addeq	r1, r1, r0
 8013d66:	6021      	streq	r1, [r4, #0]
 8013d68:	e7ed      	b.n	8013d46 <_free_r+0x1e>
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	b10b      	cbz	r3, 8013d74 <_free_r+0x4c>
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	d9fa      	bls.n	8013d6a <_free_r+0x42>
 8013d74:	6811      	ldr	r1, [r2, #0]
 8013d76:	1850      	adds	r0, r2, r1
 8013d78:	42a0      	cmp	r0, r4
 8013d7a:	d10b      	bne.n	8013d94 <_free_r+0x6c>
 8013d7c:	6820      	ldr	r0, [r4, #0]
 8013d7e:	4401      	add	r1, r0
 8013d80:	1850      	adds	r0, r2, r1
 8013d82:	4283      	cmp	r3, r0
 8013d84:	6011      	str	r1, [r2, #0]
 8013d86:	d1e0      	bne.n	8013d4a <_free_r+0x22>
 8013d88:	6818      	ldr	r0, [r3, #0]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	6053      	str	r3, [r2, #4]
 8013d8e:	4408      	add	r0, r1
 8013d90:	6010      	str	r0, [r2, #0]
 8013d92:	e7da      	b.n	8013d4a <_free_r+0x22>
 8013d94:	d902      	bls.n	8013d9c <_free_r+0x74>
 8013d96:	230c      	movs	r3, #12
 8013d98:	602b      	str	r3, [r5, #0]
 8013d9a:	e7d6      	b.n	8013d4a <_free_r+0x22>
 8013d9c:	6820      	ldr	r0, [r4, #0]
 8013d9e:	1821      	adds	r1, r4, r0
 8013da0:	428b      	cmp	r3, r1
 8013da2:	bf04      	itt	eq
 8013da4:	6819      	ldreq	r1, [r3, #0]
 8013da6:	685b      	ldreq	r3, [r3, #4]
 8013da8:	6063      	str	r3, [r4, #4]
 8013daa:	bf04      	itt	eq
 8013dac:	1809      	addeq	r1, r1, r0
 8013dae:	6021      	streq	r1, [r4, #0]
 8013db0:	6054      	str	r4, [r2, #4]
 8013db2:	e7ca      	b.n	8013d4a <_free_r+0x22>
 8013db4:	bd38      	pop	{r3, r4, r5, pc}
 8013db6:	bf00      	nop
 8013db8:	2000db14 	.word	0x2000db14

08013dbc <_malloc_usable_size_r>:
 8013dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dc0:	1f18      	subs	r0, r3, #4
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	bfbc      	itt	lt
 8013dc6:	580b      	ldrlt	r3, [r1, r0]
 8013dc8:	18c0      	addlt	r0, r0, r3
 8013dca:	4770      	bx	lr

08013dcc <__ssputs_r>:
 8013dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd0:	688e      	ldr	r6, [r1, #8]
 8013dd2:	461f      	mov	r7, r3
 8013dd4:	42be      	cmp	r6, r7
 8013dd6:	680b      	ldr	r3, [r1, #0]
 8013dd8:	4682      	mov	sl, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	4690      	mov	r8, r2
 8013dde:	d82d      	bhi.n	8013e3c <__ssputs_r+0x70>
 8013de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013de8:	d026      	beq.n	8013e38 <__ssputs_r+0x6c>
 8013dea:	6965      	ldr	r5, [r4, #20]
 8013dec:	6909      	ldr	r1, [r1, #16]
 8013dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013df2:	eba3 0901 	sub.w	r9, r3, r1
 8013df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013dfa:	1c7b      	adds	r3, r7, #1
 8013dfc:	444b      	add	r3, r9
 8013dfe:	106d      	asrs	r5, r5, #1
 8013e00:	429d      	cmp	r5, r3
 8013e02:	bf38      	it	cc
 8013e04:	461d      	movcc	r5, r3
 8013e06:	0553      	lsls	r3, r2, #21
 8013e08:	d527      	bpl.n	8013e5a <__ssputs_r+0x8e>
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	f7ff fb36 	bl	801347c <_malloc_r>
 8013e10:	4606      	mov	r6, r0
 8013e12:	b360      	cbz	r0, 8013e6e <__ssputs_r+0xa2>
 8013e14:	6921      	ldr	r1, [r4, #16]
 8013e16:	464a      	mov	r2, r9
 8013e18:	f7ff ff4d 	bl	8013cb6 <memcpy>
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e26:	81a3      	strh	r3, [r4, #12]
 8013e28:	6126      	str	r6, [r4, #16]
 8013e2a:	6165      	str	r5, [r4, #20]
 8013e2c:	444e      	add	r6, r9
 8013e2e:	eba5 0509 	sub.w	r5, r5, r9
 8013e32:	6026      	str	r6, [r4, #0]
 8013e34:	60a5      	str	r5, [r4, #8]
 8013e36:	463e      	mov	r6, r7
 8013e38:	42be      	cmp	r6, r7
 8013e3a:	d900      	bls.n	8013e3e <__ssputs_r+0x72>
 8013e3c:	463e      	mov	r6, r7
 8013e3e:	6820      	ldr	r0, [r4, #0]
 8013e40:	4632      	mov	r2, r6
 8013e42:	4641      	mov	r1, r8
 8013e44:	f7ff fe54 	bl	8013af0 <memmove>
 8013e48:	68a3      	ldr	r3, [r4, #8]
 8013e4a:	1b9b      	subs	r3, r3, r6
 8013e4c:	60a3      	str	r3, [r4, #8]
 8013e4e:	6823      	ldr	r3, [r4, #0]
 8013e50:	4433      	add	r3, r6
 8013e52:	6023      	str	r3, [r4, #0]
 8013e54:	2000      	movs	r0, #0
 8013e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e5a:	462a      	mov	r2, r5
 8013e5c:	f7ff fc0e 	bl	801367c <_realloc_r>
 8013e60:	4606      	mov	r6, r0
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d1e0      	bne.n	8013e28 <__ssputs_r+0x5c>
 8013e66:	6921      	ldr	r1, [r4, #16]
 8013e68:	4650      	mov	r0, sl
 8013e6a:	f7ff ff5d 	bl	8013d28 <_free_r>
 8013e6e:	230c      	movs	r3, #12
 8013e70:	f8ca 3000 	str.w	r3, [sl]
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e7a:	81a3      	strh	r3, [r4, #12]
 8013e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e80:	e7e9      	b.n	8013e56 <__ssputs_r+0x8a>
	...

08013e84 <_svfiprintf_r>:
 8013e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e88:	4698      	mov	r8, r3
 8013e8a:	898b      	ldrh	r3, [r1, #12]
 8013e8c:	061b      	lsls	r3, r3, #24
 8013e8e:	b09d      	sub	sp, #116	@ 0x74
 8013e90:	4607      	mov	r7, r0
 8013e92:	460d      	mov	r5, r1
 8013e94:	4614      	mov	r4, r2
 8013e96:	d510      	bpl.n	8013eba <_svfiprintf_r+0x36>
 8013e98:	690b      	ldr	r3, [r1, #16]
 8013e9a:	b973      	cbnz	r3, 8013eba <_svfiprintf_r+0x36>
 8013e9c:	2140      	movs	r1, #64	@ 0x40
 8013e9e:	f7ff faed 	bl	801347c <_malloc_r>
 8013ea2:	6028      	str	r0, [r5, #0]
 8013ea4:	6128      	str	r0, [r5, #16]
 8013ea6:	b930      	cbnz	r0, 8013eb6 <_svfiprintf_r+0x32>
 8013ea8:	230c      	movs	r3, #12
 8013eaa:	603b      	str	r3, [r7, #0]
 8013eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013eb0:	b01d      	add	sp, #116	@ 0x74
 8013eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb6:	2340      	movs	r3, #64	@ 0x40
 8013eb8:	616b      	str	r3, [r5, #20]
 8013eba:	2300      	movs	r3, #0
 8013ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ebe:	2320      	movs	r3, #32
 8013ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ec8:	2330      	movs	r3, #48	@ 0x30
 8013eca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014068 <_svfiprintf_r+0x1e4>
 8013ece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ed2:	f04f 0901 	mov.w	r9, #1
 8013ed6:	4623      	mov	r3, r4
 8013ed8:	469a      	mov	sl, r3
 8013eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ede:	b10a      	cbz	r2, 8013ee4 <_svfiprintf_r+0x60>
 8013ee0:	2a25      	cmp	r2, #37	@ 0x25
 8013ee2:	d1f9      	bne.n	8013ed8 <_svfiprintf_r+0x54>
 8013ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ee8:	d00b      	beq.n	8013f02 <_svfiprintf_r+0x7e>
 8013eea:	465b      	mov	r3, fp
 8013eec:	4622      	mov	r2, r4
 8013eee:	4629      	mov	r1, r5
 8013ef0:	4638      	mov	r0, r7
 8013ef2:	f7ff ff6b 	bl	8013dcc <__ssputs_r>
 8013ef6:	3001      	adds	r0, #1
 8013ef8:	f000 80a7 	beq.w	801404a <_svfiprintf_r+0x1c6>
 8013efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013efe:	445a      	add	r2, fp
 8013f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f02:	f89a 3000 	ldrb.w	r3, [sl]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	f000 809f 	beq.w	801404a <_svfiprintf_r+0x1c6>
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f16:	f10a 0a01 	add.w	sl, sl, #1
 8013f1a:	9304      	str	r3, [sp, #16]
 8013f1c:	9307      	str	r3, [sp, #28]
 8013f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f24:	4654      	mov	r4, sl
 8013f26:	2205      	movs	r2, #5
 8013f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2c:	484e      	ldr	r0, [pc, #312]	@ (8014068 <_svfiprintf_r+0x1e4>)
 8013f2e:	f7ec f96f 	bl	8000210 <memchr>
 8013f32:	9a04      	ldr	r2, [sp, #16]
 8013f34:	b9d8      	cbnz	r0, 8013f6e <_svfiprintf_r+0xea>
 8013f36:	06d0      	lsls	r0, r2, #27
 8013f38:	bf44      	itt	mi
 8013f3a:	2320      	movmi	r3, #32
 8013f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f40:	0711      	lsls	r1, r2, #28
 8013f42:	bf44      	itt	mi
 8013f44:	232b      	movmi	r3, #43	@ 0x2b
 8013f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f50:	d015      	beq.n	8013f7e <_svfiprintf_r+0xfa>
 8013f52:	9a07      	ldr	r2, [sp, #28]
 8013f54:	4654      	mov	r4, sl
 8013f56:	2000      	movs	r0, #0
 8013f58:	f04f 0c0a 	mov.w	ip, #10
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f62:	3b30      	subs	r3, #48	@ 0x30
 8013f64:	2b09      	cmp	r3, #9
 8013f66:	d94b      	bls.n	8014000 <_svfiprintf_r+0x17c>
 8013f68:	b1b0      	cbz	r0, 8013f98 <_svfiprintf_r+0x114>
 8013f6a:	9207      	str	r2, [sp, #28]
 8013f6c:	e014      	b.n	8013f98 <_svfiprintf_r+0x114>
 8013f6e:	eba0 0308 	sub.w	r3, r0, r8
 8013f72:	fa09 f303 	lsl.w	r3, r9, r3
 8013f76:	4313      	orrs	r3, r2
 8013f78:	9304      	str	r3, [sp, #16]
 8013f7a:	46a2      	mov	sl, r4
 8013f7c:	e7d2      	b.n	8013f24 <_svfiprintf_r+0xa0>
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	1d19      	adds	r1, r3, #4
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	9103      	str	r1, [sp, #12]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	bfbb      	ittet	lt
 8013f8a:	425b      	neglt	r3, r3
 8013f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8013f90:	9307      	strge	r3, [sp, #28]
 8013f92:	9307      	strlt	r3, [sp, #28]
 8013f94:	bfb8      	it	lt
 8013f96:	9204      	strlt	r2, [sp, #16]
 8013f98:	7823      	ldrb	r3, [r4, #0]
 8013f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f9c:	d10a      	bne.n	8013fb4 <_svfiprintf_r+0x130>
 8013f9e:	7863      	ldrb	r3, [r4, #1]
 8013fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fa2:	d132      	bne.n	801400a <_svfiprintf_r+0x186>
 8013fa4:	9b03      	ldr	r3, [sp, #12]
 8013fa6:	1d1a      	adds	r2, r3, #4
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	9203      	str	r2, [sp, #12]
 8013fac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013fb0:	3402      	adds	r4, #2
 8013fb2:	9305      	str	r3, [sp, #20]
 8013fb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014078 <_svfiprintf_r+0x1f4>
 8013fb8:	7821      	ldrb	r1, [r4, #0]
 8013fba:	2203      	movs	r2, #3
 8013fbc:	4650      	mov	r0, sl
 8013fbe:	f7ec f927 	bl	8000210 <memchr>
 8013fc2:	b138      	cbz	r0, 8013fd4 <_svfiprintf_r+0x150>
 8013fc4:	9b04      	ldr	r3, [sp, #16]
 8013fc6:	eba0 000a 	sub.w	r0, r0, sl
 8013fca:	2240      	movs	r2, #64	@ 0x40
 8013fcc:	4082      	lsls	r2, r0
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	3401      	adds	r4, #1
 8013fd2:	9304      	str	r3, [sp, #16]
 8013fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fd8:	4824      	ldr	r0, [pc, #144]	@ (801406c <_svfiprintf_r+0x1e8>)
 8013fda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013fde:	2206      	movs	r2, #6
 8013fe0:	f7ec f916 	bl	8000210 <memchr>
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	d036      	beq.n	8014056 <_svfiprintf_r+0x1d2>
 8013fe8:	4b21      	ldr	r3, [pc, #132]	@ (8014070 <_svfiprintf_r+0x1ec>)
 8013fea:	bb1b      	cbnz	r3, 8014034 <_svfiprintf_r+0x1b0>
 8013fec:	9b03      	ldr	r3, [sp, #12]
 8013fee:	3307      	adds	r3, #7
 8013ff0:	f023 0307 	bic.w	r3, r3, #7
 8013ff4:	3308      	adds	r3, #8
 8013ff6:	9303      	str	r3, [sp, #12]
 8013ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ffa:	4433      	add	r3, r6
 8013ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ffe:	e76a      	b.n	8013ed6 <_svfiprintf_r+0x52>
 8014000:	fb0c 3202 	mla	r2, ip, r2, r3
 8014004:	460c      	mov	r4, r1
 8014006:	2001      	movs	r0, #1
 8014008:	e7a8      	b.n	8013f5c <_svfiprintf_r+0xd8>
 801400a:	2300      	movs	r3, #0
 801400c:	3401      	adds	r4, #1
 801400e:	9305      	str	r3, [sp, #20]
 8014010:	4619      	mov	r1, r3
 8014012:	f04f 0c0a 	mov.w	ip, #10
 8014016:	4620      	mov	r0, r4
 8014018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801401c:	3a30      	subs	r2, #48	@ 0x30
 801401e:	2a09      	cmp	r2, #9
 8014020:	d903      	bls.n	801402a <_svfiprintf_r+0x1a6>
 8014022:	2b00      	cmp	r3, #0
 8014024:	d0c6      	beq.n	8013fb4 <_svfiprintf_r+0x130>
 8014026:	9105      	str	r1, [sp, #20]
 8014028:	e7c4      	b.n	8013fb4 <_svfiprintf_r+0x130>
 801402a:	fb0c 2101 	mla	r1, ip, r1, r2
 801402e:	4604      	mov	r4, r0
 8014030:	2301      	movs	r3, #1
 8014032:	e7f0      	b.n	8014016 <_svfiprintf_r+0x192>
 8014034:	ab03      	add	r3, sp, #12
 8014036:	9300      	str	r3, [sp, #0]
 8014038:	462a      	mov	r2, r5
 801403a:	4b0e      	ldr	r3, [pc, #56]	@ (8014074 <_svfiprintf_r+0x1f0>)
 801403c:	a904      	add	r1, sp, #16
 801403e:	4638      	mov	r0, r7
 8014040:	f3af 8000 	nop.w
 8014044:	1c42      	adds	r2, r0, #1
 8014046:	4606      	mov	r6, r0
 8014048:	d1d6      	bne.n	8013ff8 <_svfiprintf_r+0x174>
 801404a:	89ab      	ldrh	r3, [r5, #12]
 801404c:	065b      	lsls	r3, r3, #25
 801404e:	f53f af2d 	bmi.w	8013eac <_svfiprintf_r+0x28>
 8014052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014054:	e72c      	b.n	8013eb0 <_svfiprintf_r+0x2c>
 8014056:	ab03      	add	r3, sp, #12
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	462a      	mov	r2, r5
 801405c:	4b05      	ldr	r3, [pc, #20]	@ (8014074 <_svfiprintf_r+0x1f0>)
 801405e:	a904      	add	r1, sp, #16
 8014060:	4638      	mov	r0, r7
 8014062:	f000 f9bb 	bl	80143dc <_printf_i>
 8014066:	e7ed      	b.n	8014044 <_svfiprintf_r+0x1c0>
 8014068:	080157ac 	.word	0x080157ac
 801406c:	080157b6 	.word	0x080157b6
 8014070:	00000000 	.word	0x00000000
 8014074:	08013dcd 	.word	0x08013dcd
 8014078:	080157b2 	.word	0x080157b2

0801407c <__sfputc_r>:
 801407c:	6893      	ldr	r3, [r2, #8]
 801407e:	3b01      	subs	r3, #1
 8014080:	2b00      	cmp	r3, #0
 8014082:	b410      	push	{r4}
 8014084:	6093      	str	r3, [r2, #8]
 8014086:	da08      	bge.n	801409a <__sfputc_r+0x1e>
 8014088:	6994      	ldr	r4, [r2, #24]
 801408a:	42a3      	cmp	r3, r4
 801408c:	db01      	blt.n	8014092 <__sfputc_r+0x16>
 801408e:	290a      	cmp	r1, #10
 8014090:	d103      	bne.n	801409a <__sfputc_r+0x1e>
 8014092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014096:	f000 bb7f 	b.w	8014798 <__swbuf_r>
 801409a:	6813      	ldr	r3, [r2, #0]
 801409c:	1c58      	adds	r0, r3, #1
 801409e:	6010      	str	r0, [r2, #0]
 80140a0:	7019      	strb	r1, [r3, #0]
 80140a2:	4608      	mov	r0, r1
 80140a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a8:	4770      	bx	lr

080140aa <__sfputs_r>:
 80140aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ac:	4606      	mov	r6, r0
 80140ae:	460f      	mov	r7, r1
 80140b0:	4614      	mov	r4, r2
 80140b2:	18d5      	adds	r5, r2, r3
 80140b4:	42ac      	cmp	r4, r5
 80140b6:	d101      	bne.n	80140bc <__sfputs_r+0x12>
 80140b8:	2000      	movs	r0, #0
 80140ba:	e007      	b.n	80140cc <__sfputs_r+0x22>
 80140bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140c0:	463a      	mov	r2, r7
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7ff ffda 	bl	801407c <__sfputc_r>
 80140c8:	1c43      	adds	r3, r0, #1
 80140ca:	d1f3      	bne.n	80140b4 <__sfputs_r+0xa>
 80140cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080140d0 <_vfiprintf_r>:
 80140d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	460d      	mov	r5, r1
 80140d6:	b09d      	sub	sp, #116	@ 0x74
 80140d8:	4614      	mov	r4, r2
 80140da:	4698      	mov	r8, r3
 80140dc:	4606      	mov	r6, r0
 80140de:	b118      	cbz	r0, 80140e8 <_vfiprintf_r+0x18>
 80140e0:	6a03      	ldr	r3, [r0, #32]
 80140e2:	b90b      	cbnz	r3, 80140e8 <_vfiprintf_r+0x18>
 80140e4:	f7ff fbfc 	bl	80138e0 <__sinit>
 80140e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140ea:	07d9      	lsls	r1, r3, #31
 80140ec:	d405      	bmi.n	80140fa <_vfiprintf_r+0x2a>
 80140ee:	89ab      	ldrh	r3, [r5, #12]
 80140f0:	059a      	lsls	r2, r3, #22
 80140f2:	d402      	bmi.n	80140fa <_vfiprintf_r+0x2a>
 80140f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140f6:	f7ff fdd4 	bl	8013ca2 <__retarget_lock_acquire_recursive>
 80140fa:	89ab      	ldrh	r3, [r5, #12]
 80140fc:	071b      	lsls	r3, r3, #28
 80140fe:	d501      	bpl.n	8014104 <_vfiprintf_r+0x34>
 8014100:	692b      	ldr	r3, [r5, #16]
 8014102:	b99b      	cbnz	r3, 801412c <_vfiprintf_r+0x5c>
 8014104:	4629      	mov	r1, r5
 8014106:	4630      	mov	r0, r6
 8014108:	f000 fb84 	bl	8014814 <__swsetup_r>
 801410c:	b170      	cbz	r0, 801412c <_vfiprintf_r+0x5c>
 801410e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014110:	07dc      	lsls	r4, r3, #31
 8014112:	d504      	bpl.n	801411e <_vfiprintf_r+0x4e>
 8014114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014118:	b01d      	add	sp, #116	@ 0x74
 801411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801411e:	89ab      	ldrh	r3, [r5, #12]
 8014120:	0598      	lsls	r0, r3, #22
 8014122:	d4f7      	bmi.n	8014114 <_vfiprintf_r+0x44>
 8014124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014126:	f7ff fdbd 	bl	8013ca4 <__retarget_lock_release_recursive>
 801412a:	e7f3      	b.n	8014114 <_vfiprintf_r+0x44>
 801412c:	2300      	movs	r3, #0
 801412e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014130:	2320      	movs	r3, #32
 8014132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014136:	f8cd 800c 	str.w	r8, [sp, #12]
 801413a:	2330      	movs	r3, #48	@ 0x30
 801413c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80142ec <_vfiprintf_r+0x21c>
 8014140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014144:	f04f 0901 	mov.w	r9, #1
 8014148:	4623      	mov	r3, r4
 801414a:	469a      	mov	sl, r3
 801414c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014150:	b10a      	cbz	r2, 8014156 <_vfiprintf_r+0x86>
 8014152:	2a25      	cmp	r2, #37	@ 0x25
 8014154:	d1f9      	bne.n	801414a <_vfiprintf_r+0x7a>
 8014156:	ebba 0b04 	subs.w	fp, sl, r4
 801415a:	d00b      	beq.n	8014174 <_vfiprintf_r+0xa4>
 801415c:	465b      	mov	r3, fp
 801415e:	4622      	mov	r2, r4
 8014160:	4629      	mov	r1, r5
 8014162:	4630      	mov	r0, r6
 8014164:	f7ff ffa1 	bl	80140aa <__sfputs_r>
 8014168:	3001      	adds	r0, #1
 801416a:	f000 80a7 	beq.w	80142bc <_vfiprintf_r+0x1ec>
 801416e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014170:	445a      	add	r2, fp
 8014172:	9209      	str	r2, [sp, #36]	@ 0x24
 8014174:	f89a 3000 	ldrb.w	r3, [sl]
 8014178:	2b00      	cmp	r3, #0
 801417a:	f000 809f 	beq.w	80142bc <_vfiprintf_r+0x1ec>
 801417e:	2300      	movs	r3, #0
 8014180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014188:	f10a 0a01 	add.w	sl, sl, #1
 801418c:	9304      	str	r3, [sp, #16]
 801418e:	9307      	str	r3, [sp, #28]
 8014190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014194:	931a      	str	r3, [sp, #104]	@ 0x68
 8014196:	4654      	mov	r4, sl
 8014198:	2205      	movs	r2, #5
 801419a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801419e:	4853      	ldr	r0, [pc, #332]	@ (80142ec <_vfiprintf_r+0x21c>)
 80141a0:	f7ec f836 	bl	8000210 <memchr>
 80141a4:	9a04      	ldr	r2, [sp, #16]
 80141a6:	b9d8      	cbnz	r0, 80141e0 <_vfiprintf_r+0x110>
 80141a8:	06d1      	lsls	r1, r2, #27
 80141aa:	bf44      	itt	mi
 80141ac:	2320      	movmi	r3, #32
 80141ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141b2:	0713      	lsls	r3, r2, #28
 80141b4:	bf44      	itt	mi
 80141b6:	232b      	movmi	r3, #43	@ 0x2b
 80141b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141bc:	f89a 3000 	ldrb.w	r3, [sl]
 80141c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80141c2:	d015      	beq.n	80141f0 <_vfiprintf_r+0x120>
 80141c4:	9a07      	ldr	r2, [sp, #28]
 80141c6:	4654      	mov	r4, sl
 80141c8:	2000      	movs	r0, #0
 80141ca:	f04f 0c0a 	mov.w	ip, #10
 80141ce:	4621      	mov	r1, r4
 80141d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141d4:	3b30      	subs	r3, #48	@ 0x30
 80141d6:	2b09      	cmp	r3, #9
 80141d8:	d94b      	bls.n	8014272 <_vfiprintf_r+0x1a2>
 80141da:	b1b0      	cbz	r0, 801420a <_vfiprintf_r+0x13a>
 80141dc:	9207      	str	r2, [sp, #28]
 80141de:	e014      	b.n	801420a <_vfiprintf_r+0x13a>
 80141e0:	eba0 0308 	sub.w	r3, r0, r8
 80141e4:	fa09 f303 	lsl.w	r3, r9, r3
 80141e8:	4313      	orrs	r3, r2
 80141ea:	9304      	str	r3, [sp, #16]
 80141ec:	46a2      	mov	sl, r4
 80141ee:	e7d2      	b.n	8014196 <_vfiprintf_r+0xc6>
 80141f0:	9b03      	ldr	r3, [sp, #12]
 80141f2:	1d19      	adds	r1, r3, #4
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	9103      	str	r1, [sp, #12]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	bfbb      	ittet	lt
 80141fc:	425b      	neglt	r3, r3
 80141fe:	f042 0202 	orrlt.w	r2, r2, #2
 8014202:	9307      	strge	r3, [sp, #28]
 8014204:	9307      	strlt	r3, [sp, #28]
 8014206:	bfb8      	it	lt
 8014208:	9204      	strlt	r2, [sp, #16]
 801420a:	7823      	ldrb	r3, [r4, #0]
 801420c:	2b2e      	cmp	r3, #46	@ 0x2e
 801420e:	d10a      	bne.n	8014226 <_vfiprintf_r+0x156>
 8014210:	7863      	ldrb	r3, [r4, #1]
 8014212:	2b2a      	cmp	r3, #42	@ 0x2a
 8014214:	d132      	bne.n	801427c <_vfiprintf_r+0x1ac>
 8014216:	9b03      	ldr	r3, [sp, #12]
 8014218:	1d1a      	adds	r2, r3, #4
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	9203      	str	r2, [sp, #12]
 801421e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014222:	3402      	adds	r4, #2
 8014224:	9305      	str	r3, [sp, #20]
 8014226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80142fc <_vfiprintf_r+0x22c>
 801422a:	7821      	ldrb	r1, [r4, #0]
 801422c:	2203      	movs	r2, #3
 801422e:	4650      	mov	r0, sl
 8014230:	f7eb ffee 	bl	8000210 <memchr>
 8014234:	b138      	cbz	r0, 8014246 <_vfiprintf_r+0x176>
 8014236:	9b04      	ldr	r3, [sp, #16]
 8014238:	eba0 000a 	sub.w	r0, r0, sl
 801423c:	2240      	movs	r2, #64	@ 0x40
 801423e:	4082      	lsls	r2, r0
 8014240:	4313      	orrs	r3, r2
 8014242:	3401      	adds	r4, #1
 8014244:	9304      	str	r3, [sp, #16]
 8014246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801424a:	4829      	ldr	r0, [pc, #164]	@ (80142f0 <_vfiprintf_r+0x220>)
 801424c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014250:	2206      	movs	r2, #6
 8014252:	f7eb ffdd 	bl	8000210 <memchr>
 8014256:	2800      	cmp	r0, #0
 8014258:	d03f      	beq.n	80142da <_vfiprintf_r+0x20a>
 801425a:	4b26      	ldr	r3, [pc, #152]	@ (80142f4 <_vfiprintf_r+0x224>)
 801425c:	bb1b      	cbnz	r3, 80142a6 <_vfiprintf_r+0x1d6>
 801425e:	9b03      	ldr	r3, [sp, #12]
 8014260:	3307      	adds	r3, #7
 8014262:	f023 0307 	bic.w	r3, r3, #7
 8014266:	3308      	adds	r3, #8
 8014268:	9303      	str	r3, [sp, #12]
 801426a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801426c:	443b      	add	r3, r7
 801426e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014270:	e76a      	b.n	8014148 <_vfiprintf_r+0x78>
 8014272:	fb0c 3202 	mla	r2, ip, r2, r3
 8014276:	460c      	mov	r4, r1
 8014278:	2001      	movs	r0, #1
 801427a:	e7a8      	b.n	80141ce <_vfiprintf_r+0xfe>
 801427c:	2300      	movs	r3, #0
 801427e:	3401      	adds	r4, #1
 8014280:	9305      	str	r3, [sp, #20]
 8014282:	4619      	mov	r1, r3
 8014284:	f04f 0c0a 	mov.w	ip, #10
 8014288:	4620      	mov	r0, r4
 801428a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801428e:	3a30      	subs	r2, #48	@ 0x30
 8014290:	2a09      	cmp	r2, #9
 8014292:	d903      	bls.n	801429c <_vfiprintf_r+0x1cc>
 8014294:	2b00      	cmp	r3, #0
 8014296:	d0c6      	beq.n	8014226 <_vfiprintf_r+0x156>
 8014298:	9105      	str	r1, [sp, #20]
 801429a:	e7c4      	b.n	8014226 <_vfiprintf_r+0x156>
 801429c:	fb0c 2101 	mla	r1, ip, r1, r2
 80142a0:	4604      	mov	r4, r0
 80142a2:	2301      	movs	r3, #1
 80142a4:	e7f0      	b.n	8014288 <_vfiprintf_r+0x1b8>
 80142a6:	ab03      	add	r3, sp, #12
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	462a      	mov	r2, r5
 80142ac:	4b12      	ldr	r3, [pc, #72]	@ (80142f8 <_vfiprintf_r+0x228>)
 80142ae:	a904      	add	r1, sp, #16
 80142b0:	4630      	mov	r0, r6
 80142b2:	f3af 8000 	nop.w
 80142b6:	4607      	mov	r7, r0
 80142b8:	1c78      	adds	r0, r7, #1
 80142ba:	d1d6      	bne.n	801426a <_vfiprintf_r+0x19a>
 80142bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80142be:	07d9      	lsls	r1, r3, #31
 80142c0:	d405      	bmi.n	80142ce <_vfiprintf_r+0x1fe>
 80142c2:	89ab      	ldrh	r3, [r5, #12]
 80142c4:	059a      	lsls	r2, r3, #22
 80142c6:	d402      	bmi.n	80142ce <_vfiprintf_r+0x1fe>
 80142c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80142ca:	f7ff fceb 	bl	8013ca4 <__retarget_lock_release_recursive>
 80142ce:	89ab      	ldrh	r3, [r5, #12]
 80142d0:	065b      	lsls	r3, r3, #25
 80142d2:	f53f af1f 	bmi.w	8014114 <_vfiprintf_r+0x44>
 80142d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142d8:	e71e      	b.n	8014118 <_vfiprintf_r+0x48>
 80142da:	ab03      	add	r3, sp, #12
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	462a      	mov	r2, r5
 80142e0:	4b05      	ldr	r3, [pc, #20]	@ (80142f8 <_vfiprintf_r+0x228>)
 80142e2:	a904      	add	r1, sp, #16
 80142e4:	4630      	mov	r0, r6
 80142e6:	f000 f879 	bl	80143dc <_printf_i>
 80142ea:	e7e4      	b.n	80142b6 <_vfiprintf_r+0x1e6>
 80142ec:	080157ac 	.word	0x080157ac
 80142f0:	080157b6 	.word	0x080157b6
 80142f4:	00000000 	.word	0x00000000
 80142f8:	080140ab 	.word	0x080140ab
 80142fc:	080157b2 	.word	0x080157b2

08014300 <_printf_common>:
 8014300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014304:	4616      	mov	r6, r2
 8014306:	4698      	mov	r8, r3
 8014308:	688a      	ldr	r2, [r1, #8]
 801430a:	690b      	ldr	r3, [r1, #16]
 801430c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014310:	4293      	cmp	r3, r2
 8014312:	bfb8      	it	lt
 8014314:	4613      	movlt	r3, r2
 8014316:	6033      	str	r3, [r6, #0]
 8014318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801431c:	4607      	mov	r7, r0
 801431e:	460c      	mov	r4, r1
 8014320:	b10a      	cbz	r2, 8014326 <_printf_common+0x26>
 8014322:	3301      	adds	r3, #1
 8014324:	6033      	str	r3, [r6, #0]
 8014326:	6823      	ldr	r3, [r4, #0]
 8014328:	0699      	lsls	r1, r3, #26
 801432a:	bf42      	ittt	mi
 801432c:	6833      	ldrmi	r3, [r6, #0]
 801432e:	3302      	addmi	r3, #2
 8014330:	6033      	strmi	r3, [r6, #0]
 8014332:	6825      	ldr	r5, [r4, #0]
 8014334:	f015 0506 	ands.w	r5, r5, #6
 8014338:	d106      	bne.n	8014348 <_printf_common+0x48>
 801433a:	f104 0a19 	add.w	sl, r4, #25
 801433e:	68e3      	ldr	r3, [r4, #12]
 8014340:	6832      	ldr	r2, [r6, #0]
 8014342:	1a9b      	subs	r3, r3, r2
 8014344:	42ab      	cmp	r3, r5
 8014346:	dc26      	bgt.n	8014396 <_printf_common+0x96>
 8014348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801434c:	6822      	ldr	r2, [r4, #0]
 801434e:	3b00      	subs	r3, #0
 8014350:	bf18      	it	ne
 8014352:	2301      	movne	r3, #1
 8014354:	0692      	lsls	r2, r2, #26
 8014356:	d42b      	bmi.n	80143b0 <_printf_common+0xb0>
 8014358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801435c:	4641      	mov	r1, r8
 801435e:	4638      	mov	r0, r7
 8014360:	47c8      	blx	r9
 8014362:	3001      	adds	r0, #1
 8014364:	d01e      	beq.n	80143a4 <_printf_common+0xa4>
 8014366:	6823      	ldr	r3, [r4, #0]
 8014368:	6922      	ldr	r2, [r4, #16]
 801436a:	f003 0306 	and.w	r3, r3, #6
 801436e:	2b04      	cmp	r3, #4
 8014370:	bf02      	ittt	eq
 8014372:	68e5      	ldreq	r5, [r4, #12]
 8014374:	6833      	ldreq	r3, [r6, #0]
 8014376:	1aed      	subeq	r5, r5, r3
 8014378:	68a3      	ldr	r3, [r4, #8]
 801437a:	bf0c      	ite	eq
 801437c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014380:	2500      	movne	r5, #0
 8014382:	4293      	cmp	r3, r2
 8014384:	bfc4      	itt	gt
 8014386:	1a9b      	subgt	r3, r3, r2
 8014388:	18ed      	addgt	r5, r5, r3
 801438a:	2600      	movs	r6, #0
 801438c:	341a      	adds	r4, #26
 801438e:	42b5      	cmp	r5, r6
 8014390:	d11a      	bne.n	80143c8 <_printf_common+0xc8>
 8014392:	2000      	movs	r0, #0
 8014394:	e008      	b.n	80143a8 <_printf_common+0xa8>
 8014396:	2301      	movs	r3, #1
 8014398:	4652      	mov	r2, sl
 801439a:	4641      	mov	r1, r8
 801439c:	4638      	mov	r0, r7
 801439e:	47c8      	blx	r9
 80143a0:	3001      	adds	r0, #1
 80143a2:	d103      	bne.n	80143ac <_printf_common+0xac>
 80143a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ac:	3501      	adds	r5, #1
 80143ae:	e7c6      	b.n	801433e <_printf_common+0x3e>
 80143b0:	18e1      	adds	r1, r4, r3
 80143b2:	1c5a      	adds	r2, r3, #1
 80143b4:	2030      	movs	r0, #48	@ 0x30
 80143b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80143ba:	4422      	add	r2, r4
 80143bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80143c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80143c4:	3302      	adds	r3, #2
 80143c6:	e7c7      	b.n	8014358 <_printf_common+0x58>
 80143c8:	2301      	movs	r3, #1
 80143ca:	4622      	mov	r2, r4
 80143cc:	4641      	mov	r1, r8
 80143ce:	4638      	mov	r0, r7
 80143d0:	47c8      	blx	r9
 80143d2:	3001      	adds	r0, #1
 80143d4:	d0e6      	beq.n	80143a4 <_printf_common+0xa4>
 80143d6:	3601      	adds	r6, #1
 80143d8:	e7d9      	b.n	801438e <_printf_common+0x8e>
	...

080143dc <_printf_i>:
 80143dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143e0:	7e0f      	ldrb	r7, [r1, #24]
 80143e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80143e4:	2f78      	cmp	r7, #120	@ 0x78
 80143e6:	4691      	mov	r9, r2
 80143e8:	4680      	mov	r8, r0
 80143ea:	460c      	mov	r4, r1
 80143ec:	469a      	mov	sl, r3
 80143ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80143f2:	d807      	bhi.n	8014404 <_printf_i+0x28>
 80143f4:	2f62      	cmp	r7, #98	@ 0x62
 80143f6:	d80a      	bhi.n	801440e <_printf_i+0x32>
 80143f8:	2f00      	cmp	r7, #0
 80143fa:	f000 80d2 	beq.w	80145a2 <_printf_i+0x1c6>
 80143fe:	2f58      	cmp	r7, #88	@ 0x58
 8014400:	f000 80b9 	beq.w	8014576 <_printf_i+0x19a>
 8014404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801440c:	e03a      	b.n	8014484 <_printf_i+0xa8>
 801440e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014412:	2b15      	cmp	r3, #21
 8014414:	d8f6      	bhi.n	8014404 <_printf_i+0x28>
 8014416:	a101      	add	r1, pc, #4	@ (adr r1, 801441c <_printf_i+0x40>)
 8014418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801441c:	08014475 	.word	0x08014475
 8014420:	08014489 	.word	0x08014489
 8014424:	08014405 	.word	0x08014405
 8014428:	08014405 	.word	0x08014405
 801442c:	08014405 	.word	0x08014405
 8014430:	08014405 	.word	0x08014405
 8014434:	08014489 	.word	0x08014489
 8014438:	08014405 	.word	0x08014405
 801443c:	08014405 	.word	0x08014405
 8014440:	08014405 	.word	0x08014405
 8014444:	08014405 	.word	0x08014405
 8014448:	08014589 	.word	0x08014589
 801444c:	080144b3 	.word	0x080144b3
 8014450:	08014543 	.word	0x08014543
 8014454:	08014405 	.word	0x08014405
 8014458:	08014405 	.word	0x08014405
 801445c:	080145ab 	.word	0x080145ab
 8014460:	08014405 	.word	0x08014405
 8014464:	080144b3 	.word	0x080144b3
 8014468:	08014405 	.word	0x08014405
 801446c:	08014405 	.word	0x08014405
 8014470:	0801454b 	.word	0x0801454b
 8014474:	6833      	ldr	r3, [r6, #0]
 8014476:	1d1a      	adds	r2, r3, #4
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	6032      	str	r2, [r6, #0]
 801447c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014484:	2301      	movs	r3, #1
 8014486:	e09d      	b.n	80145c4 <_printf_i+0x1e8>
 8014488:	6833      	ldr	r3, [r6, #0]
 801448a:	6820      	ldr	r0, [r4, #0]
 801448c:	1d19      	adds	r1, r3, #4
 801448e:	6031      	str	r1, [r6, #0]
 8014490:	0606      	lsls	r6, r0, #24
 8014492:	d501      	bpl.n	8014498 <_printf_i+0xbc>
 8014494:	681d      	ldr	r5, [r3, #0]
 8014496:	e003      	b.n	80144a0 <_printf_i+0xc4>
 8014498:	0645      	lsls	r5, r0, #25
 801449a:	d5fb      	bpl.n	8014494 <_printf_i+0xb8>
 801449c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80144a0:	2d00      	cmp	r5, #0
 80144a2:	da03      	bge.n	80144ac <_printf_i+0xd0>
 80144a4:	232d      	movs	r3, #45	@ 0x2d
 80144a6:	426d      	negs	r5, r5
 80144a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80144ac:	4859      	ldr	r0, [pc, #356]	@ (8014614 <_printf_i+0x238>)
 80144ae:	230a      	movs	r3, #10
 80144b0:	e011      	b.n	80144d6 <_printf_i+0xfa>
 80144b2:	6821      	ldr	r1, [r4, #0]
 80144b4:	6833      	ldr	r3, [r6, #0]
 80144b6:	0608      	lsls	r0, r1, #24
 80144b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80144bc:	d402      	bmi.n	80144c4 <_printf_i+0xe8>
 80144be:	0649      	lsls	r1, r1, #25
 80144c0:	bf48      	it	mi
 80144c2:	b2ad      	uxthmi	r5, r5
 80144c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80144c6:	4853      	ldr	r0, [pc, #332]	@ (8014614 <_printf_i+0x238>)
 80144c8:	6033      	str	r3, [r6, #0]
 80144ca:	bf14      	ite	ne
 80144cc:	230a      	movne	r3, #10
 80144ce:	2308      	moveq	r3, #8
 80144d0:	2100      	movs	r1, #0
 80144d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80144d6:	6866      	ldr	r6, [r4, #4]
 80144d8:	60a6      	str	r6, [r4, #8]
 80144da:	2e00      	cmp	r6, #0
 80144dc:	bfa2      	ittt	ge
 80144de:	6821      	ldrge	r1, [r4, #0]
 80144e0:	f021 0104 	bicge.w	r1, r1, #4
 80144e4:	6021      	strge	r1, [r4, #0]
 80144e6:	b90d      	cbnz	r5, 80144ec <_printf_i+0x110>
 80144e8:	2e00      	cmp	r6, #0
 80144ea:	d04b      	beq.n	8014584 <_printf_i+0x1a8>
 80144ec:	4616      	mov	r6, r2
 80144ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80144f2:	fb03 5711 	mls	r7, r3, r1, r5
 80144f6:	5dc7      	ldrb	r7, [r0, r7]
 80144f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80144fc:	462f      	mov	r7, r5
 80144fe:	42bb      	cmp	r3, r7
 8014500:	460d      	mov	r5, r1
 8014502:	d9f4      	bls.n	80144ee <_printf_i+0x112>
 8014504:	2b08      	cmp	r3, #8
 8014506:	d10b      	bne.n	8014520 <_printf_i+0x144>
 8014508:	6823      	ldr	r3, [r4, #0]
 801450a:	07df      	lsls	r7, r3, #31
 801450c:	d508      	bpl.n	8014520 <_printf_i+0x144>
 801450e:	6923      	ldr	r3, [r4, #16]
 8014510:	6861      	ldr	r1, [r4, #4]
 8014512:	4299      	cmp	r1, r3
 8014514:	bfde      	ittt	le
 8014516:	2330      	movle	r3, #48	@ 0x30
 8014518:	f806 3c01 	strble.w	r3, [r6, #-1]
 801451c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014520:	1b92      	subs	r2, r2, r6
 8014522:	6122      	str	r2, [r4, #16]
 8014524:	f8cd a000 	str.w	sl, [sp]
 8014528:	464b      	mov	r3, r9
 801452a:	aa03      	add	r2, sp, #12
 801452c:	4621      	mov	r1, r4
 801452e:	4640      	mov	r0, r8
 8014530:	f7ff fee6 	bl	8014300 <_printf_common>
 8014534:	3001      	adds	r0, #1
 8014536:	d14a      	bne.n	80145ce <_printf_i+0x1f2>
 8014538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801453c:	b004      	add	sp, #16
 801453e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	f043 0320 	orr.w	r3, r3, #32
 8014548:	6023      	str	r3, [r4, #0]
 801454a:	4833      	ldr	r0, [pc, #204]	@ (8014618 <_printf_i+0x23c>)
 801454c:	2778      	movs	r7, #120	@ 0x78
 801454e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014552:	6823      	ldr	r3, [r4, #0]
 8014554:	6831      	ldr	r1, [r6, #0]
 8014556:	061f      	lsls	r7, r3, #24
 8014558:	f851 5b04 	ldr.w	r5, [r1], #4
 801455c:	d402      	bmi.n	8014564 <_printf_i+0x188>
 801455e:	065f      	lsls	r7, r3, #25
 8014560:	bf48      	it	mi
 8014562:	b2ad      	uxthmi	r5, r5
 8014564:	6031      	str	r1, [r6, #0]
 8014566:	07d9      	lsls	r1, r3, #31
 8014568:	bf44      	itt	mi
 801456a:	f043 0320 	orrmi.w	r3, r3, #32
 801456e:	6023      	strmi	r3, [r4, #0]
 8014570:	b11d      	cbz	r5, 801457a <_printf_i+0x19e>
 8014572:	2310      	movs	r3, #16
 8014574:	e7ac      	b.n	80144d0 <_printf_i+0xf4>
 8014576:	4827      	ldr	r0, [pc, #156]	@ (8014614 <_printf_i+0x238>)
 8014578:	e7e9      	b.n	801454e <_printf_i+0x172>
 801457a:	6823      	ldr	r3, [r4, #0]
 801457c:	f023 0320 	bic.w	r3, r3, #32
 8014580:	6023      	str	r3, [r4, #0]
 8014582:	e7f6      	b.n	8014572 <_printf_i+0x196>
 8014584:	4616      	mov	r6, r2
 8014586:	e7bd      	b.n	8014504 <_printf_i+0x128>
 8014588:	6833      	ldr	r3, [r6, #0]
 801458a:	6825      	ldr	r5, [r4, #0]
 801458c:	6961      	ldr	r1, [r4, #20]
 801458e:	1d18      	adds	r0, r3, #4
 8014590:	6030      	str	r0, [r6, #0]
 8014592:	062e      	lsls	r6, r5, #24
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	d501      	bpl.n	801459c <_printf_i+0x1c0>
 8014598:	6019      	str	r1, [r3, #0]
 801459a:	e002      	b.n	80145a2 <_printf_i+0x1c6>
 801459c:	0668      	lsls	r0, r5, #25
 801459e:	d5fb      	bpl.n	8014598 <_printf_i+0x1bc>
 80145a0:	8019      	strh	r1, [r3, #0]
 80145a2:	2300      	movs	r3, #0
 80145a4:	6123      	str	r3, [r4, #16]
 80145a6:	4616      	mov	r6, r2
 80145a8:	e7bc      	b.n	8014524 <_printf_i+0x148>
 80145aa:	6833      	ldr	r3, [r6, #0]
 80145ac:	1d1a      	adds	r2, r3, #4
 80145ae:	6032      	str	r2, [r6, #0]
 80145b0:	681e      	ldr	r6, [r3, #0]
 80145b2:	6862      	ldr	r2, [r4, #4]
 80145b4:	2100      	movs	r1, #0
 80145b6:	4630      	mov	r0, r6
 80145b8:	f7eb fe2a 	bl	8000210 <memchr>
 80145bc:	b108      	cbz	r0, 80145c2 <_printf_i+0x1e6>
 80145be:	1b80      	subs	r0, r0, r6
 80145c0:	6060      	str	r0, [r4, #4]
 80145c2:	6863      	ldr	r3, [r4, #4]
 80145c4:	6123      	str	r3, [r4, #16]
 80145c6:	2300      	movs	r3, #0
 80145c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145cc:	e7aa      	b.n	8014524 <_printf_i+0x148>
 80145ce:	6923      	ldr	r3, [r4, #16]
 80145d0:	4632      	mov	r2, r6
 80145d2:	4649      	mov	r1, r9
 80145d4:	4640      	mov	r0, r8
 80145d6:	47d0      	blx	sl
 80145d8:	3001      	adds	r0, #1
 80145da:	d0ad      	beq.n	8014538 <_printf_i+0x15c>
 80145dc:	6823      	ldr	r3, [r4, #0]
 80145de:	079b      	lsls	r3, r3, #30
 80145e0:	d413      	bmi.n	801460a <_printf_i+0x22e>
 80145e2:	68e0      	ldr	r0, [r4, #12]
 80145e4:	9b03      	ldr	r3, [sp, #12]
 80145e6:	4298      	cmp	r0, r3
 80145e8:	bfb8      	it	lt
 80145ea:	4618      	movlt	r0, r3
 80145ec:	e7a6      	b.n	801453c <_printf_i+0x160>
 80145ee:	2301      	movs	r3, #1
 80145f0:	4632      	mov	r2, r6
 80145f2:	4649      	mov	r1, r9
 80145f4:	4640      	mov	r0, r8
 80145f6:	47d0      	blx	sl
 80145f8:	3001      	adds	r0, #1
 80145fa:	d09d      	beq.n	8014538 <_printf_i+0x15c>
 80145fc:	3501      	adds	r5, #1
 80145fe:	68e3      	ldr	r3, [r4, #12]
 8014600:	9903      	ldr	r1, [sp, #12]
 8014602:	1a5b      	subs	r3, r3, r1
 8014604:	42ab      	cmp	r3, r5
 8014606:	dcf2      	bgt.n	80145ee <_printf_i+0x212>
 8014608:	e7eb      	b.n	80145e2 <_printf_i+0x206>
 801460a:	2500      	movs	r5, #0
 801460c:	f104 0619 	add.w	r6, r4, #25
 8014610:	e7f5      	b.n	80145fe <_printf_i+0x222>
 8014612:	bf00      	nop
 8014614:	080157bd 	.word	0x080157bd
 8014618:	080157ce 	.word	0x080157ce

0801461c <__sflush_r>:
 801461c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014624:	0716      	lsls	r6, r2, #28
 8014626:	4605      	mov	r5, r0
 8014628:	460c      	mov	r4, r1
 801462a:	d454      	bmi.n	80146d6 <__sflush_r+0xba>
 801462c:	684b      	ldr	r3, [r1, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	dc02      	bgt.n	8014638 <__sflush_r+0x1c>
 8014632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014634:	2b00      	cmp	r3, #0
 8014636:	dd48      	ble.n	80146ca <__sflush_r+0xae>
 8014638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801463a:	2e00      	cmp	r6, #0
 801463c:	d045      	beq.n	80146ca <__sflush_r+0xae>
 801463e:	2300      	movs	r3, #0
 8014640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014644:	682f      	ldr	r7, [r5, #0]
 8014646:	6a21      	ldr	r1, [r4, #32]
 8014648:	602b      	str	r3, [r5, #0]
 801464a:	d030      	beq.n	80146ae <__sflush_r+0x92>
 801464c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	0759      	lsls	r1, r3, #29
 8014652:	d505      	bpl.n	8014660 <__sflush_r+0x44>
 8014654:	6863      	ldr	r3, [r4, #4]
 8014656:	1ad2      	subs	r2, r2, r3
 8014658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801465a:	b10b      	cbz	r3, 8014660 <__sflush_r+0x44>
 801465c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801465e:	1ad2      	subs	r2, r2, r3
 8014660:	2300      	movs	r3, #0
 8014662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014664:	6a21      	ldr	r1, [r4, #32]
 8014666:	4628      	mov	r0, r5
 8014668:	47b0      	blx	r6
 801466a:	1c43      	adds	r3, r0, #1
 801466c:	89a3      	ldrh	r3, [r4, #12]
 801466e:	d106      	bne.n	801467e <__sflush_r+0x62>
 8014670:	6829      	ldr	r1, [r5, #0]
 8014672:	291d      	cmp	r1, #29
 8014674:	d82b      	bhi.n	80146ce <__sflush_r+0xb2>
 8014676:	4a2a      	ldr	r2, [pc, #168]	@ (8014720 <__sflush_r+0x104>)
 8014678:	410a      	asrs	r2, r1
 801467a:	07d6      	lsls	r6, r2, #31
 801467c:	d427      	bmi.n	80146ce <__sflush_r+0xb2>
 801467e:	2200      	movs	r2, #0
 8014680:	6062      	str	r2, [r4, #4]
 8014682:	04d9      	lsls	r1, r3, #19
 8014684:	6922      	ldr	r2, [r4, #16]
 8014686:	6022      	str	r2, [r4, #0]
 8014688:	d504      	bpl.n	8014694 <__sflush_r+0x78>
 801468a:	1c42      	adds	r2, r0, #1
 801468c:	d101      	bne.n	8014692 <__sflush_r+0x76>
 801468e:	682b      	ldr	r3, [r5, #0]
 8014690:	b903      	cbnz	r3, 8014694 <__sflush_r+0x78>
 8014692:	6560      	str	r0, [r4, #84]	@ 0x54
 8014694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014696:	602f      	str	r7, [r5, #0]
 8014698:	b1b9      	cbz	r1, 80146ca <__sflush_r+0xae>
 801469a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801469e:	4299      	cmp	r1, r3
 80146a0:	d002      	beq.n	80146a8 <__sflush_r+0x8c>
 80146a2:	4628      	mov	r0, r5
 80146a4:	f7ff fb40 	bl	8013d28 <_free_r>
 80146a8:	2300      	movs	r3, #0
 80146aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80146ac:	e00d      	b.n	80146ca <__sflush_r+0xae>
 80146ae:	2301      	movs	r3, #1
 80146b0:	4628      	mov	r0, r5
 80146b2:	47b0      	blx	r6
 80146b4:	4602      	mov	r2, r0
 80146b6:	1c50      	adds	r0, r2, #1
 80146b8:	d1c9      	bne.n	801464e <__sflush_r+0x32>
 80146ba:	682b      	ldr	r3, [r5, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d0c6      	beq.n	801464e <__sflush_r+0x32>
 80146c0:	2b1d      	cmp	r3, #29
 80146c2:	d001      	beq.n	80146c8 <__sflush_r+0xac>
 80146c4:	2b16      	cmp	r3, #22
 80146c6:	d11e      	bne.n	8014706 <__sflush_r+0xea>
 80146c8:	602f      	str	r7, [r5, #0]
 80146ca:	2000      	movs	r0, #0
 80146cc:	e022      	b.n	8014714 <__sflush_r+0xf8>
 80146ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146d2:	b21b      	sxth	r3, r3
 80146d4:	e01b      	b.n	801470e <__sflush_r+0xf2>
 80146d6:	690f      	ldr	r7, [r1, #16]
 80146d8:	2f00      	cmp	r7, #0
 80146da:	d0f6      	beq.n	80146ca <__sflush_r+0xae>
 80146dc:	0793      	lsls	r3, r2, #30
 80146de:	680e      	ldr	r6, [r1, #0]
 80146e0:	bf08      	it	eq
 80146e2:	694b      	ldreq	r3, [r1, #20]
 80146e4:	600f      	str	r7, [r1, #0]
 80146e6:	bf18      	it	ne
 80146e8:	2300      	movne	r3, #0
 80146ea:	eba6 0807 	sub.w	r8, r6, r7
 80146ee:	608b      	str	r3, [r1, #8]
 80146f0:	f1b8 0f00 	cmp.w	r8, #0
 80146f4:	dde9      	ble.n	80146ca <__sflush_r+0xae>
 80146f6:	6a21      	ldr	r1, [r4, #32]
 80146f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80146fa:	4643      	mov	r3, r8
 80146fc:	463a      	mov	r2, r7
 80146fe:	4628      	mov	r0, r5
 8014700:	47b0      	blx	r6
 8014702:	2800      	cmp	r0, #0
 8014704:	dc08      	bgt.n	8014718 <__sflush_r+0xfc>
 8014706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801470a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801470e:	81a3      	strh	r3, [r4, #12]
 8014710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014718:	4407      	add	r7, r0
 801471a:	eba8 0800 	sub.w	r8, r8, r0
 801471e:	e7e7      	b.n	80146f0 <__sflush_r+0xd4>
 8014720:	dfbffffe 	.word	0xdfbffffe

08014724 <_fflush_r>:
 8014724:	b538      	push	{r3, r4, r5, lr}
 8014726:	690b      	ldr	r3, [r1, #16]
 8014728:	4605      	mov	r5, r0
 801472a:	460c      	mov	r4, r1
 801472c:	b913      	cbnz	r3, 8014734 <_fflush_r+0x10>
 801472e:	2500      	movs	r5, #0
 8014730:	4628      	mov	r0, r5
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	b118      	cbz	r0, 801473e <_fflush_r+0x1a>
 8014736:	6a03      	ldr	r3, [r0, #32]
 8014738:	b90b      	cbnz	r3, 801473e <_fflush_r+0x1a>
 801473a:	f7ff f8d1 	bl	80138e0 <__sinit>
 801473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d0f3      	beq.n	801472e <_fflush_r+0xa>
 8014746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014748:	07d0      	lsls	r0, r2, #31
 801474a:	d404      	bmi.n	8014756 <_fflush_r+0x32>
 801474c:	0599      	lsls	r1, r3, #22
 801474e:	d402      	bmi.n	8014756 <_fflush_r+0x32>
 8014750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014752:	f7ff faa6 	bl	8013ca2 <__retarget_lock_acquire_recursive>
 8014756:	4628      	mov	r0, r5
 8014758:	4621      	mov	r1, r4
 801475a:	f7ff ff5f 	bl	801461c <__sflush_r>
 801475e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014760:	07da      	lsls	r2, r3, #31
 8014762:	4605      	mov	r5, r0
 8014764:	d4e4      	bmi.n	8014730 <_fflush_r+0xc>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	059b      	lsls	r3, r3, #22
 801476a:	d4e1      	bmi.n	8014730 <_fflush_r+0xc>
 801476c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801476e:	f7ff fa99 	bl	8013ca4 <__retarget_lock_release_recursive>
 8014772:	e7dd      	b.n	8014730 <_fflush_r+0xc>

08014774 <fiprintf>:
 8014774:	b40e      	push	{r1, r2, r3}
 8014776:	b503      	push	{r0, r1, lr}
 8014778:	4601      	mov	r1, r0
 801477a:	ab03      	add	r3, sp, #12
 801477c:	4805      	ldr	r0, [pc, #20]	@ (8014794 <fiprintf+0x20>)
 801477e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014782:	6800      	ldr	r0, [r0, #0]
 8014784:	9301      	str	r3, [sp, #4]
 8014786:	f7ff fca3 	bl	80140d0 <_vfiprintf_r>
 801478a:	b002      	add	sp, #8
 801478c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014790:	b003      	add	sp, #12
 8014792:	4770      	bx	lr
 8014794:	200000c0 	.word	0x200000c0

08014798 <__swbuf_r>:
 8014798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479a:	460e      	mov	r6, r1
 801479c:	4614      	mov	r4, r2
 801479e:	4605      	mov	r5, r0
 80147a0:	b118      	cbz	r0, 80147aa <__swbuf_r+0x12>
 80147a2:	6a03      	ldr	r3, [r0, #32]
 80147a4:	b90b      	cbnz	r3, 80147aa <__swbuf_r+0x12>
 80147a6:	f7ff f89b 	bl	80138e0 <__sinit>
 80147aa:	69a3      	ldr	r3, [r4, #24]
 80147ac:	60a3      	str	r3, [r4, #8]
 80147ae:	89a3      	ldrh	r3, [r4, #12]
 80147b0:	071a      	lsls	r2, r3, #28
 80147b2:	d501      	bpl.n	80147b8 <__swbuf_r+0x20>
 80147b4:	6923      	ldr	r3, [r4, #16]
 80147b6:	b943      	cbnz	r3, 80147ca <__swbuf_r+0x32>
 80147b8:	4621      	mov	r1, r4
 80147ba:	4628      	mov	r0, r5
 80147bc:	f000 f82a 	bl	8014814 <__swsetup_r>
 80147c0:	b118      	cbz	r0, 80147ca <__swbuf_r+0x32>
 80147c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80147c6:	4638      	mov	r0, r7
 80147c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ca:	6823      	ldr	r3, [r4, #0]
 80147cc:	6922      	ldr	r2, [r4, #16]
 80147ce:	1a98      	subs	r0, r3, r2
 80147d0:	6963      	ldr	r3, [r4, #20]
 80147d2:	b2f6      	uxtb	r6, r6
 80147d4:	4283      	cmp	r3, r0
 80147d6:	4637      	mov	r7, r6
 80147d8:	dc05      	bgt.n	80147e6 <__swbuf_r+0x4e>
 80147da:	4621      	mov	r1, r4
 80147dc:	4628      	mov	r0, r5
 80147de:	f7ff ffa1 	bl	8014724 <_fflush_r>
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d1ed      	bne.n	80147c2 <__swbuf_r+0x2a>
 80147e6:	68a3      	ldr	r3, [r4, #8]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	60a3      	str	r3, [r4, #8]
 80147ec:	6823      	ldr	r3, [r4, #0]
 80147ee:	1c5a      	adds	r2, r3, #1
 80147f0:	6022      	str	r2, [r4, #0]
 80147f2:	701e      	strb	r6, [r3, #0]
 80147f4:	6962      	ldr	r2, [r4, #20]
 80147f6:	1c43      	adds	r3, r0, #1
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d004      	beq.n	8014806 <__swbuf_r+0x6e>
 80147fc:	89a3      	ldrh	r3, [r4, #12]
 80147fe:	07db      	lsls	r3, r3, #31
 8014800:	d5e1      	bpl.n	80147c6 <__swbuf_r+0x2e>
 8014802:	2e0a      	cmp	r6, #10
 8014804:	d1df      	bne.n	80147c6 <__swbuf_r+0x2e>
 8014806:	4621      	mov	r1, r4
 8014808:	4628      	mov	r0, r5
 801480a:	f7ff ff8b 	bl	8014724 <_fflush_r>
 801480e:	2800      	cmp	r0, #0
 8014810:	d0d9      	beq.n	80147c6 <__swbuf_r+0x2e>
 8014812:	e7d6      	b.n	80147c2 <__swbuf_r+0x2a>

08014814 <__swsetup_r>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	4b29      	ldr	r3, [pc, #164]	@ (80148bc <__swsetup_r+0xa8>)
 8014818:	4605      	mov	r5, r0
 801481a:	6818      	ldr	r0, [r3, #0]
 801481c:	460c      	mov	r4, r1
 801481e:	b118      	cbz	r0, 8014828 <__swsetup_r+0x14>
 8014820:	6a03      	ldr	r3, [r0, #32]
 8014822:	b90b      	cbnz	r3, 8014828 <__swsetup_r+0x14>
 8014824:	f7ff f85c 	bl	80138e0 <__sinit>
 8014828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801482c:	0719      	lsls	r1, r3, #28
 801482e:	d422      	bmi.n	8014876 <__swsetup_r+0x62>
 8014830:	06da      	lsls	r2, r3, #27
 8014832:	d407      	bmi.n	8014844 <__swsetup_r+0x30>
 8014834:	2209      	movs	r2, #9
 8014836:	602a      	str	r2, [r5, #0]
 8014838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801483c:	81a3      	strh	r3, [r4, #12]
 801483e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014842:	e033      	b.n	80148ac <__swsetup_r+0x98>
 8014844:	0758      	lsls	r0, r3, #29
 8014846:	d512      	bpl.n	801486e <__swsetup_r+0x5a>
 8014848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801484a:	b141      	cbz	r1, 801485e <__swsetup_r+0x4a>
 801484c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014850:	4299      	cmp	r1, r3
 8014852:	d002      	beq.n	801485a <__swsetup_r+0x46>
 8014854:	4628      	mov	r0, r5
 8014856:	f7ff fa67 	bl	8013d28 <_free_r>
 801485a:	2300      	movs	r3, #0
 801485c:	6363      	str	r3, [r4, #52]	@ 0x34
 801485e:	89a3      	ldrh	r3, [r4, #12]
 8014860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014864:	81a3      	strh	r3, [r4, #12]
 8014866:	2300      	movs	r3, #0
 8014868:	6063      	str	r3, [r4, #4]
 801486a:	6923      	ldr	r3, [r4, #16]
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	89a3      	ldrh	r3, [r4, #12]
 8014870:	f043 0308 	orr.w	r3, r3, #8
 8014874:	81a3      	strh	r3, [r4, #12]
 8014876:	6923      	ldr	r3, [r4, #16]
 8014878:	b94b      	cbnz	r3, 801488e <__swsetup_r+0x7a>
 801487a:	89a3      	ldrh	r3, [r4, #12]
 801487c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014884:	d003      	beq.n	801488e <__swsetup_r+0x7a>
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f000 f846 	bl	801491a <__smakebuf_r>
 801488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014892:	f013 0201 	ands.w	r2, r3, #1
 8014896:	d00a      	beq.n	80148ae <__swsetup_r+0x9a>
 8014898:	2200      	movs	r2, #0
 801489a:	60a2      	str	r2, [r4, #8]
 801489c:	6962      	ldr	r2, [r4, #20]
 801489e:	4252      	negs	r2, r2
 80148a0:	61a2      	str	r2, [r4, #24]
 80148a2:	6922      	ldr	r2, [r4, #16]
 80148a4:	b942      	cbnz	r2, 80148b8 <__swsetup_r+0xa4>
 80148a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80148aa:	d1c5      	bne.n	8014838 <__swsetup_r+0x24>
 80148ac:	bd38      	pop	{r3, r4, r5, pc}
 80148ae:	0799      	lsls	r1, r3, #30
 80148b0:	bf58      	it	pl
 80148b2:	6962      	ldrpl	r2, [r4, #20]
 80148b4:	60a2      	str	r2, [r4, #8]
 80148b6:	e7f4      	b.n	80148a2 <__swsetup_r+0x8e>
 80148b8:	2000      	movs	r0, #0
 80148ba:	e7f7      	b.n	80148ac <__swsetup_r+0x98>
 80148bc:	200000c0 	.word	0x200000c0

080148c0 <abort>:
 80148c0:	b508      	push	{r3, lr}
 80148c2:	2006      	movs	r0, #6
 80148c4:	f000 f88e 	bl	80149e4 <raise>
 80148c8:	2001      	movs	r0, #1
 80148ca:	f7ec fe27 	bl	800151c <_exit>

080148ce <__swhatbuf_r>:
 80148ce:	b570      	push	{r4, r5, r6, lr}
 80148d0:	460c      	mov	r4, r1
 80148d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d6:	2900      	cmp	r1, #0
 80148d8:	b096      	sub	sp, #88	@ 0x58
 80148da:	4615      	mov	r5, r2
 80148dc:	461e      	mov	r6, r3
 80148de:	da0d      	bge.n	80148fc <__swhatbuf_r+0x2e>
 80148e0:	89a3      	ldrh	r3, [r4, #12]
 80148e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148e6:	f04f 0100 	mov.w	r1, #0
 80148ea:	bf14      	ite	ne
 80148ec:	2340      	movne	r3, #64	@ 0x40
 80148ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148f2:	2000      	movs	r0, #0
 80148f4:	6031      	str	r1, [r6, #0]
 80148f6:	602b      	str	r3, [r5, #0]
 80148f8:	b016      	add	sp, #88	@ 0x58
 80148fa:	bd70      	pop	{r4, r5, r6, pc}
 80148fc:	466a      	mov	r2, sp
 80148fe:	f000 f879 	bl	80149f4 <_fstat_r>
 8014902:	2800      	cmp	r0, #0
 8014904:	dbec      	blt.n	80148e0 <__swhatbuf_r+0x12>
 8014906:	9901      	ldr	r1, [sp, #4]
 8014908:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801490c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014910:	4259      	negs	r1, r3
 8014912:	4159      	adcs	r1, r3
 8014914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014918:	e7eb      	b.n	80148f2 <__swhatbuf_r+0x24>

0801491a <__smakebuf_r>:
 801491a:	898b      	ldrh	r3, [r1, #12]
 801491c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801491e:	079d      	lsls	r5, r3, #30
 8014920:	4606      	mov	r6, r0
 8014922:	460c      	mov	r4, r1
 8014924:	d507      	bpl.n	8014936 <__smakebuf_r+0x1c>
 8014926:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801492a:	6023      	str	r3, [r4, #0]
 801492c:	6123      	str	r3, [r4, #16]
 801492e:	2301      	movs	r3, #1
 8014930:	6163      	str	r3, [r4, #20]
 8014932:	b003      	add	sp, #12
 8014934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014936:	ab01      	add	r3, sp, #4
 8014938:	466a      	mov	r2, sp
 801493a:	f7ff ffc8 	bl	80148ce <__swhatbuf_r>
 801493e:	9f00      	ldr	r7, [sp, #0]
 8014940:	4605      	mov	r5, r0
 8014942:	4639      	mov	r1, r7
 8014944:	4630      	mov	r0, r6
 8014946:	f7fe fd99 	bl	801347c <_malloc_r>
 801494a:	b948      	cbnz	r0, 8014960 <__smakebuf_r+0x46>
 801494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014950:	059a      	lsls	r2, r3, #22
 8014952:	d4ee      	bmi.n	8014932 <__smakebuf_r+0x18>
 8014954:	f023 0303 	bic.w	r3, r3, #3
 8014958:	f043 0302 	orr.w	r3, r3, #2
 801495c:	81a3      	strh	r3, [r4, #12]
 801495e:	e7e2      	b.n	8014926 <__smakebuf_r+0xc>
 8014960:	89a3      	ldrh	r3, [r4, #12]
 8014962:	6020      	str	r0, [r4, #0]
 8014964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014968:	81a3      	strh	r3, [r4, #12]
 801496a:	9b01      	ldr	r3, [sp, #4]
 801496c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014970:	b15b      	cbz	r3, 801498a <__smakebuf_r+0x70>
 8014972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014976:	4630      	mov	r0, r6
 8014978:	f000 f84e 	bl	8014a18 <_isatty_r>
 801497c:	b128      	cbz	r0, 801498a <__smakebuf_r+0x70>
 801497e:	89a3      	ldrh	r3, [r4, #12]
 8014980:	f023 0303 	bic.w	r3, r3, #3
 8014984:	f043 0301 	orr.w	r3, r3, #1
 8014988:	81a3      	strh	r3, [r4, #12]
 801498a:	89a3      	ldrh	r3, [r4, #12]
 801498c:	431d      	orrs	r5, r3
 801498e:	81a5      	strh	r5, [r4, #12]
 8014990:	e7cf      	b.n	8014932 <__smakebuf_r+0x18>

08014992 <_raise_r>:
 8014992:	291f      	cmp	r1, #31
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4605      	mov	r5, r0
 8014998:	460c      	mov	r4, r1
 801499a:	d904      	bls.n	80149a6 <_raise_r+0x14>
 801499c:	2316      	movs	r3, #22
 801499e:	6003      	str	r3, [r0, #0]
 80149a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149a4:	bd38      	pop	{r3, r4, r5, pc}
 80149a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149a8:	b112      	cbz	r2, 80149b0 <_raise_r+0x1e>
 80149aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149ae:	b94b      	cbnz	r3, 80149c4 <_raise_r+0x32>
 80149b0:	4628      	mov	r0, r5
 80149b2:	f000 f853 	bl	8014a5c <_getpid_r>
 80149b6:	4622      	mov	r2, r4
 80149b8:	4601      	mov	r1, r0
 80149ba:	4628      	mov	r0, r5
 80149bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149c0:	f000 b83a 	b.w	8014a38 <_kill_r>
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d00a      	beq.n	80149de <_raise_r+0x4c>
 80149c8:	1c59      	adds	r1, r3, #1
 80149ca:	d103      	bne.n	80149d4 <_raise_r+0x42>
 80149cc:	2316      	movs	r3, #22
 80149ce:	6003      	str	r3, [r0, #0]
 80149d0:	2001      	movs	r0, #1
 80149d2:	e7e7      	b.n	80149a4 <_raise_r+0x12>
 80149d4:	2100      	movs	r1, #0
 80149d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80149da:	4620      	mov	r0, r4
 80149dc:	4798      	blx	r3
 80149de:	2000      	movs	r0, #0
 80149e0:	e7e0      	b.n	80149a4 <_raise_r+0x12>
	...

080149e4 <raise>:
 80149e4:	4b02      	ldr	r3, [pc, #8]	@ (80149f0 <raise+0xc>)
 80149e6:	4601      	mov	r1, r0
 80149e8:	6818      	ldr	r0, [r3, #0]
 80149ea:	f7ff bfd2 	b.w	8014992 <_raise_r>
 80149ee:	bf00      	nop
 80149f0:	200000c0 	.word	0x200000c0

080149f4 <_fstat_r>:
 80149f4:	b538      	push	{r3, r4, r5, lr}
 80149f6:	4d07      	ldr	r5, [pc, #28]	@ (8014a14 <_fstat_r+0x20>)
 80149f8:	2300      	movs	r3, #0
 80149fa:	4604      	mov	r4, r0
 80149fc:	4608      	mov	r0, r1
 80149fe:	4611      	mov	r1, r2
 8014a00:	602b      	str	r3, [r5, #0]
 8014a02:	f7ec fddb 	bl	80015bc <_fstat>
 8014a06:	1c43      	adds	r3, r0, #1
 8014a08:	d102      	bne.n	8014a10 <_fstat_r+0x1c>
 8014a0a:	682b      	ldr	r3, [r5, #0]
 8014a0c:	b103      	cbz	r3, 8014a10 <_fstat_r+0x1c>
 8014a0e:	6023      	str	r3, [r4, #0]
 8014a10:	bd38      	pop	{r3, r4, r5, pc}
 8014a12:	bf00      	nop
 8014a14:	2000dc54 	.word	0x2000dc54

08014a18 <_isatty_r>:
 8014a18:	b538      	push	{r3, r4, r5, lr}
 8014a1a:	4d06      	ldr	r5, [pc, #24]	@ (8014a34 <_isatty_r+0x1c>)
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	4604      	mov	r4, r0
 8014a20:	4608      	mov	r0, r1
 8014a22:	602b      	str	r3, [r5, #0]
 8014a24:	f7ec fdda 	bl	80015dc <_isatty>
 8014a28:	1c43      	adds	r3, r0, #1
 8014a2a:	d102      	bne.n	8014a32 <_isatty_r+0x1a>
 8014a2c:	682b      	ldr	r3, [r5, #0]
 8014a2e:	b103      	cbz	r3, 8014a32 <_isatty_r+0x1a>
 8014a30:	6023      	str	r3, [r4, #0]
 8014a32:	bd38      	pop	{r3, r4, r5, pc}
 8014a34:	2000dc54 	.word	0x2000dc54

08014a38 <_kill_r>:
 8014a38:	b538      	push	{r3, r4, r5, lr}
 8014a3a:	4d07      	ldr	r5, [pc, #28]	@ (8014a58 <_kill_r+0x20>)
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	4604      	mov	r4, r0
 8014a40:	4608      	mov	r0, r1
 8014a42:	4611      	mov	r1, r2
 8014a44:	602b      	str	r3, [r5, #0]
 8014a46:	f7ec fd59 	bl	80014fc <_kill>
 8014a4a:	1c43      	adds	r3, r0, #1
 8014a4c:	d102      	bne.n	8014a54 <_kill_r+0x1c>
 8014a4e:	682b      	ldr	r3, [r5, #0]
 8014a50:	b103      	cbz	r3, 8014a54 <_kill_r+0x1c>
 8014a52:	6023      	str	r3, [r4, #0]
 8014a54:	bd38      	pop	{r3, r4, r5, pc}
 8014a56:	bf00      	nop
 8014a58:	2000dc54 	.word	0x2000dc54

08014a5c <_getpid_r>:
 8014a5c:	f7ec bd46 	b.w	80014ec <_getpid>

08014a60 <_init>:
 8014a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a62:	bf00      	nop
 8014a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a66:	bc08      	pop	{r3}
 8014a68:	469e      	mov	lr, r3
 8014a6a:	4770      	bx	lr

08014a6c <_fini>:
 8014a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6e:	bf00      	nop
 8014a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a72:	bc08      	pop	{r3}
 8014a74:	469e      	mov	lr, r3
 8014a76:	4770      	bx	lr
